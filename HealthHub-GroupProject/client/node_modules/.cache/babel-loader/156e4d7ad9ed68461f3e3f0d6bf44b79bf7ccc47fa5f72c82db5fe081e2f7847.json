{"ast":null,"code":"'use client';\n\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, unstable_useForkRef as useForkRef, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\nimport { Popper } from '@mui/base/Popper';\nimport { useThemeProps } from '../styles';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport styled from '../styles/styled';\nimport { VariantColorProvider, getChildVariantAndColor } from '../styles/variantColorInheritance';\n// slot components\nimport { StyledIconButton } from '../IconButton/IconButton';\n// default render components\nimport Chip from '../Chip';\nimport ChipDelete from '../ChipDelete';\nimport { StyledInputRoot, StyledInputHtml, StyledInputStartDecorator, StyledInputEndDecorator } from '../Input/Input';\nimport List from '../List';\nimport ListProvider from '../List/ListProvider';\nimport ListSubheader from '../ListSubheader';\nimport ListItem from '../ListItem';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { StyledAutocompleteListbox } from '../AutocompleteListbox/AutocompleteListbox';\nimport { StyledAutocompleteOption } from '../AutocompleteOption/AutocompleteOption';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);\n// @ts-ignore\nconst defaultGetOptionLabel = option => option.label ?? option;\nconst defaultLimitTagsText = more => `+${more}`;\nconst defaultRenderGroup = params => /*#__PURE__*/_jsxs(ListItem, {\n  nested: true,\n  children: [/*#__PURE__*/_jsx(ListSubheader, {\n    sticky: true,\n    children: params.group\n  }), /*#__PURE__*/_jsx(List, {\n    children: params.children\n  })]\n}, params.key);\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    focused,\n    hasClearIcon,\n    hasPopupIcon,\n    popupOpen,\n    variant,\n    color,\n    size,\n    multiple\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],\n    wrapper: ['wrapper', multiple && 'multiple'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen', disabled && 'disabled'],\n    listbox: ['listbox'],\n    option: ['option'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    limitTag: ['limitTag']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, {});\n};\nconst AutocompleteRoot = styled(StyledInputRoot, {\n  name: 'JoyAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  ownerState\n}) => ({\n  ...(ownerState.size === 'sm' && {\n    '--Autocomplete-wrapperGap': '3px'\n  }),\n  ...(ownerState.size === 'md' && {\n    '--Autocomplete-wrapperGap': '3px'\n  }),\n  ...(ownerState.size === 'lg' && {\n    '--Autocomplete-wrapperGap': '4px'\n  }),\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  ...(ownerState.multiple && !ownerState.startDecorator && {\n    paddingInlineStart: 0\n  })\n}));\n\n/**\n * Wrapper groups the chips (multi selection) and the input\n * so that start/end decorators can stay in the normal flow.\n */\nconst AutocompleteWrapper = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => styles.wrapper\n})(({\n  ownerState\n}) => ({\n  flex: 1,\n  // stretch to fill the root slot\n  minWidth: 0,\n  // won't push end decorator out of the autocomplete\n  display: 'flex',\n  alignItems: 'center',\n  flexWrap: 'wrap',\n  gap: 'var(--Autocomplete-wrapperGap)',\n  [`&.${autocompleteClasses.multiple}`]: {\n    paddingBlock: 'var(--Autocomplete-wrapperGap)',\n    ...(!ownerState.startDecorator && {\n      paddingInlineStart: 'var(--Autocomplete-wrapperGap)'\n    }),\n    ...(!ownerState.endDecorator && {\n      paddingInlineEnd: 'var(--Autocomplete-wrapperGap)'\n    })\n  }\n}));\nconst AutocompleteInput = styled(StyledInputHtml, {\n  name: 'JoyAutocomplete',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.input\n})(({\n  ownerState\n}) => ({\n  minWidth: 30,\n  minHeight: 'var(--Chip-minHeight)',\n  ...(ownerState.multiple && {\n    marginInlineStart: 'calc(var(--Autocomplete-wrapperGap) * 2.5)'\n  })\n}));\nconst AutocompleteStartDecorator = styled(StyledInputStartDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({});\nconst AutocompleteEndDecorator = styled(StyledInputEndDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})(({\n  ownerState\n}) => ({\n  // don't adjust if end decorator is not the last of the autocomplete\n  ...((ownerState.hasClearIcon || ownerState.hasPopupIcon) && {\n    '--Button-margin': '0px',\n    '--IconButton-margin': '0px',\n    '--Icon-margin': '0px'\n  })\n}));\nconst AutocompleteClearIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})(({\n  ownerState\n}) => ({\n  alignSelf: 'center',\n  ...(!ownerState.hasPopupIcon && {\n    marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n  }),\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  visibility: ownerState.focused ? 'visible' : 'hidden'\n}));\nconst AutocompletePopupIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => styles.popupIndicator\n})({\n  alignSelf: 'center',\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)',\n  [`&.${autocompleteClasses.popupIndicatorOpen}`]: {\n    transform: 'rotate(180deg)',\n    '--Icon-color': 'currentColor'\n  }\n});\nconst AutocompleteListbox = styled(StyledAutocompleteListbox, {\n  name: 'JoyAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  // `unstable_popup-zIndex` is a private variable that lets other component, for example Modal, to override the z-index so that the listbox can be displayed above the Modal.\n  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`\n}));\nconst AutocompleteOption = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocomplete',\n  slot: 'Option',\n  overridesResolver: (props, styles) => styles.option\n})({});\nconst AutocompleteLoading = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteNoOptions = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteLimitTag = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})({\n  marginInlineStart: 'calc(var(--Input-paddingInline) / 2)',\n  marginBlockStart: 'var(--_Input-paddingBlock)'\n});\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/joy-ui/api/autocomplete/)\n */\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocomplete'\n  });\n  const {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete,\n    autoHighlight,\n    autoSelect,\n    autoFocus,\n    blurOnSelect,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"md\"\n    })),\n    clearOnBlur,\n    clearOnEscape,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue,\n    disableCloseOnSelect,\n    disabledItemsFocusable,\n    disableListWrap,\n    disableClearable = false,\n    disabled: disabledProp,\n    endDecorator,\n    error: errorProp = false,\n    filterOptions,\n    filterSelectedOptions,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    getLimitTagsText = defaultLimitTagsText,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel = defaultGetOptionLabel,\n    handleHomeEndKeys,\n    includeInputInList,\n    isOptionEqualToValue,\n    groupBy,\n    id,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    name,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus,\n    openText = 'Open',\n    options,\n    placeholder,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup = defaultRenderGroup,\n    renderOption: renderOptionProp,\n    renderTags,\n    required,\n    type,\n    startDecorator,\n    size: sizeProp = 'md',\n    color: colorProp = 'neutral',\n    variant = 'outlined',\n    value: valueProp,\n    component,\n    selectOnFocus,\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const formControl = React.useContext(FormControlContext);\n  const error = inProps.error ?? formControl?.error ?? errorProp;\n  const size = inProps.size ?? formControl?.size ?? sizeProp;\n  const color = inProps.color ?? (error ? 'danger' : formControl?.color ?? colorProp);\n  const disabled = disabledProp ?? formControl?.disabled ?? false;\n  const {\n    getRootProps,\n    getInputProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    id: id ?? formControl?.htmlFor,\n    componentName: 'Autocomplete',\n    unstable_classNamePrefix: 'Mui',\n    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox\n  });\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    onClick: handleRootOnClick\n  } = getRootProps();\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    instanceColor: inProps.color,\n    ...props,\n    value,\n    disabled,\n    focused,\n    getOptionLabel,\n    hasOptions: !!groupedOptions.length,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size,\n    color,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    ...other,\n    component,\n    slots,\n    slotProps\n  };\n  let selectedOptions;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => {\n      const {\n        onDelete,\n        ...tagProps\n      } = getTagProps(params);\n      return {\n        disabled,\n        size,\n        onClick: onDelete,\n        ...tagProps\n      };\n    };\n    if (renderTags) {\n      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      selectedOptions = value.map((option, index) => {\n        return /*#__PURE__*/_jsx(Chip, {\n          size: size,\n          variant: \"soft\",\n          color: \"neutral\",\n          endDecorator: /*#__PURE__*/_jsx(ChipDelete, {\n            ...getCustomizedTagProps({\n              index\n            })\n          }),\n          sx: {\n            minWidth: 0\n          },\n          children: getOptionLabel(option)\n        }, index);\n      });\n    }\n  }\n  const rootRef = useForkRef(ref, setAnchorEl);\n  const rootStateClasses = {\n    [autocompleteClasses.disabled]: disabled,\n    [autocompleteClasses.error]: error,\n    [autocompleteClasses.focused]: focused,\n    [autocompleteClasses.formControl]: Boolean(formControl)\n  };\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: rootRef,\n    className: [classes.root, rootStateClasses],\n    elementType: AutocompleteRoot,\n    externalForwardedProps,\n    ownerState,\n    getSlotProps: getRootProps,\n    additionalProps: {\n      onClick: event => {\n        if (handleRootOnClick) {\n          handleRootOnClick(event);\n        }\n        if (event.currentTarget === event.target && handleInputMouseDown) {\n          handleInputMouseDown(event);\n        }\n      }\n    }\n  });\n  const [SlotWrapper, wrapperProps] = useSlot('wrapper', {\n    className: classes.wrapper,\n    elementType: AutocompleteWrapper,\n    externalForwardedProps,\n    ownerState\n  });\n  const inputStateClasses = {\n    [autocompleteClasses.disabled]: disabled\n  };\n  const [SlotInput, inputProps] = useSlot('input', {\n    className: [classes.input, inputStateClasses],\n    elementType: AutocompleteInput,\n    getSlotProps: handlers => {\n      const {\n        onBlur,\n        onFocus,\n        onMouseDown,\n        ...inputSlotProps\n      } = getInputProps();\n      return {\n        ...inputSlotProps,\n        onBlur: event => {\n          onBlur?.(event);\n          handlers.onBlur?.(event);\n        },\n        onFocus: event => {\n          onFocus?.(event);\n          handlers.onFocus?.(event);\n        },\n        onMouseDown: event => {\n          onMouseDown?.(event);\n          handlers.onMouseDown?.(event);\n        }\n      };\n    },\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      autoFocus,\n      placeholder,\n      name,\n      readOnly,\n      disabled,\n      required: required ?? formControl?.required,\n      type,\n      'aria-invalid': error || undefined,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby ?? formControl?.['aria-describedby']\n    }\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: AutocompleteStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: AutocompleteEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotClearIndicator, clearIndicatorProps] = useSlot('clearIndicator', {\n    className: classes.clearIndicator,\n    elementType: AutocompleteClearIndicator,\n    getSlotProps: getClearProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, color).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      'aria-label': clearText,\n      title: clearText\n    }\n  });\n  const [SlotPopupIndicator, popupIndicatorProps] = useSlot('popupIndicator', {\n    className: classes.popupIndicator,\n    elementType: AutocompletePopupIndicator,\n    getSlotProps: getPopupIndicatorProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, color).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      disabled,\n      'aria-label': popupOpen ? closeText : openText,\n      title: popupOpen ? closeText : openText,\n      type: 'button'\n    }\n  });\n  const [SlotListbox, listboxProps] = useSlot('listbox', {\n    className: classes.listbox,\n    elementType: AutocompleteListbox,\n    getSlotProps: getListboxProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || variant,\n      color: mergedProps.color || color,\n      disableColorInversion: !mergedProps.disablePortal\n    }),\n    additionalProps: {\n      anchorEl,\n      open: popupOpen,\n      style: anchorEl ? {\n        width: anchorEl.clientWidth\n      } : {}\n    }\n  });\n  const [SlotLoading, loadingProps] = useSlot('loading', {\n    className: classes.loading,\n    elementType: AutocompleteLoading,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotNoOptions, noOptionsProps] = useSlot('noOptions', {\n    className: classes.noOptions,\n    elementType: AutocompleteNoOptions,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      role: 'presentation',\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      }\n    }\n  });\n  const [SlotLimitTag, limitTagProps] = useSlot('limitTag', {\n    className: classes.limitTag,\n    elementType: AutocompleteLimitTag,\n    externalForwardedProps,\n    ownerState\n  });\n  if (limitTags > -1 && Array.isArray(selectedOptions)) {\n    const more = selectedOptions.length - limitTags;\n    if (!focused && more > 0) {\n      selectedOptions = selectedOptions.splice(0, limitTags);\n      selectedOptions.push( /*#__PURE__*/_jsx(SlotLimitTag, {\n        ...limitTagProps,\n        children: getLimitTagsText(more)\n      }, selectedOptions.length));\n    }\n  }\n  const [SlotOption, baseOptionProps] = useSlot('option', {\n    className: classes.option,\n    elementType: AutocompleteOption,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, color).color || 'neutral',\n      disableColorInversion: !listboxProps.disablePortal\n    }),\n    additionalProps: {\n      as: 'li'\n    }\n  });\n  const defaultRenderOption = (optionProps, option) => /*#__PURE__*/_jsx(SlotOption, {\n    ...optionProps,\n    children: getOptionLabel(option)\n  });\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...baseOptionProps,\n      ...optionProps\n    }, option, {\n      // `aria-selected` prop will always by boolean, see useAutocomplete hook.\n      selected: !!optionProps['aria-selected'],\n      inputValue,\n      ownerState\n    });\n  };\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  const modifiers = React.useMemo(() => [{\n    name: 'offset',\n    options: {\n      offset: [0, 4]\n    }\n  }, ...(listboxProps.modifiers || [])], [listboxProps.modifiers]);\n  let popup = null;\n  if (anchorEl) {\n    popup = /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: variant,\n      color: color,\n      children: /*#__PURE__*/_jsx(ListProvider, {\n        nested: true,\n        children: /*#__PURE__*/_jsxs(SlotListbox, {\n          ...listboxProps,\n          className: clsx(listboxProps.className)\n          // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n          ,\n\n          modifiers: modifiers,\n          ...(!props.slots?.listbox && {\n            as: Popper,\n            slots: {\n              root: listboxProps.as || 'ul'\n            }\n          }),\n          children: [groupedOptions.map((option, index) => {\n            if (groupBy) {\n              const typedOption = option;\n              return renderGroup({\n                key: String(typedOption.key),\n                group: typedOption.group,\n                children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          }), loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(SlotLoading, {\n            ...loadingProps,\n            children: loadingText\n          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(SlotNoOptions, {\n            ...noOptionsProps,\n            children: noOptionsText\n          }) : null]\n        })\n      })\n    });\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, {\n      ...rootProps,\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, {\n        ...startDecoratorProps,\n        children: startDecorator\n      }), /*#__PURE__*/_jsxs(SlotWrapper, {\n        ...wrapperProps,\n        children: [selectedOptions, /*#__PURE__*/_jsx(SlotInput, {\n          ...inputProps\n        })]\n      }), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, {\n        ...endDecoratorProps,\n        children: endDecorator\n      }), hasClearIcon ? /*#__PURE__*/_jsx(SlotClearIndicator, {\n        ...clearIndicatorProps,\n        children: clearIcon\n      }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(SlotPopupIndicator, {\n        ...popupIndicatorProps,\n        children: popupIcon\n      }) : null]\n    }), popup]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Identifies the element (or elements) that describes the object.\n   * @see aria-labelledby\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * Defines a string value that labels the current element.\n   * @see aria-labelledby.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see aria-describedby.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"md\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {string | number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more: string | number) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The input placeholder\n   */\n  placeholder: PropTypes.string,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    limitTag: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    noOptions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    option: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    wrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    clearIndicator: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    limitTag: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    loading: PropTypes.elementType,\n    noOptions: PropTypes.elementType,\n    option: PropTypes.elementType,\n    popupIndicator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    wrapper: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Autocomplete;","map":{"version":3,"names":["_ClearIcon","_ArrowDropDownIcon","React","PropTypes","clsx","chainPropTypes","integerPropType","unstable_useForkRef","useForkRef","unstable_capitalize","capitalize","unstable_composeClasses","composeClasses","useAutocomplete","Popper","useThemeProps","ClearIcon","ArrowDropDownIcon","styled","VariantColorProvider","getChildVariantAndColor","StyledIconButton","Chip","ChipDelete","StyledInputRoot","StyledInputHtml","StyledInputStartDecorator","StyledInputEndDecorator","List","ListProvider","ListSubheader","ListItem","autocompleteClasses","getAutocompleteUtilityClass","FormControlContext","StyledAutocompleteListbox","StyledAutocompleteOption","useSlot","jsx","_jsx","jsxs","_jsxs","defaultIsActiveElementInListbox","listboxRef","current","contains","document","activeElement","defaultGetOptionLabel","option","label","defaultLimitTagsText","more","defaultRenderGroup","params","nested","children","sticky","group","key","useUtilityClasses","ownerState","disabled","focused","hasClearIcon","hasPopupIcon","popupOpen","variant","color","size","multiple","slots","root","wrapper","input","startDecorator","endDecorator","clearIndicator","popupIndicator","listbox","loading","noOptions","limitTag","AutocompleteRoot","name","slot","overridesResolver","props","styles","visibility","paddingInlineStart","AutocompleteWrapper","flex","minWidth","display","alignItems","flexWrap","gap","paddingBlock","paddingInlineEnd","AutocompleteInput","minHeight","marginInlineStart","AutocompleteStartDecorator","AutocompleteEndDecorator","AutocompleteClearIndicator","alignSelf","marginInlineEnd","AutocompletePopupIndicator","popupIndicatorOpen","transform","AutocompleteListbox","theme","zIndex","vars","popup","AutocompleteOption","AutocompleteLoading","palette","text","secondary","AutocompleteNoOptions","AutocompleteLimitTag","marginBlockStart","Autocomplete","forwardRef","inProps","ref","ariaDescribedby","ariaLabel","ariaLabelledby","autoComplete","autoHighlight","autoSelect","autoFocus","blurOnSelect","clearIcon","fontSize","clearOnBlur","clearOnEscape","clearText","closeText","defaultValue","disableCloseOnSelect","disabledItemsFocusable","disableListWrap","disableClearable","disabledProp","error","errorProp","filterOptions","filterSelectedOptions","forcePopupIcon","freeSolo","getLimitTagsText","getOptionDisabled","getOptionKey","getOptionLabel","handleHomeEndKeys","includeInputInList","isOptionEqualToValue","groupBy","id","inputValue","inputValueProp","limitTags","loadingText","noOptionsText","onChange","onClose","onHighlightChange","onInputChange","onOpen","open","openOnFocus","openText","options","placeholder","popupIcon","readOnly","renderGroup","renderOption","renderOptionProp","renderTags","required","type","sizeProp","colorProp","value","valueProp","component","selectOnFocus","slotProps","other","formControl","useContext","getRootProps","getInputProps","getPopupIndicatorProps","getClearProps","getTagProps","getListboxProps","getOptionProps","dirty","focusedTag","anchorEl","setAnchorEl","groupedOptions","htmlFor","componentName","unstable_classNamePrefix","unstable_isActiveElementInListbox","onMouseDown","handleInputMouseDown","onClick","handleRootOnClick","instanceColor","hasOptions","length","inputFocused","classes","externalForwardedProps","selectedOptions","getCustomizedTagProps","onDelete","tagProps","map","index","sx","rootRef","rootStateClasses","Boolean","SlotRoot","rootProps","className","elementType","getSlotProps","additionalProps","event","currentTarget","target","SlotWrapper","wrapperProps","inputStateClasses","SlotInput","inputProps","handlers","onBlur","onFocus","inputSlotProps","undefined","SlotStartDecorator","startDecoratorProps","SlotEndDecorator","endDecoratorProps","SlotClearIndicator","clearIndicatorProps","getSlotOwnerState","mergedProps","disableColorInversion","title","SlotPopupIndicator","popupIndicatorProps","SlotListbox","listboxProps","disablePortal","style","width","clientWidth","SlotLoading","loadingProps","SlotNoOptions","noOptionsProps","role","preventDefault","SlotLimitTag","limitTagProps","Array","isArray","splice","push","SlotOption","baseOptionProps","as","defaultRenderOption","optionProps","renderListOption","selected","modifiers","useMemo","offset","typedOption","String","option2","index2","Fragment","process","env","NODE_ENV","propTypes","string","bool","oneOfType","oneOf","node","any","Error","join","func","onKeyDown","array","isRequired","shape","object","arrayOf"],"sources":["C:/Users/MSI/Desktop/Coding Dojo MERN/client/node_modules/@mui/joy/Autocomplete/Autocomplete.js"],"sourcesContent":["'use client';\n\nvar _ClearIcon, _ArrowDropDownIcon;\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, integerPropType, unstable_useForkRef as useForkRef, unstable_capitalize as capitalize } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { useAutocomplete } from '@mui/base/useAutocomplete';\nimport { Popper } from '@mui/base/Popper';\nimport { useThemeProps } from '../styles';\nimport ClearIcon from '../internal/svg-icons/Close';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport styled from '../styles/styled';\nimport { VariantColorProvider, getChildVariantAndColor } from '../styles/variantColorInheritance';\n// slot components\nimport { StyledIconButton } from '../IconButton/IconButton';\n// default render components\nimport Chip from '../Chip';\nimport ChipDelete from '../ChipDelete';\nimport { StyledInputRoot, StyledInputHtml, StyledInputStartDecorator, StyledInputEndDecorator } from '../Input/Input';\nimport List from '../List';\nimport ListProvider from '../List/ListProvider';\nimport ListSubheader from '../ListSubheader';\nimport ListItem from '../ListItem';\nimport autocompleteClasses, { getAutocompleteUtilityClass } from './autocompleteClasses';\nimport FormControlContext from '../FormControl/FormControlContext';\nimport { StyledAutocompleteListbox } from '../AutocompleteListbox/AutocompleteListbox';\nimport { StyledAutocompleteOption } from '../AutocompleteOption/AutocompleteOption';\nimport useSlot from '../utils/useSlot';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultIsActiveElementInListbox = listboxRef => listboxRef.current !== null && listboxRef.current.contains(document.activeElement);\n// @ts-ignore\nconst defaultGetOptionLabel = option => option.label ?? option;\nconst defaultLimitTagsText = more => `+${more}`;\nconst defaultRenderGroup = params => /*#__PURE__*/_jsxs(ListItem, {\n  nested: true,\n  children: [/*#__PURE__*/_jsx(ListSubheader, {\n    sticky: true,\n    children: params.group\n  }), /*#__PURE__*/_jsx(List, {\n    children: params.children\n  })]\n}, params.key);\nconst useUtilityClasses = ownerState => {\n  const {\n    disabled,\n    focused,\n    hasClearIcon,\n    hasPopupIcon,\n    popupOpen,\n    variant,\n    color,\n    size,\n    multiple\n  } = ownerState;\n  const slots = {\n    root: ['root', focused && 'focused', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon', variant && `variant${capitalize(variant)}`, color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],\n    wrapper: ['wrapper', multiple && 'multiple'],\n    input: ['input'],\n    startDecorator: ['startDecorator'],\n    endDecorator: ['endDecorator'],\n    clearIndicator: ['clearIndicator'],\n    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen', disabled && 'disabled'],\n    listbox: ['listbox'],\n    option: ['option'],\n    loading: ['loading'],\n    noOptions: ['noOptions'],\n    limitTag: ['limitTag']\n  };\n  return composeClasses(slots, getAutocompleteUtilityClass, {});\n};\nconst AutocompleteRoot = styled(StyledInputRoot, {\n  name: 'JoyAutocomplete',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  ownerState\n}) => ({\n  ...(ownerState.size === 'sm' && {\n    '--Autocomplete-wrapperGap': '3px'\n  }),\n  ...(ownerState.size === 'md' && {\n    '--Autocomplete-wrapperGap': '3px'\n  }),\n  ...(ownerState.size === 'lg' && {\n    '--Autocomplete-wrapperGap': '4px'\n  }),\n  /* Avoid double tap issue on iOS */\n  '@media (pointer: fine)': {\n    [`&:hover .${autocompleteClasses.clearIndicator}`]: {\n      visibility: 'visible'\n    }\n  },\n  ...(ownerState.multiple && !ownerState.startDecorator && {\n    paddingInlineStart: 0\n  })\n}));\n\n/**\n * Wrapper groups the chips (multi selection) and the input\n * so that start/end decorators can stay in the normal flow.\n */\nconst AutocompleteWrapper = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'Wrapper',\n  overridesResolver: (props, styles) => styles.wrapper\n})(({\n  ownerState\n}) => ({\n  flex: 1,\n  // stretch to fill the root slot\n  minWidth: 0,\n  // won't push end decorator out of the autocomplete\n  display: 'flex',\n  alignItems: 'center',\n  flexWrap: 'wrap',\n  gap: 'var(--Autocomplete-wrapperGap)',\n  [`&.${autocompleteClasses.multiple}`]: {\n    paddingBlock: 'var(--Autocomplete-wrapperGap)',\n    ...(!ownerState.startDecorator && {\n      paddingInlineStart: 'var(--Autocomplete-wrapperGap)'\n    }),\n    ...(!ownerState.endDecorator && {\n      paddingInlineEnd: 'var(--Autocomplete-wrapperGap)'\n    })\n  }\n}));\nconst AutocompleteInput = styled(StyledInputHtml, {\n  name: 'JoyAutocomplete',\n  slot: 'Input',\n  overridesResolver: (props, styles) => styles.input\n})(({\n  ownerState\n}) => ({\n  minWidth: 30,\n  minHeight: 'var(--Chip-minHeight)',\n  ...(ownerState.multiple && {\n    marginInlineStart: 'calc(var(--Autocomplete-wrapperGap) * 2.5)'\n  })\n}));\nconst AutocompleteStartDecorator = styled(StyledInputStartDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'StartDecorator',\n  overridesResolver: (props, styles) => styles.startDecorator\n})({});\nconst AutocompleteEndDecorator = styled(StyledInputEndDecorator, {\n  name: 'JoyAutocomplete',\n  slot: 'EndDecorator',\n  overridesResolver: (props, styles) => styles.endDecorator\n})(({\n  ownerState\n}) => ({\n  // don't adjust if end decorator is not the last of the autocomplete\n  ...((ownerState.hasClearIcon || ownerState.hasPopupIcon) && {\n    '--Button-margin': '0px',\n    '--IconButton-margin': '0px',\n    '--Icon-margin': '0px'\n  })\n}));\nconst AutocompleteClearIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'ClearIndicator',\n  overridesResolver: (props, styles) => styles.clearIndicator\n})(({\n  ownerState\n}) => ({\n  alignSelf: 'center',\n  ...(!ownerState.hasPopupIcon && {\n    marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)'\n  }),\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  visibility: ownerState.focused ? 'visible' : 'hidden'\n}));\nconst AutocompletePopupIndicator = styled(StyledIconButton, {\n  name: 'JoyAutocomplete',\n  slot: 'PopupIndicator',\n  overridesResolver: (props, styles) => styles.popupIndicator\n})({\n  alignSelf: 'center',\n  marginInlineStart: 'calc(var(--_Input-paddingBlock) / 2)',\n  marginInlineEnd: 'calc(var(--Input-decoratorChildOffset) * -1)',\n  [`&.${autocompleteClasses.popupIndicatorOpen}`]: {\n    transform: 'rotate(180deg)',\n    '--Icon-color': 'currentColor'\n  }\n});\nconst AutocompleteListbox = styled(StyledAutocompleteListbox, {\n  name: 'JoyAutocomplete',\n  slot: 'Listbox',\n  overridesResolver: (props, styles) => styles.listbox\n})(({\n  theme\n}) => ({\n  // `unstable_popup-zIndex` is a private variable that lets other component, for example Modal, to override the z-index so that the listbox can be displayed above the Modal.\n  zIndex: `var(--unstable_popup-zIndex, ${theme.vars.zIndex.popup})`\n}));\nconst AutocompleteOption = styled(StyledAutocompleteOption, {\n  name: 'JoyAutocomplete',\n  slot: 'Option',\n  overridesResolver: (props, styles) => styles.option\n})({});\nconst AutocompleteLoading = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'Loading',\n  overridesResolver: (props, styles) => styles.loading\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteNoOptions = styled(ListItem, {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary\n}));\nconst AutocompleteLimitTag = styled('div', {\n  name: 'JoyAutocomplete',\n  slot: 'NoOptions',\n  overridesResolver: (props, styles) => styles.noOptions\n})({\n  marginInlineStart: 'calc(var(--Input-paddingInline) / 2)',\n  marginBlockStart: 'var(--_Input-paddingBlock)'\n});\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/joy-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/joy-ui/api/autocomplete/)\n */\nconst Autocomplete = /*#__PURE__*/React.forwardRef(function Autocomplete(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'JoyAutocomplete'\n  });\n  const {\n    'aria-describedby': ariaDescribedby,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    autoComplete,\n    autoHighlight,\n    autoSelect,\n    autoFocus,\n    blurOnSelect,\n    clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/_jsx(ClearIcon, {\n      fontSize: \"md\"\n    })),\n    clearOnBlur,\n    clearOnEscape,\n    clearText = 'Clear',\n    closeText = 'Close',\n    defaultValue,\n    disableCloseOnSelect,\n    disabledItemsFocusable,\n    disableListWrap,\n    disableClearable = false,\n    disabled: disabledProp,\n    endDecorator,\n    error: errorProp = false,\n    filterOptions,\n    filterSelectedOptions,\n    forcePopupIcon = 'auto',\n    freeSolo = false,\n    getLimitTagsText = defaultLimitTagsText,\n    getOptionDisabled,\n    getOptionKey,\n    getOptionLabel = defaultGetOptionLabel,\n    handleHomeEndKeys,\n    includeInputInList,\n    isOptionEqualToValue,\n    groupBy,\n    id,\n    inputValue: inputValueProp,\n    limitTags = -1,\n    loading = false,\n    loadingText = 'Loading…',\n    multiple = false,\n    name,\n    noOptionsText = 'No options',\n    onChange,\n    onClose,\n    onHighlightChange,\n    onInputChange,\n    onOpen,\n    open,\n    openOnFocus,\n    openText = 'Open',\n    options,\n    placeholder,\n    popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/_jsx(ArrowDropDownIcon, {})),\n    readOnly = false,\n    renderGroup = defaultRenderGroup,\n    renderOption: renderOptionProp,\n    renderTags,\n    required,\n    type,\n    startDecorator,\n    size: sizeProp = 'md',\n    color: colorProp = 'neutral',\n    variant = 'outlined',\n    value: valueProp,\n    component,\n    selectOnFocus,\n    slots = {},\n    slotProps = {},\n    ...other\n  } = props;\n  const formControl = React.useContext(FormControlContext);\n  const error = inProps.error ?? formControl?.error ?? errorProp;\n  const size = inProps.size ?? formControl?.size ?? sizeProp;\n  const color = inProps.color ?? (error ? 'danger' : formControl?.color ?? colorProp);\n  const disabled = disabledProp ?? formControl?.disabled ?? false;\n  const {\n    getRootProps,\n    getInputProps,\n    getPopupIndicatorProps,\n    getClearProps,\n    getTagProps,\n    getListboxProps,\n    getOptionProps,\n    value,\n    dirty,\n    popupOpen,\n    focused,\n    focusedTag,\n    anchorEl,\n    setAnchorEl,\n    inputValue,\n    groupedOptions\n  } = useAutocomplete({\n    ...props,\n    id: id ?? formControl?.htmlFor,\n    componentName: 'Autocomplete',\n    unstable_classNamePrefix: 'Mui',\n    unstable_isActiveElementInListbox: defaultIsActiveElementInListbox\n  });\n  const {\n    onMouseDown: handleInputMouseDown\n  } = getInputProps();\n  const {\n    onClick: handleRootOnClick\n  } = getRootProps();\n  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;\n  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;\n\n  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.\n  const ownerState = {\n    instanceColor: inProps.color,\n    ...props,\n    value,\n    disabled,\n    focused,\n    getOptionLabel,\n    hasOptions: !!groupedOptions.length,\n    hasClearIcon,\n    hasPopupIcon,\n    inputFocused: focusedTag === -1,\n    popupOpen,\n    size,\n    color,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    ...other,\n    component,\n    slots,\n    slotProps\n  };\n  let selectedOptions;\n  if (multiple && value.length > 0) {\n    const getCustomizedTagProps = params => {\n      const {\n        onDelete,\n        ...tagProps\n      } = getTagProps(params);\n      return {\n        disabled,\n        size,\n        onClick: onDelete,\n        ...tagProps\n      };\n    };\n    if (renderTags) {\n      selectedOptions = renderTags(value, getCustomizedTagProps, ownerState);\n    } else {\n      selectedOptions = value.map((option, index) => {\n        return /*#__PURE__*/_jsx(Chip, {\n          size: size,\n          variant: \"soft\",\n          color: \"neutral\",\n          endDecorator: /*#__PURE__*/_jsx(ChipDelete, {\n            ...getCustomizedTagProps({\n              index\n            })\n          }),\n          sx: {\n            minWidth: 0\n          },\n          children: getOptionLabel(option)\n        }, index);\n      });\n    }\n  }\n  const rootRef = useForkRef(ref, setAnchorEl);\n  const rootStateClasses = {\n    [autocompleteClasses.disabled]: disabled,\n    [autocompleteClasses.error]: error,\n    [autocompleteClasses.focused]: focused,\n    [autocompleteClasses.formControl]: Boolean(formControl)\n  };\n  const [SlotRoot, rootProps] = useSlot('root', {\n    ref: rootRef,\n    className: [classes.root, rootStateClasses],\n    elementType: AutocompleteRoot,\n    externalForwardedProps,\n    ownerState,\n    getSlotProps: getRootProps,\n    additionalProps: {\n      onClick: event => {\n        if (handleRootOnClick) {\n          handleRootOnClick(event);\n        }\n        if (event.currentTarget === event.target && handleInputMouseDown) {\n          handleInputMouseDown(event);\n        }\n      }\n    }\n  });\n  const [SlotWrapper, wrapperProps] = useSlot('wrapper', {\n    className: classes.wrapper,\n    elementType: AutocompleteWrapper,\n    externalForwardedProps,\n    ownerState\n  });\n  const inputStateClasses = {\n    [autocompleteClasses.disabled]: disabled\n  };\n  const [SlotInput, inputProps] = useSlot('input', {\n    className: [classes.input, inputStateClasses],\n    elementType: AutocompleteInput,\n    getSlotProps: handlers => {\n      const {\n        onBlur,\n        onFocus,\n        onMouseDown,\n        ...inputSlotProps\n      } = getInputProps();\n      return {\n        ...inputSlotProps,\n        onBlur: event => {\n          onBlur?.(event);\n          handlers.onBlur?.(event);\n        },\n        onFocus: event => {\n          onFocus?.(event);\n          handlers.onFocus?.(event);\n        },\n        onMouseDown: event => {\n          onMouseDown?.(event);\n          handlers.onMouseDown?.(event);\n        }\n      };\n    },\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      autoFocus,\n      placeholder,\n      name,\n      readOnly,\n      disabled,\n      required: required ?? formControl?.required,\n      type,\n      'aria-invalid': error || undefined,\n      'aria-label': ariaLabel,\n      'aria-labelledby': ariaLabelledby,\n      'aria-describedby': ariaDescribedby ?? formControl?.['aria-describedby']\n    }\n  });\n  const [SlotStartDecorator, startDecoratorProps] = useSlot('startDecorator', {\n    className: classes.startDecorator,\n    elementType: AutocompleteStartDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotEndDecorator, endDecoratorProps] = useSlot('endDecorator', {\n    className: classes.endDecorator,\n    elementType: AutocompleteEndDecorator,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotClearIndicator, clearIndicatorProps] = useSlot('clearIndicator', {\n    className: classes.clearIndicator,\n    elementType: AutocompleteClearIndicator,\n    getSlotProps: getClearProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, color).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      'aria-label': clearText,\n      title: clearText\n    }\n  });\n  const [SlotPopupIndicator, popupIndicatorProps] = useSlot('popupIndicator', {\n    className: classes.popupIndicator,\n    elementType: AutocompletePopupIndicator,\n    getSlotProps: getPopupIndicatorProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, color).color || 'neutral',\n      disableColorInversion: !!inProps.color\n    }),\n    additionalProps: {\n      disabled,\n      'aria-label': popupOpen ? closeText : openText,\n      title: popupOpen ? closeText : openText,\n      type: 'button'\n    }\n  });\n  const [SlotListbox, listboxProps] = useSlot('listbox', {\n    className: classes.listbox,\n    elementType: AutocompleteListbox,\n    getSlotProps: getListboxProps,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      size: mergedProps.size || size,\n      variant: mergedProps.variant || variant,\n      color: mergedProps.color || color,\n      disableColorInversion: !mergedProps.disablePortal\n    }),\n    additionalProps: {\n      anchorEl,\n      open: popupOpen,\n      style: anchorEl ? {\n        width: anchorEl.clientWidth\n      } : {}\n    }\n  });\n  const [SlotLoading, loadingProps] = useSlot('loading', {\n    className: classes.loading,\n    elementType: AutocompleteLoading,\n    externalForwardedProps,\n    ownerState\n  });\n  const [SlotNoOptions, noOptionsProps] = useSlot('noOptions', {\n    className: classes.noOptions,\n    elementType: AutocompleteNoOptions,\n    externalForwardedProps,\n    ownerState,\n    additionalProps: {\n      role: 'presentation',\n      onMouseDown: event => {\n        // Prevent input blur when interacting with the \"no options\" content\n        event.preventDefault();\n      }\n    }\n  });\n  const [SlotLimitTag, limitTagProps] = useSlot('limitTag', {\n    className: classes.limitTag,\n    elementType: AutocompleteLimitTag,\n    externalForwardedProps,\n    ownerState\n  });\n  if (limitTags > -1 && Array.isArray(selectedOptions)) {\n    const more = selectedOptions.length - limitTags;\n    if (!focused && more > 0) {\n      selectedOptions = selectedOptions.splice(0, limitTags);\n      selectedOptions.push( /*#__PURE__*/_jsx(SlotLimitTag, {\n        ...limitTagProps,\n        children: getLimitTagsText(more)\n      }, selectedOptions.length));\n    }\n  }\n  const [SlotOption, baseOptionProps] = useSlot('option', {\n    className: classes.option,\n    elementType: AutocompleteOption,\n    externalForwardedProps,\n    ownerState,\n    getSlotOwnerState: mergedProps => ({\n      variant: mergedProps.variant || getChildVariantAndColor(variant, color).variant || 'plain',\n      color: mergedProps.color || getChildVariantAndColor(variant, color).color || 'neutral',\n      disableColorInversion: !listboxProps.disablePortal\n    }),\n    additionalProps: {\n      as: 'li'\n    }\n  });\n  const defaultRenderOption = (optionProps, option) => /*#__PURE__*/_jsx(SlotOption, {\n    ...optionProps,\n    children: getOptionLabel(option)\n  });\n  const renderOption = renderOptionProp || defaultRenderOption;\n  const renderListOption = (option, index) => {\n    const optionProps = getOptionProps({\n      option,\n      index\n    });\n    return renderOption({\n      ...baseOptionProps,\n      ...optionProps\n    }, option, {\n      // `aria-selected` prop will always by boolean, see useAutocomplete hook.\n      selected: !!optionProps['aria-selected'],\n      inputValue,\n      ownerState\n    });\n  };\n\n  // Wait for `listboxProps` because `slotProps.listbox` could be a function.\n  const modifiers = React.useMemo(() => [{\n    name: 'offset',\n    options: {\n      offset: [0, 4]\n    }\n  }, ...(listboxProps.modifiers || [])], [listboxProps.modifiers]);\n  let popup = null;\n  if (anchorEl) {\n    popup = /*#__PURE__*/_jsx(VariantColorProvider, {\n      variant: variant,\n      color: color,\n      children: /*#__PURE__*/_jsx(ListProvider, {\n        nested: true,\n        children: /*#__PURE__*/_jsxs(SlotListbox, {\n          ...listboxProps,\n          className: clsx(listboxProps.className)\n          // @ts-ignore internal logic (too complex to typed PopperOwnProps to SlotListbox but this should be removed when we have `usePopper`)\n          ,\n          modifiers: modifiers,\n          ...(!props.slots?.listbox && {\n            as: Popper,\n            slots: {\n              root: listboxProps.as || 'ul'\n            }\n          }),\n          children: [groupedOptions.map((option, index) => {\n            if (groupBy) {\n              const typedOption = option;\n              return renderGroup({\n                key: String(typedOption.key),\n                group: typedOption.group,\n                children: typedOption.options.map((option2, index2) => renderListOption(option2, typedOption.index + index2))\n              });\n            }\n            return renderListOption(option, index);\n          }), loading && groupedOptions.length === 0 ? /*#__PURE__*/_jsx(SlotLoading, {\n            ...loadingProps,\n            children: loadingText\n          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/_jsx(SlotNoOptions, {\n            ...noOptionsProps,\n            children: noOptionsText\n          }) : null]\n        })\n      })\n    });\n  }\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(SlotRoot, {\n      ...rootProps,\n      children: [startDecorator && /*#__PURE__*/_jsx(SlotStartDecorator, {\n        ...startDecoratorProps,\n        children: startDecorator\n      }), /*#__PURE__*/_jsxs(SlotWrapper, {\n        ...wrapperProps,\n        children: [selectedOptions, /*#__PURE__*/_jsx(SlotInput, {\n          ...inputProps\n        })]\n      }), endDecorator && /*#__PURE__*/_jsx(SlotEndDecorator, {\n        ...endDecoratorProps,\n        children: endDecorator\n      }), hasClearIcon ? /*#__PURE__*/_jsx(SlotClearIndicator, {\n        ...clearIndicatorProps,\n        children: clearIcon\n      }) : null, hasPopupIcon ? /*#__PURE__*/_jsx(SlotPopupIndicator, {\n        ...popupIndicatorProps,\n        children: popupIcon\n      }) : null]\n    }), popup]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Autocomplete.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Identifies the element (or elements) that describes the object.\n   * @see aria-labelledby\n   */\n  'aria-describedby': PropTypes.string,\n  /**\n   * Defines a string value that labels the current element.\n   * @see aria-labelledby.\n   */\n  'aria-label': PropTypes.string,\n  /**\n   * Identifies the element (or elements) that labels the current element.\n   * @see aria-describedby.\n   */\n  'aria-labelledby': PropTypes.string,\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete: PropTypes.bool,\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight: PropTypes.bool,\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect: PropTypes.bool,\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect: PropTypes.oneOfType([PropTypes.oneOf(['mouse', 'touch']), PropTypes.bool]),\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"md\" />\n   */\n  clearIcon: PropTypes.node,\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur: PropTypes.bool,\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape: PropTypes.bool,\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText: PropTypes.string,\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText: PropTypes.string,\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'neutral'\n   */\n  color: PropTypes.oneOf(['danger', 'neutral', 'primary', 'success', 'warning']),\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.defaultValue !== undefined && !Array.isArray(props.defaultValue)) {\n      return new Error(['MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.', `However, ${props.defaultValue} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable: PropTypes.bool,\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect: PropTypes.bool,\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable: PropTypes.bool,\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap: PropTypes.bool,\n  /**\n   * Trailing adornment for this input.\n   */\n  endDecorator: PropTypes.node,\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   * @default false\n   */\n  error: PropTypes.bool,\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions: PropTypes.func,\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions: PropTypes.bool,\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.bool]),\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo: PropTypes.bool,\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {string | number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more: string | number) => `+${more}`\n   */\n  getLimitTagsText: PropTypes.func,\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled: PropTypes.func,\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey: PropTypes.func,\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel: PropTypes.func,\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy: PropTypes.func,\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys: PropTypes.bool,\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id: PropTypes.string,\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList: PropTypes.bool,\n  /**\n   * The input value.\n   */\n  inputValue: PropTypes.string,\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue: PropTypes.func,\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags: integerPropType,\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading: PropTypes.bool,\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText: PropTypes.node,\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple: PropTypes.bool,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText: PropTypes.node,\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange: PropTypes.func,\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus: PropTypes.bool,\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText: PropTypes.string,\n  /**\n   * Array of options.\n   */\n  options: PropTypes.array.isRequired,\n  /**\n   * The input placeholder\n   */\n  placeholder: PropTypes.string,\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon: PropTypes.node,\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup: PropTypes.func,\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption: PropTypes.func,\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required: PropTypes.bool,\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus: PropTypes.bool,\n  /**\n   * The size of the component.\n   * @default 'md'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['sm', 'md', 'lg']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    clearIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    endDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    limitTag: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    listbox: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    loading: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    noOptions: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    option: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    popupIndicator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    startDecorator: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    wrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    clearIndicator: PropTypes.elementType,\n    endDecorator: PropTypes.elementType,\n    input: PropTypes.elementType,\n    limitTag: PropTypes.elementType,\n    listbox: PropTypes.elementType,\n    loading: PropTypes.elementType,\n    noOptions: PropTypes.elementType,\n    option: PropTypes.elementType,\n    popupIndicator: PropTypes.elementType,\n    root: PropTypes.elementType,\n    startDecorator: PropTypes.elementType,\n    wrapper: PropTypes.elementType\n  }),\n  /**\n   * Leading adornment for this input.\n   */\n  startDecorator: PropTypes.node,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type: PropTypes.string,\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value: chainPropTypes(PropTypes.any, props => {\n    if (props.multiple && props.value !== undefined && !Array.isArray(props.value)) {\n      return new Error(['MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.', `However, ${props.value} was provided.`].join('\\n'));\n    }\n    return null;\n  }),\n  /**\n   * The [global variant](https://mui.com/joy-ui/main-features/global-variants/) to use.\n   * @default 'outlined'\n   */\n  variant: PropTypes.oneOf(['outlined', 'plain', 'soft', 'solid'])\n} : void 0;\nexport default Autocomplete;"],"mappings":"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B;AACF;AACA;AACA;AACA;EACEtJ,iBAAiB,EAAE3J,SAAS,CAAC0S,IAAI;EACjC;AACF;AACA;AACA;EACE3I,EAAE,EAAE/J,SAAS,CAACyS,MAAM;EACpB;AACF;AACA;AACA;EACE7I,kBAAkB,EAAE5J,SAAS,CAAC0S,IAAI;EAClC;AACF;AACA;EACE1I,UAAU,EAAEhK,SAAS,CAACyS,MAAM;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE5I,oBAAoB,EAAE7J,SAAS,CAACiT,IAAI;EACpC;AACF;AACA;AACA;AACA;EACE/I,SAAS,EAAE/J,eAAe;EAC1B;AACF;AACA;AACA;AACA;EACE0E,OAAO,EAAE7E,SAAS,CAAC0S,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;EACEvI,WAAW,EAAEnK,SAAS,CAAC6S,IAAI;EAC3B;AACF;AACA;AACA;EACE1O,QAAQ,EAAEnE,SAAS,CAAC0S,IAAI;EACxB;AACF;AACA;EACEzN,IAAI,EAAEjF,SAAS,CAACyS,MAAM;EACtB;AACF;AACA;AACA;AACA;AACA;EACErI,aAAa,EAAEpK,SAAS,CAAC6S,IAAI;EAC7B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACExI,QAAQ,EAAErK,SAAS,CAACiT,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;AACA;EACE3I,OAAO,EAAEtK,SAAS,CAACiT,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;EACE1I,iBAAiB,EAAEvK,SAAS,CAACiT,IAAI;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;EACEzI,aAAa,EAAExK,SAAS,CAACiT,IAAI;EAC7B;AACF;AACA;EACEC,SAAS,EAAElT,SAAS,CAACiT,IAAI;EACzB;AACF;AACA;AACA;AACA;AACA;EACExI,MAAM,EAAEzK,SAAS,CAACiT,IAAI;EACtB;AACF;AACA;EACEvI,IAAI,EAAE1K,SAAS,CAAC0S,IAAI;EACpB;AACF;AACA;AACA;EACE/H,WAAW,EAAE3K,SAAS,CAAC0S,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;EACE9H,QAAQ,EAAE5K,SAAS,CAACyS,MAAM;EAC1B;AACF;AACA;EACE5H,OAAO,EAAE7K,SAAS,CAACmT,KAAK,CAACC,UAAU;EACnC;AACF;AACA;EACEtI,WAAW,EAAE9K,SAAS,CAACyS,MAAM;EAC7B;AACF;AACA;AACA;EACE1H,SAAS,EAAE/K,SAAS,CAAC6S,IAAI;EACzB;AACF;AACA;AACA;EACE7H,QAAQ,EAAEhL,SAAS,CAAC0S,IAAI;EACxB;AACF;AACA;AACA;AACA;AACA;EACEzH,WAAW,EAAEjL,SAAS,CAACiT,IAAI;EAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE/H,YAAY,EAAElL,SAAS,CAACiT,IAAI;EAC5B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE7H,UAAU,EAAEpL,SAAS,CAACiT,IAAI;EAC1B;AACF;AACA;AACA;EACE5H,QAAQ,EAAErL,SAAS,CAAC0S,IAAI;EACxB;AACF;AACA;AACA;AACA;EACE9G,aAAa,EAAE5L,SAAS,CAAC0S,IAAI;EAC7B;AACF;AACA;AACA;EACExO,IAAI,EAAElE,SAAS,CAAC,sCAAsC2S,SAAS,CAAC,CAAC3S,SAAS,CAAC4S,KAAK,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE5S,SAAS,CAACyS,MAAM,CAAC,CAAC;EACxH;AACF;AACA;AACA;EACE5G,SAAS,EAAE7L,SAAS,CAACqT,KAAK,CAAC;IACzB3O,cAAc,EAAE1E,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IACvE7O,YAAY,EAAEzE,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IACrE/O,KAAK,EAAEvE,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IAC9DvO,QAAQ,EAAE/E,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IACjE1O,OAAO,EAAE5E,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IAChEzO,OAAO,EAAE7E,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IAChExO,SAAS,EAAE9E,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IAClExQ,MAAM,EAAE9C,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IAC/D3O,cAAc,EAAE3E,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IACvEjP,IAAI,EAAErE,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IAC7D9O,cAAc,EAAExE,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;IACvEhP,OAAO,EAAEtE,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC;EACjE,CAAC,CAAC;EACF;AACF;AACA;AACA;EACElP,KAAK,EAAEpE,SAAS,CAACqT,KAAK,CAAC;IACrB3O,cAAc,EAAE1E,SAAS,CAACwO,WAAW;IACrC/J,YAAY,EAAEzE,SAAS,CAACwO,WAAW;IACnCjK,KAAK,EAAEvE,SAAS,CAACwO,WAAW;IAC5BzJ,QAAQ,EAAE/E,SAAS,CAACwO,WAAW;IAC/B5J,OAAO,EAAE5E,SAAS,CAACwO,WAAW;IAC9B3J,OAAO,EAAE7E,SAAS,CAACwO,WAAW;IAC9B1J,SAAS,EAAE9E,SAAS,CAACwO,WAAW;IAChC1L,MAAM,EAAE9C,SAAS,CAACwO,WAAW;IAC7B7J,cAAc,EAAE3E,SAAS,CAACwO,WAAW;IACrCnK,IAAI,EAAErE,SAAS,CAACwO,WAAW;IAC3BhK,cAAc,EAAExE,SAAS,CAACwO,WAAW;IACrClK,OAAO,EAAEtE,SAAS,CAACwO;EACrB,CAAC,CAAC;EACF;AACF;AACA;EACEhK,cAAc,EAAExE,SAAS,CAAC6S,IAAI;EAC9B;AACF;AACA;EACE5E,EAAE,EAAEjO,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACuT,OAAO,CAACvT,SAAS,CAAC2S,SAAS,CAAC,CAAC3S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,EAAEtT,SAAS,CAAC0S,IAAI,CAAC,CAAC,CAAC,EAAE1S,SAAS,CAACiT,IAAI,EAAEjT,SAAS,CAACsT,MAAM,CAAC,CAAC;EACvJ;AACF;AACA;EACEhI,IAAI,EAAEtL,SAAS,CAACyS,MAAM;EACtB;AACF;AACA;AACA;AACA;AACA;EACEhH,KAAK,EAAEvL,cAAc,CAACF,SAAS,CAAC8S,GAAG,EAAE1N,KAAK,IAAI;IAC5C,IAAIA,KAAK,CAACjB,QAAQ,IAAIiB,KAAK,CAACqG,KAAK,KAAK8D,SAAS,IAAI,CAAC2B,KAAK,CAACC,OAAO,CAAC/L,KAAK,CAACqG,KAAK,CAAC,EAAE;MAC9E,OAAO,IAAIsH,KAAK,CAAC,CAAC,oGAAoG,EAAG,YAAW3N,KAAK,CAACqG,KAAM,gBAAe,CAAC,CAACuH,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9K;IACA,OAAO,IAAI;EACb,CAAC,CAAC;EACF;AACF;AACA;AACA;EACEhP,OAAO,EAAEhE,SAAS,CAAC4S,KAAK,CAAC,CAAC,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;AACjE,CAAC,GAAG,KAAK,CAAC;AACV,eAAenL,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}