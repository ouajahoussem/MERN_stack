{"version":3,"sources":["../src/Checkbox.tsx"],"sourcesContent":["import { createComponent } from '@toolpad/studio-runtime';\nimport * as React from 'react';\nimport {\n  FormControlLabel,\n  FormGroup,\n  Checkbox as MuiCheckbox,\n  FormHelperText,\n  FormControl,\n  Typography as MuiTypography,\n  Switch as MuiSwitch,\n  SwitchProps,\n} from '@mui/material';\nimport { errorFrom } from '@toolpad/utils/errors';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport type { CheckboxProps as MuiCheckBoxProps } from '@mui/material/Checkbox';\nimport type { FormControlLabelProps } from '@mui/material/FormControlLabel';\nimport { SX_PROP_HELPER_TEXT } from './constants';\nimport {\n  FormInputComponentProps,\n  useFormInput,\n  withComponentForm,\n  FORM_INPUT_ARG_TYPES,\n} from './Form';\n\ninterface ErrorDisplayProps {\n  error: unknown;\n}\n\nfunction ErrorDisplay({ error }: ErrorDisplayProps) {\n  const errMessage = errorFrom(error).message;\n  return (\n    <MuiTypography sx={{ display: 'flex', flexDirection: 'row', gap: 1, alignItems: 'center' }}>\n      <ErrorIcon fontSize=\"small\" color=\"error\" />\n      <span>{errMessage}</span>\n    </MuiTypography>\n  );\n}\nexport type Props = Omit<FormControlLabelProps, 'control' | 'onChange'> &\n  Omit<MuiCheckBoxProps, 'onChange'> & {\n    onChange: (newValue: boolean) => void;\n    label?: string;\n    defaultValue: string;\n    error?: unknown;\n    fullWidth: boolean;\n    mode: 'checkBox' | 'switch';\n  } & Pick<FormInputComponentProps, 'name' | 'isRequired'> &\n  SwitchProps;\n\nfunction Checkbox({ ...rest }: Props) {\n  rest.checked = rest.checked ?? false;\n  const { onFormInputChange, renderFormInput, formInputError } = useFormInput<boolean>({\n    name: rest.name,\n    label: rest.label,\n    onChange: rest.onChange,\n    validationProps: { isRequired: rest.isRequired },\n  });\n\n  const handleChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newValue = event.target.checked;\n      onFormInputChange(newValue);\n    },\n    [onFormInputChange],\n  );\n\n  const renderedOptions = React.useMemo(() => {\n    const props = {\n      onChange: handleChange,\n      required: rest.isRequired,\n      size: rest.size,\n      defaultChecked: rest.defaultChecked,\n      disabled: rest.disabled,\n      color: rest.color,\n      sx: rest.sx,\n      checked: rest.checked,\n    };\n    return (\n      <FormControl error={Boolean(formInputError)} fullWidth={rest.fullWidth}>\n        <FormGroup>\n          <FormControlLabel\n            label={rest.label}\n            checked={rest.checked}\n            labelPlacement={rest.labelPlacement}\n            componentsProps={rest.componentsProps}\n            control={\n              rest.mode === 'checkBox' ? <MuiCheckbox {...props} /> : <MuiSwitch {...props} />\n            }\n          />\n        </FormGroup>\n        <FormHelperText>{formInputError?.message || ''}</FormHelperText>\n      </FormControl>\n    );\n  }, [rest, formInputError, handleChange]);\n\n  return renderFormInput(renderedOptions);\n}\n\nfunction Component(props: Props) {\n  if (props.error) {\n    return <ErrorDisplay error={props.error} />;\n  }\n  return <Checkbox {...props} />;\n}\n\nconst FormWrappedCheckbox = withComponentForm(Component);\nexport default createComponent(FormWrappedCheckbox, {\n  layoutDirection: 'both',\n  loadingProp: 'checked',\n  errorProp: 'error',\n  argTypes: {\n    mode: {\n      helperText: 'Defines how the content is rendered. Either as plain CheckBox, Switch',\n      type: 'string',\n      enum: ['checkBox', 'switch'],\n      enumLabels: {\n        checkBox: 'CheckBox',\n        switch: 'Switch',\n      },\n      default: 'checkBox',\n      label: 'Mode',\n      control: { type: 'ToggleButtons' },\n    },\n    label: {\n      helperText: 'A text or an element to be used in an enclosing label element.',\n      type: 'string',\n      default: 'Label',\n    },\n    checked: {\n      helperText: 'If true, the component is checked.',\n      onChangeProp: 'onChange',\n      type: 'boolean',\n    },\n    color: {\n      helperText:\n        'The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.',\n      type: 'string',\n      enum: ['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning'],\n      default: 'primary',\n    },\n    disabled: {\n      helperText: 'If true, the component is disabled.',\n      type: 'boolean',\n      default: false,\n    },\n\n    size: {\n      helperText:\n        'The size of the component. small is equivalent to the dense checkbox, switch styling.',\n      type: 'string',\n      enum: ['medium', 'small', 'string'],\n      default: 'medium',\n    },\n    sx: {\n      helperText: SX_PROP_HELPER_TEXT,\n      type: 'object',\n    },\n    fullWidth: {\n      helperText: 'Whether the select should occupy all available horizontal space.',\n      type: 'boolean',\n    },\n    componentsProps: {\n      helperText: 'The props used for each slot inside.',\n      type: 'object',\n      visible: ({ mode }: Props) => mode === 'checkBox',\n    },\n    labelPlacement: {\n      helperText: 'The position of the label.',\n      type: 'string',\n      enum: ['bottom', 'end', 'start', 'top'],\n      default: 'end',\n    },\n    ...FORM_INPUT_ARG_TYPES,\n  },\n});\n"],"mappings":"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","names":[]}