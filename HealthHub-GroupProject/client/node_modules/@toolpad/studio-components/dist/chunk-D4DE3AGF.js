import {
  FORM_INPUT_ARG_TYPES,
  useFormInput,
  withComponentForm
} from "./chunk-HE2K7WIE.js";
import {
  SX_PROP_HELPER_TEXT
} from "./chunk-5TDNSO3W.js";
import {
  createBuiltin
} from "./chunk-AIZRQLFT.js";

// src/Autocomplete.tsx
import * as React from "react";
import {
  Autocomplete as MuiAutocomplete,
  TextField
} from "@mui/material";
function Autocomplete({
  options,
  label,
  onChange,
  value,
  defaultValue,
  isRequired,
  minLength,
  maxLength,
  sx,
  ...rest
}) {
  const { onFormInputChange, formInputError, renderFormInput } = useFormInput({
    name: rest.name,
    label,
    value,
    onChange,
    emptyValue: null,
    defaultValue,
    validationProps: { isRequired, minLength, maxLength }
  });
  const getValue = React.useCallback((selection) => {
    if (!selection) {
      return null;
    }
    if (typeof selection === "string") {
      return selection;
    }
    if (typeof selection === "object") {
      return selection?.value ?? selection?.label ?? null;
    }
    return null;
  }, []);
  const getOptionLabel = React.useCallback((option) => {
    if (!option) {
      return "";
    }
    if (typeof option === "string") {
      return option;
    }
    if (typeof option === "object") {
      return option?.label ?? "";
    }
    return "";
  }, []);
  const handleChange = React.useCallback(
    (event, selection) => {
      const newValue = getValue(selection);
      onFormInputChange(newValue);
    },
    [getValue, onFormInputChange]
  );
  return renderFormInput(
    /* @__PURE__ */ React.createElement(
      MuiAutocomplete,
      {
        onChange: handleChange,
        options: options ?? [],
        isOptionEqualToValue: (option, selectedValue) => getValue(option) === getValue(selectedValue),
        getOptionLabel,
        value,
        renderInput: (params) => /* @__PURE__ */ React.createElement(
          TextField,
          {
            ...params,
            label,
            variant: "outlined",
            ...formInputError && {
              error: Boolean(formInputError),
              helperText: formInputError.message || ""
            }
          }
        ),
        sx: { ...!rest.fullWidth && !value ? { width: 120 } : {}, ...sx },
        ...rest
      }
    )
  );
}
var FormWrappedAutocomplete = withComponentForm(Autocomplete);
var Autocomplete_default = createBuiltin(FormWrappedAutocomplete, {
  helperText: "A text input with autocomplete suggestions. Uses the Material\xA0UI [Autocomplete](https://mui.com/material-ui/react-autocomplete/) under the hood",
  layoutDirection: "both",
  loadingProp: "loading",
  argTypes: {
    options: {
      helperText: "The options available to search from.",
      type: "array",
      default: [],
      control: {
        type: "SelectOptions"
      }
    },
    value: {
      helperText: "The value of the autocomplete.",
      type: "string",
      onChangeProp: "onChange",
      default: "",
      defaultValueProp: "defaultValue"
    },
    defaultValue: {
      helperText: "A default value.",
      type: "string",
      default: ""
    },
    label: {
      helperText: "The label to display for the autocomplete.",
      type: "string",
      default: "Search\u2026"
    },
    fullWidth: {
      helperText: "If true, the autocomplete will take up the full width of its container.",
      type: "boolean"
    },
    size: {
      helperText: "The size of the autocomplete. One of `small`, `medium`, or `large`.",
      type: "string",
      enum: ["small", "medium", "large"],
      default: "small"
    },
    loading: {
      helperText: "If true, the autocomplete will display a loading indicator.",
      type: "boolean"
    },
    disabled: {
      helperText: "If true, the autocomplete will be disabled.",
      type: "boolean"
    },
    ...FORM_INPUT_ARG_TYPES,
    sx: {
      helperText: SX_PROP_HELPER_TEXT,
      type: "object"
    }
  }
});

export {
  Autocomplete_default
};
//# sourceMappingURL=chunk-D4DE3AGF.js.map