import {
  FORM_INPUT_ARG_TYPES,
  useFormInput,
  withComponentForm
} from "./chunk-HE2K7WIE.js";
import {
  SX_PROP_HELPER_TEXT
} from "./chunk-5TDNSO3W.js";

// src/Checkbox.tsx
import { createComponent } from "@toolpad/studio-runtime";
import * as React from "react";
import {
  FormControlLabel,
  FormGroup,
  Checkbox as MuiCheckbox,
  FormHelperText,
  FormControl,
  Typography as MuiTypography,
  Switch as MuiSwitch
} from "@mui/material";
import { errorFrom } from "@toolpad/utils/errors";
import ErrorIcon from "@mui/icons-material/Error";
function ErrorDisplay({ error }) {
  const errMessage = errorFrom(error).message;
  return /* @__PURE__ */ React.createElement(MuiTypography, { sx: { display: "flex", flexDirection: "row", gap: 1, alignItems: "center" } }, /* @__PURE__ */ React.createElement(ErrorIcon, { fontSize: "small", color: "error" }), /* @__PURE__ */ React.createElement("span", null, errMessage));
}
function Checkbox({ ...rest }) {
  rest.checked = rest.checked ?? false;
  const { onFormInputChange, renderFormInput, formInputError } = useFormInput({
    name: rest.name,
    label: rest.label,
    onChange: rest.onChange,
    validationProps: { isRequired: rest.isRequired }
  });
  const handleChange = React.useCallback(
    (event) => {
      const newValue = event.target.checked;
      onFormInputChange(newValue);
    },
    [onFormInputChange]
  );
  const renderedOptions = React.useMemo(() => {
    const props = {
      onChange: handleChange,
      required: rest.isRequired,
      size: rest.size,
      defaultChecked: rest.defaultChecked,
      disabled: rest.disabled,
      color: rest.color,
      sx: rest.sx,
      checked: rest.checked
    };
    return /* @__PURE__ */ React.createElement(FormControl, { error: Boolean(formInputError), fullWidth: rest.fullWidth }, /* @__PURE__ */ React.createElement(FormGroup, null, /* @__PURE__ */ React.createElement(
      FormControlLabel,
      {
        label: rest.label,
        checked: rest.checked,
        labelPlacement: rest.labelPlacement,
        componentsProps: rest.componentsProps,
        control: rest.mode === "checkBox" ? /* @__PURE__ */ React.createElement(MuiCheckbox, { ...props }) : /* @__PURE__ */ React.createElement(MuiSwitch, { ...props })
      }
    )), /* @__PURE__ */ React.createElement(FormHelperText, null, formInputError?.message || ""));
  }, [rest, formInputError, handleChange]);
  return renderFormInput(renderedOptions);
}
function Component(props) {
  if (props.error) {
    return /* @__PURE__ */ React.createElement(ErrorDisplay, { error: props.error });
  }
  return /* @__PURE__ */ React.createElement(Checkbox, { ...props });
}
var FormWrappedCheckbox = withComponentForm(Component);
var Checkbox_default = createComponent(FormWrappedCheckbox, {
  layoutDirection: "both",
  loadingProp: "checked",
  errorProp: "error",
  argTypes: {
    mode: {
      helperText: "Defines how the content is rendered. Either as plain CheckBox, Switch",
      type: "string",
      enum: ["checkBox", "switch"],
      enumLabels: {
        checkBox: "CheckBox",
        switch: "Switch"
      },
      default: "checkBox",
      label: "Mode",
      control: { type: "ToggleButtons" }
    },
    label: {
      helperText: "A text or an element to be used in an enclosing label element.",
      type: "string",
      default: "Label"
    },
    checked: {
      helperText: "If true, the component is checked.",
      onChangeProp: "onChange",
      type: "boolean"
    },
    color: {
      helperText: "The color of the component. It supports both default and custom theme colors, which can be added as shown in the palette customization guide.",
      type: "string",
      enum: ["default", "primary", "secondary", "error", "info", "success", "warning"],
      default: "primary"
    },
    disabled: {
      helperText: "If true, the component is disabled.",
      type: "boolean",
      default: false
    },
    size: {
      helperText: "The size of the component. small is equivalent to the dense checkbox, switch styling.",
      type: "string",
      enum: ["medium", "small", "string"],
      default: "medium"
    },
    sx: {
      helperText: SX_PROP_HELPER_TEXT,
      type: "object"
    },
    fullWidth: {
      helperText: "Whether the select should occupy all available horizontal space.",
      type: "boolean"
    },
    componentsProps: {
      helperText: "The props used for each slot inside.",
      type: "object",
      visible: ({ mode }) => mode === "checkBox"
    },
    labelPlacement: {
      helperText: "The position of the label.",
      type: "string",
      enum: ["bottom", "end", "start", "top"],
      default: "end"
    },
    ...FORM_INPUT_ARG_TYPES
  }
});

export {
  Checkbox_default
};
//# sourceMappingURL=chunk-HZOTEYWM.js.map