{"../@types+react@18.2.66/node_modules/@types/react/package.json":"{\n  \"name\": \"react\",\n  \"description\": \"React is a JavaScript library for building user interfaces.\",\n  \"keywords\": [\n    \"react\"\n  ],\n  \"version\": \"18.2.0\",\n  \"homepage\": \"https://reactjs.org/\",\n  \"bugs\": \"https://github.com/facebook/react/issues\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"LICENSE\",\n    \"README.md\",\n    \"index.js\",\n    \"cjs/\",\n    \"umd/\",\n    \"jsx-runtime.js\",\n    \"jsx-dev-runtime.js\",\n    \"react.shared-subset.js\"\n  ],\n  \"main\": \"index.js\",\n  \"exports\": {\n    \".\": {\n      \"react-server\": \"./react.shared-subset.js\",\n      \"default\": \"./index.js\"\n    },\n    \"./package.json\": \"./package.json\",\n    \"./jsx-runtime\": \"./jsx-runtime.js\",\n    \"./jsx-dev-runtime\": \"./jsx-dev-runtime.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/facebook/react.git\",\n    \"directory\": \"packages/react\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  },\n  \"dependencies\": {\n    \"loose-envify\": \"^1.1.0\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"loose-envify\"\n    ]\n  }\n}","../@types+react@18.2.66/node_modules/@types/react/jsx-runtime.d.ts":"import * as React from \"./\";\nexport { Fragment } from \"./\";\n\nexport namespace JSX {\n    type ElementType = React.JSX.ElementType;\n    interface Element extends React.JSX.Element {}\n    interface ElementClass extends React.JSX.ElementClass {}\n    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}\n    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}\n    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;\n    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}\n    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}\n    interface IntrinsicElements extends React.JSX.IntrinsicElements {}\n}\n\n/**\n * Create a React element.\n *\n * You should not use this function directly. Use JSX and a transpiler instead.\n */\nexport function jsx(\n    type: React.ElementType,\n    props: unknown,\n    key?: React.Key,\n): React.ReactElement;\n\n/**\n * Create a React element.\n *\n * You should not use this function directly. Use JSX and a transpiler instead.\n */\nexport function jsxs(\n    type: React.ElementType,\n    props: unknown,\n    key?: React.Key,\n): React.ReactElement;\n","../@types+react@18.2.66/node_modules/@types/react/jsx-dev-runtime.d.ts":"import * as React from \"./\";\nexport { Fragment } from \"./\";\n\nexport namespace JSX {\n    type ElementType = React.JSX.ElementType;\n    interface Element extends React.JSX.Element {}\n    interface ElementClass extends React.JSX.ElementClass {}\n    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}\n    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}\n    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;\n    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}\n    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}\n    interface IntrinsicElements extends React.JSX.IntrinsicElements {}\n}\n\nexport interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}\n\n/**\n * Create a React element.\n *\n * You should not use this function directly. Use JSX and a transpiler instead.\n */\nexport function jsxDEV(\n    type: React.ElementType,\n    props: unknown,\n    key: React.Key | undefined,\n    isStatic: boolean,\n    source?: JSXSource,\n    self?: unknown,\n): React.ReactElement;\n","../@types+react@18.2.66/node_modules/@types/react/index.d.ts":"// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from \"csstype\";\nimport * as PropTypes from \"prop-types\";\nimport { Interaction as SchedulerInteraction } from \"scheduler/tracing\";\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\n\n/**\n * Used to represent DOM API's where users can either pass\n * true or false as a boolean or as its equivalent strings.\n */\ntype Booleanish = boolean | \"true\" | \"false\";\n\n/**\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}\n */\ntype CrossOrigin = \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n\n/**\n * The function returned from an effect passed to {@link React.useEffect useEffect},\n * which can be used to clean up the effect when the component unmounts.\n *\n * @see {@link https://react.dev/reference/react/useEffect React Docs}\n */\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\n// eslint-disable-next-line @definitelytyped/export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    /**\n     * Used to retrieve the possible components which accept a given set of props.\n     *\n     * Can be passed no type parameters to get a union of all possible components\n     * and tags.\n     *\n     * Is a superset of {@link ComponentType}.\n     *\n     * @template P The props to match against. If not passed, defaults to any.\n     * @template Tag An optional tag to match against. If not passed, attempts to match against all possible tags.\n     *\n     * @example\n     *\n     * ```tsx\n     * // All components and tags (img, embed etc.)\n     * // which accept `src`\n     * type SrcComponents = ElementType<{ src: any }>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // All components\n     * type AllComponents = ElementType;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // All custom components which match `src`, and tags which\n     * // match `src`, narrowed down to just `audio` and `embed`\n     * type SrcComponents = ElementType<{ src: any }, 'audio' | 'embed'>;\n     * ```\n     */\n    type ElementType<P = any, Tag extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements> =\n        | { [K in Tag]: P extends JSX.IntrinsicElements[K] ? K : never }[Tag]\n        | ComponentType<P>;\n\n    /**\n     * Represents any user-defined component, either as a function or a class.\n     *\n     * Similar to {@link JSXElementConstructor}, but with extra properties like\n     * {@link FunctionComponent.defaultProps defaultProps } and\n     * {@link ComponentClass.contextTypes contextTypes}.\n     *\n     * @template P The props the component accepts.\n     *\n     * @see {@link ComponentClass}\n     * @see {@link FunctionComponent}\n     */\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    /**\n     * Represents any user-defined component, either as a function or a class.\n     *\n     * Similar to {@link ComponentType}, but without extra properties like\n     * {@link FunctionComponent.defaultProps defaultProps } and\n     * {@link ComponentClass.contextTypes contextTypes}.\n     *\n     * @template P The props the component accepts.\n     */\n    type JSXElementConstructor<P> =\n        | ((\n            props: P,\n            /**\n             * @deprecated\n             *\n             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components React Docs}\n             */\n            deprecatedLegacyContext?: any,\n        ) => ReactNode)\n        | (new(\n            props: P,\n            /**\n             * @deprecated\n             *\n             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}\n             */\n            deprecatedLegacyContext?: any,\n        ) => Component<any, any>);\n\n    /**\n     * A readonly ref container where {@link current} cannot be mutated.\n     *\n     * Created by {@link createRef}, or {@link useRef} when passed `null`.\n     *\n     * @template T The type of the ref's value.\n     *\n     * @example\n     *\n     * ```tsx\n     * const ref = createRef<HTMLDivElement>();\n     *\n     * ref.current = document.createElement('div'); // Error\n     * ```\n     */\n    interface RefObject<T> {\n        /**\n         * The current value of the ref.\n         */\n        readonly current: T | null;\n    }\n\n    /**\n     * A callback fired whenever the ref's value changes.\n     *\n     * @template T The type of the ref's value.\n     *\n     * @see {@link https://react.dev/reference/react-dom/components/common#ref-callback React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <div ref={(node) => console.log(node)} />\n     * ```\n     */\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n\n    /**\n     * A union type of all possible shapes for React refs.\n     *\n     * @see {@link RefCallback}\n     * @see {@link RefObject}\n     */\n\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    /**\n     * A legacy implementation of refs where you can pass a string to a ref prop.\n     *\n     * @see {@link https://react.dev/reference/react/Component#refs React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <div ref=\"myRef\" />\n     * ```\n     */\n    // TODO: Remove the string ref special case from `PropsWithRef` once we remove LegacyRef\n    type LegacyRef<T> = string | Ref<T>;\n\n    /**\n     * Retrieves the type of the 'ref' prop for a given component type or tag name.\n     *\n     * @template C The component type.\n     *\n     * @example\n     *\n     * ```tsx\n     * type MyComponentRef = React.ElementRef<typeof MyComponent>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * type DivRef = React.ElementRef<'div'>;\n     * ```\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new(props: any): Component<any> }\n            | ((props: any, context?: any) => ReactNode)\n            | keyof JSX.IntrinsicElements,\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends RefAttributes<\n                infer Instance\n            >[\"ref\"] ? Instance\n            : never\n            : never;\n\n    type ComponentState = any;\n\n    /**\n     * A value which uniquely identifies a node among items in an array.\n     *\n     * @see {@link https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key React Docs}\n     */\n    type Key = string | number | bigint;\n\n    /**\n     * @internal The props any component can receive.\n     * You don't have to add this type. All components automatically accept these props.\n     * ```tsx\n     * const Component = () => <div />;\n     * <Component key=\"one\" />\n     * ```\n     *\n     * WARNING: The implementation of a component will never have access to these attributes.\n     * The following example would be incorrect usage because {@link Component} would never have access to `key`:\n     * ```tsx\n     * const Component = (props: React.Attributes) => props.key;\n     * ```\n     */\n    interface Attributes {\n        key?: Key | null | undefined;\n    }\n    /**\n     * The props any component accepting refs can receive.\n     * Class components, built-in browser components (e.g. `div`) and forwardRef components can receive refs and automatically accept these props.\n     * ```tsx\n     * const Component = forwardRef(() => <div />);\n     * <Component ref={(current) => console.log(current)} />\n     * ```\n     *\n     * You only need this type if you manually author the types of props that need to be compatible with legacy refs.\n     * ```tsx\n     * interface Props extends React.RefAttributes<HTMLDivElement> {}\n     * declare const Component: React.FunctionComponent<Props>;\n     * ```\n     *\n     * Otherwise it's simpler to directly use {@link Ref} since you can safely use the\n     * props type to describe to props that a consumer can pass to the component\n     * as well as describing the props the implementation of a component \"sees\".\n     * {@link RefAttributes} is generally not safe to describe both consumer and seen props.\n     *\n     * ```tsx\n     * interface Props extends {\n     *   ref?: React.Ref<HTMLDivElement> | undefined;\n     * }\n     * declare const Component: React.FunctionComponent<Props>;\n     * ```\n     *\n     * WARNING: The implementation of a component will not have access to the same type in versions of React supporting string refs.\n     * The following example would be incorrect usage because {@link Component} would never have access to a `ref` with type `string`\n     * ```tsx\n     * const Component = (props: React.RefAttributes) => props.ref;\n     * ```\n     */\n    interface RefAttributes<T> extends Attributes {\n        /**\n         * Allows getting a ref to the component instance.\n         * Once the component unmounts, React will set `ref.current` to `null`\n         * (or call the ref with `null` if you passed a callback ref).\n         *\n         * @see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}\n         */\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    /**\n     * Represents the built-in attributes available to class components.\n     */\n    interface ClassAttributes<T> extends RefAttributes<T> {\n    }\n\n    /**\n     * Represents a JSX element.\n     *\n     * Where {@link ReactNode} represents everything that can be rendered, `ReactElement`\n     * only represents JSX.\n     *\n     * @template P The type of the props object\n     * @template T The type of the component or tag\n     *\n     * @example\n     *\n     * ```tsx\n     * const element: ReactElement = <div />;\n     * ```\n     */\n    interface ReactElement<\n        P = any,\n        T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>,\n    > {\n        type: T;\n        props: P;\n        key: string | null;\n    }\n\n    /**\n     * @deprecated\n     */\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, \"key\" | \"ref\">>,\n    > extends ReactElement<P, Exclude<T, number>> {}\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: (\"ref\" extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    /**\n     * @deprecated Use {@link ComponentElement} instead.\n     */\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element>\n        extends ReactElement<P, string>\n    {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (\n        props?: Attributes & P,\n        ...children: ReactNode[]\n    ) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> = (\n        props?: ClassAttributes<T> & P,\n        ...children: ReactNode[]\n    ) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ) => DOMElement<P, T>;\n\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (\n            props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null,\n            ...children: ReactNode[]\n        ): ReactSVGElement;\n    }\n\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactText = string | number;\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactChild = ReactElement | string | number;\n\n    /**\n     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.\n     */\n    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}\n    /**\n     * WARNING: Not related to `React.Fragment`.\n     * @deprecated This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactFragment = Iterable<ReactNode>;\n\n    /**\n     * Different release channels declare additional types of ReactNode this particular release channel accepts.\n     * App or library types should never augment this interface.\n     */\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}\n\n    /**\n     * Represents all of the things React can render.\n     *\n     * Where {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/reactnode/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Typing children\n     * type Props = { children: ReactNode }\n     *\n     * const Component = ({ children }: Props) => <div>{children}</div>\n     *\n     * <Component>hello</Component>\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Typing a custom element\n     * type Props = { customElement: ReactNode }\n     *\n     * const Component = ({ customElement }: Props) => <div>{customElement}</div>\n     *\n     * <Component customElement={<div>hello</div>} />\n     * ```\n     */\n    // non-thenables need to be kept in sync with AwaitedReactNode\n    type ReactNode =\n        | ReactElement\n        | string\n        | number\n        | Iterable<ReactNode>\n        | ReactPortal\n        | boolean\n        | null\n        | undefined\n        | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[\n            keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES\n        ];\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML,\n    ): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG,\n    ): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n    ): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n    ): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]\n    ): FunctionComponentElement<P>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]\n    ): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]\n    ): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]\n    ): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]\n    ): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]\n    ): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]\n    ): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]\n    ): ReactElement<P>;\n\n    /**\n     * Describes the props accepted by a Context {@link Provider}.\n     *\n     * @template T The type of the value the context provides.\n     */\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode | undefined;\n    }\n\n    /**\n     * Describes the props accepted by a Context {@link Consumer}.\n     *\n     * @template T The type of the value the context provides.\n     */\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    /**\n     * An object masquerading as a component. These are created by functions\n     * like {@link forwardRef}, {@link memo}, and {@link createContext}.\n     *\n     * In order to make TypeScript work, we pretend that they are normal\n     * components.\n     *\n     * But they are, in fact, not callable - instead, they are objects which\n     * are treated specially by the renderer.\n     *\n     * @template P The props the component accepts.\n     */\n    interface ExoticComponent<P = {}> {\n        (props: P): ReactNode;\n        readonly $$typeof: symbol;\n    }\n\n    /**\n     * An {@link ExoticComponent} with a `displayName` property applied to it.\n     *\n     * @template P The props the component accepts.\n     */\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * An {@link ExoticComponent} with a `propTypes` property applied to it.\n     *\n     * @template P The props the component accepts.\n     */\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    /**\n     * Used to retrieve the type of a context object from a {@link Context}.\n     *\n     * @template C The context object.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const MyContext = createContext({ foo: 'bar' });\n     *\n     * type ContextType = ContextType<typeof MyContext>;\n     * // ContextType = { foo: string }\n     * ```\n     */\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    /**\n     * Wraps your components to specify the value of this context for all components inside.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#provider React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     *\n     * function App() {\n     *   return (\n     *     <ThemeContext.Provider value=\"dark\">\n     *       <Toolbar />\n     *     </ThemeContext.Provider>\n     *   );\n     * }\n     * ```\n     */\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n\n    /**\n     * The old way to read context, before {@link useContext} existed.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#consumer React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { UserContext } from './user-context';\n     *\n     * function Avatar() {\n     *   return (\n     *     <UserContext.Consumer>\n     *       {user => <img src={user.profileImage} alt={user.name} />}\n     *     </UserContext.Consumer>\n     *   );\n     * }\n     * ```\n     */\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n\n    /**\n     * Context lets components pass information deep down without explicitly\n     * passing props.\n     *\n     * Created from {@link createContext}\n     *\n     * @see {@link https://react.dev/learn/passing-data-deeply-with-context React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     * ```\n     */\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * Lets you create a {@link Context} that components can provide or read.\n     *\n     * @param defaultValue The value you want the context to have when there is no matching\n     * {@link Provider} in the tree above the component reading the context. This is meant\n     * as a \"last resort\" fallback.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#reference React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     * ```\n     */\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    /**\n     * Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.\n     */\n    const Children: {\n        map<T, C>(\n            children: C | readonly C[],\n            fn: (child: C, index: number) => T,\n        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    };\n    /**\n     * Lets you group elements without a wrapper node.\n     *\n     * @see {@link https://react.dev/reference/react/Fragment React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { Fragment } from 'react';\n     *\n     * <Fragment>\n     *   <td>Hello</td>\n     *   <td>World</td>\n     * </Fragment>\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Using the <></> shorthand syntax:\n     *\n     * <>\n     *   <td>Hello</td>\n     *   <td>World</td>\n     * </>\n     * ```\n     */\n    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    /**\n     * Lets you find common bugs in your components early during development.\n     *\n     * @see {@link https://react.dev/reference/react/StrictMode React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { StrictMode } from 'react';\n     *\n     * <StrictMode>\n     *   <App />\n     * </StrictMode>\n     * ```\n     */\n    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    /**\n     * The props accepted by {@link Suspense}.\n     *\n     * @see {@link https://react.dev/reference/react/Suspense React Docs}\n     */\n    interface SuspenseProps {\n        children?: ReactNode | undefined;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback?: ReactNode;\n    }\n\n    /**\n     * Lets you display a fallback until its children have finished loading.\n     *\n     * @see {@link https://react.dev/reference/react/Suspense React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { Suspense } from 'react';\n     *\n     * <Suspense fallback={<Loading />}>\n     *   <ProfileDetails />\n     * </Suspense>\n     * ```\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * The callback passed to {@link ProfilerProps.onRender}.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n     */\n    type ProfilerOnRenderCallback = (\n        /**\n         * The string id prop of the {@link Profiler} tree that has just committed. This lets\n         * you identify which part of the tree was committed if you are using multiple\n         * profilers.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        id: string,\n        /**\n         * This lets you know whether the tree has just been mounted for the first time\n         * or re-rendered due to a change in props, state, or hooks.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        phase: \"mount\" | \"update\" | \"nested-update\",\n        /**\n         * The number of milliseconds spent rendering the {@link Profiler} and its descendants\n         * for the current update. This indicates how well the subtree makes use of\n         * memoization (e.g. {@link memo} and {@link useMemo}). Ideally this value should decrease\n         * significantly after the initial mount as many of the descendants will only need to\n         * re-render if their specific props change.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        actualDuration: number,\n        /**\n         * The number of milliseconds estimating how much time it would take to re-render the entire\n         * {@link Profiler} subtree without any optimizations. It is calculated by summing up the most\n         * recent render durations of each component in the tree. This value estimates a worst-case\n         * cost of rendering (e.g. the initial mount or a tree with no memoization). Compare\n         * {@link actualDuration} against it to see if memoization is working.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        baseDuration: number,\n        /**\n         * A numeric timestamp for when React began rendering the current update.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        startTime: number,\n        /**\n         * A numeric timestamp for when React committed the current update. This value is shared\n         * between all profilers in a commit, enabling them to be grouped if desirable.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n\n    /**\n     * The props accepted by {@link Profiler}.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler React Docs}\n     */\n    interface ProfilerProps {\n        children?: ReactNode | undefined;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    /**\n     * Lets you measure rendering performance of a React tree programmatically.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <Profiler id=\"App\" onRender={onRender}>\n     *   <App />\n     * </Profiler>\n     * ```\n     */\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {}\n    class Component<P, S> {\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * @example\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-contexttype}\n         */\n        static contextType?: Context<any> | undefined;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * @example\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see {@link https://react.dev/reference/react/Component#context React Docs}\n         */\n        context: unknown;\n\n        constructor(props: Readonly<P> | P);\n        /**\n         * @deprecated\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html React Docs}\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => Pick<S, K> | S | null) | (Pick<S, K> | S | null),\n            callback?: () => void,\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        readonly props: Readonly<P>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         *\n         * @see {@link https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs Legacy React Docs}\n         */\n        refs: {\n            [key: string]: ReactInstance;\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {}\n\n    /**\n     * @deprecated Use `ClassicComponent` from `create-react-class`\n     *\n     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}\n     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}\n     */\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * Represents the type of a function component. Can optionally\n     * receive a type argument that represents the props the component\n     * receives.\n     *\n     * @template P The props the component accepts.\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n     * @alias for {@link FunctionComponent}\n     *\n     * @example\n     *\n     * ```tsx\n     * // With props:\n     * type Props = { name: string }\n     *\n     * const MyComponent: FC<Props> = (props) => {\n     *  return <div>{props.name}</div>\n     * }\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Without props:\n     * const MyComponentWithoutProps: FC = () => {\n     *   return <div>MyComponentWithoutProps</div>\n     * }\n     * ```\n     */\n    type FC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * Represents the type of a function component. Can optionally\n     * receive a type argument that represents the props the component\n     * accepts.\n     *\n     * @template P The props the component accepts.\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // With props:\n     * type Props = { name: string }\n     *\n     * const MyComponent: FunctionComponent<Props> = (props) => {\n     *  return <div>{props.name}</div>\n     * }\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Without props:\n     * const MyComponentWithoutProps: FunctionComponent = () => {\n     *   return <div>MyComponentWithoutProps</div>\n     * }\n     * ```\n     */\n    interface FunctionComponent<P = {}> {\n        (props: P, context?: any): ReactNode;\n        /**\n         * Used to declare the types of the props accepted by the\n         * component. These types will be checked during rendering\n         * and in development only.\n         *\n         * We recommend using TypeScript instead of checking prop\n         * types at runtime.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: WeakValidationMap<P> | undefined;\n        /**\n         * @deprecated\n         *\n         * Lets you specify which legacy context is consumed by\n         * this component.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}\n         */\n        contextTypes?: ValidationMap<any> | undefined;\n        /**\n         * Used to define default values for the props accepted by\n         * the component.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         *\n         * @example\n         *\n         * ```tsx\n         * type Props = { name?: string }\n         *\n         * const MyComponent: FC<Props> = (props) => {\n         *   return <div>{props.name}</div>\n         * }\n         *\n         * MyComponent.defaultProps = {\n         *   name: 'John Doe'\n         * }\n         * ```\n         */\n        defaultProps?: Partial<P> | undefined;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         *\n         * @example\n         *\n         * ```tsx\n         *\n         * const MyComponent: FC = () => {\n         *   return <div>Hello!</div>\n         * }\n         *\n         * MyComponent.displayName = 'MyAwesomeComponent'\n         * ```\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated - Equivalent to {@link React.FunctionComponent}.\n     *\n     * @see {@link React.FunctionComponent}\n     * @alias {@link VoidFunctionComponent}\n     */\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    /**\n     * @deprecated - Equivalent to {@link React.FunctionComponent}.\n     *\n     * @see {@link React.FunctionComponent}\n     */\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactNode;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    /**\n     * The type of the ref received by a {@link ForwardRefRenderFunction}.\n     *\n     * @see {@link ForwardRefRenderFunction}\n     */\n    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n    /**\n     * The type of the function passed to {@link forwardRef}. This is considered different\n     * to a normal {@link FunctionComponent} because it receives an additional argument,\n     *\n     * @param props Props passed to the component, if any.\n     * @param ref A ref forwarded to the component of type {@link ForwardedRef}.\n     *\n     * @template T The type of the forwarded ref.\n     * @template P The type of the props the component accepts.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}\n     * @see {@link forwardRef}\n     */\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: P, ref: ForwardedRef<T>): ReactNode;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * Will show `ForwardRef(${Component.displayName || Component.name})`\n         * in devtools by default, but can be given its own specific name.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n        /**\n         * defaultProps are not supported on render functions passed to forwardRef.\n         *\n         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         */\n        defaultProps?: never | undefined;\n        /**\n         * propTypes are not supported on render functions passed to forwardRef.\n         *\n         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: never | undefined;\n    }\n\n    /**\n     * Represents a component class in React.\n     *\n     * @template P The props the component accepts.\n     * @template S The internal state of the component.\n     */\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new(props: P, context?: any): Component<P, S>;\n        /**\n         * Used to declare the types of the props accepted by the\n         * component. These types will be checked during rendering\n         * and in development only.\n         *\n         * We recommend using TypeScript instead of checking prop\n         * types at runtime.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextType?: Context<any> | undefined;\n        /**\n         * @deprecated use {@link ComponentClass.contextType} instead\n         *\n         * Lets you specify which legacy context is consumed by\n         * this component.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}\n         */\n        contextTypes?: ValidationMap<any> | undefined;\n        /**\n         * @deprecated\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#how-to-use-context Legacy React Docs}\n         */\n        childContextTypes?: ValidationMap<any> | undefined;\n        /**\n         * Used to define default values for the props accepted by\n         * the component.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         */\n        defaultProps?: Partial<P> | undefined;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated Use `ClassicComponentClass` from `create-react-class`\n     *\n     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}\n     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}\n     */\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new(props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * Used in {@link createElement} and {@link createFactory} to represent\n     * a class.\n     *\n     * An intersection type is used to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See {@link https://github.com/Microsoft/TypeScript/issues/7234 this GitHub issue}\n     * for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        & C\n        & (new(props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, {@link Component.render}, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of {@link Component.render render} to the document, and\n         * returns an object to be given to {@link componentDidUpdate}. Useful for saving\n         * things such as scroll position before {@link Component.render render} causes changes to it.\n         *\n         * Note: the presence of this method prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if {@link getSnapshotBeforeUpdate} is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before {@link Component.render}.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before {@link Component.render}.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling {@link Component.setState} generally does not trigger this method.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling {@link Component.setState} generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call {@link Component.setState} here.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call {@link Component.setState} here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}\n     */\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>> | undefined;\n        statics?: {\n            [key: string]: any;\n        } | undefined;\n\n        displayName?: string | undefined;\n        propTypes?: ValidationMap<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}\n     */\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    /**\n     * The type of the component returned from {@link forwardRef}.\n     *\n     * @template P The props the component accepts, if any.\n     *\n     * @see {@link ExoticComponent}\n     */\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P> | undefined;\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    /**\n     * Lets your component expose a DOM node to a parent component\n     * using a ref.\n     *\n     * @see {@link https://react.dev/reference/react/forwardRef React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}\n     *\n     * @param render See the {@link ForwardRefRenderFunction}.\n     *\n     * @template T The type of the DOM node.\n     * @template P The props the component accepts, if any.\n     *\n     * @example\n     *\n     * ```tsx\n     * interface Props {\n     *   children?: ReactNode;\n     *   type: \"submit\" | \"button\";\n     * }\n     *\n     * export const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n     *   <button ref={ref} className=\"MyClassName\" type={props.type}>\n     *     {props.children}\n     *   </button>\n     * ));\n     * ```\n     */\n    function forwardRef<T, P = {}>(\n        render: ForwardRefRenderFunction<T, P>,\n    ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /**\n     * Omits the 'ref' attribute from the given props object.\n     *\n     * @template P The props object type.\n     */\n    type PropsWithoutRef<P> =\n        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.\n        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        P extends any ? (\"ref\" extends keyof P ? Omit<P, \"ref\"> : P) : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Note: String refs can be forwarded. We can't fix this bug without breaking a bunch of libraries now though.\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        \"ref\" extends keyof P\n            ? P extends { ref?: infer R | undefined }\n                ? string extends R ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }\n                : P\n            : P\n            : P;\n\n    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };\n\n    /**\n     * Used to retrieve the props a component accepts. Can either be passed a string,\n     * indicating a DOM element (e.g. 'div', 'span', etc.) or the type of a React\n     * component.\n     *\n     * It's usually better to use {@link ComponentPropsWithRef} or {@link ComponentPropsWithoutRef}\n     * instead of this type, as they let you be explicit about whether or not to include\n     * the `ref` prop.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentProps<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentProps = React.ComponentProps<typeof MyComponent>;\n     * ```\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends\n        JSXElementConstructor<infer P> ? P\n        : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T]\n        : {};\n\n    /**\n     * Used to retrieve the props a component accepts with its ref. Can either be\n     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the\n     * type of a React component.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentPropsWithRef<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithRef = React.ComponentPropsWithRef<typeof MyComponent>;\n     * ```\n     */\n    type ComponentPropsWithRef<T extends ElementType> = T extends (new(props: infer P) => Component<any, any>)\n        ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n        : PropsWithRef<ComponentProps<T>>;\n    /**\n     * Used to retrieve the props a custom component accepts with its ref.\n     *\n     * Unlike {@link ComponentPropsWithRef}, this only works with custom\n     * components, i.e. components you define yourself. This is to improve\n     * type-checking performance.\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithRef = React.CustomComponentPropsWithRef<typeof MyComponent>;\n     * ```\n     */\n    type CustomComponentPropsWithRef<T extends ComponentType> = T extends (new(props: infer P) => Component<any, any>)\n        ? (PropsWithoutRef<P> & RefAttributes<InstanceType<T>>)\n        : T extends ((props: infer P, legacyContext?: any) => ReactNode) ? PropsWithRef<P>\n        : never;\n\n    /**\n     * Used to retrieve the props a component accepts without its ref. Can either be\n     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the\n     * type of a React component.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentPropsWithoutRef<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithoutRef = React.ComponentPropsWithoutRef<typeof MyComponent>;\n     * ```\n     */\n    type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;\n\n    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<\n        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>\n    > ? Method\n        : ComponentPropsWithRef<T> extends RefAttributes<infer Method> ? Method\n        : never;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<CustomComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    /**\n     * Lets you skip re-rendering a component when its props are unchanged.\n     *\n     * @see {@link https://react.dev/reference/react/memo React Docs}\n     *\n     * @param Component The component to memoize.\n     * @param propsAreEqual A function that will be used to determine if the props have changed.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { memo } from 'react';\n     *\n     * const SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n     *   // ...\n     * });\n     * ```\n     */\n    function memo<P extends object>(\n        Component: FunctionComponent<P>,\n        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean,\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean,\n    ): MemoExoticComponent<T>;\n\n    interface LazyExoticComponent<T extends ComponentType<any>>\n        extends ExoticComponent<CustomComponentPropsWithRef<T>>\n    {\n        readonly _result: T;\n    }\n\n    /**\n     * Lets you defer loading a component’s code until it is rendered for the first time.\n     *\n     * @see {@link https://react.dev/reference/react/lazy React Docs}\n     *\n     * @param load A function that returns a `Promise` or another thenable (a `Promise`-like object with a\n     * then method). React will not call `load` until the first time you attempt to render the returned\n     * component. After React first calls load, it will wait for it to resolve, and then render the\n     * resolved value’s `.default` as a React component. Both the returned `Promise` and the `Promise`’s\n     * resolved value will be cached, so React will not call load more than once. If the `Promise` rejects,\n     * React will throw the rejection reason for the nearest Error Boundary to handle.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { lazy } from 'react';\n     *\n     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n     * ```\n     */\n    function lazy<T extends ComponentType<any>>(\n        load: () => Promise<{ default: T }>,\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    /**\n     * The instruction passed to a {@link Dispatch} function in {@link useState}\n     * to tell React what the next value of the {@link useState} should be.\n     *\n     * Often found wrapped in {@link Dispatch}.\n     *\n     * @template S The type of the state.\n     *\n     * @example\n     *\n     * ```tsx\n     * // This return type correctly represents the type of\n     * // `setCount` in the example below.\n     * const useCustomState = (): Dispatch<SetStateAction<number>> => {\n     *   const [count, setCount] = useState(0);\n     *\n     *   return setCount;\n     * }\n     * ```\n     */\n    type SetStateAction<S> = S | ((prevState: S) => S);\n\n    /**\n     * A function that can be used to update the state of a {@link useState}\n     * or {@link useReducer} hook.\n     */\n    type Dispatch<A> = (value: A) => void;\n    /**\n     * A {@link Dispatch} function can sometimes be called without any arguments.\n     */\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S\n        : never;\n    type DependencyList = readonly unknown[];\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    type EffectCallback = () => void | Destructor;\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useContext}\n     */\n    function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useState}\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useState}\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>,\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined,\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T>(initialValue: T | null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useLayoutEffect}\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useEffect}\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useImperativeHandle}\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useCallback}\n     */\n    // A specific function type would not trigger implicit any.\n    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useMemo}\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useDebugValue}\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    // must be synchronous\n    export type TransitionFunction = () => VoidOrUndefinedOnly;\n    // strange definition to allow vscode to show documentation on the invocation\n    export interface TransitionStartFunction {\n        /**\n         * State updates caused inside the callback are allowed to be deferred.\n         *\n         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n         *\n         * @param callback A _synchronous_ function which causes state updates that can be deferred.\n         */\n        (callback: TransitionFunction): void;\n    }\n\n    /**\n     * Returns a deferred version of the value that may “lag behind” it.\n     *\n     * This is commonly used to keep the interface responsive when you have something that renders immediately\n     * based on user input and something that needs to wait for a data fetch.\n     *\n     * A good example of this is a text input.\n     *\n     * @param value The value that is going to be deferred\n     *\n     * @see {@link https://react.dev/reference/react/useDeferredValue}\n     */\n    export function useDeferredValue<T>(value: T): T;\n\n    /**\n     * Allows components to avoid undesirable loading states by waiting for content to load\n     * before transitioning to the next screen. It also allows components to defer slower,\n     * data fetching updates until subsequent renders so that more crucial updates can be\n     * rendered immediately.\n     *\n     * The `useTransition` hook returns two values in an array.\n     *\n     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\n     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.\n     *\n     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n     *\n     * @see {@link https://react.dev/reference/react/useTransition}\n     */\n    export function useTransition(): [boolean, TransitionStartFunction];\n\n    /**\n     * Similar to `useTransition` but allows uses where hooks are not available.\n     *\n     * @param callback A _synchronous_ function which causes state updates that can be deferred.\n     */\n    export function startTransition(scope: TransitionFunction): void;\n\n    export function useId(): string;\n\n    /**\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @see {@link https://github.com/facebook/react/pull/21913}\n     */\n    export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;\n\n    /**\n     * @param subscribe\n     * @param getSnapshot\n     *\n     * @see {@link https://github.com/reactwg/react-18/discussions/86}\n     */\n    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`\n    export function useSyncExternalStore<Snapshot>(\n        subscribe: (onStoreChange: () => void) => () => void,\n        getSnapshot: () => Snapshot,\n        getServerSnapshot?: () => Snapshot,\n    ): Snapshot;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: \"mouse\" | \"pen\" | \"touch\";\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {\n        relatedTarget: (EventTarget & RelatedTarget) | null;\n        target: EventTarget & Target;\n    }\n\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    export type ModifierKey =\n        | \"Alt\"\n        | \"AltGraph\"\n        | \"CapsLock\"\n        | \"Control\"\n        | \"Fn\"\n        | \"FnLock\"\n        | \"Hyper\"\n        | \"Meta\"\n        | \"NumLock\"\n        | \"ScrollLock\"\n        | \"Shift\"\n        | \"Super\"\n        | \"Symbol\"\n        | \"SymbolLock\";\n\n    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        code: string;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface SVGLineElementAttributes<T> extends SVGProps<T> {}\n    interface SVGTextElementAttributes<T> extends SVGProps<T> {}\n\n    interface DOMAttributes<T> {\n        children?: ReactNode | undefined;\n        dangerouslySetInnerHTML?: {\n            // Should be InnerHTML['innerHTML'].\n            // But unfortunately we're mixing renderer-specific type declarations.\n            __html: string | TrustedHTML;\n        } | undefined;\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T> | undefined;\n        onCopyCapture?: ClipboardEventHandler<T> | undefined;\n        onCut?: ClipboardEventHandler<T> | undefined;\n        onCutCapture?: ClipboardEventHandler<T> | undefined;\n        onPaste?: ClipboardEventHandler<T> | undefined;\n        onPasteCapture?: ClipboardEventHandler<T> | undefined;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T> | undefined;\n        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionStart?: CompositionEventHandler<T> | undefined;\n        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdate?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T> | undefined;\n        onFocusCapture?: FocusEventHandler<T> | undefined;\n        onBlur?: FocusEventHandler<T> | undefined;\n        onBlurCapture?: FocusEventHandler<T> | undefined;\n\n        // Form Events\n        onChange?: FormEventHandler<T> | undefined;\n        onChangeCapture?: FormEventHandler<T> | undefined;\n        onBeforeInput?: FormEventHandler<T> | undefined;\n        onBeforeInputCapture?: FormEventHandler<T> | undefined;\n        onInput?: FormEventHandler<T> | undefined;\n        onInputCapture?: FormEventHandler<T> | undefined;\n        onReset?: FormEventHandler<T> | undefined;\n        onResetCapture?: FormEventHandler<T> | undefined;\n        onSubmit?: FormEventHandler<T> | undefined;\n        onSubmitCapture?: FormEventHandler<T> | undefined;\n        onInvalid?: FormEventHandler<T> | undefined;\n        onInvalidCapture?: FormEventHandler<T> | undefined;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T> | undefined;\n        onLoadCapture?: ReactEventHandler<T> | undefined;\n        onError?: ReactEventHandler<T> | undefined; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T> | undefined;\n        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPress?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;\n        onKeyUp?: KeyboardEventHandler<T> | undefined;\n        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T> | undefined;\n        onAbortCapture?: ReactEventHandler<T> | undefined;\n        onCanPlay?: ReactEventHandler<T> | undefined;\n        onCanPlayCapture?: ReactEventHandler<T> | undefined;\n        onCanPlayThrough?: ReactEventHandler<T> | undefined;\n        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;\n        onDurationChange?: ReactEventHandler<T> | undefined;\n        onDurationChangeCapture?: ReactEventHandler<T> | undefined;\n        onEmptied?: ReactEventHandler<T> | undefined;\n        onEmptiedCapture?: ReactEventHandler<T> | undefined;\n        onEncrypted?: ReactEventHandler<T> | undefined;\n        onEncryptedCapture?: ReactEventHandler<T> | undefined;\n        onEnded?: ReactEventHandler<T> | undefined;\n        onEndedCapture?: ReactEventHandler<T> | undefined;\n        onLoadedData?: ReactEventHandler<T> | undefined;\n        onLoadedDataCapture?: ReactEventHandler<T> | undefined;\n        onLoadedMetadata?: ReactEventHandler<T> | undefined;\n        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;\n        onLoadStart?: ReactEventHandler<T> | undefined;\n        onLoadStartCapture?: ReactEventHandler<T> | undefined;\n        onPause?: ReactEventHandler<T> | undefined;\n        onPauseCapture?: ReactEventHandler<T> | undefined;\n        onPlay?: ReactEventHandler<T> | undefined;\n        onPlayCapture?: ReactEventHandler<T> | undefined;\n        onPlaying?: ReactEventHandler<T> | undefined;\n        onPlayingCapture?: ReactEventHandler<T> | undefined;\n        onProgress?: ReactEventHandler<T> | undefined;\n        onProgressCapture?: ReactEventHandler<T> | undefined;\n        onRateChange?: ReactEventHandler<T> | undefined;\n        onRateChangeCapture?: ReactEventHandler<T> | undefined;\n        onResize?: ReactEventHandler<T> | undefined;\n        onResizeCapture?: ReactEventHandler<T> | undefined;\n        onSeeked?: ReactEventHandler<T> | undefined;\n        onSeekedCapture?: ReactEventHandler<T> | undefined;\n        onSeeking?: ReactEventHandler<T> | undefined;\n        onSeekingCapture?: ReactEventHandler<T> | undefined;\n        onStalled?: ReactEventHandler<T> | undefined;\n        onStalledCapture?: ReactEventHandler<T> | undefined;\n        onSuspend?: ReactEventHandler<T> | undefined;\n        onSuspendCapture?: ReactEventHandler<T> | undefined;\n        onTimeUpdate?: ReactEventHandler<T> | undefined;\n        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;\n        onVolumeChange?: ReactEventHandler<T> | undefined;\n        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;\n        onWaiting?: ReactEventHandler<T> | undefined;\n        onWaitingCapture?: ReactEventHandler<T> | undefined;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T> | undefined;\n        onAuxClickCapture?: MouseEventHandler<T> | undefined;\n        onClick?: MouseEventHandler<T> | undefined;\n        onClickCapture?: MouseEventHandler<T> | undefined;\n        onContextMenu?: MouseEventHandler<T> | undefined;\n        onContextMenuCapture?: MouseEventHandler<T> | undefined;\n        onDoubleClick?: MouseEventHandler<T> | undefined;\n        onDoubleClickCapture?: MouseEventHandler<T> | undefined;\n        onDrag?: DragEventHandler<T> | undefined;\n        onDragCapture?: DragEventHandler<T> | undefined;\n        onDragEnd?: DragEventHandler<T> | undefined;\n        onDragEndCapture?: DragEventHandler<T> | undefined;\n        onDragEnter?: DragEventHandler<T> | undefined;\n        onDragEnterCapture?: DragEventHandler<T> | undefined;\n        onDragExit?: DragEventHandler<T> | undefined;\n        onDragExitCapture?: DragEventHandler<T> | undefined;\n        onDragLeave?: DragEventHandler<T> | undefined;\n        onDragLeaveCapture?: DragEventHandler<T> | undefined;\n        onDragOver?: DragEventHandler<T> | undefined;\n        onDragOverCapture?: DragEventHandler<T> | undefined;\n        onDragStart?: DragEventHandler<T> | undefined;\n        onDragStartCapture?: DragEventHandler<T> | undefined;\n        onDrop?: DragEventHandler<T> | undefined;\n        onDropCapture?: DragEventHandler<T> | undefined;\n        onMouseDown?: MouseEventHandler<T> | undefined;\n        onMouseDownCapture?: MouseEventHandler<T> | undefined;\n        onMouseEnter?: MouseEventHandler<T> | undefined;\n        onMouseLeave?: MouseEventHandler<T> | undefined;\n        onMouseMove?: MouseEventHandler<T> | undefined;\n        onMouseMoveCapture?: MouseEventHandler<T> | undefined;\n        onMouseOut?: MouseEventHandler<T> | undefined;\n        onMouseOutCapture?: MouseEventHandler<T> | undefined;\n        onMouseOver?: MouseEventHandler<T> | undefined;\n        onMouseOverCapture?: MouseEventHandler<T> | undefined;\n        onMouseUp?: MouseEventHandler<T> | undefined;\n        onMouseUpCapture?: MouseEventHandler<T> | undefined;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T> | undefined;\n        onSelectCapture?: ReactEventHandler<T> | undefined;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T> | undefined;\n        onTouchCancelCapture?: TouchEventHandler<T> | undefined;\n        onTouchEnd?: TouchEventHandler<T> | undefined;\n        onTouchEndCapture?: TouchEventHandler<T> | undefined;\n        onTouchMove?: TouchEventHandler<T> | undefined;\n        onTouchMoveCapture?: TouchEventHandler<T> | undefined;\n        onTouchStart?: TouchEventHandler<T> | undefined;\n        onTouchStartCapture?: TouchEventHandler<T> | undefined;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T> | undefined;\n        onPointerDownCapture?: PointerEventHandler<T> | undefined;\n        onPointerMove?: PointerEventHandler<T> | undefined;\n        onPointerMoveCapture?: PointerEventHandler<T> | undefined;\n        onPointerUp?: PointerEventHandler<T> | undefined;\n        onPointerUpCapture?: PointerEventHandler<T> | undefined;\n        onPointerCancel?: PointerEventHandler<T> | undefined;\n        onPointerCancelCapture?: PointerEventHandler<T> | undefined;\n        onPointerEnter?: PointerEventHandler<T> | undefined;\n        onPointerLeave?: PointerEventHandler<T> | undefined;\n        onPointerOver?: PointerEventHandler<T> | undefined;\n        onPointerOverCapture?: PointerEventHandler<T> | undefined;\n        onPointerOut?: PointerEventHandler<T> | undefined;\n        onPointerOutCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n\n        // UI Events\n        onScroll?: UIEventHandler<T> | undefined;\n        onScrollCapture?: UIEventHandler<T> | undefined;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T> | undefined;\n        onWheelCapture?: WheelEventHandler<T> | undefined;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T> | undefined;\n        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationEnd?: AnimationEventHandler<T> | undefined;\n        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationIteration?: AnimationEventHandler<T> | undefined;\n        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T> | undefined;\n        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        \"aria-activedescendant\"?: string | undefined;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        \"aria-atomic\"?: Booleanish | undefined;\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        \"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\" | undefined;\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        /**\n         * Defines a string value that labels the current element, which is intended to be converted into Braille.\n         * @see aria-label.\n         */\n        \"aria-braillelabel\"?: string | undefined;\n        /**\n         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n         * @see aria-roledescription.\n         */\n        \"aria-brailleroledescription\"?: string | undefined;\n        \"aria-busy\"?: Booleanish | undefined;\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        \"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        \"aria-colcount\"?: number | undefined;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        \"aria-colindex\"?: number | undefined;\n        /**\n         * Defines a human readable text alternative of aria-colindex.\n         * @see aria-rowindextext.\n         */\n        \"aria-colindextext\"?: string | undefined;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        \"aria-colspan\"?: number | undefined;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        \"aria-controls\"?: string | undefined;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        \"aria-current\"?: boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined;\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        \"aria-describedby\"?: string | undefined;\n        /**\n         * Defines a string value that describes or annotates the current element.\n         * @see related aria-describedby.\n         */\n        \"aria-description\"?: string | undefined;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        \"aria-details\"?: string | undefined;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        \"aria-disabled\"?: Booleanish | undefined;\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\" | undefined;\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        \"aria-errormessage\"?: string | undefined;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        \"aria-expanded\"?: Booleanish | undefined;\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        \"aria-flowto\"?: string | undefined;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-grabbed\"?: Booleanish | undefined;\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        \"aria-haspopup\"?: boolean | \"false\" | \"true\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\" | undefined;\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        \"aria-hidden\"?: Booleanish | undefined;\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        \"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\" | undefined;\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        \"aria-keyshortcuts\"?: string | undefined;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        \"aria-label\"?: string | undefined;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        \"aria-labelledby\"?: string | undefined;\n        /** Defines the hierarchical level of an element within a structure. */\n        \"aria-level\"?: number | undefined;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        \"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined;\n        /** Indicates whether an element is modal when displayed. */\n        \"aria-modal\"?: Booleanish | undefined;\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        \"aria-multiline\"?: Booleanish | undefined;\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        \"aria-multiselectable\"?: Booleanish | undefined;\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        \"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined;\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        \"aria-owns\"?: string | undefined;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        \"aria-placeholder\"?: string | undefined;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        \"aria-posinset\"?: number | undefined;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        \"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        \"aria-readonly\"?: Booleanish | undefined;\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        \"aria-relevant\"?:\n            | \"additions\"\n            | \"additions removals\"\n            | \"additions text\"\n            | \"all\"\n            | \"removals\"\n            | \"removals additions\"\n            | \"removals text\"\n            | \"text\"\n            | \"text additions\"\n            | \"text removals\"\n            | undefined;\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        \"aria-required\"?: Booleanish | undefined;\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        \"aria-roledescription\"?: string | undefined;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        \"aria-rowcount\"?: number | undefined;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        \"aria-rowindex\"?: number | undefined;\n        /**\n         * Defines a human readable text alternative of aria-rowindex.\n         * @see aria-colindextext.\n         */\n        \"aria-rowindextext\"?: string | undefined;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        \"aria-rowspan\"?: number | undefined;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        \"aria-selected\"?: Booleanish | undefined;\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        \"aria-setsize\"?: number | undefined;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined;\n        /** Defines the maximum allowed value for a range widget. */\n        \"aria-valuemax\"?: number | undefined;\n        /** Defines the minimum allowed value for a range widget. */\n        \"aria-valuemin\"?: number | undefined;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        \"aria-valuenow\"?: number | undefined;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        \"aria-valuetext\"?: string | undefined;\n    }\n\n    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions\n    type AriaRole =\n        | \"alert\"\n        | \"alertdialog\"\n        | \"application\"\n        | \"article\"\n        | \"banner\"\n        | \"button\"\n        | \"cell\"\n        | \"checkbox\"\n        | \"columnheader\"\n        | \"combobox\"\n        | \"complementary\"\n        | \"contentinfo\"\n        | \"definition\"\n        | \"dialog\"\n        | \"directory\"\n        | \"document\"\n        | \"feed\"\n        | \"figure\"\n        | \"form\"\n        | \"grid\"\n        | \"gridcell\"\n        | \"group\"\n        | \"heading\"\n        | \"img\"\n        | \"link\"\n        | \"list\"\n        | \"listbox\"\n        | \"listitem\"\n        | \"log\"\n        | \"main\"\n        | \"marquee\"\n        | \"math\"\n        | \"menu\"\n        | \"menubar\"\n        | \"menuitem\"\n        | \"menuitemcheckbox\"\n        | \"menuitemradio\"\n        | \"navigation\"\n        | \"none\"\n        | \"note\"\n        | \"option\"\n        | \"presentation\"\n        | \"progressbar\"\n        | \"radio\"\n        | \"radiogroup\"\n        | \"region\"\n        | \"row\"\n        | \"rowgroup\"\n        | \"rowheader\"\n        | \"scrollbar\"\n        | \"search\"\n        | \"searchbox\"\n        | \"separator\"\n        | \"slider\"\n        | \"spinbutton\"\n        | \"status\"\n        | \"switch\"\n        | \"tab\"\n        | \"table\"\n        | \"tablist\"\n        | \"tabpanel\"\n        | \"term\"\n        | \"textbox\"\n        | \"timer\"\n        | \"toolbar\"\n        | \"tooltip\"\n        | \"tree\"\n        | \"treegrid\"\n        | \"treeitem\"\n        | (string & {});\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean | undefined;\n        defaultValue?: string | number | readonly string[] | undefined;\n        suppressContentEditableWarning?: boolean | undefined;\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Standard HTML Attributes\n        accessKey?: string | undefined;\n        autoFocus?: boolean | undefined;\n        className?: string | undefined;\n        contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\" | undefined;\n        contextMenu?: string | undefined;\n        dir?: string | undefined;\n        draggable?: Booleanish | undefined;\n        hidden?: boolean | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        nonce?: string | undefined;\n        slot?: string | undefined;\n        spellCheck?: Booleanish | undefined;\n        style?: CSSProperties | undefined;\n        tabIndex?: number | undefined;\n        title?: string | undefined;\n        translate?: \"yes\" | \"no\" | undefined;\n\n        // Unknown\n        radioGroup?: string | undefined; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: AriaRole | undefined;\n\n        // RDFa Attributes\n        about?: string | undefined;\n        content?: string | undefined;\n        datatype?: string | undefined;\n        inlist?: any;\n        prefix?: string | undefined;\n        property?: string | undefined;\n        rel?: string | undefined;\n        resource?: string | undefined;\n        rev?: string | undefined;\n        typeof?: string | undefined;\n        vocab?: string | undefined;\n\n        // Non-standard Attributes\n        autoCapitalize?: string | undefined;\n        autoCorrect?: string | undefined;\n        autoSave?: string | undefined;\n        color?: string | undefined;\n        itemProp?: string | undefined;\n        itemScope?: boolean | undefined;\n        itemType?: string | undefined;\n        itemID?: string | undefined;\n        itemRef?: string | undefined;\n        results?: number | undefined;\n        security?: string | undefined;\n        unselectable?: \"on\" | \"off\" | undefined;\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}\n         */\n        inputMode?: \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\" | undefined;\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}\n         */\n        is?: string | undefined;\n    }\n\n    /**\n     * For internal usage only.\n     * Different release channels declare additional types of ReactNode this particular release channel accepts.\n     * App or library types should never augment this interface.\n     */\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string | undefined;\n        acceptCharset?: string | undefined;\n        action?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        alt?: string | undefined;\n        as?: string | undefined;\n        async?: boolean | undefined;\n        autoComplete?: string | undefined;\n        autoPlay?: boolean | undefined;\n        capture?: boolean | \"user\" | \"environment\" | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        charSet?: string | undefined;\n        challenge?: string | undefined;\n        checked?: boolean | undefined;\n        cite?: string | undefined;\n        classID?: string | undefined;\n        cols?: number | undefined;\n        colSpan?: number | undefined;\n        controls?: boolean | undefined;\n        coords?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        data?: string | undefined;\n        dateTime?: string | undefined;\n        default?: boolean | undefined;\n        defer?: boolean | undefined;\n        disabled?: boolean | undefined;\n        download?: any;\n        encType?: string | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        frameBorder?: number | string | undefined;\n        headers?: string | undefined;\n        height?: number | string | undefined;\n        high?: number | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        htmlFor?: string | undefined;\n        httpEquiv?: string | undefined;\n        integrity?: string | undefined;\n        keyParams?: string | undefined;\n        keyType?: string | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        list?: string | undefined;\n        loop?: boolean | undefined;\n        low?: number | undefined;\n        manifest?: string | undefined;\n        marginHeight?: number | undefined;\n        marginWidth?: number | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        media?: string | undefined;\n        mediaGroup?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        muted?: boolean | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        open?: boolean | undefined;\n        optimum?: number | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        preload?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        reversed?: boolean | undefined;\n        rows?: number | undefined;\n        rowSpan?: number | undefined;\n        sandbox?: string | undefined;\n        scope?: string | undefined;\n        scoped?: boolean | undefined;\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        selected?: boolean | undefined;\n        shape?: string | undefined;\n        size?: number | undefined;\n        sizes?: string | undefined;\n        span?: number | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        srcLang?: string | undefined;\n        srcSet?: string | undefined;\n        start?: number | undefined;\n        step?: number | string | undefined;\n        summary?: string | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        value?: string | readonly string[] | number | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n        wrap?: string | undefined;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | \"\"\n        | \"no-referrer\"\n        | \"no-referrer-when-downgrade\"\n        | \"origin\"\n        | \"origin-when-cross-origin\"\n        | \"same-origin\"\n        | \"strict-origin\"\n        | \"strict-origin-when-cross-origin\"\n        | \"unsafe-url\";\n\n    type HTMLAttributeAnchorTarget =\n        | \"_self\"\n        | \"_blank\"\n        | \"_parent\"\n        | \"_top\"\n        | (string & {});\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        ping?: string | undefined;\n        target?: HTMLAttributeAnchorTarget | undefined;\n        type?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n    }\n\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        coords?: string | undefined;\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        shape?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ]\n            | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        name?: string | undefined;\n        type?: \"submit\" | \"reset\" | \"button\" | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean | undefined;\n        onToggle?: ReactEventHandler<T> | undefined;\n        name?: string | undefined;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        onCancel?: ReactEventHandler<T> | undefined;\n        onClose?: ReactEventHandler<T> | undefined;\n        open?: boolean | undefined;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string | undefined;\n        action?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        autoComplete?: string | undefined;\n        encType?: string | undefined;\n        method?: string | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        target?: string | undefined;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string | undefined;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        /** @deprecated */\n        frameBorder?: number | string | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        /** @deprecated */\n        marginHeight?: number | undefined;\n        /** @deprecated */\n        marginWidth?: number | undefined;\n        name?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sandbox?: string | undefined;\n        /** @deprecated */\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        decoding?: \"async\" | \"auto\" | \"sync\" | undefined;\n        fetchPriority?: \"high\" | \"low\" | \"auto\";\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    type HTMLInputTypeAttribute =\n        | \"button\"\n        | \"checkbox\"\n        | \"color\"\n        | \"date\"\n        | \"datetime-local\"\n        | \"email\"\n        | \"file\"\n        | \"hidden\"\n        | \"image\"\n        | \"month\"\n        | \"number\"\n        | \"password\"\n        | \"radio\"\n        | \"range\"\n        | \"reset\"\n        | \"search\"\n        | \"submit\"\n        | \"tel\"\n        | \"text\"\n        | \"time\"\n        | \"url\"\n        | \"week\"\n        | (string & {});\n\n    type AutoFillAddressKind = \"billing\" | \"shipping\";\n    type AutoFillBase = \"\" | \"off\" | \"on\";\n    type AutoFillContactField =\n        | \"email\"\n        | \"tel\"\n        | \"tel-area-code\"\n        | \"tel-country-code\"\n        | \"tel-extension\"\n        | \"tel-local\"\n        | \"tel-local-prefix\"\n        | \"tel-local-suffix\"\n        | \"tel-national\";\n    type AutoFillContactKind = \"home\" | \"mobile\" | \"work\";\n    type AutoFillCredentialField = \"webauthn\";\n    type AutoFillNormalField =\n        | \"additional-name\"\n        | \"address-level1\"\n        | \"address-level2\"\n        | \"address-level3\"\n        | \"address-level4\"\n        | \"address-line1\"\n        | \"address-line2\"\n        | \"address-line3\"\n        | \"bday-day\"\n        | \"bday-month\"\n        | \"bday-year\"\n        | \"cc-csc\"\n        | \"cc-exp\"\n        | \"cc-exp-month\"\n        | \"cc-exp-year\"\n        | \"cc-family-name\"\n        | \"cc-given-name\"\n        | \"cc-name\"\n        | \"cc-number\"\n        | \"cc-type\"\n        | \"country\"\n        | \"country-name\"\n        | \"current-password\"\n        | \"family-name\"\n        | \"given-name\"\n        | \"honorific-prefix\"\n        | \"honorific-suffix\"\n        | \"name\"\n        | \"new-password\"\n        | \"one-time-code\"\n        | \"organization\"\n        | \"postal-code\"\n        | \"street-address\"\n        | \"transaction-amount\"\n        | \"transaction-currency\"\n        | \"username\";\n    type OptionalPrefixToken<T extends string> = `${T} ` | \"\";\n    type OptionalPostfixToken<T extends string> = ` ${T}` | \"\";\n    type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;\n    type AutoFillSection = `section-${string}`;\n    type AutoFill =\n        | AutoFillBase\n        | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<\n            AutoFillAddressKind\n        >}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;\n    type HTMLInputAutoCompleteAttribute = AutoFill | (string & {});\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string | undefined;\n        alt?: string | undefined;\n        autoComplete?: HTMLInputAutoCompleteAttribute | undefined;\n        capture?: boolean | \"user\" | \"environment\" | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean | undefined;\n        disabled?: boolean | undefined;\n        enterKeyHint?: \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ]\n            | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        height?: number | string | undefined;\n        list?: string | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        src?: string | undefined;\n        step?: number | string | undefined;\n        type?: HTMLInputTypeAttribute | undefined;\n        value?: string | readonly string[] | number | undefined;\n        width?: number | string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        challenge?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        keyType?: string | undefined;\n        keyParams?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        fetchPriority?: \"high\" | \"low\" | \"auto\";\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        integrity?: string | undefined;\n        media?: string | undefined;\n        imageSrcSet?: string | undefined;\n        imageSizes?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        type?: string | undefined;\n        charSet?: string | undefined;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string | undefined;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean | undefined;\n        controls?: boolean | undefined;\n        controlsList?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        loop?: boolean | undefined;\n        mediaGroup?: string | undefined;\n        muted?: boolean | undefined;\n        playsInline?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string | undefined;\n        content?: string | undefined;\n        httpEquiv?: string | undefined;\n        media?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        high?: number | undefined;\n        low?: number | undefined;\n        max?: number | string | undefined;\n        min?: number | string | undefined;\n        optimum?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string | undefined;\n        data?: string | undefined;\n        form?: string | undefined;\n        height?: number | string | undefined;\n        name?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean | undefined;\n        start?: number | undefined;\n        type?: \"1\" | \"a\" | \"A\" | \"i\" | \"I\" | undefined;\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n        selected?: boolean | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean | undefined;\n        /** @deprecated */\n        charSet?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        defer?: boolean | undefined;\n        integrity?: string | undefined;\n        noModule?: boolean | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        media?: string | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string | undefined;\n        scoped?: boolean | undefined;\n        type?: string | undefined;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | undefined;\n        bgcolor?: string | undefined;\n        border?: number | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        frame?: boolean | undefined;\n        rules?: \"none\" | \"groups\" | \"rows\" | \"columns\" | \"all\" | undefined;\n        summary?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        cols?: number | undefined;\n        dirName?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        name?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        rows?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n        wrap?: string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | undefined;\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string | undefined;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        src?: string | undefined;\n        srcLang?: string | undefined;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        width?: number | string | undefined;\n        disablePictureInPicture?: boolean | undefined;\n        disableRemotePlayback?: boolean | undefined;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string | undefined;\n        color?: string | undefined;\n        height?: number | string | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        max?: number | string | undefined;\n        media?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        name?: string | undefined;\n        style?: CSSProperties | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: AriaRole | undefined;\n        tabIndex?: number | undefined;\n        crossOrigin?: CrossOrigin;\n\n        // SVG Specific attributes\n        accentHeight?: number | string | undefined;\n        accumulate?: \"none\" | \"sum\" | undefined;\n        additive?: \"replace\" | \"sum\" | undefined;\n        alignmentBaseline?:\n            | \"auto\"\n            | \"baseline\"\n            | \"before-edge\"\n            | \"text-before-edge\"\n            | \"middle\"\n            | \"central\"\n            | \"after-edge\"\n            | \"text-after-edge\"\n            | \"ideographic\"\n            | \"alphabetic\"\n            | \"hanging\"\n            | \"mathematical\"\n            | \"inherit\"\n            | undefined;\n        allowReorder?: \"no\" | \"yes\" | undefined;\n        alphabetic?: number | string | undefined;\n        amplitude?: number | string | undefined;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined;\n        ascent?: number | string | undefined;\n        attributeName?: string | undefined;\n        attributeType?: string | undefined;\n        autoReverse?: Booleanish | undefined;\n        azimuth?: number | string | undefined;\n        baseFrequency?: number | string | undefined;\n        baselineShift?: number | string | undefined;\n        baseProfile?: number | string | undefined;\n        bbox?: number | string | undefined;\n        begin?: number | string | undefined;\n        bias?: number | string | undefined;\n        by?: number | string | undefined;\n        calcMode?: number | string | undefined;\n        capHeight?: number | string | undefined;\n        clip?: number | string | undefined;\n        clipPath?: string | undefined;\n        clipPathUnits?: number | string | undefined;\n        clipRule?: number | string | undefined;\n        colorInterpolation?: number | string | undefined;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\" | undefined;\n        colorProfile?: number | string | undefined;\n        colorRendering?: number | string | undefined;\n        contentScriptType?: number | string | undefined;\n        contentStyleType?: number | string | undefined;\n        cursor?: number | string | undefined;\n        cx?: number | string | undefined;\n        cy?: number | string | undefined;\n        d?: string | undefined;\n        decelerate?: number | string | undefined;\n        descent?: number | string | undefined;\n        diffuseConstant?: number | string | undefined;\n        direction?: number | string | undefined;\n        display?: number | string | undefined;\n        divisor?: number | string | undefined;\n        dominantBaseline?: number | string | undefined;\n        dur?: number | string | undefined;\n        dx?: number | string | undefined;\n        dy?: number | string | undefined;\n        edgeMode?: number | string | undefined;\n        elevation?: number | string | undefined;\n        enableBackground?: number | string | undefined;\n        end?: number | string | undefined;\n        exponent?: number | string | undefined;\n        externalResourcesRequired?: Booleanish | undefined;\n        fill?: string | undefined;\n        fillOpacity?: number | string | undefined;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\" | undefined;\n        filter?: string | undefined;\n        filterRes?: number | string | undefined;\n        filterUnits?: number | string | undefined;\n        floodColor?: number | string | undefined;\n        floodOpacity?: number | string | undefined;\n        focusable?: Booleanish | \"auto\" | undefined;\n        fontFamily?: string | undefined;\n        fontSize?: number | string | undefined;\n        fontSizeAdjust?: number | string | undefined;\n        fontStretch?: number | string | undefined;\n        fontStyle?: number | string | undefined;\n        fontVariant?: number | string | undefined;\n        fontWeight?: number | string | undefined;\n        format?: number | string | undefined;\n        fr?: number | string | undefined;\n        from?: number | string | undefined;\n        fx?: number | string | undefined;\n        fy?: number | string | undefined;\n        g1?: number | string | undefined;\n        g2?: number | string | undefined;\n        glyphName?: number | string | undefined;\n        glyphOrientationHorizontal?: number | string | undefined;\n        glyphOrientationVertical?: number | string | undefined;\n        glyphRef?: number | string | undefined;\n        gradientTransform?: string | undefined;\n        gradientUnits?: string | undefined;\n        hanging?: number | string | undefined;\n        horizAdvX?: number | string | undefined;\n        horizOriginX?: number | string | undefined;\n        href?: string | undefined;\n        ideographic?: number | string | undefined;\n        imageRendering?: number | string | undefined;\n        in2?: number | string | undefined;\n        in?: string | undefined;\n        intercept?: number | string | undefined;\n        k1?: number | string | undefined;\n        k2?: number | string | undefined;\n        k3?: number | string | undefined;\n        k4?: number | string | undefined;\n        k?: number | string | undefined;\n        kernelMatrix?: number | string | undefined;\n        kernelUnitLength?: number | string | undefined;\n        kerning?: number | string | undefined;\n        keyPoints?: number | string | undefined;\n        keySplines?: number | string | undefined;\n        keyTimes?: number | string | undefined;\n        lengthAdjust?: number | string | undefined;\n        letterSpacing?: number | string | undefined;\n        lightingColor?: number | string | undefined;\n        limitingConeAngle?: number | string | undefined;\n        local?: number | string | undefined;\n        markerEnd?: string | undefined;\n        markerHeight?: number | string | undefined;\n        markerMid?: string | undefined;\n        markerStart?: string | undefined;\n        markerUnits?: number | string | undefined;\n        markerWidth?: number | string | undefined;\n        mask?: string | undefined;\n        maskContentUnits?: number | string | undefined;\n        maskUnits?: number | string | undefined;\n        mathematical?: number | string | undefined;\n        mode?: number | string | undefined;\n        numOctaves?: number | string | undefined;\n        offset?: number | string | undefined;\n        opacity?: number | string | undefined;\n        operator?: number | string | undefined;\n        order?: number | string | undefined;\n        orient?: number | string | undefined;\n        orientation?: number | string | undefined;\n        origin?: number | string | undefined;\n        overflow?: number | string | undefined;\n        overlinePosition?: number | string | undefined;\n        overlineThickness?: number | string | undefined;\n        paintOrder?: number | string | undefined;\n        panose1?: number | string | undefined;\n        path?: string | undefined;\n        pathLength?: number | string | undefined;\n        patternContentUnits?: string | undefined;\n        patternTransform?: number | string | undefined;\n        patternUnits?: string | undefined;\n        pointerEvents?: number | string | undefined;\n        points?: string | undefined;\n        pointsAtX?: number | string | undefined;\n        pointsAtY?: number | string | undefined;\n        pointsAtZ?: number | string | undefined;\n        preserveAlpha?: Booleanish | undefined;\n        preserveAspectRatio?: string | undefined;\n        primitiveUnits?: number | string | undefined;\n        r?: number | string | undefined;\n        radius?: number | string | undefined;\n        refX?: number | string | undefined;\n        refY?: number | string | undefined;\n        renderingIntent?: number | string | undefined;\n        repeatCount?: number | string | undefined;\n        repeatDur?: number | string | undefined;\n        requiredExtensions?: number | string | undefined;\n        requiredFeatures?: number | string | undefined;\n        restart?: number | string | undefined;\n        result?: string | undefined;\n        rotate?: number | string | undefined;\n        rx?: number | string | undefined;\n        ry?: number | string | undefined;\n        scale?: number | string | undefined;\n        seed?: number | string | undefined;\n        shapeRendering?: number | string | undefined;\n        slope?: number | string | undefined;\n        spacing?: number | string | undefined;\n        specularConstant?: number | string | undefined;\n        specularExponent?: number | string | undefined;\n        speed?: number | string | undefined;\n        spreadMethod?: string | undefined;\n        startOffset?: number | string | undefined;\n        stdDeviation?: number | string | undefined;\n        stemh?: number | string | undefined;\n        stemv?: number | string | undefined;\n        stitchTiles?: number | string | undefined;\n        stopColor?: string | undefined;\n        stopOpacity?: number | string | undefined;\n        strikethroughPosition?: number | string | undefined;\n        strikethroughThickness?: number | string | undefined;\n        string?: number | string | undefined;\n        stroke?: string | undefined;\n        strokeDasharray?: string | number | undefined;\n        strokeDashoffset?: string | number | undefined;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\" | undefined;\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\" | undefined;\n        strokeMiterlimit?: number | string | undefined;\n        strokeOpacity?: number | string | undefined;\n        strokeWidth?: number | string | undefined;\n        surfaceScale?: number | string | undefined;\n        systemLanguage?: number | string | undefined;\n        tableValues?: number | string | undefined;\n        targetX?: number | string | undefined;\n        targetY?: number | string | undefined;\n        textAnchor?: string | undefined;\n        textDecoration?: number | string | undefined;\n        textLength?: number | string | undefined;\n        textRendering?: number | string | undefined;\n        to?: number | string | undefined;\n        transform?: string | undefined;\n        u1?: number | string | undefined;\n        u2?: number | string | undefined;\n        underlinePosition?: number | string | undefined;\n        underlineThickness?: number | string | undefined;\n        unicode?: number | string | undefined;\n        unicodeBidi?: number | string | undefined;\n        unicodeRange?: number | string | undefined;\n        unitsPerEm?: number | string | undefined;\n        vAlphabetic?: number | string | undefined;\n        values?: string | undefined;\n        vectorEffect?: number | string | undefined;\n        version?: string | undefined;\n        vertAdvY?: number | string | undefined;\n        vertOriginX?: number | string | undefined;\n        vertOriginY?: number | string | undefined;\n        vHanging?: number | string | undefined;\n        vIdeographic?: number | string | undefined;\n        viewBox?: string | undefined;\n        viewTarget?: number | string | undefined;\n        visibility?: number | string | undefined;\n        vMathematical?: number | string | undefined;\n        widths?: number | string | undefined;\n        wordSpacing?: number | string | undefined;\n        writingMode?: number | string | undefined;\n        x1?: number | string | undefined;\n        x2?: number | string | undefined;\n        x?: number | string | undefined;\n        xChannelSelector?: string | undefined;\n        xHeight?: number | string | undefined;\n        xlinkActuate?: string | undefined;\n        xlinkArcrole?: string | undefined;\n        xlinkHref?: string | undefined;\n        xlinkRole?: string | undefined;\n        xlinkShow?: string | undefined;\n        xlinkTitle?: string | undefined;\n        xlinkType?: string | undefined;\n        xmlBase?: string | undefined;\n        xmlLang?: string | undefined;\n        xmlns?: string | undefined;\n        xmlnsXlink?: string | undefined;\n        xmlSpace?: string | undefined;\n        y1?: number | string | undefined;\n        y2?: number | string | undefined;\n        y?: number | string | undefined;\n        yChannelSelector?: string | undefined;\n        z?: number | string | undefined;\n        zoomAndPan?: string | undefined;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean | undefined;\n        allowpopups?: boolean | undefined;\n        autosize?: boolean | undefined;\n        blinkfeatures?: string | undefined;\n        disableblinkfeatures?: string | undefined;\n        disableguestresize?: boolean | undefined;\n        disablewebsecurity?: boolean | undefined;\n        guestinstance?: string | undefined;\n        httpreferrer?: string | undefined;\n        nodeintegration?: boolean | undefined;\n        partition?: string | undefined;\n        plugins?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n        useragent?: string | undefined;\n        webpreferences?: string | undefined;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG {}\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>\n            : undefined extends T[K] ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>;\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated - Use `typeof React.Children` instead.\n     */\n    // Sync with type of `const Children`.\n    interface ReactChildren {\n        map<T, C>(\n            children: C | readonly C[],\n            fn: (child: C, index: number) => T,\n        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack?: string | null;\n        digest?: string | null;\n    }\n\n    // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts\n    namespace JSX {\n        type ElementType = GlobalJSXElementType;\n        interface Element extends GlobalJSXElement {}\n        interface ElementClass extends GlobalJSXElementClass {}\n        interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}\n        interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}\n\n        type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}\n        interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}\n        interface IntrinsicElements extends GlobalJSXIntrinsicElements {}\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n        : string extends keyof P ? P\n            // Prefer declared types which are not exactly any\n        :\n            & Pick<P, NotExactlyAnyPropertyKeys<P>>\n            // For props which are exactly any, use the type inferred from propTypes if present\n            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n            // Keep leftover props not specified in propTypes\n            & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\ntype InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>\n    : C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P;\n\ndeclare global {\n    /**\n     * @deprecated Use `React.JSX` instead of the global `JSX` namespace.\n     */\n    namespace JSX {\n        // We don't just alias React.ElementType because React.ElementType\n        // historically does more than we need it to.\n        // E.g. it also contains .propTypes and so TS also verifies the declared\n        // props type does match the declared .propTypes.\n        // But if libraries declared their .propTypes but not props type,\n        // or they mismatch, you won't be able to use the class component\n        // as a JSX.ElementType.\n        // We could fix this everywhere but we're ultimately not interested in\n        // .propTypes assignability so we might as well drop it entirely here to\n        //  reduce the work of the type-checker.\n        // TODO: Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>\n        type ElementType = string | React.JSXElementConstructor<any>;\n        interface Element extends React.ReactElement<any, any> {}\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty {\n            props: {};\n        }\n        interface ElementChildrenAttribute {\n            children: {};\n        }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends\n            React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n            : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends React.Attributes {}\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> {}\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGLineElementAttributes<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            set: React.SVGProps<SVGSetElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGTextElementAttributes<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n\n// React.JSX needs to point to global.JSX to keep global module augmentations intact.\n// But we can't access global.JSX so we need to create these aliases instead.\n// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX\ntype GlobalJSXElementType = JSX.ElementType;\ninterface GlobalJSXElement extends JSX.Element {}\ninterface GlobalJSXElementClass extends JSX.ElementClass {}\ninterface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}\ninterface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}\n\ntype GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;\n\ninterface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}\ninterface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}\n\ninterface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}\n","../@types+react@18.2.66/node_modules/@types/react/global.d.ts":"/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event {}\ninterface AnimationEvent extends Event {}\ninterface ClipboardEvent extends Event {}\ninterface CompositionEvent extends Event {}\ninterface DragEvent extends Event {}\ninterface FocusEvent extends Event {}\ninterface KeyboardEvent extends Event {}\ninterface MouseEvent extends Event {}\ninterface TouchEvent extends Event {}\ninterface PointerEvent extends Event {}\ninterface TransitionEvent extends Event {}\ninterface UIEvent extends Event {}\ninterface WheelEvent extends Event {}\n\ninterface EventTarget {}\ninterface Document {}\ninterface DataTransfer {}\ninterface StyleMedia {}\n\ninterface Element {}\ninterface DocumentFragment {}\n\ninterface HTMLElement extends Element {}\ninterface HTMLAnchorElement extends HTMLElement {}\ninterface HTMLAreaElement extends HTMLElement {}\ninterface HTMLAudioElement extends HTMLElement {}\ninterface HTMLBaseElement extends HTMLElement {}\ninterface HTMLBodyElement extends HTMLElement {}\ninterface HTMLBRElement extends HTMLElement {}\ninterface HTMLButtonElement extends HTMLElement {}\ninterface HTMLCanvasElement extends HTMLElement {}\ninterface HTMLDataElement extends HTMLElement {}\ninterface HTMLDataListElement extends HTMLElement {}\ninterface HTMLDetailsElement extends HTMLElement {}\ninterface HTMLDialogElement extends HTMLElement {}\ninterface HTMLDivElement extends HTMLElement {}\ninterface HTMLDListElement extends HTMLElement {}\ninterface HTMLEmbedElement extends HTMLElement {}\ninterface HTMLFieldSetElement extends HTMLElement {}\ninterface HTMLFormElement extends HTMLElement {}\ninterface HTMLHeadingElement extends HTMLElement {}\ninterface HTMLHeadElement extends HTMLElement {}\ninterface HTMLHRElement extends HTMLElement {}\ninterface HTMLHtmlElement extends HTMLElement {}\ninterface HTMLIFrameElement extends HTMLElement {}\ninterface HTMLImageElement extends HTMLElement {}\ninterface HTMLInputElement extends HTMLElement {}\ninterface HTMLModElement extends HTMLElement {}\ninterface HTMLLabelElement extends HTMLElement {}\ninterface HTMLLegendElement extends HTMLElement {}\ninterface HTMLLIElement extends HTMLElement {}\ninterface HTMLLinkElement extends HTMLElement {}\ninterface HTMLMapElement extends HTMLElement {}\ninterface HTMLMetaElement extends HTMLElement {}\ninterface HTMLMeterElement extends HTMLElement {}\ninterface HTMLObjectElement extends HTMLElement {}\ninterface HTMLOListElement extends HTMLElement {}\ninterface HTMLOptGroupElement extends HTMLElement {}\ninterface HTMLOptionElement extends HTMLElement {}\ninterface HTMLOutputElement extends HTMLElement {}\ninterface HTMLParagraphElement extends HTMLElement {}\ninterface HTMLParamElement extends HTMLElement {}\ninterface HTMLPreElement extends HTMLElement {}\ninterface HTMLProgressElement extends HTMLElement {}\ninterface HTMLQuoteElement extends HTMLElement {}\ninterface HTMLSlotElement extends HTMLElement {}\ninterface HTMLScriptElement extends HTMLElement {}\ninterface HTMLSelectElement extends HTMLElement {}\ninterface HTMLSourceElement extends HTMLElement {}\ninterface HTMLSpanElement extends HTMLElement {}\ninterface HTMLStyleElement extends HTMLElement {}\ninterface HTMLTableElement extends HTMLElement {}\ninterface HTMLTableColElement extends HTMLElement {}\ninterface HTMLTableDataCellElement extends HTMLElement {}\ninterface HTMLTableHeaderCellElement extends HTMLElement {}\ninterface HTMLTableRowElement extends HTMLElement {}\ninterface HTMLTableSectionElement extends HTMLElement {}\ninterface HTMLTemplateElement extends HTMLElement {}\ninterface HTMLTextAreaElement extends HTMLElement {}\ninterface HTMLTimeElement extends HTMLElement {}\ninterface HTMLTitleElement extends HTMLElement {}\ninterface HTMLTrackElement extends HTMLElement {}\ninterface HTMLUListElement extends HTMLElement {}\ninterface HTMLVideoElement extends HTMLElement {}\ninterface HTMLWebViewElement extends HTMLElement {}\n\ninterface SVGElement extends Element {}\ninterface SVGSVGElement extends SVGElement {}\ninterface SVGCircleElement extends SVGElement {}\ninterface SVGClipPathElement extends SVGElement {}\ninterface SVGDefsElement extends SVGElement {}\ninterface SVGDescElement extends SVGElement {}\ninterface SVGEllipseElement extends SVGElement {}\ninterface SVGFEBlendElement extends SVGElement {}\ninterface SVGFEColorMatrixElement extends SVGElement {}\ninterface SVGFEComponentTransferElement extends SVGElement {}\ninterface SVGFECompositeElement extends SVGElement {}\ninterface SVGFEConvolveMatrixElement extends SVGElement {}\ninterface SVGFEDiffuseLightingElement extends SVGElement {}\ninterface SVGFEDisplacementMapElement extends SVGElement {}\ninterface SVGFEDistantLightElement extends SVGElement {}\ninterface SVGFEDropShadowElement extends SVGElement {}\ninterface SVGFEFloodElement extends SVGElement {}\ninterface SVGFEFuncAElement extends SVGElement {}\ninterface SVGFEFuncBElement extends SVGElement {}\ninterface SVGFEFuncGElement extends SVGElement {}\ninterface SVGFEFuncRElement extends SVGElement {}\ninterface SVGFEGaussianBlurElement extends SVGElement {}\ninterface SVGFEImageElement extends SVGElement {}\ninterface SVGFEMergeElement extends SVGElement {}\ninterface SVGFEMergeNodeElement extends SVGElement {}\ninterface SVGFEMorphologyElement extends SVGElement {}\ninterface SVGFEOffsetElement extends SVGElement {}\ninterface SVGFEPointLightElement extends SVGElement {}\ninterface SVGFESpecularLightingElement extends SVGElement {}\ninterface SVGFESpotLightElement extends SVGElement {}\ninterface SVGFETileElement extends SVGElement {}\ninterface SVGFETurbulenceElement extends SVGElement {}\ninterface SVGFilterElement extends SVGElement {}\ninterface SVGForeignObjectElement extends SVGElement {}\ninterface SVGGElement extends SVGElement {}\ninterface SVGImageElement extends SVGElement {}\ninterface SVGLineElement extends SVGElement {}\ninterface SVGLinearGradientElement extends SVGElement {}\ninterface SVGMarkerElement extends SVGElement {}\ninterface SVGMaskElement extends SVGElement {}\ninterface SVGMetadataElement extends SVGElement {}\ninterface SVGPathElement extends SVGElement {}\ninterface SVGPatternElement extends SVGElement {}\ninterface SVGPolygonElement extends SVGElement {}\ninterface SVGPolylineElement extends SVGElement {}\ninterface SVGRadialGradientElement extends SVGElement {}\ninterface SVGRectElement extends SVGElement {}\ninterface SVGSetElement extends SVGElement {}\ninterface SVGStopElement extends SVGElement {}\ninterface SVGSwitchElement extends SVGElement {}\ninterface SVGSymbolElement extends SVGElement {}\ninterface SVGTextElement extends SVGElement {}\ninterface SVGTextPathElement extends SVGElement {}\ninterface SVGTSpanElement extends SVGElement {}\ninterface SVGUseElement extends SVGElement {}\ninterface SVGViewElement extends SVGElement {}\n\ninterface FormData {}\ninterface Text {}\ninterface TouchList {}\ninterface WebGLRenderingContext {}\ninterface WebGL2RenderingContext {}\n\ninterface TrustedHTML {}\n","../@types+react@18.2.66/node_modules/@types/react/experimental.d.ts":"/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,\n// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are\n// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.\n//\n// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js\n// is a good place to start looking for details; it generally calls prop validation functions or delegates\n// all tasks done as part of the render phase (the concurrent part of the React update cycle).\n//\n// Suspense-related handling can be found in ReactFiberThrow.js.\n\nimport React = require(\"./canary\");\n\nexport {};\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\ndeclare module \".\" {\n    /**\n     * @internal Use `Awaited<ReactNode>` instead\n     */\n    // Helper type to enable `Awaited<ReactNode>`.\n    // Must be a copy of the non-thenables of `ReactNode`.\n    type AwaitedReactNode =\n        | ReactElement\n        | string\n        | number\n        | Iterable<AwaitedReactNode>\n        | ReactPortal\n        | boolean\n        | null\n        | undefined;\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {\n        promises: Promise<AwaitedReactNode>;\n    }\n\n    export interface SuspenseProps {\n        /**\n         * The presence of this prop indicates that the content is computationally expensive to render.\n         * In other words, the tree is CPU bound and not I/O bound (e.g. due to fetching data).\n         * @see {@link https://github.com/facebook/react/pull/19936}\n         */\n        unstable_expectedLoadTime?: number | undefined;\n    }\n\n    export type SuspenseListRevealOrder = \"forwards\" | \"backwards\" | \"together\";\n    export type SuspenseListTailMode = \"collapsed\" | \"hidden\";\n\n    export interface SuspenseListCommonProps {\n        /**\n         * Note that SuspenseList require more than one child;\n         * it is a runtime warning to provide only a single child.\n         *\n         * It does, however, allow those children to be wrapped inside a single\n         * level of `<React.Fragment>`.\n         */\n        children: ReactElement | Iterable<ReactElement>;\n    }\n\n    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder: \"forwards\" | \"backwards\";\n        /**\n         * Dictates how unloaded items in a SuspenseList is shown.\n         *\n         * - By default, `SuspenseList` will show all fallbacks in the list.\n         * - `collapsed` shows only the next fallback in the list.\n         * - `hidden` doesn’t show any unloaded items.\n         */\n        tail?: SuspenseListTailMode | undefined;\n    }\n\n    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps[\"revealOrder\"]> | undefined;\n        /**\n         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.\n         */\n        tail?: never | undefined;\n    }\n\n    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;\n\n    /**\n     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order\n     * in which these components are revealed to the user.\n     *\n     * When multiple components need to fetch data, this data may arrive in an unpredictable order.\n     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list\n     * until previous items have been displayed (this behavior is adjustable).\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist\n     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist\n     */\n    export const unstable_SuspenseList: ExoticComponent<SuspenseListProps>;\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    export function experimental_useEffectEvent<T extends Function>(event: T): T;\n\n    type Reference = object;\n    type TaintableUniqueValue = string | bigint | ArrayBufferView;\n    function experimental_taintUniqueValue(\n        message: string | undefined,\n        lifetime: Reference,\n        value: TaintableUniqueValue,\n    ): void;\n    function experimental_taintObjectReference(message: string | undefined, object: Reference): void;\n}\n","../@types+react@18.2.66/node_modules/@types/react/canary.d.ts":"/**\n * These are types for things that are present in the React `canary` release channel.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/canary\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/canary'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/canary\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react/src/React.js to see how the exports are declared,\n\nimport React = require(\".\");\n\nexport {};\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\ndeclare module \".\" {\n    interface ThenableImpl<T> {\n        then(onFulfill: (value: T) => unknown, onReject: (error: unknown) => unknown): void | PromiseLike<unknown>;\n    }\n    interface UntrackedThenable<T> extends ThenableImpl<T> {\n        status?: void;\n    }\n\n    export interface PendingThenable<T> extends ThenableImpl<T> {\n        status: \"pending\";\n    }\n\n    export interface FulfilledThenable<T> extends ThenableImpl<T> {\n        status: \"fulfilled\";\n        value: T;\n    }\n\n    export interface RejectedThenable<T> extends ThenableImpl<T> {\n        status: \"rejected\";\n        reason: unknown;\n    }\n\n    export type Thenable<T> = UntrackedThenable<T> | PendingThenable<T> | FulfilledThenable<T> | RejectedThenable<T>;\n\n    export type Usable<T> = Thenable<T> | Context<T>;\n\n    export function use<T>(usable: Usable<T>): T;\n\n    interface ServerContextJSONArray extends ReadonlyArray<ServerContextJSONValue> {}\n    export type ServerContextJSONValue =\n        | string\n        | boolean\n        | number\n        | null\n        | ServerContextJSONArray\n        | { [key: string]: ServerContextJSONValue };\n    export interface ServerContext<T extends ServerContextJSONValue> {\n        Provider: Provider<T>;\n    }\n    /**\n     * Accepts a context object (the value returned from `React.createContext` or `React.createServerContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useContext\n     */\n    function useContext<T extends ServerContextJSONValue>(context: ServerContext<T>): T;\n    export function createServerContext<T extends ServerContextJSONValue>(\n        globalName: string,\n        defaultValue: T,\n    ): ServerContext<T>;\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    export function cache<CachedFunction extends Function>(fn: CachedFunction): CachedFunction;\n\n    export function unstable_useCacheRefresh(): () => void;\n\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {\n        functions: (formData: FormData) => void;\n    }\n\n    export interface TransitionStartFunction {\n        /**\n         * Marks all state updates inside the async function as transitions\n         *\n         * @see {https://react.dev/reference/react/useTransition#starttransition}\n         *\n         * @param callback\n         */\n        (callback: () => Promise<VoidOrUndefinedOnly>): void;\n    }\n\n    function useOptimistic<State>(\n        passthrough: State,\n    ): [State, (action: State | ((pendingState: State) => State)) => void];\n    function useOptimistic<State, Action>(\n        passthrough: State,\n        reducer: (state: State, action: Action) => State,\n    ): [State, (action: Action) => void];\n}\n","../@types+react@18.2.66/node_modules/@types/react/ts5.0/jsx-runtime.d.ts":"import * as React from \"./\";\nexport { Fragment } from \"./\";\n\nexport namespace JSX {\n    interface Element extends React.JSX.Element {}\n    interface ElementClass extends React.JSX.ElementClass {}\n    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}\n    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}\n    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;\n    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}\n    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}\n    interface IntrinsicElements extends React.JSX.IntrinsicElements {}\n}\n\n/**\n * Create a React element.\n *\n * You should not use this function directly. Use JSX and a transpiler instead.\n */\nexport function jsx(\n    type: React.ElementType,\n    props: unknown,\n    key?: React.Key,\n): React.ReactElement;\n\n/**\n * Create a React element.\n *\n * You should not use this function directly. Use JSX and a transpiler instead.\n */\nexport function jsxs(\n    type: React.ElementType,\n    props: unknown,\n    key?: React.Key,\n): React.ReactElement;\n","../@types+react@18.2.66/node_modules/@types/react/ts5.0/jsx-dev-runtime.d.ts":"import * as React from \"./\";\nexport { Fragment } from \"./\";\n\nexport namespace JSX {\n    interface Element extends React.JSX.Element {}\n    interface ElementClass extends React.JSX.ElementClass {}\n    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}\n    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}\n    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;\n    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}\n    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}\n    interface IntrinsicElements extends React.JSX.IntrinsicElements {}\n}\n\nexport interface JSXSource {\n    /**\n     * The source file where the element originates from.\n     */\n    fileName?: string | undefined;\n\n    /**\n     * The line number where the element was created.\n     */\n    lineNumber?: number | undefined;\n\n    /**\n     * The column number where the element was created.\n     */\n    columnNumber?: number | undefined;\n}\n\n/**\n * Create a React element.\n *\n * You should not use this function directly. Use JSX and a transpiler instead.\n */\nexport function jsxDEV(\n    type: React.ElementType,\n    props: unknown,\n    key: React.Key | undefined,\n    isStatic: boolean,\n    source?: JSXSource,\n    self?: unknown,\n): React.ReactElement;\n","../@types+react@18.2.66/node_modules/@types/react/ts5.0/index.d.ts":"// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from \"csstype\";\nimport * as PropTypes from \"prop-types\";\nimport { Interaction as SchedulerInteraction } from \"scheduler/tracing\";\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\n\n/**\n * Used to represent DOM API's where users can either pass\n * true or false as a boolean or as its equivalent strings.\n */\ntype Booleanish = boolean | \"true\" | \"false\";\n\n/**\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}\n */\ntype CrossOrigin = \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n\n/**\n * The function returned from an effect passed to {@link React.useEffect useEffect},\n * which can be used to clean up the effect when the component unmounts.\n *\n * @see {@link https://react.dev/reference/react/useEffect React Docs}\n */\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\n// eslint-disable-next-line @definitelytyped/export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    /**\n     * Used to retrieve the possible components which accept a given set of props.\n     *\n     * Can be passed no type parameters to get a union of all possible components\n     * and tags.\n     *\n     * Is a superset of {@link ComponentType}.\n     *\n     * @template P The props to match against. If not passed, defaults to any.\n     * @template Tag An optional tag to match against. If not passed, attempts to match against all possible tags.\n     *\n     * @example\n     *\n     * ```tsx\n     * // All components and tags (img, embed etc.)\n     * // which accept `src`\n     * type SrcComponents = ElementType<{ src: any }>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // All components\n     * type AllComponents = ElementType;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // All custom components which match `src`, and tags which\n     * // match `src`, narrowed down to just `audio` and `embed`\n     * type SrcComponents = ElementType<{ src: any }, 'audio' | 'embed'>;\n     * ```\n     */\n    type ElementType<P = any, Tag extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements> =\n        | { [K in Tag]: P extends JSX.IntrinsicElements[K] ? K : never }[Tag]\n        | ComponentType<P>;\n\n    /**\n     * Represents any user-defined component, either as a function or a class.\n     *\n     * Similar to {@link JSXElementConstructor}, but with extra properties like\n     * {@link FunctionComponent.defaultProps defaultProps } and\n     * {@link ComponentClass.contextTypes contextTypes}.\n     *\n     * @template P The props the component accepts.\n     *\n     * @see {@link ComponentClass}\n     * @see {@link FunctionComponent}\n     */\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    /**\n     * Represents any user-defined component, either as a function or a class.\n     *\n     * Similar to {@link ComponentType}, but without extra properties like\n     * {@link FunctionComponent.defaultProps defaultProps } and\n     * {@link ComponentClass.contextTypes contextTypes}.\n     *\n     * @template P The props the component accepts.\n     */\n    type JSXElementConstructor<P> =\n        | ((\n            props: P,\n            /**\n             * @deprecated\n             *\n             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components React Docs}\n             */\n            deprecatedLegacyContext?: any,\n        ) => ReactElement<any, any> | null)\n        | (new(\n            props: P,\n            /**\n             * @deprecated\n             *\n             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}\n             */\n            deprecatedLegacyContext?: any,\n        ) => Component<any, any>);\n\n    /**\n     * A readonly ref container where {@link current} cannot be mutated.\n     *\n     * Created by {@link createRef}, or {@link useRef} when passed `null`.\n     *\n     * @template T The type of the ref's value.\n     *\n     * @example\n     *\n     * ```tsx\n     * const ref = createRef<HTMLDivElement>();\n     *\n     * ref.current = document.createElement('div'); // Error\n     * ```\n     */\n    interface RefObject<T> {\n        /**\n         * The current value of the ref.\n         */\n        readonly current: T | null;\n    }\n\n    /**\n     * A callback fired whenever the ref's value changes.\n     *\n     * @template T The type of the ref's value.\n     *\n     * @see {@link https://react.dev/reference/react-dom/components/common#ref-callback React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <div ref={(node) => console.log(node)} />\n     * ```\n     */\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n\n    /**\n     * A union type of all possible shapes for React refs.\n     *\n     * @see {@link RefCallback}\n     * @see {@link RefObject}\n     */\n\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    /**\n     * A legacy implementation of refs where you can pass a string to a ref prop.\n     *\n     * @see {@link https://react.dev/reference/react/Component#refs React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <div ref=\"myRef\" />\n     * ```\n     */\n    // TODO: Remove the string ref special case from `PropsWithRef` once we remove LegacyRef\n    type LegacyRef<T> = string | Ref<T>;\n\n    /**\n     * Retrieves the type of the 'ref' prop for a given component type or tag name.\n     *\n     * @template C The component type.\n     *\n     * @example\n     *\n     * ```tsx\n     * type MyComponentRef = React.ElementRef<typeof MyComponent>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * type DivRef = React.ElementRef<'div'>;\n     * ```\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new(props: any): Component<any> }\n            | ((props: any, context?: any) => ReactElement | null)\n            | keyof JSX.IntrinsicElements,\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends RefAttributes<\n                infer Instance\n            >[\"ref\"] ? Instance\n            : never\n            : never;\n\n    type ComponentState = any;\n\n    /**\n     * A value which uniquely identifies a node among items in an array.\n     *\n     * @see {@link https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key React Docs}\n     */\n    type Key = string | number | bigint;\n\n    /**\n     * @internal The props any component can receive.\n     * You don't have to add this type. All components automatically accept these props.\n     * ```tsx\n     * const Component = () => <div />;\n     * <Component key=\"one\" />\n     * ```\n     *\n     * WARNING: The implementation of a component will never have access to these attributes.\n     * The following example would be incorrect usage because {@link Component} would never have access to `key`:\n     * ```tsx\n     * const Component = (props: React.Attributes) => props.key;\n     * ```\n     */\n    interface Attributes {\n        key?: Key | null | undefined;\n    }\n    /**\n     * The props any component accepting refs can receive.\n     * Class components, built-in browser components (e.g. `div`) and forwardRef components can receive refs and automatically accept these props.\n     * ```tsx\n     * const Component = forwardRef(() => <div />);\n     * <Component ref={(current) => console.log(current)} />\n     * ```\n     *\n     * You only need this type if you manually author the types of props that need to be compatible with legacy refs.\n     * ```tsx\n     * interface Props extends React.RefAttributes<HTMLDivElement> {}\n     * declare const Component: React.FunctionComponent<Props>;\n     * ```\n     *\n     * Otherwise it's simpler to directly use {@link Ref} since you can safely use the\n     * props type to describe to props that a consumer can pass to the component\n     * as well as describing the props the implementation of a component \"sees\".\n     * {@link RefAttributes} is generally not safe to describe both consumer and seen props.\n     *\n     * ```tsx\n     * interface Props extends {\n     *   ref?: React.Ref<HTMLDivElement> | undefined;\n     * }\n     * declare const Component: React.FunctionComponent<Props>;\n     * ```\n     *\n     * WARNING: The implementation of a component will not have access to the same type in versions of React supporting string refs.\n     * The following example would be incorrect usage because {@link Component} would never have access to a `ref` with type `string`\n     * ```tsx\n     * const Component = (props: React.RefAttributes) => props.ref;\n     * ```\n     */\n    interface RefAttributes<T> extends Attributes {\n        /**\n         * Allows getting a ref to the component instance.\n         * Once the component unmounts, React will set `ref.current` to `null`\n         * (or call the ref with `null` if you passed a callback ref).\n         *\n         * @see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}\n         */\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    /**\n     * Represents the built-in attributes available to class components.\n     */\n    interface ClassAttributes<T> extends RefAttributes<T> {\n    }\n\n    /**\n     * Represents a JSX element.\n     *\n     * Where {@link ReactNode} represents everything that can be rendered, `ReactElement`\n     * only represents JSX.\n     *\n     * @template P The type of the props object\n     * @template T The type of the component or tag\n     *\n     * @example\n     *\n     * ```tsx\n     * const element: ReactElement = <div />;\n     * ```\n     */\n    interface ReactElement<\n        P = any,\n        T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>,\n    > {\n        type: T;\n        props: P;\n        key: string | null;\n    }\n\n    /**\n     * @deprecated\n     */\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, \"key\" | \"ref\">>,\n    > extends ReactElement<P, Exclude<T, number>> {}\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: (\"ref\" extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    /**\n     * @deprecated Use {@link ComponentElement} instead.\n     */\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element>\n        extends ReactElement<P, string>\n    {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (\n        props?: Attributes & P,\n        ...children: ReactNode[]\n    ) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> = (\n        props?: ClassAttributes<T> & P,\n        ...children: ReactNode[]\n    ) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ) => DOMElement<P, T>;\n\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (\n            props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null,\n            ...children: ReactNode[]\n        ): ReactSVGElement;\n    }\n\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactText = string | number;\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactChild = ReactElement | string | number;\n\n    /**\n     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.\n     */\n    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}\n    /**\n     * WARNING: Not related to `React.Fragment`.\n     * @deprecated This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactFragment = Iterable<ReactNode>;\n\n    /**\n     * For internal usage only.\n     * Different release channels declare additional types of ReactNode this particular release channel accepts.\n     * App or library types should never augment this interface.\n     */\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}\n\n    /**\n     * Represents all of the things React can render.\n     *\n     * Where {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/reactnode/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Typing children\n     * type Props = { children: ReactNode }\n     *\n     * const Component = ({ children }: Props) => <div>{children}</div>\n     *\n     * <Component>hello</Component>\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Typing a custom element\n     * type Props = { customElement: ReactNode }\n     *\n     * const Component = ({ customElement }: Props) => <div>{customElement}</div>\n     *\n     * <Component customElement={<div>hello</div>} />\n     * ```\n     */\n    // non-thenables need to be kept in sync with AwaitedReactNode\n    type ReactNode =\n        | ReactElement\n        | string\n        | number\n        | Iterable<ReactNode>\n        | ReactPortal\n        | boolean\n        | null\n        | undefined\n        | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[\n            keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES\n        ];\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML,\n    ): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG,\n    ): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n    ): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n    ): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]\n    ): FunctionComponentElement<P>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]\n    ): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]\n    ): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]\n    ): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]\n    ): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]\n    ): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]\n    ): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]\n    ): ReactElement<P>;\n\n    /**\n     * Describes the props accepted by a Context {@link Provider}.\n     *\n     * @template T The type of the value the context provides.\n     */\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode | undefined;\n    }\n\n    /**\n     * Describes the props accepted by a Context {@link Consumer}.\n     *\n     * @template T The type of the value the context provides.\n     */\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    /**\n     * An object masquerading as a component. These are created by functions\n     * like {@link forwardRef}, {@link memo}, and {@link createContext}.\n     *\n     * In order to make TypeScript work, we pretend that they are normal\n     * components.\n     *\n     * But they are, in fact, not callable - instead, they are objects which\n     * are treated specially by the renderer.\n     *\n     * @template P The props the component accepts.\n     */\n    interface ExoticComponent<P = {}> {\n        (props: P): ReactElement | null;\n        readonly $$typeof: symbol;\n    }\n\n    /**\n     * An {@link ExoticComponent} with a `displayName` property applied to it.\n     *\n     * @template P The props the component accepts.\n     */\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * An {@link ExoticComponent} with a `propTypes` property applied to it.\n     *\n     * @template P The props the component accepts.\n     */\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    /**\n     * Used to retrieve the type of a context object from a {@link Context}.\n     *\n     * @template C The context object.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const MyContext = createContext({ foo: 'bar' });\n     *\n     * type ContextType = ContextType<typeof MyContext>;\n     * // ContextType = { foo: string }\n     * ```\n     */\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    /**\n     * Wraps your components to specify the value of this context for all components inside.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#provider React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     *\n     * function App() {\n     *   return (\n     *     <ThemeContext.Provider value=\"dark\">\n     *       <Toolbar />\n     *     </ThemeContext.Provider>\n     *   );\n     * }\n     * ```\n     */\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n\n    /**\n     * The old way to read context, before {@link useContext} existed.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#consumer React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { UserContext } from './user-context';\n     *\n     * function Avatar() {\n     *   return (\n     *     <UserContext.Consumer>\n     *       {user => <img src={user.profileImage} alt={user.name} />}\n     *     </UserContext.Consumer>\n     *   );\n     * }\n     * ```\n     */\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n\n    /**\n     * Context lets components pass information deep down without explicitly\n     * passing props.\n     *\n     * Created from {@link createContext}\n     *\n     * @see {@link https://react.dev/learn/passing-data-deeply-with-context React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     * ```\n     */\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * Lets you create a {@link Context} that components can provide or read.\n     *\n     * @param defaultValue The value you want the context to have when there is no matching\n     * {@link Provider} in the tree above the component reading the context. This is meant\n     * as a \"last resort\" fallback.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#reference React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     * ```\n     */\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    /**\n     * Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.\n     */\n    const Children: {\n        map<T, C>(\n            children: C | readonly C[],\n            fn: (child: C, index: number) => T,\n        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    };\n    /**\n     * Lets you group elements without a wrapper node.\n     *\n     * @see {@link https://react.dev/reference/react/Fragment React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { Fragment } from 'react';\n     *\n     * <Fragment>\n     *   <td>Hello</td>\n     *   <td>World</td>\n     * </Fragment>\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Using the <></> shorthand syntax:\n     *\n     * <>\n     *   <td>Hello</td>\n     *   <td>World</td>\n     * </>\n     * ```\n     */\n    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    /**\n     * Lets you find common bugs in your components early during development.\n     *\n     * @see {@link https://react.dev/reference/react/StrictMode React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { StrictMode } from 'react';\n     *\n     * <StrictMode>\n     *   <App />\n     * </StrictMode>\n     * ```\n     */\n    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    /**\n     * The props accepted by {@link Suspense}.\n     *\n     * @see {@link https://react.dev/reference/react/Suspense React Docs}\n     */\n    interface SuspenseProps {\n        children?: ReactNode | undefined;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback?: ReactNode;\n    }\n\n    /**\n     * Lets you display a fallback until its children have finished loading.\n     *\n     * @see {@link https://react.dev/reference/react/Suspense React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { Suspense } from 'react';\n     *\n     * <Suspense fallback={<Loading />}>\n     *   <ProfileDetails />\n     * </Suspense>\n     * ```\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * The callback passed to {@link ProfilerProps.onRender}.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n     */\n    type ProfilerOnRenderCallback = (\n        /**\n         * The string id prop of the {@link Profiler} tree that has just committed. This lets\n         * you identify which part of the tree was committed if you are using multiple\n         * profilers.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        id: string,\n        /**\n         * This lets you know whether the tree has just been mounted for the first time\n         * or re-rendered due to a change in props, state, or hooks.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        phase: \"mount\" | \"update\" | \"nested-update\",\n        /**\n         * The number of milliseconds spent rendering the {@link Profiler} and its descendants\n         * for the current update. This indicates how well the subtree makes use of\n         * memoization (e.g. {@link memo} and {@link useMemo}). Ideally this value should decrease\n         * significantly after the initial mount as many of the descendants will only need to\n         * re-render if their specific props change.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        actualDuration: number,\n        /**\n         * The number of milliseconds estimating how much time it would take to re-render the entire\n         * {@link Profiler} subtree without any optimizations. It is calculated by summing up the most\n         * recent render durations of each component in the tree. This value estimates a worst-case\n         * cost of rendering (e.g. the initial mount or a tree with no memoization). Compare\n         * {@link actualDuration} against it to see if memoization is working.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        baseDuration: number,\n        /**\n         * A numeric timestamp for when React began rendering the current update.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        startTime: number,\n        /**\n         * A numeric timestamp for when React committed the current update. This value is shared\n         * between all profilers in a commit, enabling them to be grouped if desirable.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n\n    /**\n     * The props accepted by {@link Profiler}.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler React Docs}\n     */\n    interface ProfilerProps {\n        children?: ReactNode | undefined;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    /**\n     * Lets you measure rendering performance of a React tree programmatically.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <Profiler id=\"App\" onRender={onRender}>\n     *   <App />\n     * </Profiler>\n     * ```\n     */\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {}\n    class Component<P, S> {\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * @example\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-contexttype}\n         */\n        static contextType?: Context<any> | undefined;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * @example\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see {@link https://react.dev/reference/react/Component#context React Docs}\n         */\n        context: unknown;\n\n        constructor(props: Readonly<P> | P);\n        /**\n         * @deprecated\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html React Docs}\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => Pick<S, K> | S | null) | (Pick<S, K> | S | null),\n            callback?: () => void,\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        readonly props: Readonly<P>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         *\n         * @see {@link https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs Legacy React Docs}\n         */\n        refs: {\n            [key: string]: ReactInstance;\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {}\n\n    /**\n     * @deprecated Use `ClassicComponent` from `create-react-class`\n     *\n     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}\n     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}\n     */\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * Represents the type of a function component. Can optionally\n     * receive a type argument that represents the props the component\n     * receives.\n     *\n     * @template P The props the component accepts.\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n     * @alias for {@link FunctionComponent}\n     *\n     * @example\n     *\n     * ```tsx\n     * // With props:\n     * type Props = { name: string }\n     *\n     * const MyComponent: FC<Props> = (props) => {\n     *  return <div>{props.name}</div>\n     * }\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Without props:\n     * const MyComponentWithoutProps: FC = () => {\n     *   return <div>MyComponentWithoutProps</div>\n     * }\n     * ```\n     */\n    type FC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * Represents the type of a function component. Can optionally\n     * receive a type argument that represents the props the component\n     * accepts.\n     *\n     * @template P The props the component accepts.\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // With props:\n     * type Props = { name: string }\n     *\n     * const MyComponent: FunctionComponent<Props> = (props) => {\n     *  return <div>{props.name}</div>\n     * }\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Without props:\n     * const MyComponentWithoutProps: FunctionComponent = () => {\n     *   return <div>MyComponentWithoutProps</div>\n     * }\n     * ```\n     */\n    interface FunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        /**\n         * Used to declare the types of the props accepted by the\n         * component. These types will be checked during rendering\n         * and in development only.\n         *\n         * We recommend using TypeScript instead of checking prop\n         * types at runtime.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: WeakValidationMap<P> | undefined;\n        /**\n         * @deprecated\n         *\n         * Lets you specify which legacy context is consumed by\n         * this component.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}\n         */\n        contextTypes?: ValidationMap<any> | undefined;\n        /**\n         * Used to define default values for the props accepted by\n         * the component.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         *\n         * @example\n         *\n         * ```tsx\n         * type Props = { name?: string }\n         *\n         * const MyComponent: FC<Props> = (props) => {\n         *   return <div>{props.name}</div>\n         * }\n         *\n         * MyComponent.defaultProps = {\n         *   name: 'John Doe'\n         * }\n         * ```\n         */\n        defaultProps?: Partial<P> | undefined;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         *\n         * @example\n         *\n         * ```tsx\n         *\n         * const MyComponent: FC = () => {\n         *   return <div>Hello!</div>\n         * }\n         *\n         * MyComponent.displayName = 'MyAwesomeComponent'\n         * ```\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated - Equivalent to {@link React.FunctionComponent}.\n     *\n     * @see {@link React.FunctionComponent}\n     * @alias {@link VoidFunctionComponent}\n     */\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    /**\n     * @deprecated - Equivalent to {@link React.FunctionComponent}.\n     *\n     * @see {@link React.FunctionComponent}\n     */\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    /**\n     * The type of the ref received by a {@link ForwardRefRenderFunction}.\n     *\n     * @see {@link ForwardRefRenderFunction}\n     */\n    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n    /**\n     * The type of the function passed to {@link forwardRef}. This is considered different\n     * to a normal {@link FunctionComponent} because it receives an additional argument,\n     *\n     * @param props Props passed to the component, if any.\n     * @param ref A ref forwarded to the component of type {@link ForwardedRef}.\n     *\n     * @template T The type of the forwarded ref.\n     * @template P The type of the props the component accepts.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}\n     * @see {@link forwardRef}\n     */\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: P, ref: ForwardedRef<T>): ReactElement | null;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * Will show `ForwardRef(${Component.displayName || Component.name})`\n         * in devtools by default, but can be given its own specific name.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n        /**\n         * defaultProps are not supported on render functions passed to forwardRef.\n         *\n         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         */\n        defaultProps?: never | undefined;\n        /**\n         * propTypes are not supported on render functions passed to forwardRef.\n         *\n         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: never | undefined;\n    }\n\n    /**\n     * Represents a component class in React.\n     *\n     * @template P The props the component accepts.\n     * @template S The internal state of the component.\n     */\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new(props: P, context?: any): Component<P, S>;\n        /**\n         * Used to declare the types of the props accepted by the\n         * component. These types will be checked during rendering\n         * and in development only.\n         *\n         * We recommend using TypeScript instead of checking prop\n         * types at runtime.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextType?: Context<any> | undefined;\n        /**\n         * @deprecated use {@link ComponentClass.contextType} instead\n         *\n         * Lets you specify which legacy context is consumed by\n         * this component.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}\n         */\n        contextTypes?: ValidationMap<any> | undefined;\n        /**\n         * @deprecated\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#how-to-use-context Legacy React Docs}\n         */\n        childContextTypes?: ValidationMap<any> | undefined;\n        /**\n         * Used to define default values for the props accepted by\n         * the component.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         */\n        defaultProps?: Partial<P> | undefined;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated Use `ClassicComponentClass` from `create-react-class`\n     *\n     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}\n     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}\n     */\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new(props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * Used in {@link createElement} and {@link createFactory} to represent\n     * a class.\n     *\n     * An intersection type is used to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See {@link https://github.com/Microsoft/TypeScript/issues/7234 this GitHub issue}\n     * for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        & C\n        & (new(props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, {@link Component.render}, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of {@link Component.render render} to the document, and\n         * returns an object to be given to {@link componentDidUpdate}. Useful for saving\n         * things such as scroll position before {@link Component.render render} causes changes to it.\n         *\n         * Note: the presence of this method prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if {@link getSnapshotBeforeUpdate} is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before {@link Component.render}.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before {@link Component.render}.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling {@link Component.setState} generally does not trigger this method.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling {@link Component.setState} generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call {@link Component.setState} here.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call {@link Component.setState} here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}\n     */\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>> | undefined;\n        statics?: {\n            [key: string]: any;\n        } | undefined;\n\n        displayName?: string | undefined;\n        propTypes?: ValidationMap<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}\n     */\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    /**\n     * The type of the component returned from {@link forwardRef}.\n     *\n     * @template P The props the component accepts, if any.\n     *\n     * @see {@link ExoticComponent}\n     */\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P> | undefined;\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    /**\n     * Lets your component expose a DOM node to a parent component\n     * using a ref.\n     *\n     * @see {@link https://react.dev/reference/react/forwardRef React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}\n     *\n     * @param render See the {@link ForwardRefRenderFunction}.\n     *\n     * @template T The type of the DOM node.\n     * @template P The props the component accepts, if any.\n     *\n     * @example\n     *\n     * ```tsx\n     * interface Props {\n     *   children?: ReactNode;\n     *   type: \"submit\" | \"button\";\n     * }\n     *\n     * export const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n     *   <button ref={ref} className=\"MyClassName\" type={props.type}>\n     *     {props.children}\n     *   </button>\n     * ));\n     * ```\n     */\n    function forwardRef<T, P = {}>(\n        render: ForwardRefRenderFunction<T, P>,\n    ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /**\n     * Omits the 'ref' attribute from the given props object.\n     *\n     * @template P The props object type.\n     */\n    type PropsWithoutRef<P> =\n        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.\n        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        P extends any ? (\"ref\" extends keyof P ? Omit<P, \"ref\"> : P) : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Note: String refs can be forwarded. We can't fix this bug without breaking a bunch of libraries now though.\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        \"ref\" extends keyof P\n            ? P extends { ref?: infer R | undefined }\n                ? string extends R ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }\n                : P\n            : P\n            : P;\n\n    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };\n\n    /**\n     * Used to retrieve the props a component accepts. Can either be passed a string,\n     * indicating a DOM element (e.g. 'div', 'span', etc.) or the type of a React\n     * component.\n     *\n     * It's usually better to use {@link ComponentPropsWithRef} or {@link ComponentPropsWithoutRef}\n     * instead of this type, as they let you be explicit about whether or not to include\n     * the `ref` prop.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentProps<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentProps = React.ComponentProps<typeof MyComponent>;\n     * ```\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends\n        JSXElementConstructor<infer P> ? P\n        : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T]\n        : {};\n\n    /**\n     * Used to retrieve the props a component accepts with its ref. Can either be\n     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the\n     * type of a React component.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentPropsWithRef<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithRef = React.ComponentPropsWithRef<typeof MyComponent>;\n     * ```\n     */\n    type ComponentPropsWithRef<T extends ElementType> = T extends (new(props: infer P) => Component<any, any>)\n        ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n        : PropsWithRef<ComponentProps<T>>;\n    /**\n     * Used to retrieve the props a custom component accepts with its ref.\n     *\n     * Unlike {@link ComponentPropsWithRef}, this only works with custom\n     * components, i.e. components you define yourself. This is to improve\n     * type-checking performance.\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithRef = React.CustomComponentPropsWithRef<typeof MyComponent>;\n     * ```\n     */\n    type CustomComponentPropsWithRef<T extends ComponentType> = T extends (new(props: infer P) => Component<any, any>)\n        ? (PropsWithoutRef<P> & RefAttributes<InstanceType<T>>)\n        : T extends ((props: infer P, legacyContext?: any) => ReactNode) ? PropsWithRef<P>\n        : never;\n\n    /**\n     * Used to retrieve the props a component accepts without its ref. Can either be\n     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the\n     * type of a React component.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentPropsWithoutRef<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithoutRef = React.ComponentPropsWithoutRef<typeof MyComponent>;\n     * ```\n     */\n    type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;\n\n    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<\n        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>\n    > ? Method\n        : ComponentPropsWithRef<T> extends RefAttributes<infer Method> ? Method\n        : never;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<CustomComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    /**\n     * Lets you skip re-rendering a component when its props are unchanged.\n     *\n     * @see {@link https://react.dev/reference/react/memo React Docs}\n     *\n     * @param Component The component to memoize.\n     * @param propsAreEqual A function that will be used to determine if the props have changed.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { memo } from 'react';\n     *\n     * const SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n     *   // ...\n     * });\n     * ```\n     */\n    function memo<P extends object>(\n        Component: FunctionComponent<P>,\n        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean,\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean,\n    ): MemoExoticComponent<T>;\n\n    interface LazyExoticComponent<T extends ComponentType<any>>\n        extends ExoticComponent<CustomComponentPropsWithRef<T>>\n    {\n        readonly _result: T;\n    }\n\n    /**\n     * Lets you defer loading a component’s code until it is rendered for the first time.\n     *\n     * @see {@link https://react.dev/reference/react/lazy React Docs}\n     *\n     * @param load A function that returns a `Promise` or another thenable (a `Promise`-like object with a\n     * then method). React will not call `load` until the first time you attempt to render the returned\n     * component. After React first calls load, it will wait for it to resolve, and then render the\n     * resolved value’s `.default` as a React component. Both the returned `Promise` and the `Promise`’s\n     * resolved value will be cached, so React will not call load more than once. If the `Promise` rejects,\n     * React will throw the rejection reason for the nearest Error Boundary to handle.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { lazy } from 'react';\n     *\n     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n     * ```\n     */\n    function lazy<T extends ComponentType<any>>(\n        load: () => Promise<{ default: T }>,\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    /**\n     * The instruction passed to a {@link Dispatch} function in {@link useState}\n     * to tell React what the next value of the {@link useState} should be.\n     *\n     * Often found wrapped in {@link Dispatch}.\n     *\n     * @template S The type of the state.\n     *\n     * @example\n     *\n     * ```tsx\n     * // This return type correctly represents the type of\n     * // `setCount` in the example below.\n     * const useCustomState = (): Dispatch<SetStateAction<number>> => {\n     *   const [count, setCount] = useState(0);\n     *\n     *   return setCount;\n     * }\n     * ```\n     */\n    type SetStateAction<S> = S | ((prevState: S) => S);\n\n    /**\n     * A function that can be used to update the state of a {@link useState}\n     * or {@link useReducer} hook.\n     */\n    type Dispatch<A> = (value: A) => void;\n    /**\n     * A {@link Dispatch} function can sometimes be called without any arguments.\n     */\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S\n        : never;\n    type DependencyList = readonly unknown[];\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    type EffectCallback = () => void | Destructor;\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useContext}\n     */\n    function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useState}\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useState}\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>,\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined,\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T>(initialValue: T | null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useLayoutEffect}\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useEffect}\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useImperativeHandle}\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useCallback}\n     */\n    // A specific function type would not trigger implicit any.\n    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useMemo}\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useDebugValue}\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    // must be synchronous\n    export type TransitionFunction = () => VoidOrUndefinedOnly;\n    // strange definition to allow vscode to show documentation on the invocation\n    export interface TransitionStartFunction {\n        /**\n         * State updates caused inside the callback are allowed to be deferred.\n         *\n         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n         *\n         * @param callback A _synchronous_ function which causes state updates that can be deferred.\n         */\n        (callback: TransitionFunction): void;\n    }\n\n    /**\n     * Returns a deferred version of the value that may “lag behind” it.\n     *\n     * This is commonly used to keep the interface responsive when you have something that renders immediately\n     * based on user input and something that needs to wait for a data fetch.\n     *\n     * A good example of this is a text input.\n     *\n     * @param value The value that is going to be deferred\n     *\n     * @see {@link https://react.dev/reference/react/useDeferredValue}\n     */\n    export function useDeferredValue<T>(value: T): T;\n\n    /**\n     * Allows components to avoid undesirable loading states by waiting for content to load\n     * before transitioning to the next screen. It also allows components to defer slower,\n     * data fetching updates until subsequent renders so that more crucial updates can be\n     * rendered immediately.\n     *\n     * The `useTransition` hook returns two values in an array.\n     *\n     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\n     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.\n     *\n     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n     *\n     * @see {@link https://react.dev/reference/react/useTransition}\n     */\n    export function useTransition(): [boolean, TransitionStartFunction];\n\n    /**\n     * Similar to `useTransition` but allows uses where hooks are not available.\n     *\n     * @param callback A _synchronous_ function which causes state updates that can be deferred.\n     */\n    export function startTransition(scope: TransitionFunction): void;\n\n    export function useId(): string;\n\n    /**\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @see {@link https://github.com/facebook/react/pull/21913}\n     */\n    export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;\n\n    /**\n     * @param subscribe\n     * @param getSnapshot\n     *\n     * @see {@link https://github.com/reactwg/react-18/discussions/86}\n     */\n    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`\n    export function useSyncExternalStore<Snapshot>(\n        subscribe: (onStoreChange: () => void) => () => void,\n        getSnapshot: () => Snapshot,\n        getServerSnapshot?: () => Snapshot,\n    ): Snapshot;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: \"mouse\" | \"pen\" | \"touch\";\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {\n        relatedTarget: (EventTarget & RelatedTarget) | null;\n        target: EventTarget & Target;\n    }\n\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    export type ModifierKey =\n        | \"Alt\"\n        | \"AltGraph\"\n        | \"CapsLock\"\n        | \"Control\"\n        | \"Fn\"\n        | \"FnLock\"\n        | \"Hyper\"\n        | \"Meta\"\n        | \"NumLock\"\n        | \"ScrollLock\"\n        | \"Shift\"\n        | \"Super\"\n        | \"Symbol\"\n        | \"SymbolLock\";\n\n    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        code: string;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface SVGLineElementAttributes<T> extends SVGProps<T> {}\n    interface SVGTextElementAttributes<T> extends SVGProps<T> {}\n\n    interface DOMAttributes<T> {\n        children?: ReactNode | undefined;\n        dangerouslySetInnerHTML?: {\n            // Should be InnerHTML['innerHTML'].\n            // But unfortunately we're mixing renderer-specific type declarations.\n            __html: string | TrustedHTML;\n        } | undefined;\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T> | undefined;\n        onCopyCapture?: ClipboardEventHandler<T> | undefined;\n        onCut?: ClipboardEventHandler<T> | undefined;\n        onCutCapture?: ClipboardEventHandler<T> | undefined;\n        onPaste?: ClipboardEventHandler<T> | undefined;\n        onPasteCapture?: ClipboardEventHandler<T> | undefined;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T> | undefined;\n        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionStart?: CompositionEventHandler<T> | undefined;\n        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdate?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T> | undefined;\n        onFocusCapture?: FocusEventHandler<T> | undefined;\n        onBlur?: FocusEventHandler<T> | undefined;\n        onBlurCapture?: FocusEventHandler<T> | undefined;\n\n        // Form Events\n        onChange?: FormEventHandler<T> | undefined;\n        onChangeCapture?: FormEventHandler<T> | undefined;\n        onBeforeInput?: FormEventHandler<T> | undefined;\n        onBeforeInputCapture?: FormEventHandler<T> | undefined;\n        onInput?: FormEventHandler<T> | undefined;\n        onInputCapture?: FormEventHandler<T> | undefined;\n        onReset?: FormEventHandler<T> | undefined;\n        onResetCapture?: FormEventHandler<T> | undefined;\n        onSubmit?: FormEventHandler<T> | undefined;\n        onSubmitCapture?: FormEventHandler<T> | undefined;\n        onInvalid?: FormEventHandler<T> | undefined;\n        onInvalidCapture?: FormEventHandler<T> | undefined;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T> | undefined;\n        onLoadCapture?: ReactEventHandler<T> | undefined;\n        onError?: ReactEventHandler<T> | undefined; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T> | undefined;\n        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPress?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;\n        onKeyUp?: KeyboardEventHandler<T> | undefined;\n        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T> | undefined;\n        onAbortCapture?: ReactEventHandler<T> | undefined;\n        onCanPlay?: ReactEventHandler<T> | undefined;\n        onCanPlayCapture?: ReactEventHandler<T> | undefined;\n        onCanPlayThrough?: ReactEventHandler<T> | undefined;\n        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;\n        onDurationChange?: ReactEventHandler<T> | undefined;\n        onDurationChangeCapture?: ReactEventHandler<T> | undefined;\n        onEmptied?: ReactEventHandler<T> | undefined;\n        onEmptiedCapture?: ReactEventHandler<T> | undefined;\n        onEncrypted?: ReactEventHandler<T> | undefined;\n        onEncryptedCapture?: ReactEventHandler<T> | undefined;\n        onEnded?: ReactEventHandler<T> | undefined;\n        onEndedCapture?: ReactEventHandler<T> | undefined;\n        onLoadedData?: ReactEventHandler<T> | undefined;\n        onLoadedDataCapture?: ReactEventHandler<T> | undefined;\n        onLoadedMetadata?: ReactEventHandler<T> | undefined;\n        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;\n        onLoadStart?: ReactEventHandler<T> | undefined;\n        onLoadStartCapture?: ReactEventHandler<T> | undefined;\n        onPause?: ReactEventHandler<T> | undefined;\n        onPauseCapture?: ReactEventHandler<T> | undefined;\n        onPlay?: ReactEventHandler<T> | undefined;\n        onPlayCapture?: ReactEventHandler<T> | undefined;\n        onPlaying?: ReactEventHandler<T> | undefined;\n        onPlayingCapture?: ReactEventHandler<T> | undefined;\n        onProgress?: ReactEventHandler<T> | undefined;\n        onProgressCapture?: ReactEventHandler<T> | undefined;\n        onRateChange?: ReactEventHandler<T> | undefined;\n        onRateChangeCapture?: ReactEventHandler<T> | undefined;\n        onResize?: ReactEventHandler<T> | undefined;\n        onResizeCapture?: ReactEventHandler<T> | undefined;\n        onSeeked?: ReactEventHandler<T> | undefined;\n        onSeekedCapture?: ReactEventHandler<T> | undefined;\n        onSeeking?: ReactEventHandler<T> | undefined;\n        onSeekingCapture?: ReactEventHandler<T> | undefined;\n        onStalled?: ReactEventHandler<T> | undefined;\n        onStalledCapture?: ReactEventHandler<T> | undefined;\n        onSuspend?: ReactEventHandler<T> | undefined;\n        onSuspendCapture?: ReactEventHandler<T> | undefined;\n        onTimeUpdate?: ReactEventHandler<T> | undefined;\n        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;\n        onVolumeChange?: ReactEventHandler<T> | undefined;\n        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;\n        onWaiting?: ReactEventHandler<T> | undefined;\n        onWaitingCapture?: ReactEventHandler<T> | undefined;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T> | undefined;\n        onAuxClickCapture?: MouseEventHandler<T> | undefined;\n        onClick?: MouseEventHandler<T> | undefined;\n        onClickCapture?: MouseEventHandler<T> | undefined;\n        onContextMenu?: MouseEventHandler<T> | undefined;\n        onContextMenuCapture?: MouseEventHandler<T> | undefined;\n        onDoubleClick?: MouseEventHandler<T> | undefined;\n        onDoubleClickCapture?: MouseEventHandler<T> | undefined;\n        onDrag?: DragEventHandler<T> | undefined;\n        onDragCapture?: DragEventHandler<T> | undefined;\n        onDragEnd?: DragEventHandler<T> | undefined;\n        onDragEndCapture?: DragEventHandler<T> | undefined;\n        onDragEnter?: DragEventHandler<T> | undefined;\n        onDragEnterCapture?: DragEventHandler<T> | undefined;\n        onDragExit?: DragEventHandler<T> | undefined;\n        onDragExitCapture?: DragEventHandler<T> | undefined;\n        onDragLeave?: DragEventHandler<T> | undefined;\n        onDragLeaveCapture?: DragEventHandler<T> | undefined;\n        onDragOver?: DragEventHandler<T> | undefined;\n        onDragOverCapture?: DragEventHandler<T> | undefined;\n        onDragStart?: DragEventHandler<T> | undefined;\n        onDragStartCapture?: DragEventHandler<T> | undefined;\n        onDrop?: DragEventHandler<T> | undefined;\n        onDropCapture?: DragEventHandler<T> | undefined;\n        onMouseDown?: MouseEventHandler<T> | undefined;\n        onMouseDownCapture?: MouseEventHandler<T> | undefined;\n        onMouseEnter?: MouseEventHandler<T> | undefined;\n        onMouseLeave?: MouseEventHandler<T> | undefined;\n        onMouseMove?: MouseEventHandler<T> | undefined;\n        onMouseMoveCapture?: MouseEventHandler<T> | undefined;\n        onMouseOut?: MouseEventHandler<T> | undefined;\n        onMouseOutCapture?: MouseEventHandler<T> | undefined;\n        onMouseOver?: MouseEventHandler<T> | undefined;\n        onMouseOverCapture?: MouseEventHandler<T> | undefined;\n        onMouseUp?: MouseEventHandler<T> | undefined;\n        onMouseUpCapture?: MouseEventHandler<T> | undefined;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T> | undefined;\n        onSelectCapture?: ReactEventHandler<T> | undefined;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T> | undefined;\n        onTouchCancelCapture?: TouchEventHandler<T> | undefined;\n        onTouchEnd?: TouchEventHandler<T> | undefined;\n        onTouchEndCapture?: TouchEventHandler<T> | undefined;\n        onTouchMove?: TouchEventHandler<T> | undefined;\n        onTouchMoveCapture?: TouchEventHandler<T> | undefined;\n        onTouchStart?: TouchEventHandler<T> | undefined;\n        onTouchStartCapture?: TouchEventHandler<T> | undefined;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T> | undefined;\n        onPointerDownCapture?: PointerEventHandler<T> | undefined;\n        onPointerMove?: PointerEventHandler<T> | undefined;\n        onPointerMoveCapture?: PointerEventHandler<T> | undefined;\n        onPointerUp?: PointerEventHandler<T> | undefined;\n        onPointerUpCapture?: PointerEventHandler<T> | undefined;\n        onPointerCancel?: PointerEventHandler<T> | undefined;\n        onPointerCancelCapture?: PointerEventHandler<T> | undefined;\n        onPointerEnter?: PointerEventHandler<T> | undefined;\n        onPointerLeave?: PointerEventHandler<T> | undefined;\n        onPointerOver?: PointerEventHandler<T> | undefined;\n        onPointerOverCapture?: PointerEventHandler<T> | undefined;\n        onPointerOut?: PointerEventHandler<T> | undefined;\n        onPointerOutCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n\n        // UI Events\n        onScroll?: UIEventHandler<T> | undefined;\n        onScrollCapture?: UIEventHandler<T> | undefined;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T> | undefined;\n        onWheelCapture?: WheelEventHandler<T> | undefined;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T> | undefined;\n        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationEnd?: AnimationEventHandler<T> | undefined;\n        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationIteration?: AnimationEventHandler<T> | undefined;\n        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T> | undefined;\n        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        \"aria-activedescendant\"?: string | undefined;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        \"aria-atomic\"?: Booleanish | undefined;\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        \"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\" | undefined;\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        /**\n         * Defines a string value that labels the current element, which is intended to be converted into Braille.\n         * @see aria-label.\n         */\n        \"aria-braillelabel\"?: string | undefined;\n        /**\n         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n         * @see aria-roledescription.\n         */\n        \"aria-brailleroledescription\"?: string | undefined;\n        \"aria-busy\"?: Booleanish | undefined;\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        \"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        \"aria-colcount\"?: number | undefined;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        \"aria-colindex\"?: number | undefined;\n        /**\n         * Defines a human readable text alternative of aria-colindex.\n         * @see aria-rowindextext.\n         */\n        \"aria-colindextext\"?: string | undefined;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        \"aria-colspan\"?: number | undefined;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        \"aria-controls\"?: string | undefined;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        \"aria-current\"?: boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined;\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        \"aria-describedby\"?: string | undefined;\n        /**\n         * Defines a string value that describes or annotates the current element.\n         * @see related aria-describedby.\n         */\n        \"aria-description\"?: string | undefined;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        \"aria-details\"?: string | undefined;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        \"aria-disabled\"?: Booleanish | undefined;\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\" | undefined;\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        \"aria-errormessage\"?: string | undefined;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        \"aria-expanded\"?: Booleanish | undefined;\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        \"aria-flowto\"?: string | undefined;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-grabbed\"?: Booleanish | undefined;\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        \"aria-haspopup\"?: boolean | \"false\" | \"true\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\" | undefined;\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        \"aria-hidden\"?: Booleanish | undefined;\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        \"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\" | undefined;\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        \"aria-keyshortcuts\"?: string | undefined;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        \"aria-label\"?: string | undefined;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        \"aria-labelledby\"?: string | undefined;\n        /** Defines the hierarchical level of an element within a structure. */\n        \"aria-level\"?: number | undefined;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        \"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined;\n        /** Indicates whether an element is modal when displayed. */\n        \"aria-modal\"?: Booleanish | undefined;\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        \"aria-multiline\"?: Booleanish | undefined;\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        \"aria-multiselectable\"?: Booleanish | undefined;\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        \"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined;\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        \"aria-owns\"?: string | undefined;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        \"aria-placeholder\"?: string | undefined;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        \"aria-posinset\"?: number | undefined;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        \"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        \"aria-readonly\"?: Booleanish | undefined;\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        \"aria-relevant\"?:\n            | \"additions\"\n            | \"additions removals\"\n            | \"additions text\"\n            | \"all\"\n            | \"removals\"\n            | \"removals additions\"\n            | \"removals text\"\n            | \"text\"\n            | \"text additions\"\n            | \"text removals\"\n            | undefined;\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        \"aria-required\"?: Booleanish | undefined;\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        \"aria-roledescription\"?: string | undefined;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        \"aria-rowcount\"?: number | undefined;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        \"aria-rowindex\"?: number | undefined;\n        /**\n         * Defines a human readable text alternative of aria-rowindex.\n         * @see aria-colindextext.\n         */\n        \"aria-rowindextext\"?: string | undefined;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        \"aria-rowspan\"?: number | undefined;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        \"aria-selected\"?: Booleanish | undefined;\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        \"aria-setsize\"?: number | undefined;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined;\n        /** Defines the maximum allowed value for a range widget. */\n        \"aria-valuemax\"?: number | undefined;\n        /** Defines the minimum allowed value for a range widget. */\n        \"aria-valuemin\"?: number | undefined;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        \"aria-valuenow\"?: number | undefined;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        \"aria-valuetext\"?: string | undefined;\n    }\n\n    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions\n    type AriaRole =\n        | \"alert\"\n        | \"alertdialog\"\n        | \"application\"\n        | \"article\"\n        | \"banner\"\n        | \"button\"\n        | \"cell\"\n        | \"checkbox\"\n        | \"columnheader\"\n        | \"combobox\"\n        | \"complementary\"\n        | \"contentinfo\"\n        | \"definition\"\n        | \"dialog\"\n        | \"directory\"\n        | \"document\"\n        | \"feed\"\n        | \"figure\"\n        | \"form\"\n        | \"grid\"\n        | \"gridcell\"\n        | \"group\"\n        | \"heading\"\n        | \"img\"\n        | \"link\"\n        | \"list\"\n        | \"listbox\"\n        | \"listitem\"\n        | \"log\"\n        | \"main\"\n        | \"marquee\"\n        | \"math\"\n        | \"menu\"\n        | \"menubar\"\n        | \"menuitem\"\n        | \"menuitemcheckbox\"\n        | \"menuitemradio\"\n        | \"navigation\"\n        | \"none\"\n        | \"note\"\n        | \"option\"\n        | \"presentation\"\n        | \"progressbar\"\n        | \"radio\"\n        | \"radiogroup\"\n        | \"region\"\n        | \"row\"\n        | \"rowgroup\"\n        | \"rowheader\"\n        | \"scrollbar\"\n        | \"search\"\n        | \"searchbox\"\n        | \"separator\"\n        | \"slider\"\n        | \"spinbutton\"\n        | \"status\"\n        | \"switch\"\n        | \"tab\"\n        | \"table\"\n        | \"tablist\"\n        | \"tabpanel\"\n        | \"term\"\n        | \"textbox\"\n        | \"timer\"\n        | \"toolbar\"\n        | \"tooltip\"\n        | \"tree\"\n        | \"treegrid\"\n        | \"treeitem\"\n        | (string & {});\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean | undefined;\n        defaultValue?: string | number | readonly string[] | undefined;\n        suppressContentEditableWarning?: boolean | undefined;\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Standard HTML Attributes\n        accessKey?: string | undefined;\n        autoFocus?: boolean | undefined;\n        className?: string | undefined;\n        contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\" | undefined;\n        contextMenu?: string | undefined;\n        dir?: string | undefined;\n        draggable?: Booleanish | undefined;\n        hidden?: boolean | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        nonce?: string | undefined;\n        slot?: string | undefined;\n        spellCheck?: Booleanish | undefined;\n        style?: CSSProperties | undefined;\n        tabIndex?: number | undefined;\n        title?: string | undefined;\n        translate?: \"yes\" | \"no\" | undefined;\n\n        // Unknown\n        radioGroup?: string | undefined; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: AriaRole | undefined;\n\n        // RDFa Attributes\n        about?: string | undefined;\n        content?: string | undefined;\n        datatype?: string | undefined;\n        inlist?: any;\n        prefix?: string | undefined;\n        property?: string | undefined;\n        rel?: string | undefined;\n        resource?: string | undefined;\n        rev?: string | undefined;\n        typeof?: string | undefined;\n        vocab?: string | undefined;\n\n        // Non-standard Attributes\n        autoCapitalize?: string | undefined;\n        autoCorrect?: string | undefined;\n        autoSave?: string | undefined;\n        color?: string | undefined;\n        itemProp?: string | undefined;\n        itemScope?: boolean | undefined;\n        itemType?: string | undefined;\n        itemID?: string | undefined;\n        itemRef?: string | undefined;\n        results?: number | undefined;\n        security?: string | undefined;\n        unselectable?: \"on\" | \"off\" | undefined;\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}\n         */\n        inputMode?: \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\" | undefined;\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}\n         */\n        is?: string | undefined;\n    }\n\n    /**\n     * For internal usage only.\n     * Different release channels declare additional types of ReactNode this particular release channel accepts.\n     * App or library types should never augment this interface.\n     */\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string | undefined;\n        acceptCharset?: string | undefined;\n        action?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        alt?: string | undefined;\n        as?: string | undefined;\n        async?: boolean | undefined;\n        autoComplete?: string | undefined;\n        autoPlay?: boolean | undefined;\n        capture?: boolean | \"user\" | \"environment\" | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        charSet?: string | undefined;\n        challenge?: string | undefined;\n        checked?: boolean | undefined;\n        cite?: string | undefined;\n        classID?: string | undefined;\n        cols?: number | undefined;\n        colSpan?: number | undefined;\n        controls?: boolean | undefined;\n        coords?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        data?: string | undefined;\n        dateTime?: string | undefined;\n        default?: boolean | undefined;\n        defer?: boolean | undefined;\n        disabled?: boolean | undefined;\n        download?: any;\n        encType?: string | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        frameBorder?: number | string | undefined;\n        headers?: string | undefined;\n        height?: number | string | undefined;\n        high?: number | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        htmlFor?: string | undefined;\n        httpEquiv?: string | undefined;\n        integrity?: string | undefined;\n        keyParams?: string | undefined;\n        keyType?: string | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        list?: string | undefined;\n        loop?: boolean | undefined;\n        low?: number | undefined;\n        manifest?: string | undefined;\n        marginHeight?: number | undefined;\n        marginWidth?: number | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        media?: string | undefined;\n        mediaGroup?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        muted?: boolean | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        open?: boolean | undefined;\n        optimum?: number | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        preload?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        reversed?: boolean | undefined;\n        rows?: number | undefined;\n        rowSpan?: number | undefined;\n        sandbox?: string | undefined;\n        scope?: string | undefined;\n        scoped?: boolean | undefined;\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        selected?: boolean | undefined;\n        shape?: string | undefined;\n        size?: number | undefined;\n        sizes?: string | undefined;\n        span?: number | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        srcLang?: string | undefined;\n        srcSet?: string | undefined;\n        start?: number | undefined;\n        step?: number | string | undefined;\n        summary?: string | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        value?: string | readonly string[] | number | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n        wrap?: string | undefined;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | \"\"\n        | \"no-referrer\"\n        | \"no-referrer-when-downgrade\"\n        | \"origin\"\n        | \"origin-when-cross-origin\"\n        | \"same-origin\"\n        | \"strict-origin\"\n        | \"strict-origin-when-cross-origin\"\n        | \"unsafe-url\";\n\n    type HTMLAttributeAnchorTarget =\n        | \"_self\"\n        | \"_blank\"\n        | \"_parent\"\n        | \"_top\"\n        | (string & {});\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        ping?: string | undefined;\n        target?: HTMLAttributeAnchorTarget | undefined;\n        type?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n    }\n\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        coords?: string | undefined;\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        shape?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ]\n            | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        name?: string | undefined;\n        type?: \"submit\" | \"reset\" | \"button\" | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean | undefined;\n        onToggle?: ReactEventHandler<T> | undefined;\n        name?: string | undefined;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        onCancel?: ReactEventHandler<T> | undefined;\n        onClose?: ReactEventHandler<T> | undefined;\n        open?: boolean | undefined;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string | undefined;\n        action?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        autoComplete?: string | undefined;\n        encType?: string | undefined;\n        method?: string | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        target?: string | undefined;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string | undefined;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        /** @deprecated */\n        frameBorder?: number | string | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        /** @deprecated */\n        marginHeight?: number | undefined;\n        /** @deprecated */\n        marginWidth?: number | undefined;\n        name?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sandbox?: string | undefined;\n        /** @deprecated */\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        decoding?: \"async\" | \"auto\" | \"sync\" | undefined;\n        fetchPriority?: \"high\" | \"low\" | \"auto\";\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    type HTMLInputTypeAttribute =\n        | \"button\"\n        | \"checkbox\"\n        | \"color\"\n        | \"date\"\n        | \"datetime-local\"\n        | \"email\"\n        | \"file\"\n        | \"hidden\"\n        | \"image\"\n        | \"month\"\n        | \"number\"\n        | \"password\"\n        | \"radio\"\n        | \"range\"\n        | \"reset\"\n        | \"search\"\n        | \"submit\"\n        | \"tel\"\n        | \"text\"\n        | \"time\"\n        | \"url\"\n        | \"week\"\n        | (string & {});\n\n    type AutoFillAddressKind = \"billing\" | \"shipping\";\n    type AutoFillBase = \"\" | \"off\" | \"on\";\n    type AutoFillContactField =\n        | \"email\"\n        | \"tel\"\n        | \"tel-area-code\"\n        | \"tel-country-code\"\n        | \"tel-extension\"\n        | \"tel-local\"\n        | \"tel-local-prefix\"\n        | \"tel-local-suffix\"\n        | \"tel-national\";\n    type AutoFillContactKind = \"home\" | \"mobile\" | \"work\";\n    type AutoFillCredentialField = \"webauthn\";\n    type AutoFillNormalField =\n        | \"additional-name\"\n        | \"address-level1\"\n        | \"address-level2\"\n        | \"address-level3\"\n        | \"address-level4\"\n        | \"address-line1\"\n        | \"address-line2\"\n        | \"address-line3\"\n        | \"bday-day\"\n        | \"bday-month\"\n        | \"bday-year\"\n        | \"cc-csc\"\n        | \"cc-exp\"\n        | \"cc-exp-month\"\n        | \"cc-exp-year\"\n        | \"cc-family-name\"\n        | \"cc-given-name\"\n        | \"cc-name\"\n        | \"cc-number\"\n        | \"cc-type\"\n        | \"country\"\n        | \"country-name\"\n        | \"current-password\"\n        | \"family-name\"\n        | \"given-name\"\n        | \"honorific-prefix\"\n        | \"honorific-suffix\"\n        | \"name\"\n        | \"new-password\"\n        | \"one-time-code\"\n        | \"organization\"\n        | \"postal-code\"\n        | \"street-address\"\n        | \"transaction-amount\"\n        | \"transaction-currency\"\n        | \"username\";\n    type OptionalPrefixToken<T extends string> = `${T} ` | \"\";\n    type OptionalPostfixToken<T extends string> = ` ${T}` | \"\";\n    type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;\n    type AutoFillSection = `section-${string}`;\n    type AutoFill =\n        | AutoFillBase\n        | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<\n            AutoFillAddressKind\n        >}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;\n    type HTMLInputAutoCompleteAttribute = AutoFill | (string & {});\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string | undefined;\n        alt?: string | undefined;\n        autoComplete?: HTMLInputAutoCompleteAttribute | undefined;\n        capture?: boolean | \"user\" | \"environment\" | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean | undefined;\n        disabled?: boolean | undefined;\n        enterKeyHint?: \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ]\n            | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        height?: number | string | undefined;\n        list?: string | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        src?: string | undefined;\n        step?: number | string | undefined;\n        type?: HTMLInputTypeAttribute | undefined;\n        value?: string | readonly string[] | number | undefined;\n        width?: number | string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        challenge?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        keyType?: string | undefined;\n        keyParams?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        fetchPriority?: \"high\" | \"low\" | \"auto\";\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        integrity?: string | undefined;\n        media?: string | undefined;\n        imageSrcSet?: string | undefined;\n        imageSizes?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        type?: string | undefined;\n        charSet?: string | undefined;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string | undefined;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean | undefined;\n        controls?: boolean | undefined;\n        controlsList?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        loop?: boolean | undefined;\n        mediaGroup?: string | undefined;\n        muted?: boolean | undefined;\n        playsInline?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string | undefined;\n        content?: string | undefined;\n        httpEquiv?: string | undefined;\n        media?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        high?: number | undefined;\n        low?: number | undefined;\n        max?: number | string | undefined;\n        min?: number | string | undefined;\n        optimum?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string | undefined;\n        data?: string | undefined;\n        form?: string | undefined;\n        height?: number | string | undefined;\n        name?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean | undefined;\n        start?: number | undefined;\n        type?: \"1\" | \"a\" | \"A\" | \"i\" | \"I\" | undefined;\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n        selected?: boolean | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean | undefined;\n        /** @deprecated */\n        charSet?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        defer?: boolean | undefined;\n        integrity?: string | undefined;\n        noModule?: boolean | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        media?: string | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string | undefined;\n        scoped?: boolean | undefined;\n        type?: string | undefined;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | undefined;\n        bgcolor?: string | undefined;\n        border?: number | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        frame?: boolean | undefined;\n        rules?: \"none\" | \"groups\" | \"rows\" | \"columns\" | \"all\" | undefined;\n        summary?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        cols?: number | undefined;\n        dirName?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        name?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        rows?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n        wrap?: string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | undefined;\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string | undefined;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        src?: string | undefined;\n        srcLang?: string | undefined;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        width?: number | string | undefined;\n        disablePictureInPicture?: boolean | undefined;\n        disableRemotePlayback?: boolean | undefined;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string | undefined;\n        color?: string | undefined;\n        height?: number | string | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        max?: number | string | undefined;\n        media?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        name?: string | undefined;\n        style?: CSSProperties | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: AriaRole | undefined;\n        tabIndex?: number | undefined;\n        crossOrigin?: CrossOrigin;\n\n        // SVG Specific attributes\n        accentHeight?: number | string | undefined;\n        accumulate?: \"none\" | \"sum\" | undefined;\n        additive?: \"replace\" | \"sum\" | undefined;\n        alignmentBaseline?:\n            | \"auto\"\n            | \"baseline\"\n            | \"before-edge\"\n            | \"text-before-edge\"\n            | \"middle\"\n            | \"central\"\n            | \"after-edge\"\n            | \"text-after-edge\"\n            | \"ideographic\"\n            | \"alphabetic\"\n            | \"hanging\"\n            | \"mathematical\"\n            | \"inherit\"\n            | undefined;\n        allowReorder?: \"no\" | \"yes\" | undefined;\n        alphabetic?: number | string | undefined;\n        amplitude?: number | string | undefined;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined;\n        ascent?: number | string | undefined;\n        attributeName?: string | undefined;\n        attributeType?: string | undefined;\n        autoReverse?: Booleanish | undefined;\n        azimuth?: number | string | undefined;\n        baseFrequency?: number | string | undefined;\n        baselineShift?: number | string | undefined;\n        baseProfile?: number | string | undefined;\n        bbox?: number | string | undefined;\n        begin?: number | string | undefined;\n        bias?: number | string | undefined;\n        by?: number | string | undefined;\n        calcMode?: number | string | undefined;\n        capHeight?: number | string | undefined;\n        clip?: number | string | undefined;\n        clipPath?: string | undefined;\n        clipPathUnits?: number | string | undefined;\n        clipRule?: number | string | undefined;\n        colorInterpolation?: number | string | undefined;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\" | undefined;\n        colorProfile?: number | string | undefined;\n        colorRendering?: number | string | undefined;\n        contentScriptType?: number | string | undefined;\n        contentStyleType?: number | string | undefined;\n        cursor?: number | string | undefined;\n        cx?: number | string | undefined;\n        cy?: number | string | undefined;\n        d?: string | undefined;\n        decelerate?: number | string | undefined;\n        descent?: number | string | undefined;\n        diffuseConstant?: number | string | undefined;\n        direction?: number | string | undefined;\n        display?: number | string | undefined;\n        divisor?: number | string | undefined;\n        dominantBaseline?: number | string | undefined;\n        dur?: number | string | undefined;\n        dx?: number | string | undefined;\n        dy?: number | string | undefined;\n        edgeMode?: number | string | undefined;\n        elevation?: number | string | undefined;\n        enableBackground?: number | string | undefined;\n        end?: number | string | undefined;\n        exponent?: number | string | undefined;\n        externalResourcesRequired?: Booleanish | undefined;\n        fill?: string | undefined;\n        fillOpacity?: number | string | undefined;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\" | undefined;\n        filter?: string | undefined;\n        filterRes?: number | string | undefined;\n        filterUnits?: number | string | undefined;\n        floodColor?: number | string | undefined;\n        floodOpacity?: number | string | undefined;\n        focusable?: Booleanish | \"auto\" | undefined;\n        fontFamily?: string | undefined;\n        fontSize?: number | string | undefined;\n        fontSizeAdjust?: number | string | undefined;\n        fontStretch?: number | string | undefined;\n        fontStyle?: number | string | undefined;\n        fontVariant?: number | string | undefined;\n        fontWeight?: number | string | undefined;\n        format?: number | string | undefined;\n        fr?: number | string | undefined;\n        from?: number | string | undefined;\n        fx?: number | string | undefined;\n        fy?: number | string | undefined;\n        g1?: number | string | undefined;\n        g2?: number | string | undefined;\n        glyphName?: number | string | undefined;\n        glyphOrientationHorizontal?: number | string | undefined;\n        glyphOrientationVertical?: number | string | undefined;\n        glyphRef?: number | string | undefined;\n        gradientTransform?: string | undefined;\n        gradientUnits?: string | undefined;\n        hanging?: number | string | undefined;\n        horizAdvX?: number | string | undefined;\n        horizOriginX?: number | string | undefined;\n        href?: string | undefined;\n        ideographic?: number | string | undefined;\n        imageRendering?: number | string | undefined;\n        in2?: number | string | undefined;\n        in?: string | undefined;\n        intercept?: number | string | undefined;\n        k1?: number | string | undefined;\n        k2?: number | string | undefined;\n        k3?: number | string | undefined;\n        k4?: number | string | undefined;\n        k?: number | string | undefined;\n        kernelMatrix?: number | string | undefined;\n        kernelUnitLength?: number | string | undefined;\n        kerning?: number | string | undefined;\n        keyPoints?: number | string | undefined;\n        keySplines?: number | string | undefined;\n        keyTimes?: number | string | undefined;\n        lengthAdjust?: number | string | undefined;\n        letterSpacing?: number | string | undefined;\n        lightingColor?: number | string | undefined;\n        limitingConeAngle?: number | string | undefined;\n        local?: number | string | undefined;\n        markerEnd?: string | undefined;\n        markerHeight?: number | string | undefined;\n        markerMid?: string | undefined;\n        markerStart?: string | undefined;\n        markerUnits?: number | string | undefined;\n        markerWidth?: number | string | undefined;\n        mask?: string | undefined;\n        maskContentUnits?: number | string | undefined;\n        maskUnits?: number | string | undefined;\n        mathematical?: number | string | undefined;\n        mode?: number | string | undefined;\n        numOctaves?: number | string | undefined;\n        offset?: number | string | undefined;\n        opacity?: number | string | undefined;\n        operator?: number | string | undefined;\n        order?: number | string | undefined;\n        orient?: number | string | undefined;\n        orientation?: number | string | undefined;\n        origin?: number | string | undefined;\n        overflow?: number | string | undefined;\n        overlinePosition?: number | string | undefined;\n        overlineThickness?: number | string | undefined;\n        paintOrder?: number | string | undefined;\n        panose1?: number | string | undefined;\n        path?: string | undefined;\n        pathLength?: number | string | undefined;\n        patternContentUnits?: string | undefined;\n        patternTransform?: number | string | undefined;\n        patternUnits?: string | undefined;\n        pointerEvents?: number | string | undefined;\n        points?: string | undefined;\n        pointsAtX?: number | string | undefined;\n        pointsAtY?: number | string | undefined;\n        pointsAtZ?: number | string | undefined;\n        preserveAlpha?: Booleanish | undefined;\n        preserveAspectRatio?: string | undefined;\n        primitiveUnits?: number | string | undefined;\n        r?: number | string | undefined;\n        radius?: number | string | undefined;\n        refX?: number | string | undefined;\n        refY?: number | string | undefined;\n        renderingIntent?: number | string | undefined;\n        repeatCount?: number | string | undefined;\n        repeatDur?: number | string | undefined;\n        requiredExtensions?: number | string | undefined;\n        requiredFeatures?: number | string | undefined;\n        restart?: number | string | undefined;\n        result?: string | undefined;\n        rotate?: number | string | undefined;\n        rx?: number | string | undefined;\n        ry?: number | string | undefined;\n        scale?: number | string | undefined;\n        seed?: number | string | undefined;\n        shapeRendering?: number | string | undefined;\n        slope?: number | string | undefined;\n        spacing?: number | string | undefined;\n        specularConstant?: number | string | undefined;\n        specularExponent?: number | string | undefined;\n        speed?: number | string | undefined;\n        spreadMethod?: string | undefined;\n        startOffset?: number | string | undefined;\n        stdDeviation?: number | string | undefined;\n        stemh?: number | string | undefined;\n        stemv?: number | string | undefined;\n        stitchTiles?: number | string | undefined;\n        stopColor?: string | undefined;\n        stopOpacity?: number | string | undefined;\n        strikethroughPosition?: number | string | undefined;\n        strikethroughThickness?: number | string | undefined;\n        string?: number | string | undefined;\n        stroke?: string | undefined;\n        strokeDasharray?: string | number | undefined;\n        strokeDashoffset?: string | number | undefined;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\" | undefined;\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\" | undefined;\n        strokeMiterlimit?: number | string | undefined;\n        strokeOpacity?: number | string | undefined;\n        strokeWidth?: number | string | undefined;\n        surfaceScale?: number | string | undefined;\n        systemLanguage?: number | string | undefined;\n        tableValues?: number | string | undefined;\n        targetX?: number | string | undefined;\n        targetY?: number | string | undefined;\n        textAnchor?: string | undefined;\n        textDecoration?: number | string | undefined;\n        textLength?: number | string | undefined;\n        textRendering?: number | string | undefined;\n        to?: number | string | undefined;\n        transform?: string | undefined;\n        u1?: number | string | undefined;\n        u2?: number | string | undefined;\n        underlinePosition?: number | string | undefined;\n        underlineThickness?: number | string | undefined;\n        unicode?: number | string | undefined;\n        unicodeBidi?: number | string | undefined;\n        unicodeRange?: number | string | undefined;\n        unitsPerEm?: number | string | undefined;\n        vAlphabetic?: number | string | undefined;\n        values?: string | undefined;\n        vectorEffect?: number | string | undefined;\n        version?: string | undefined;\n        vertAdvY?: number | string | undefined;\n        vertOriginX?: number | string | undefined;\n        vertOriginY?: number | string | undefined;\n        vHanging?: number | string | undefined;\n        vIdeographic?: number | string | undefined;\n        viewBox?: string | undefined;\n        viewTarget?: number | string | undefined;\n        visibility?: number | string | undefined;\n        vMathematical?: number | string | undefined;\n        widths?: number | string | undefined;\n        wordSpacing?: number | string | undefined;\n        writingMode?: number | string | undefined;\n        x1?: number | string | undefined;\n        x2?: number | string | undefined;\n        x?: number | string | undefined;\n        xChannelSelector?: string | undefined;\n        xHeight?: number | string | undefined;\n        xlinkActuate?: string | undefined;\n        xlinkArcrole?: string | undefined;\n        xlinkHref?: string | undefined;\n        xlinkRole?: string | undefined;\n        xlinkShow?: string | undefined;\n        xlinkTitle?: string | undefined;\n        xlinkType?: string | undefined;\n        xmlBase?: string | undefined;\n        xmlLang?: string | undefined;\n        xmlns?: string | undefined;\n        xmlnsXlink?: string | undefined;\n        xmlSpace?: string | undefined;\n        y1?: number | string | undefined;\n        y2?: number | string | undefined;\n        y?: number | string | undefined;\n        yChannelSelector?: string | undefined;\n        z?: number | string | undefined;\n        zoomAndPan?: string | undefined;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean | undefined;\n        allowpopups?: boolean | undefined;\n        autosize?: boolean | undefined;\n        blinkfeatures?: string | undefined;\n        disableblinkfeatures?: string | undefined;\n        disableguestresize?: boolean | undefined;\n        disablewebsecurity?: boolean | undefined;\n        guestinstance?: string | undefined;\n        httpreferrer?: string | undefined;\n        nodeintegration?: boolean | undefined;\n        partition?: string | undefined;\n        plugins?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n        useragent?: string | undefined;\n        webpreferences?: string | undefined;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG {}\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>\n            : undefined extends T[K] ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>;\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated - Use `typeof React.Children` instead.\n     */\n    // Sync with type of `const Children`.\n    interface ReactChildren {\n        map<T, C>(\n            children: C | readonly C[],\n            fn: (child: C, index: number) => T,\n        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack?: string | null;\n        digest?: string | null;\n    }\n\n    // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts\n    namespace JSX {\n        interface Element extends GlobalJSXElement {}\n        interface ElementClass extends GlobalJSXElementClass {}\n        interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}\n        interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}\n\n        type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}\n        interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}\n        interface IntrinsicElements extends GlobalJSXIntrinsicElements {}\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n        : string extends keyof P ? P\n            // Prefer declared types which are not exactly any\n        :\n            & Pick<P, NotExactlyAnyPropertyKeys<P>>\n            // For props which are exactly any, use the type inferred from propTypes if present\n            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n            // Keep leftover props not specified in propTypes\n            & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\ntype InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>\n    : C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P;\n\ndeclare global {\n    /**\n     * @deprecated Use `React.JSX` instead of the global `JSX` namespace.\n     */\n    namespace JSX {\n        interface Element extends React.ReactElement<any, any> {}\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty {\n            props: {};\n        }\n        interface ElementChildrenAttribute {\n            children: {};\n        }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends\n            React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n            : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends React.Attributes {}\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> {}\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGLineElementAttributes<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            set: React.SVGProps<SVGSetElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGTextElementAttributes<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n\n// React.JSX needs to point to global.JSX to keep global module augmentations intact.\n// But we can't access global.JSX so we need to create these aliases instead.\n// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX\ninterface GlobalJSXElement extends JSX.Element {}\ninterface GlobalJSXElementClass extends JSX.ElementClass {}\ninterface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}\ninterface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}\n\ntype GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;\n\ninterface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}\ninterface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}\n\ninterface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}\n","../@types+react@18.2.66/node_modules/@types/react/ts5.0/global.d.ts":"/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event {}\ninterface AnimationEvent extends Event {}\ninterface ClipboardEvent extends Event {}\ninterface CompositionEvent extends Event {}\ninterface DragEvent extends Event {}\ninterface FocusEvent extends Event {}\ninterface KeyboardEvent extends Event {}\ninterface MouseEvent extends Event {}\ninterface TouchEvent extends Event {}\ninterface PointerEvent extends Event {}\ninterface TransitionEvent extends Event {}\ninterface UIEvent extends Event {}\ninterface WheelEvent extends Event {}\n\ninterface EventTarget {}\ninterface Document {}\ninterface DataTransfer {}\ninterface StyleMedia {}\n\ninterface Element {}\ninterface DocumentFragment {}\n\ninterface HTMLElement extends Element {}\ninterface HTMLAnchorElement extends HTMLElement {}\ninterface HTMLAreaElement extends HTMLElement {}\ninterface HTMLAudioElement extends HTMLElement {}\ninterface HTMLBaseElement extends HTMLElement {}\ninterface HTMLBodyElement extends HTMLElement {}\ninterface HTMLBRElement extends HTMLElement {}\ninterface HTMLButtonElement extends HTMLElement {}\ninterface HTMLCanvasElement extends HTMLElement {}\ninterface HTMLDataElement extends HTMLElement {}\ninterface HTMLDataListElement extends HTMLElement {}\ninterface HTMLDetailsElement extends HTMLElement {}\ninterface HTMLDialogElement extends HTMLElement {}\ninterface HTMLDivElement extends HTMLElement {}\ninterface HTMLDListElement extends HTMLElement {}\ninterface HTMLEmbedElement extends HTMLElement {}\ninterface HTMLFieldSetElement extends HTMLElement {}\ninterface HTMLFormElement extends HTMLElement {}\ninterface HTMLHeadingElement extends HTMLElement {}\ninterface HTMLHeadElement extends HTMLElement {}\ninterface HTMLHRElement extends HTMLElement {}\ninterface HTMLHtmlElement extends HTMLElement {}\ninterface HTMLIFrameElement extends HTMLElement {}\ninterface HTMLImageElement extends HTMLElement {}\ninterface HTMLInputElement extends HTMLElement {}\ninterface HTMLModElement extends HTMLElement {}\ninterface HTMLLabelElement extends HTMLElement {}\ninterface HTMLLegendElement extends HTMLElement {}\ninterface HTMLLIElement extends HTMLElement {}\ninterface HTMLLinkElement extends HTMLElement {}\ninterface HTMLMapElement extends HTMLElement {}\ninterface HTMLMetaElement extends HTMLElement {}\ninterface HTMLMeterElement extends HTMLElement {}\ninterface HTMLObjectElement extends HTMLElement {}\ninterface HTMLOListElement extends HTMLElement {}\ninterface HTMLOptGroupElement extends HTMLElement {}\ninterface HTMLOptionElement extends HTMLElement {}\ninterface HTMLOutputElement extends HTMLElement {}\ninterface HTMLParagraphElement extends HTMLElement {}\ninterface HTMLParamElement extends HTMLElement {}\ninterface HTMLPreElement extends HTMLElement {}\ninterface HTMLProgressElement extends HTMLElement {}\ninterface HTMLQuoteElement extends HTMLElement {}\ninterface HTMLSlotElement extends HTMLElement {}\ninterface HTMLScriptElement extends HTMLElement {}\ninterface HTMLSelectElement extends HTMLElement {}\ninterface HTMLSourceElement extends HTMLElement {}\ninterface HTMLSpanElement extends HTMLElement {}\ninterface HTMLStyleElement extends HTMLElement {}\ninterface HTMLTableElement extends HTMLElement {}\ninterface HTMLTableColElement extends HTMLElement {}\ninterface HTMLTableDataCellElement extends HTMLElement {}\ninterface HTMLTableHeaderCellElement extends HTMLElement {}\ninterface HTMLTableRowElement extends HTMLElement {}\ninterface HTMLTableSectionElement extends HTMLElement {}\ninterface HTMLTemplateElement extends HTMLElement {}\ninterface HTMLTextAreaElement extends HTMLElement {}\ninterface HTMLTimeElement extends HTMLElement {}\ninterface HTMLTitleElement extends HTMLElement {}\ninterface HTMLTrackElement extends HTMLElement {}\ninterface HTMLUListElement extends HTMLElement {}\ninterface HTMLVideoElement extends HTMLElement {}\ninterface HTMLWebViewElement extends HTMLElement {}\n\ninterface SVGElement extends Element {}\ninterface SVGSVGElement extends SVGElement {}\ninterface SVGCircleElement extends SVGElement {}\ninterface SVGClipPathElement extends SVGElement {}\ninterface SVGDefsElement extends SVGElement {}\ninterface SVGDescElement extends SVGElement {}\ninterface SVGEllipseElement extends SVGElement {}\ninterface SVGFEBlendElement extends SVGElement {}\ninterface SVGFEColorMatrixElement extends SVGElement {}\ninterface SVGFEComponentTransferElement extends SVGElement {}\ninterface SVGFECompositeElement extends SVGElement {}\ninterface SVGFEConvolveMatrixElement extends SVGElement {}\ninterface SVGFEDiffuseLightingElement extends SVGElement {}\ninterface SVGFEDisplacementMapElement extends SVGElement {}\ninterface SVGFEDistantLightElement extends SVGElement {}\ninterface SVGFEDropShadowElement extends SVGElement {}\ninterface SVGFEFloodElement extends SVGElement {}\ninterface SVGFEFuncAElement extends SVGElement {}\ninterface SVGFEFuncBElement extends SVGElement {}\ninterface SVGFEFuncGElement extends SVGElement {}\ninterface SVGFEFuncRElement extends SVGElement {}\ninterface SVGFEGaussianBlurElement extends SVGElement {}\ninterface SVGFEImageElement extends SVGElement {}\ninterface SVGFEMergeElement extends SVGElement {}\ninterface SVGFEMergeNodeElement extends SVGElement {}\ninterface SVGFEMorphologyElement extends SVGElement {}\ninterface SVGFEOffsetElement extends SVGElement {}\ninterface SVGFEPointLightElement extends SVGElement {}\ninterface SVGFESpecularLightingElement extends SVGElement {}\ninterface SVGFESpotLightElement extends SVGElement {}\ninterface SVGFETileElement extends SVGElement {}\ninterface SVGFETurbulenceElement extends SVGElement {}\ninterface SVGFilterElement extends SVGElement {}\ninterface SVGForeignObjectElement extends SVGElement {}\ninterface SVGGElement extends SVGElement {}\ninterface SVGImageElement extends SVGElement {}\ninterface SVGLineElement extends SVGElement {}\ninterface SVGLinearGradientElement extends SVGElement {}\ninterface SVGMarkerElement extends SVGElement {}\ninterface SVGMaskElement extends SVGElement {}\ninterface SVGMetadataElement extends SVGElement {}\ninterface SVGPathElement extends SVGElement {}\ninterface SVGPatternElement extends SVGElement {}\ninterface SVGPolygonElement extends SVGElement {}\ninterface SVGPolylineElement extends SVGElement {}\ninterface SVGRadialGradientElement extends SVGElement {}\ninterface SVGRectElement extends SVGElement {}\ninterface SVGSetElement extends SVGElement {}\ninterface SVGStopElement extends SVGElement {}\ninterface SVGSwitchElement extends SVGElement {}\ninterface SVGSymbolElement extends SVGElement {}\ninterface SVGTextElement extends SVGElement {}\ninterface SVGTextPathElement extends SVGElement {}\ninterface SVGTSpanElement extends SVGElement {}\ninterface SVGUseElement extends SVGElement {}\ninterface SVGViewElement extends SVGElement {}\n\ninterface FormData {}\ninterface Text {}\ninterface TouchList {}\ninterface WebGLRenderingContext {}\ninterface WebGL2RenderingContext {}\n\ninterface TrustedHTML {}\n","../@types+react@18.2.66/node_modules/@types/react/ts5.0/experimental.d.ts":"/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,\n// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are\n// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.\n//\n// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js\n// is a good place to start looking for details; it generally calls prop validation functions or delegates\n// all tasks done as part of the render phase (the concurrent part of the React update cycle).\n//\n// Suspense-related handling can be found in ReactFiberThrow.js.\n\nimport React = require(\"./canary\");\n\nexport {};\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\ndeclare module \".\" {\n    /**\n     * @internal Use `Awaited<ReactNode>` instead\n     */\n    // Helper type to enable `Awaited<ReactNode>`.\n    // Must be a copy of the non-thenables of `ReactNode`.\n    type AwaitedReactNode =\n        | ReactElement\n        | string\n        | number\n        | Iterable<AwaitedReactNode>\n        | ReactPortal\n        | boolean\n        | null\n        | undefined;\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {\n        promises: Promise<AwaitedReactNode>;\n    }\n\n    export interface SuspenseProps {\n        /**\n         * The presence of this prop indicates that the content is computationally expensive to render.\n         * In other words, the tree is CPU bound and not I/O bound (e.g. due to fetching data).\n         * @see {@link https://github.com/facebook/react/pull/19936}\n         */\n        unstable_expectedLoadTime?: number | undefined;\n    }\n\n    export type SuspenseListRevealOrder = \"forwards\" | \"backwards\" | \"together\";\n    export type SuspenseListTailMode = \"collapsed\" | \"hidden\";\n\n    export interface SuspenseListCommonProps {\n        /**\n         * Note that SuspenseList require more than one child;\n         * it is a runtime warning to provide only a single child.\n         *\n         * It does, however, allow those children to be wrapped inside a single\n         * level of `<React.Fragment>`.\n         */\n        children: ReactElement | Iterable<ReactElement>;\n    }\n\n    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder: \"forwards\" | \"backwards\";\n        /**\n         * Dictates how unloaded items in a SuspenseList is shown.\n         *\n         * - By default, `SuspenseList` will show all fallbacks in the list.\n         * - `collapsed` shows only the next fallback in the list.\n         * - `hidden` doesn’t show any unloaded items.\n         */\n        tail?: SuspenseListTailMode | undefined;\n    }\n\n    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps[\"revealOrder\"]> | undefined;\n        /**\n         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.\n         */\n        tail?: never | undefined;\n    }\n\n    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;\n\n    /**\n     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order\n     * in which these components are revealed to the user.\n     *\n     * When multiple components need to fetch data, this data may arrive in an unpredictable order.\n     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list\n     * until previous items have been displayed (this behavior is adjustable).\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist\n     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist\n     */\n    export const unstable_SuspenseList: ExoticComponent<SuspenseListProps>;\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    export function experimental_useEffectEvent<T extends Function>(event: T): T;\n\n    type Reference = object;\n    type TaintableUniqueValue = string | bigint | ArrayBufferView;\n    function experimental_taintUniqueValue(\n        message: string | undefined,\n        lifetime: Reference,\n        value: TaintableUniqueValue,\n    ): void;\n    function experimental_taintObjectReference(message: string | undefined, object: Reference): void;\n}\n","../@types+react@18.2.66/node_modules/@types/react/ts5.0/canary.d.ts":"/**\n * These are types for things that are present in the React `canary` release channel.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/canary\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/canary'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/canary\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react/src/React.js to see how the exports are declared,\n\nimport React = require(\".\");\n\nexport {};\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\ndeclare module \".\" {\n    interface ThenableImpl<T> {\n        then(onFulfill: (value: T) => unknown, onReject: (error: unknown) => unknown): void | PromiseLike<unknown>;\n    }\n    interface UntrackedThenable<T> extends ThenableImpl<T> {\n        status?: void;\n    }\n\n    export interface PendingThenable<T> extends ThenableImpl<T> {\n        status: \"pending\";\n    }\n\n    export interface FulfilledThenable<T> extends ThenableImpl<T> {\n        status: \"fulfilled\";\n        value: T;\n    }\n\n    export interface RejectedThenable<T> extends ThenableImpl<T> {\n        status: \"rejected\";\n        reason: unknown;\n    }\n\n    export type Thenable<T> = UntrackedThenable<T> | PendingThenable<T> | FulfilledThenable<T> | RejectedThenable<T>;\n\n    export type Usable<T> = Thenable<T> | Context<T>;\n\n    export function use<T>(usable: Usable<T>): T;\n\n    interface ServerContextJSONArray extends ReadonlyArray<ServerContextJSONValue> {}\n    export type ServerContextJSONValue =\n        | string\n        | boolean\n        | number\n        | null\n        | ServerContextJSONArray\n        | { [key: string]: ServerContextJSONValue };\n    export interface ServerContext<T extends ServerContextJSONValue> {\n        Provider: Provider<T>;\n    }\n    /**\n     * Accepts a context object (the value returned from `React.createContext` or `React.createServerContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useContext\n     */\n    function useContext<T extends ServerContextJSONValue>(context: ServerContext<T>): T;\n    export function createServerContext<T extends ServerContextJSONValue>(\n        globalName: string,\n        defaultValue: T,\n    ): ServerContext<T>;\n\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    export function cache<CachedFunction extends Function>(fn: CachedFunction): CachedFunction;\n\n    export function unstable_useCacheRefresh(): () => void;\n\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {\n        functions: (formData: FormData) => void;\n    }\n\n    export interface TransitionStartFunction {\n        /**\n         * Marks all state updates inside the async function as transitions\n         *\n         * @see {https://react.dev/reference/react/useTransition#starttransition}\n         *\n         * @param callback\n         */\n        (callback: () => Promise<VoidOrUndefinedOnly>): void;\n    }\n\n    function useOptimistic<State>(\n        passthrough: State,\n    ): [State, (action: State | ((pendingState: State) => State)) => void];\n    function useOptimistic<State, Action>(\n        passthrough: State,\n        reducer: (state: State, action: Action) => State,\n    ): [State, (action: Action) => void];\n}\n","../@types+react-dom@18.2.22/node_modules/@types/react-dom/package.json":"{\n  \"name\": \"react-dom\",\n  \"version\": \"18.2.0\",\n  \"description\": \"React package for working with the DOM.\",\n  \"main\": \"index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/facebook/react.git\",\n    \"directory\": \"packages/react-dom\"\n  },\n  \"keywords\": [\n    \"react\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/facebook/react/issues\"\n  },\n  \"homepage\": \"https://reactjs.org/\",\n  \"dependencies\": {\n    \"loose-envify\": \"^1.1.0\",\n    \"scheduler\": \"^0.23.0\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^18.2.0\"\n  },\n  \"files\": [\n    \"LICENSE\",\n    \"README.md\",\n    \"index.js\",\n    \"client.js\",\n    \"profiling.js\",\n    \"server.js\",\n    \"server.browser.js\",\n    \"server.node.js\",\n    \"test-utils.js\",\n    \"cjs/\",\n    \"umd/\"\n  ],\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./client\": \"./client.js\",\n    \"./server\": {\n      \"deno\": \"./server.browser.js\",\n      \"worker\": \"./server.browser.js\",\n      \"browser\": \"./server.browser.js\",\n      \"default\": \"./server.node.js\"\n    },\n    \"./server.browser\": \"./server.browser.js\",\n    \"./server.node\": \"./server.node.js\",\n    \"./profiling\": \"./profiling.js\",\n    \"./test-utils\": \"./test-utils.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"browser\": {\n    \"./server.js\": \"./server.browser.js\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"loose-envify\"\n    ]\n  }\n}","../@types+react-dom@18.2.22/node_modules/@types/react-dom/server.d.ts":"// forward declarations\ndeclare global {\n    namespace NodeJS {\n        // eslint-disable-next-line @typescript-eslint/no-empty-interface\n        interface ReadableStream {}\n\n        // eslint-disable-next-line @typescript-eslint/no-empty-interface\n        interface WritableStream {}\n    }\n\n    /**\n     * Stub for https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface AbortSignal {}\n\n    /**\n     * Stub for https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-interface\n    interface ReadableStream {}\n}\n\nimport { ReactNode } from \"react\";\nimport { ErrorInfo } from \"./client\";\n\nexport interface RenderToPipeableStreamOptions {\n    identifierPrefix?: string;\n    namespaceURI?: string;\n    nonce?: string;\n    bootstrapScriptContent?: string;\n    bootstrapScripts?: string[];\n    bootstrapModules?: string[];\n    progressiveChunkSize?: number;\n    onShellReady?: () => void;\n    onShellError?: (error: unknown) => void;\n    onAllReady?: () => void;\n    onError?: (error: unknown, errorInfo: ErrorInfo) => string | void;\n}\n\nexport interface PipeableStream {\n    abort: (reason?: unknown) => void;\n    pipe: <Writable extends NodeJS.WritableStream>(destination: Writable) => Writable;\n}\n\nexport interface ServerOptions {\n    identifierPrefix?: string;\n}\n\n/**\n * Only available in the environments with [Node.js Streams](https://nodejs.dev/learn/nodejs-streams).\n *\n * @see [API](https://reactjs.org/docs/react-dom-server.html#rendertopipeablestream)\n *\n * @param children\n * @param options\n */\nexport function renderToPipeableStream(children: ReactNode, options?: RenderToPipeableStreamOptions): PipeableStream;\n\n/**\n * Render a React element to its initial HTML. This should only be used on the server.\n * React will return an HTML string. You can use this method to generate HTML on the server\n * and send the markup down on the initial request for faster page loads and to allow search\n * engines to crawl your pages for SEO purposes.\n *\n * If you call `ReactDOMClient.hydrateRoot()` on a node that already has this server-rendered markup,\n * React will preserve it and only attach event handlers, allowing you\n * to have a very performant first-load experience.\n */\nexport function renderToString(element: ReactNode, options?: ServerOptions): string;\n\n/**\n * Render a React element to its initial HTML. Returns a Readable stream that outputs\n * an HTML string. The HTML output by this stream is exactly equal to what\n * `ReactDOMServer.renderToString()` would return.\n *\n * @deprecated\n */\nexport function renderToNodeStream(element: ReactNode, options?: ServerOptions): NodeJS.ReadableStream;\n\n/**\n * Similar to `renderToString`, except this doesn't create extra DOM attributes\n * such as `data-reactid`, that React uses internally. This is useful if you want\n * to use React as a simple static page generator, as stripping away the extra\n * attributes can save lots of bytes.\n */\nexport function renderToStaticMarkup(element: ReactNode, options?: ServerOptions): string;\n\n/**\n * Similar to `renderToNodeStream`, except this doesn't create extra DOM attributes\n * such as `data-reactid`, that React uses internally. The HTML output by this stream\n * is exactly equal to what `ReactDOMServer.renderToStaticMarkup()` would return.\n */\nexport function renderToStaticNodeStream(element: ReactNode, options?: ServerOptions): NodeJS.ReadableStream;\n\nexport interface RenderToReadableStreamOptions {\n    identifierPrefix?: string;\n    namespaceURI?: string;\n    nonce?: string;\n    bootstrapScriptContent?: string;\n    bootstrapScripts?: string[];\n    bootstrapModules?: string[];\n    progressiveChunkSize?: number;\n    signal?: AbortSignal;\n    onError?: (error: unknown, errorInfo: ErrorInfo) => string | void;\n}\n\nexport interface ReactDOMServerReadableStream extends ReadableStream {\n    allReady: Promise<void>;\n}\n\n/**\n * Only available in the environments with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) (this includes browsers, Deno, and some modern edge runtimes).\n *\n * @see [API](https://reactjs.org/docs/react-dom-server.html#rendertoreadablestream)\n */\nexport function renderToReadableStream(\n    children: ReactNode,\n    options?: RenderToReadableStreamOptions,\n): Promise<ReactDOMServerReadableStream>;\n\nexport const version: string;\n\nexport as namespace ReactDOMServer;\n","../@types+react-dom@18.2.22/node_modules/@types/react-dom/index.d.ts":"// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react-dom/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\nexport as namespace ReactDOM;\n\nimport {\n    CElement,\n    Component,\n    ComponentState,\n    DOMAttributes,\n    DOMElement,\n    FunctionComponentElement,\n    ReactElement,\n    ReactInstance,\n    ReactNode,\n    ReactPortal,\n} from \"react\";\n\nexport function findDOMNode(instance: ReactInstance | null | undefined): Element | null | Text;\nexport function unmountComponentAtNode(container: Element | DocumentFragment): boolean;\n\nexport function createPortal(\n    children: ReactNode,\n    container: Element | DocumentFragment,\n    key?: null | string,\n): ReactPortal;\n\nexport const version: string;\nexport const render: Renderer;\nexport const hydrate: Renderer;\n\nexport function flushSync<R>(fn: () => R): R;\nexport function flushSync<A, R>(fn: (a: A) => R, a: A): R;\n\nexport function unstable_batchedUpdates<A, R>(callback: (a: A) => R, a: A): R;\nexport function unstable_batchedUpdates<R>(callback: () => R): R;\n\nexport function unstable_renderSubtreeIntoContainer<T extends Element>(\n    parentComponent: Component<any>,\n    element: DOMElement<DOMAttributes<T>, T>,\n    container: Element,\n    callback?: (element: T) => any,\n): T;\nexport function unstable_renderSubtreeIntoContainer<P, T extends Component<P, ComponentState>>(\n    parentComponent: Component<any>,\n    element: CElement<P, T>,\n    container: Element,\n    callback?: (component: T) => any,\n): T;\nexport function unstable_renderSubtreeIntoContainer<P>(\n    parentComponent: Component<any>,\n    element: ReactElement<P>,\n    container: Element,\n    callback?: (component?: Component<P, ComponentState> | Element) => any,\n    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n): Component<P, ComponentState> | Element | void;\n\nexport type Container = Element | Document | DocumentFragment;\n\nexport interface Renderer {\n    // Deprecated(render): The return value is deprecated.\n    // In future releases the render function's return type will be void.\n\n    <T extends Element>(\n        element: DOMElement<DOMAttributes<T>, T>,\n        container: Container | null,\n        callback?: () => void,\n    ): T;\n\n    (\n        element: Array<DOMElement<DOMAttributes<any>, any>>,\n        container: Container | null,\n        callback?: () => void,\n    ): Element;\n\n    (\n        element: FunctionComponentElement<any> | Array<FunctionComponentElement<any>>,\n        container: Container | null,\n        callback?: () => void,\n    ): void;\n\n    <P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        container: Container | null,\n        callback?: () => void,\n    ): T;\n\n    (\n        element: Array<CElement<any, Component<any, ComponentState>>>,\n        container: Container | null,\n        callback?: () => void,\n    ): Component<any, ComponentState>;\n\n    <P>(\n        element: ReactElement<P>,\n        container: Container | null,\n        callback?: () => void,\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n    ): Component<P, ComponentState> | Element | void;\n\n    (\n        element: ReactElement[],\n        container: Container | null,\n        callback?: () => void,\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n    ): Component<any, ComponentState> | Element | void;\n}\n","../@types+react-dom@18.2.22/node_modules/@types/react-dom/experimental.d.ts":"/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react-dom/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react-dom/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react-dom/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react-dom/index.experimental.js to see how the exports are declared,\n// but confirm with published source code (e.g. https://unpkg.com/react-dom@experimental) that these exports end up in the published code\n\nimport React = require(\"react\");\nimport ReactDOM = require(\"./canary\");\n\nexport {};\n\ndeclare module \".\" {\n}\n","../@types+react-dom@18.2.22/node_modules/@types/react-dom/client.d.ts":"/**\n * WARNING: This entrypoint is only available starting with `react-dom@18.0.0-rc.1`\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react-dom/client.js to see how the exports are declared,\n\nimport React = require(\"react\");\nexport interface HydrationOptions {\n    /**\n     * Prefix for `useId`.\n     */\n    identifierPrefix?: string;\n    onRecoverableError?: (error: unknown, errorInfo: ErrorInfo) => void;\n}\n\nexport interface RootOptions {\n    /**\n     * Prefix for `useId`.\n     */\n    identifierPrefix?: string;\n    onRecoverableError?: (error: unknown, errorInfo: ErrorInfo) => void;\n}\n\nexport interface ErrorInfo {\n    digest?: string;\n    componentStack?: string;\n}\n\nexport interface Root {\n    render(children: React.ReactNode): void;\n    unmount(): void;\n}\n\n/**\n * Different release channels declare additional types of ReactNode this particular release channel accepts.\n * App or library types should never augment this interface.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS {}\n\nexport type Container =\n    | Element\n    | DocumentFragment\n    | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS[\n        keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS\n    ];\n\n/**\n * createRoot lets you create a root to display React components inside a browser DOM node.\n *\n * @see {@link https://react.dev/reference/react-dom/client/createRoot API Reference for `createRoot`}\n */\nexport function createRoot(container: Container, options?: RootOptions): Root;\n\n/**\n * Same as `createRoot()`, but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer.\n *\n * React will attempt to attach event listeners to the existing markup.\n *\n * **Example Usage**\n *\n * ```jsx\n * hydrateRoot(document.querySelector('#root'), <App />)\n * ```\n *\n * @see https://reactjs.org/docs/react-dom-client.html#hydrateroot\n */\nexport function hydrateRoot(\n    container: Element | Document,\n    initialChildren: React.ReactNode,\n    options?: HydrationOptions,\n): Root;\n","../@types+react-dom@18.2.22/node_modules/@types/react-dom/canary.d.ts":"/**\n * These are types for things that are present in the upcoming React 18 release.\n *\n * Once React 18 is released they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react-dom/canary\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react-dom/canary'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react-dom/canary\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react-dom/index.js to see how the exports are declared,\n// but confirm with published source code (e.g. https://unpkg.com/react-dom@canary) that these exports end up in the published code\n\nimport React = require(\"react\");\nimport ReactDOM = require(\".\");\n\nexport {};\n\ndeclare const REACT_FORM_STATE_SIGIL: unique symbol;\n\ndeclare module \".\" {\n    function prefetchDNS(href: string): void;\n\n    interface PreconnectOptions {\n        // Don't create a helper type.\n        // It would have to be in module scope to be inlined in TS tooltips.\n        // But then it becomes part of the public API.\n        // TODO: Upstream to microsoft/TypeScript-DOM-lib-generator -> w3c/webref\n        // since the spec has a notion of a dedicated type: https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attribute\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n    }\n    function preconnect(href: string, options?: PreconnectOptions): void;\n\n    type PreloadAs =\n        | \"audio\"\n        | \"document\"\n        | \"embed\"\n        | \"fetch\"\n        | \"font\"\n        | \"image\"\n        | \"object\"\n        | \"track\"\n        | \"script\"\n        | \"style\"\n        | \"video\"\n        | \"worker\";\n    interface PreloadOptions {\n        as: PreloadAs;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        fetchPriority?: \"high\" | \"low\" | \"auto\" | undefined;\n        // TODO: These should only be allowed with `as: 'image'` but it's not trivial to write tests against the full TS support matrix.\n        imageSizes?: string | undefined;\n        imageSrcSet?: string | undefined;\n        integrity?: string | undefined;\n        type?: string | undefined;\n        nonce?: string | undefined;\n        referrerPolicy?: ReferrerPolicy | undefined;\n    }\n    function preload(href: string, options?: PreloadOptions): void;\n\n    // https://html.spec.whatwg.org/multipage/links.html#link-type-modulepreload\n    type PreloadModuleAs = RequestDestination;\n    interface PreloadModuleOptions {\n        /**\n         * @default \"script\"\n         */\n        as: PreloadModuleAs;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        integrity?: string | undefined;\n        nonce?: string | undefined;\n    }\n    function preloadModule(href: string, options?: PreloadModuleOptions): void;\n\n    type PreinitAs = \"script\" | \"style\";\n    interface PreinitOptions {\n        as: PreinitAs;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        fetchPriority?: \"high\" | \"low\" | \"auto\" | undefined;\n        precedence?: string | undefined;\n        integrity?: string | undefined;\n        nonce?: string | undefined;\n    }\n    function preinit(href: string, options?: PreinitOptions): void;\n\n    // Will be expanded to include all of https://github.com/tc39/proposal-import-attributes\n    type PreinitModuleAs = \"script\";\n    interface PreinitModuleOptions {\n        /**\n         * @default \"script\"\n         */\n        as?: PreinitModuleAs;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        integrity?: string | undefined;\n        nonce?: string | undefined;\n    }\n    function preinitModule(href: string, options?: PreinitModuleOptions): void;\n\n    interface FormStatusNotPending {\n        pending: false;\n        data: null;\n        method: null;\n        action: null;\n    }\n\n    interface FormStatusPending {\n        pending: true;\n        data: FormData;\n        method: string;\n        action: string | ((formData: FormData) => void | Promise<void>);\n    }\n\n    type FormStatus = FormStatusPending | FormStatusNotPending;\n\n    function useFormStatus(): FormStatus;\n\n    function useFormState<State>(\n        action: (state: Awaited<State>) => State | Promise<State>,\n        initialState: Awaited<State>,\n        permalink?: string,\n    ): [state: Awaited<State>, dispatch: () => void, isPending: boolean];\n    function useFormState<State, Payload>(\n        action: (state: Awaited<State>, payload: Payload) => State | Promise<State>,\n        initialState: Awaited<State>,\n        permalink?: string,\n    ): [state: Awaited<State>, dispatch: (payload: Payload) => void, isPending: boolean];\n}\n\ndeclare module \"./client\" {\n    interface ReactFormState {\n        [REACT_FORM_STATE_SIGIL]: never;\n    }\n\n    interface HydrationOptions {\n        formState?: ReactFormState | null;\n    }\n\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS {\n        document: Document;\n    }\n}\n","../@types+react-dom@18.2.22/node_modules/@types/react-dom/test-utils/index.d.ts":"import {\n    AbstractView,\n    CElement,\n    ClassType,\n    Component,\n    ComponentClass,\n    DOMAttributes,\n    DOMElement,\n    FC,\n    FunctionComponentElement,\n    ReactElement,\n    ReactHTMLElement,\n    ReactInstance,\n} from \"react\";\n\nimport * as ReactTestUtils from \".\";\n\nexport {};\n\nexport interface OptionalEventProperties {\n    bubbles?: boolean | undefined;\n    cancelable?: boolean | undefined;\n    currentTarget?: EventTarget | undefined;\n    defaultPrevented?: boolean | undefined;\n    eventPhase?: number | undefined;\n    isTrusted?: boolean | undefined;\n    nativeEvent?: Event | undefined;\n    preventDefault?(): void;\n    stopPropagation?(): void;\n    target?: EventTarget | undefined;\n    timeStamp?: Date | undefined;\n    type?: string | undefined;\n}\n\nexport type ModifierKey =\n    | \"Alt\"\n    | \"AltGraph\"\n    | \"CapsLock\"\n    | \"Control\"\n    | \"Fn\"\n    | \"FnLock\"\n    | \"Hyper\"\n    | \"Meta\"\n    | \"NumLock\"\n    | \"ScrollLock\"\n    | \"Shift\"\n    | \"Super\"\n    | \"Symbol\"\n    | \"SymbolLock\";\n\nexport interface SyntheticEventData extends OptionalEventProperties {\n    altKey?: boolean | undefined;\n    button?: number | undefined;\n    buttons?: number | undefined;\n    clientX?: number | undefined;\n    clientY?: number | undefined;\n    changedTouches?: TouchList | undefined;\n    charCode?: number | undefined;\n    clipboardData?: DataTransfer | undefined;\n    ctrlKey?: boolean | undefined;\n    deltaMode?: number | undefined;\n    deltaX?: number | undefined;\n    deltaY?: number | undefined;\n    deltaZ?: number | undefined;\n    detail?: number | undefined;\n    getModifierState?(key: ModifierKey): boolean;\n    key?: string | undefined;\n    keyCode?: number | undefined;\n    locale?: string | undefined;\n    location?: number | undefined;\n    metaKey?: boolean | undefined;\n    pageX?: number | undefined;\n    pageY?: number | undefined;\n    relatedTarget?: EventTarget | undefined;\n    repeat?: boolean | undefined;\n    screenX?: number | undefined;\n    screenY?: number | undefined;\n    shiftKey?: boolean | undefined;\n    targetTouches?: TouchList | undefined;\n    touches?: TouchList | undefined;\n    view?: AbstractView | undefined;\n    which?: number | undefined;\n}\n\nexport type EventSimulator = (element: Element | Component<any>, eventData?: SyntheticEventData) => void;\n\nexport interface MockedComponentClass {\n    new(props: any): any;\n}\n\nexport interface ShallowRenderer {\n    /**\n     * After `shallowRenderer.render()` has been called, returns shallowly rendered output.\n     */\n    getRenderOutput<E extends ReactElement>(): E;\n    /**\n     * Similar to `ReactDOM.render` but it doesn't require DOM and only renders a single level deep.\n     */\n    render(element: ReactElement, context?: any): void;\n    unmount(): void;\n}\n\n/**\n * Simulate an event dispatch on a DOM node with optional `eventData` event data.\n * `Simulate` has a method for every event that React understands.\n */\nexport namespace Simulate {\n    const abort: EventSimulator;\n    const animationEnd: EventSimulator;\n    const animationIteration: EventSimulator;\n    const animationStart: EventSimulator;\n    const blur: EventSimulator;\n    const cancel: EventSimulator;\n    const canPlay: EventSimulator;\n    const canPlayThrough: EventSimulator;\n    const change: EventSimulator;\n    const click: EventSimulator;\n    const close: EventSimulator;\n    const compositionEnd: EventSimulator;\n    const compositionStart: EventSimulator;\n    const compositionUpdate: EventSimulator;\n    const contextMenu: EventSimulator;\n    const copy: EventSimulator;\n    const cut: EventSimulator;\n    const auxClick: EventSimulator;\n    const doubleClick: EventSimulator;\n    const drag: EventSimulator;\n    const dragEnd: EventSimulator;\n    const dragEnter: EventSimulator;\n    const dragExit: EventSimulator;\n    const dragLeave: EventSimulator;\n    const dragOver: EventSimulator;\n    const dragStart: EventSimulator;\n    const drop: EventSimulator;\n    const durationChange: EventSimulator;\n    const emptied: EventSimulator;\n    const encrypted: EventSimulator;\n    const ended: EventSimulator;\n    const error: EventSimulator;\n    const focus: EventSimulator;\n    const input: EventSimulator;\n    const invalid: EventSimulator;\n    const keyDown: EventSimulator;\n    const keyPress: EventSimulator;\n    const keyUp: EventSimulator;\n    const load: EventSimulator;\n    const loadStart: EventSimulator;\n    const loadedData: EventSimulator;\n    const loadedMetadata: EventSimulator;\n    const mouseDown: EventSimulator;\n    const mouseEnter: EventSimulator;\n    const mouseLeave: EventSimulator;\n    const mouseMove: EventSimulator;\n    const mouseOut: EventSimulator;\n    const mouseOver: EventSimulator;\n    const mouseUp: EventSimulator;\n    const paste: EventSimulator;\n    const pause: EventSimulator;\n    const play: EventSimulator;\n    const playing: EventSimulator;\n    const progress: EventSimulator;\n    const pointerCancel: EventSimulator;\n    const pointerDown: EventSimulator;\n    const pointerUp: EventSimulator;\n    const pointerMove: EventSimulator;\n    const pointerOut: EventSimulator;\n    const pointerOver: EventSimulator;\n    const pointerEnter: EventSimulator;\n    const pointerLeave: EventSimulator;\n    const gotPointerCapture: EventSimulator;\n    const lostPointerCapture: EventSimulator;\n    const rateChange: EventSimulator;\n    const reset: EventSimulator;\n    const resize: EventSimulator;\n    const scroll: EventSimulator;\n    const toggle: EventSimulator;\n    const seeked: EventSimulator;\n    const seeking: EventSimulator;\n    const select: EventSimulator;\n    const beforeInput: EventSimulator;\n    const stalled: EventSimulator;\n    const submit: EventSimulator;\n    const suspend: EventSimulator;\n    const timeUpdate: EventSimulator;\n    const touchCancel: EventSimulator;\n    const touchEnd: EventSimulator;\n    const touchMove: EventSimulator;\n    const touchStart: EventSimulator;\n    const transitionEnd: EventSimulator;\n    const volumeChange: EventSimulator;\n    const waiting: EventSimulator;\n    const wheel: EventSimulator;\n}\n\n/**\n * Render a React element into a detached DOM node in the document. __This function requires a DOM__.\n */\nexport function renderIntoDocument<T extends Element>(\n    element: DOMElement<any, T>,\n): T;\nexport function renderIntoDocument(\n    element: FunctionComponentElement<any>,\n): void;\n// If we replace `P` with `any` in this overload, then some tests fail because\n// calls to `renderIntoDocument` choose the last overload on the\n// subtype-relation pass and get an undesirably broad return type.  Using `P`\n// allows this overload to match on the subtype-relation pass.\nexport function renderIntoDocument<P, T extends Component<P>>(\n    element: CElement<P, T>,\n): T;\nexport function renderIntoDocument<P>(\n    element: ReactElement<P>,\n): Component<P> | Element | void;\n\n/**\n * Pass a mocked component module to this method to augment it with useful methods that allow it to\n * be used as a dummy React component. Instead of rendering as usual, the component will become\n * a simple `<div>` (or other tag if `mockTagName` is provided) containing any provided children.\n */\nexport function mockComponent(\n    mocked: MockedComponentClass,\n    mockTagName?: string,\n): typeof ReactTestUtils;\n\n/**\n * Returns `true` if `element` is any React element.\n */\nexport function isElement(element: any): boolean;\n\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<T extends HTMLElement>(\n    element: ReactElement,\n    type: string,\n): element is ReactHTMLElement<T>;\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<P extends DOMAttributes<{}>, T extends Element>(\n    element: ReactElement,\n    type: string,\n): element is DOMElement<P, T>;\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<P>(\n    element: ReactElement,\n    type: FC<P>,\n): element is FunctionComponentElement<P>;\n/**\n * Returns `true` if `element` is a React element whose type is of a React `componentClass`.\n */\nexport function isElementOfType<P, T extends Component<P>, C extends ComponentClass<P>>(\n    element: ReactElement,\n    type: ClassType<P, T, C>,\n): element is CElement<P, T>;\n\n/**\n * Returns `true` if `instance` is a DOM component (such as a `<div>` or `<span>`).\n */\nexport function isDOMComponent(instance: ReactInstance): instance is Element;\n/**\n * Returns `true` if `instance` is a user-defined component, such as a class or a function.\n */\nexport function isCompositeComponent(instance: ReactInstance): instance is Component<any>;\n/**\n * Returns `true` if `instance` is a component whose type is of a React `componentClass`.\n */\nexport function isCompositeComponentWithType<T extends Component<any>, C extends ComponentClass<any>>(\n    instance: ReactInstance,\n    type: ClassType<any, T, C>,\n): boolean;\n\n/**\n * Traverse all components in `tree` and accumulate all components where\n * `test(component)` is `true`. This is not that useful on its own, but it's used\n * as a primitive for other test utils.\n */\nexport function findAllInRenderedTree(\n    root: Component<any>,\n    fn: (i: ReactInstance) => boolean,\n): ReactInstance[];\n\n/**\n * Finds all DOM elements of components in the rendered tree that are\n * DOM components with the class name matching `className`.\n */\nexport function scryRenderedDOMComponentsWithClass(\n    root: Component<any>,\n    className: string,\n): Element[];\n/**\n * Like `scryRenderedDOMComponentsWithClass()` but expects there to be one result,\n * and returns that one result, or throws exception if there is any other\n * number of matches besides one.\n */\nexport function findRenderedDOMComponentWithClass(\n    root: Component<any>,\n    className: string,\n): Element;\n\n/**\n * Finds all DOM elements of components in the rendered tree that are\n * DOM components with the tag name matching `tagName`.\n */\nexport function scryRenderedDOMComponentsWithTag(\n    root: Component<any>,\n    tagName: string,\n): Element[];\n/**\n * Like `scryRenderedDOMComponentsWithTag()` but expects there to be one result,\n * and returns that one result, or throws exception if there is any other\n * number of matches besides one.\n */\nexport function findRenderedDOMComponentWithTag(\n    root: Component<any>,\n    tagName: string,\n): Element;\n\n/**\n * Finds all instances of components with type equal to `componentClass`.\n */\nexport function scryRenderedComponentsWithType<T extends Component<any>, C extends ComponentClass<any>>(\n    root: Component<any>,\n    type: ClassType<any, T, C>,\n): T[];\n\n/**\n * Same as `scryRenderedComponentsWithType()` but expects there to be one result\n * and returns that one result, or throws exception if there is any other\n * number of matches besides one.\n */\nexport function findRenderedComponentWithType<T extends Component<any>, C extends ComponentClass<any>>(\n    root: Component<any>,\n    type: ClassType<any, T, C>,\n): T;\n\n/**\n * Call this in your tests to create a shallow renderer.\n */\nexport function createRenderer(): ShallowRenderer;\n\n/**\n * Wrap any code rendering and triggering updates to your components into `act()` calls.\n *\n * Ensures that the behavior in your tests matches what happens in the browser\n * more closely by executing pending `useEffect`s before returning. This also\n * reduces the amount of re-renders done.\n *\n * @param callback A synchronous, void callback that will execute as a single, complete React commit.\n *\n * @see https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks\n */\n// NOTES\n// - the order of these signatures matters - typescript will check the signatures in source order.\n//   If the `() => VoidOrUndefinedOnly` signature is first, it'll erroneously match a Promise returning function for users with\n//   `strictNullChecks: false`.\n// - VoidOrUndefinedOnly is there to forbid any non-void return values for users with `strictNullChecks: true`\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n// eslint-disable-next-line @typescript-eslint/no-invalid-void-type\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n// While act does always return Thenable, if a void function is passed, we pretend the return value is also void to not trigger dangling Promise lint rules.\nexport function act(callback: () => VoidOrUndefinedOnly): void;\nexport function act<T>(callback: () => T | Promise<T>): Promise<T>;\n\n// Intentionally doesn't extend PromiseLike<never>.\n// Ideally this should be as hard to accidentally use as possible.\nexport interface DebugPromiseLike {\n    // the actual then() in here is 0-ary, but that doesn't count as a PromiseLike.\n    then(onfulfilled: (value: never) => never, onrejected: (reason: never) => never): never;\n}\n","node_modules/@mui/material/package.json":"{\n  \"name\": \"@mui/material\",\n  \"version\": \"5.15.14\",\n  \"private\": false,\n  \"author\": \"MUI Team\",\n  \"description\": \"Material UI is an open-source React component library that implements Google's Material Design. It's comprehensive and can be used in production out of the box.\",\n  \"main\": \"./node/index.js\",\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"material-ui\",\n    \"material design\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/material-ui.git\",\n    \"directory\": \"packages/mui-material\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/material-ui/issues\"\n  },\n  \"homepage\": \"https://mui.com/material-ui/\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mui-org\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.9\",\n    \"@types/react-transition-group\": \"^4.4.10\",\n    \"clsx\": \"^2.1.0\",\n    \"csstype\": \"^3.1.3\",\n    \"prop-types\": \"^15.8.1\",\n    \"react-is\": \"^18.2.0\",\n    \"react-transition-group\": \"^4.4.5\",\n    \"@mui/base\": \"5.0.0-beta.40\",\n    \"@mui/system\": \"^5.15.14\",\n    \"@mui/utils\": \"^5.15.14\",\n    \"@mui/types\": \"^7.2.14\",\n    \"@mui/core-downloads-tracker\": \"^5.15.14\"\n  },\n  \"peerDependencies\": {\n    \"@emotion/react\": \"^11.5.0\",\n    \"@emotion/styled\": \"^11.3.0\",\n    \"@types/react\": \"^17.0.0 || ^18.0.0\",\n    \"react\": \"^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@types/react\": {\n      \"optional\": true\n    },\n    \"@emotion/react\": {\n      \"optional\": true\n    },\n    \"@emotion/styled\": {\n      \"optional\": true\n    }\n  },\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"directory\": \"build\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/material/index.d.ts":"import * as React from 'react';\nimport { DistributiveOmit } from '@mui/types';\nimport { StyledComponentProps } from './styles';\n\nexport { StyledComponentProps };\n\n/**\n * All standard components exposed by `material-ui` are `StyledComponents` with\n * certain `classes`, on which one can also set a top-level `className` and inline\n * `style`.\n * @deprecated will be removed in v5 for internal usage only\n */\nexport type StandardProps<\n  ComponentProps,\n  ClassKey extends string,\n  Removals extends keyof ComponentProps = never,\n> = DistributiveOmit<ComponentProps, 'classes' | Removals> &\n  StyledComponentProps<ClassKey> & {\n    className?: string;\n    ref?: ComponentProps extends { ref?: infer RefType } ? RefType : React.Ref<unknown>;\n    style?: React.CSSProperties;\n  };\n\n/**\n * @internal\n * ONLY USE FROM WITHIN mui/material-ui\n *\n * Internal helper type for conform (describeConformance) components\n * However, we don't declare classes on this type.\n * It is recommended to declare them manually with an interface so that each class can have a separate JSDoc.\n */\nexport type InternalStandardProps<\n  ComponentProps,\n  Removals extends keyof ComponentProps = never,\n> = DistributiveOmit<ComponentProps, 'classes' | Removals> &\n  // each component declares it's classes in a separate interface for proper JSDoc\n  StyledComponentProps<never> & {\n    ref?: ComponentProps extends { ref?: infer RefType } ? RefType : React.Ref<unknown>;\n    // TODO: Remove implicit props. Up to each component.\n    className?: string;\n    style?: React.CSSProperties;\n  };\n\nexport type PaletteMode = 'light' | 'dark';\nexport interface Color {\n  50: string;\n  100: string;\n  200: string;\n  300: string;\n  400: string;\n  500: string;\n  600: string;\n  700: string;\n  800: string;\n  900: string;\n  A100: string;\n  A200: string;\n  A400: string;\n  A700: string;\n}\n\nexport namespace PropTypes {\n  // keeping the type structure for backwards compat\n  // eslint-disable-next-line @typescript-eslint/no-shadow, @typescript-eslint/no-unused-vars\n  type Color = 'inherit' | 'primary' | 'secondary' | 'default';\n}\n\n// From index.js\n// eslint-disable-next-line import/first\nimport * as colors from './colors';\n\nexport { colors };\nexport * from './styles';\n\nexport * from './utils';\n\nexport { default as Accordion } from './Accordion';\nexport * from './Accordion';\n\nexport { default as AccordionActions } from './AccordionActions';\nexport * from './AccordionActions';\n\nexport { default as AccordionDetails } from './AccordionDetails';\nexport * from './AccordionDetails';\n\nexport { default as AccordionSummary } from './AccordionSummary';\nexport * from './AccordionSummary';\n\nexport { default as Alert } from './Alert';\nexport * from './Alert';\n\nexport { default as AlertTitle } from './AlertTitle';\nexport * from './AlertTitle';\n\nexport { default as AppBar } from './AppBar';\nexport * from './AppBar';\n\nexport { default as Autocomplete } from './Autocomplete';\nexport * from './Autocomplete';\n\nexport { default as Avatar } from './Avatar';\nexport * from './Avatar';\n\nexport { default as AvatarGroup } from './AvatarGroup';\nexport * from './AvatarGroup';\n\nexport { default as Backdrop } from './Backdrop';\nexport * from './Backdrop';\n\nexport { default as Badge } from './Badge';\nexport * from './Badge';\n\nexport { default as BottomNavigation } from './BottomNavigation';\nexport * from './BottomNavigation';\n\nexport { default as BottomNavigationAction } from './BottomNavigationAction';\nexport * from './BottomNavigationAction';\n\nexport { default as Box } from './Box';\nexport * from './Box';\n\nexport { default as Breadcrumbs } from './Breadcrumbs';\nexport * from './Breadcrumbs';\n\nexport { default as Button } from './Button';\nexport * from './Button';\n\nexport { default as ButtonBase } from './ButtonBase';\nexport * from './ButtonBase';\n\nexport { default as ButtonGroup } from './ButtonGroup';\nexport * from './ButtonGroup';\n\nexport { default as Card } from './Card';\nexport * from './Card';\n\nexport { default as CardActionArea } from './CardActionArea';\nexport * from './CardActionArea';\n\nexport { default as CardActions } from './CardActions';\nexport * from './CardActions';\n\nexport { default as CardContent } from './CardContent';\nexport * from './CardContent';\n\nexport { default as CardHeader } from './CardHeader';\nexport * from './CardHeader';\n\nexport { default as CardMedia } from './CardMedia';\nexport * from './CardMedia';\n\nexport { default as Checkbox } from './Checkbox';\nexport * from './Checkbox';\n\nexport { default as Chip } from './Chip';\nexport * from './Chip';\n\nexport { default as CircularProgress } from './CircularProgress';\nexport * from './CircularProgress';\n\nexport { default as ClickAwayListener } from './ClickAwayListener';\nexport * from './ClickAwayListener';\n\nexport { default as Collapse } from './Collapse';\nexport * from './Collapse';\n\nexport { default as Container } from './Container';\nexport * from './Container';\n\nexport { default as CssBaseline } from './CssBaseline';\nexport * from './CssBaseline';\n\n/**\n * @deprecated use color-scheme in CssBaseline or ScopedCssBaseline to modify scrollbar color\n */\nexport { default as darkScrollbar } from './darkScrollbar';\nexport * from './darkScrollbar';\n\nexport { default as Dialog } from './Dialog';\nexport * from './Dialog';\n\nexport { default as DialogActions } from './DialogActions';\nexport * from './DialogActions';\n\nexport { default as DialogContent } from './DialogContent';\nexport * from './DialogContent';\n\nexport { default as DialogContentText } from './DialogContentText';\nexport * from './DialogContentText';\n\nexport { default as DialogTitle } from './DialogTitle';\nexport * from './DialogTitle';\n\nexport { default as Divider } from './Divider';\nexport * from './Divider';\n\nexport { default as Drawer } from './Drawer';\nexport * from './Drawer';\n\nexport { default as Fab } from './Fab';\nexport * from './Fab';\n\nexport { default as Fade } from './Fade';\nexport * from './Fade';\n\nexport { default as FilledInput } from './FilledInput';\nexport * from './FilledInput';\n\nexport { default as FormControl } from './FormControl';\nexport * from './FormControl';\n\nexport { default as FormControlLabel } from './FormControlLabel';\nexport * from './FormControlLabel';\n\nexport { default as FormGroup } from './FormGroup';\nexport * from './FormGroup';\n\nexport { default as FormHelperText } from './FormHelperText';\nexport * from './FormHelperText';\n\nexport { default as FormLabel } from './FormLabel';\nexport * from './FormLabel';\n\nexport { default as Grid } from './Grid';\nexport * from './Grid';\n\nexport { default as Unstable_Grid2 } from './Unstable_Grid2';\nexport * from './Unstable_Grid2';\n\nexport { default as Grow } from './Grow';\nexport * from './Grow';\n\nexport { default as Hidden } from './Hidden';\nexport * from './Hidden';\n\nexport { default as Icon } from './Icon';\nexport * from './Icon';\n\nexport { default as IconButton } from './IconButton';\nexport * from './IconButton';\n\nexport { default as ImageList } from './ImageList';\nexport * from './ImageList';\n\nexport { default as ImageListItem } from './ImageListItem';\nexport * from './ImageListItem';\n\nexport { default as ImageListItemBar } from './ImageListItemBar';\nexport * from './ImageListItemBar';\n\nexport { default as Input } from './Input';\nexport * from './Input';\n\nexport { default as InputAdornment } from './InputAdornment';\nexport * from './InputAdornment';\n\nexport { default as InputBase } from './InputBase';\nexport * from './InputBase';\n\nexport { default as InputLabel } from './InputLabel';\nexport * from './InputLabel';\n\nexport { default as LinearProgress } from './LinearProgress';\nexport * from './LinearProgress';\n\nexport { default as Link } from './Link';\nexport * from './Link';\n\nexport { default as List } from './List';\nexport * from './List';\n\nexport { default as ListItem } from './ListItem';\nexport * from './ListItem';\n\nexport { default as ListItemAvatar } from './ListItemAvatar';\nexport * from './ListItemAvatar';\n\nexport { default as ListItemButton } from './ListItemButton';\nexport * from './ListItemButton';\n\nexport { default as ListItemIcon } from './ListItemIcon';\nexport * from './ListItemIcon';\n\nexport { default as ListItemSecondaryAction } from './ListItemSecondaryAction';\nexport * from './ListItemSecondaryAction';\n\nexport { default as ListItemText } from './ListItemText';\nexport * from './ListItemText';\n\nexport { default as ListSubheader } from './ListSubheader';\nexport * from './ListSubheader';\n\nexport { default as Menu } from './Menu';\nexport * from './Menu';\n\nexport { default as MenuItem } from './MenuItem';\nexport * from './MenuItem';\n\nexport { default as MenuList } from './MenuList';\nexport * from './MenuList';\n\nexport { default as MobileStepper } from './MobileStepper';\nexport * from './MobileStepper';\n\nexport { default as Modal } from './Modal';\nexport * from './Modal';\n\nexport { default as NativeSelect } from './NativeSelect';\nexport * from './NativeSelect';\n\nexport { default as NoSsr } from './NoSsr';\nexport * from './NoSsr';\n\nexport { default as OutlinedInput } from './OutlinedInput';\nexport * from './OutlinedInput';\n\nexport { default as Pagination } from './Pagination';\nexport * from './Pagination';\n\nexport { default as PaginationItem } from './PaginationItem';\nexport * from './PaginationItem';\n\nexport { default as Paper } from './Paper';\nexport * from './Paper';\n\nexport { default as Popover } from './Popover';\nexport * from './Popover';\n\nexport { default as Popper } from './Popper';\nexport * from './Popper';\n\nexport { default as Portal } from './Portal';\nexport * from './Portal';\n\nexport { default as Radio } from './Radio';\nexport * from './Radio';\n\nexport { default as RadioGroup } from './RadioGroup';\nexport * from './RadioGroup';\n\nexport { default as Rating } from './Rating';\nexport * from './Rating';\n\nexport { default as ScopedCssBaseline } from './ScopedCssBaseline';\nexport * from './ScopedCssBaseline';\n\nexport { default as Select } from './Select';\nexport * from './Select';\n\nexport { default as Skeleton } from './Skeleton';\nexport * from './Skeleton';\n\nexport { default as Slide } from './Slide';\nexport * from './Slide';\n\nexport { default as Slider } from './Slider';\nexport * from './Slider';\n\nexport { default as Snackbar } from './Snackbar';\nexport * from './Snackbar';\n\nexport { default as SnackbarContent } from './SnackbarContent';\nexport * from './SnackbarContent';\n\nexport { default as SpeedDial } from './SpeedDial';\nexport * from './SpeedDial';\n\nexport { default as SpeedDialAction } from './SpeedDialAction';\nexport * from './SpeedDialAction';\n\nexport { default as SpeedDialIcon } from './SpeedDialIcon';\nexport * from './SpeedDialIcon';\n\nexport { default as Stack } from './Stack';\nexport * from './Stack';\n\nexport { default as Step } from './Step';\nexport * from './Step';\n\nexport { default as StepButton } from './StepButton';\nexport * from './StepButton';\n\nexport { default as StepConnector } from './StepConnector';\nexport * from './StepConnector';\n\nexport { default as StepContent } from './StepContent';\nexport * from './StepContent';\n\nexport { default as StepIcon } from './StepIcon';\nexport * from './StepIcon';\n\nexport { default as StepLabel } from './StepLabel';\nexport * from './StepLabel';\n\nexport { default as Stepper } from './Stepper';\nexport * from './Stepper';\n\nexport { default as SvgIcon } from './SvgIcon';\nexport * from './SvgIcon';\n\nexport { default as SwipeableDrawer } from './SwipeableDrawer';\nexport * from './SwipeableDrawer';\n\nexport { default as Switch } from './Switch';\nexport * from './Switch';\n\nexport { default as Tab } from './Tab';\nexport * from './Tab';\n\nexport { default as Table } from './Table';\nexport * from './Table';\n\nexport { default as TableBody } from './TableBody';\nexport * from './TableBody';\n\nexport { default as TableCell } from './TableCell';\nexport * from './TableCell';\n\nexport { default as TableContainer } from './TableContainer';\nexport * from './TableContainer';\n\nexport { default as TableFooter } from './TableFooter';\nexport * from './TableFooter';\n\nexport { default as TableHead } from './TableHead';\nexport * from './TableHead';\n\nexport { default as TablePagination } from './TablePagination';\nexport * from './TablePagination';\n\nexport { default as TableRow } from './TableRow';\nexport * from './TableRow';\n\nexport { default as TableSortLabel } from './TableSortLabel';\nexport * from './TableSortLabel';\n\nexport { default as Tabs } from './Tabs';\nexport * from './Tabs';\n\nexport { default as TabScrollButton } from './TabScrollButton';\nexport * from './TabScrollButton';\n\nexport { default as TextField } from './TextField';\nexport * from './TextField';\n\nexport { default as TextareaAutosize } from './TextareaAutosize';\nexport * from './TextareaAutosize';\n\nexport { default as ToggleButton } from './ToggleButton';\nexport * from './ToggleButton';\n\nexport { default as ToggleButtonGroup } from './ToggleButtonGroup';\nexport * from './ToggleButtonGroup';\n\nexport { default as Toolbar } from './Toolbar';\nexport * from './Toolbar';\n\nexport { default as Tooltip } from './Tooltip';\nexport * from './Tooltip';\n\nexport { default as Typography } from './Typography';\nexport * from './Typography';\n\nexport { default as useMediaQuery } from './useMediaQuery';\nexport * from './useMediaQuery';\n\nexport { default as useScrollTrigger } from './useScrollTrigger';\nexport * from './useScrollTrigger';\n\nexport { default as Zoom } from './Zoom';\nexport * from './Zoom';\n\nexport { default as useAutocomplete } from './useAutocomplete';\nexport * from './useAutocomplete';\n\nexport { default as GlobalStyles } from './GlobalStyles';\nexport * from './GlobalStyles';\n\n/**\n * @deprecated will be removed in v5.beta, please use StyledEngineProvider from @mui/material/styles instead\n */\nexport { StyledEngineProvider } from './styles';\n\nexport { unstable_composeClasses } from '@mui/base/composeClasses';\n\nexport { default as generateUtilityClass } from './generateUtilityClass';\nexport * from './generateUtilityClass';\n\nexport { default as generateUtilityClasses } from './generateUtilityClasses';\n\nexport { default as Unstable_TrapFocus } from './Unstable_TrapFocus';\nexport * from './Unstable_TrapFocus';\n","node_modules/@mui/material/OverridableComponent.d.ts":"import * as React from 'react';\nimport { DistributiveOmit } from '@mui/types';\nimport { StyledComponentProps } from './styles';\n\n/**\n * A component whose root component can be controlled via a `component` prop.\n *\n * Adjusts valid props based on the type of `component`.\n */\nexport interface OverridableComponent<TypeMap extends OverridableTypeMap> {\n  // If you make any changes to this interface, please make sure to update the\n  // `OverridableComponent` type in `mui-types/index.d.ts` as well.\n  // Also, there are types in Base UI that have a similar shape to this interface\n  // (for example SelectType, OptionType, etc.).\n  <RootComponent extends React.ElementType>(\n    props: {\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       */\n      component: RootComponent;\n    } & OverrideProps<TypeMap, RootComponent>,\n  ): JSX.Element | null;\n  (props: DefaultComponentProps<TypeMap>): JSX.Element | null;\n}\n\n/**\n * Props of the component if `component={Component}` is used.\n */\n// prettier-ignore\nexport type OverrideProps<\n  TypeMap extends OverridableTypeMap,\n  RootComponent extends React.ElementType\n> = (\n  & BaseProps<TypeMap>\n  & DistributiveOmit<React.ComponentPropsWithRef<RootComponent>, keyof BaseProps<TypeMap>>\n);\n\n/**\n * Props if `component={Component}` is NOT used.\n */\n// prettier-ignore\nexport type DefaultComponentProps<TypeMap extends OverridableTypeMap> =\n  & BaseProps<TypeMap>\n  & DistributiveOmit<React.ComponentPropsWithRef<TypeMap['defaultComponent']>, keyof BaseProps<TypeMap>>;\n\n/**\n * Props defined on the component (+ common material-ui props).\n */\n// prettier-ignore\nexport type BaseProps<TypeMap extends OverridableTypeMap> =\n  & TypeMap['props']\n  & CommonProps;\n\n/**\n * Props that are valid for material-ui components.\n */\n// each component declares it's classes in a separate interface for proper JSDoc.\nexport interface CommonProps extends StyledComponentProps<never> {\n  className?: string;\n  style?: React.CSSProperties;\n}\n\nexport interface OverridableTypeMap {\n  props: {};\n  defaultComponent: React.ElementType;\n}\n","node_modules/@mui/material/utils/useSlot.d.ts":"import * as React from 'react';\nimport { ClassValue } from 'clsx';\nexport type WithCommonProps<T> = T & {\n    className?: string;\n    style?: React.CSSProperties;\n    ref?: React.Ref<any>;\n};\ntype EventHandlers = Record<string, React.EventHandler<any>>;\ntype ExtractComponentProps<P> = P extends infer T | ((ownerState: any) => infer T) ? T : never;\n/**\n * An internal function to create a Material UI slot.\n *\n * This is an advanced version of Base UI `useSlotProps` because Material UI allows leaf component to be customized via `component` prop\n * while Base UI does not need to support leaf component customization.\n *\n * @param {string} name: name of the slot\n * @param {object} parameters\n * @returns {[Slot, slotProps]} The slot's React component and the slot's props\n *\n * Note: the returned slot's props\n * - will never contain `component` prop.\n * - might contain `as` prop.\n */\nexport default function useSlot<T extends string, ElementType extends React.ElementType, SlotProps, OwnerState extends {}, ExternalSlotProps extends {\n    component?: React.ElementType;\n    ref?: React.Ref<any>;\n}, ExternalForwardedProps extends {\n    component?: React.ElementType;\n    slots?: {\n        [k in T]?: React.ElementType;\n    };\n    slotProps?: {\n        [k in T]?: ExternalSlotProps | ((ownerState: OwnerState) => ExternalSlotProps);\n    };\n}, AdditionalProps, SlotOwnerState extends {}>(\n/**\n * The slot's name. All Material UI components should have `root` slot.\n *\n * If the name is `root`, the logic behaves differently from other slots,\n * e.g. the `externalForwardedProps` are spread to `root` slot but not other slots.\n */\nname: T, parameters: (T extends 'root' ? {\n    ref: React.ForwardedRef<any>;\n} : {\n    ref?: React.ForwardedRef<any>;\n}) & {\n    /**\n     * The slot's className\n     */\n    className: ClassValue | ClassValue[];\n    /**\n     * The slot's default styled-component\n     */\n    elementType: ElementType;\n    /**\n     * The component's ownerState\n     */\n    ownerState: OwnerState;\n    /**\n     * The `other` props from the consumer. It has to contain `component`, `slots`, and `slotProps`.\n     * The function will use those props to calculate the final rendered element and the returned props.\n     *\n     * If the slot is not `root`, the rest of the `externalForwardedProps` are neglected.\n     */\n    externalForwardedProps: ExternalForwardedProps;\n    getSlotProps?: (other: EventHandlers) => WithCommonProps<SlotProps>;\n    additionalProps?: WithCommonProps<AdditionalProps>;\n    /**\n     * For overriding the component's ownerState for the slot.\n     * This is required for some components that need styling via `ownerState`.\n     *\n     * It is a function because `slotProps.{slot}` can be a function which has to be resolved first.\n     */\n    getSlotOwnerState?: (mergedProps: AdditionalProps & SlotProps & ExternalSlotProps & ExtractComponentProps<Exclude<Exclude<ExternalForwardedProps['slotProps'], undefined>[T], undefined>>) => SlotOwnerState;\n    /**\n     * props forward to `T` only if the `slotProps.*.component` is not provided.\n     * e.g. Autocomplete's listbox uses Popper + StyledComponent\n     */\n    internalForwardedProps?: any;\n}): [ElementType, {\n    className: string;\n    ownerState: OwnerState & SlotOwnerState;\n} & AdditionalProps & SlotProps & ExternalSlotProps & ExtractComponentProps<Exclude<Exclude<ExternalForwardedProps[\"slotProps\"], undefined>[T], undefined>>];\nexport {};\n","node_modules/@mui/material/utils/useIsFocusVisible.d.ts":"import useIsFocusVisible from '@mui/utils/useIsFocusVisible';\n\nexport default useIsFocusVisible;\n","node_modules/@mui/material/utils/useId.d.ts":"import useId from '@mui/utils/useId';\n\nexport default useId;\n","node_modules/@mui/material/utils/useForkRef.d.ts":"import useForkRef from '@mui/utils/useForkRef';\n\nexport default useForkRef;\n","node_modules/@mui/material/utils/useEventCallback.d.ts":"import useEventCallback from '@mui/utils/useEventCallback';\n\nexport default useEventCallback;\n","node_modules/@mui/material/utils/useEnhancedEffect.d.ts":"import useEnhancedEffect from '@mui/utils/useEnhancedEffect';\n\nexport default useEnhancedEffect;\n","node_modules/@mui/material/utils/useControlled.d.ts":"import useControlled from '@mui/utils/useControlled';\n\nexport default useControlled;\n","node_modules/@mui/material/utils/unsupportedProp.d.ts":"import unsupportedProp from '@mui/utils/unsupportedProp';\n\nexport default unsupportedProp;\n","node_modules/@mui/material/utils/types.d.ts":"/// <reference types=\"react\" />\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nexport type SlotCommonProps = {\n    component?: React.ElementType;\n    sx?: SxProps;\n};\nexport type SlotProps<TSlotComponent extends React.ElementType, TOverrides, TOwnerState> = SlotComponentProps<TSlotComponent, SlotCommonProps & TOverrides, TOwnerState>;\n/**\n * Use the keys of `Slots` to make sure that K contains all of the keys\n *\n * @example CreateSlotsAndSlotProps<{ root: React.ElementType, decorator: React.ElementType }, { root: ..., decorator: ... }>\n */\nexport type CreateSlotsAndSlotProps<Slots, K extends Record<keyof Slots, any>> = {\n    /**\n     * The components used for each slot inside.\n     * @default {}\n     */\n    slots?: Slots;\n    /**\n     * The props used for each slot inside.\n     * @default {}\n     */\n    slotProps?: {\n        [P in keyof K]?: K[P];\n    };\n};\n","node_modules/@mui/material/utils/setRef.d.ts":"import setRef from '@mui/utils/setRef';\nexport default setRef;\n","node_modules/@mui/material/utils/requirePropFactory.d.ts":"import requirePropFactory from '@mui/utils/requirePropFactory';\n\nexport default requirePropFactory;\n","node_modules/@mui/material/utils/ownerWindow.d.ts":"import ownerWindow from '@mui/utils/ownerWindow';\nexport default ownerWindow;\n","node_modules/@mui/material/utils/ownerDocument.d.ts":"import ownerDocument from '@mui/utils/ownerDocument';\nexport default ownerDocument;\n","node_modules/@mui/material/utils/isMuiElement.d.ts":"import isMuiElement from '@mui/utils/isMuiElement';\n\nexport default isMuiElement;\n","node_modules/@mui/material/utils/index.d.ts":"export { default as capitalize } from './capitalize';\nexport { default as createChainedFunction } from './createChainedFunction';\nexport { default as createSvgIcon } from './createSvgIcon';\nexport { default as debounce } from './debounce';\nexport { default as deprecatedPropType } from './deprecatedPropType';\nexport { default as isMuiElement } from './isMuiElement';\nexport { default as ownerDocument } from './ownerDocument';\nexport { default as ownerWindow } from './ownerWindow';\nexport { default as requirePropFactory } from './requirePropFactory';\nexport { default as setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unsupportedProp } from './unsupportedProp';\nexport { default as useControlled } from './useControlled';\nexport { default as useEventCallback } from './useEventCallback';\nexport { default as useForkRef } from './useForkRef';\nexport { default as useIsFocusVisible } from './useIsFocusVisible';\nexport { unstable_ClassNameGenerator } from '@mui/base/ClassNameGenerator';\n","node_modules/@mui/material/utils/getScrollbarSize.d.ts":"import getScrollbarSize from '@mui/utils/getScrollbarSize';\nexport default getScrollbarSize;\n","node_modules/@mui/material/utils/deprecatedPropType.d.ts":"import deprecatedPropType from '@mui/utils/deprecatedPropType';\n\nexport default deprecatedPropType;\n","node_modules/@mui/material/utils/debounce.d.ts":"import debounce from '@mui/utils/debounce';\n\nexport default debounce;\n","node_modules/@mui/material/utils/createSvgIcon.d.ts":"import SvgIcon from '@mui/material/SvgIcon';\n\nexport default function createSvgIcon(path: React.ReactNode, displayName: string): typeof SvgIcon;\n","node_modules/@mui/material/utils/createChainedFunction.d.ts":"import createChainedFunction from '@mui/utils/createChainedFunction';\n\nexport default createChainedFunction;\n","node_modules/@mui/material/utils/capitalize.d.ts":"import capitalize from '@mui/utils/capitalize';\n\nexport default capitalize;\n","node_modules/@mui/material/useScrollTrigger/useScrollTrigger.d.ts":"export interface UseScrollTriggerOptions {\n  disableHysteresis?: boolean;\n  target?: Node | Window;\n  threshold?: number;\n}\n\nexport default function useScrollTrigger(options?: UseScrollTriggerOptions): boolean;\n","node_modules/@mui/material/useScrollTrigger/index.d.ts":"export { default } from './useScrollTrigger';\n","node_modules/@mui/material/usePagination/usePagination.d.ts":"import * as React from 'react';\n\nexport interface UsePaginationProps {\n  /**\n   * Number of always visible pages at the beginning and end.\n   * @default 1\n   */\n  boundaryCount?: number;\n  /**\n   * The name of the component where this hook is used.\n   */\n  componentName?: string;\n  /**\n   * The total number of pages.\n   * @default 1\n   */\n  count?: number;\n  /**\n   * The page selected by default when the component is uncontrolled.\n   * @default 1\n   */\n  defaultPage?: number;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, hide the next-page button.\n   * @default false\n   */\n  hideNextButton?: boolean;\n  /**\n   * If `true`, hide the previous-page button.\n   * @default false\n   */\n  hidePrevButton?: boolean;\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {React.ChangeEvent<unknown>} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onChange?: (event: React.ChangeEvent<unknown>, page: number) => void;\n  /**\n   * The current page.\n   */\n  page?: number;\n  /**\n   * If `true`, show the first-page button.\n   * @default false\n   */\n  showFirstButton?: boolean;\n  /**\n   * If `true`, show the last-page button.\n   * @default false\n   */\n  showLastButton?: boolean;\n  /**\n   * Number of always visible pages before and after the current page.\n   * @default 1\n   */\n  siblingCount?: number;\n}\n\nexport interface UsePaginationItem {\n  onClick: React.ReactEventHandler;\n  type: 'page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis';\n  page: number | null;\n  selected: boolean;\n  disabled: boolean;\n}\n\nexport interface UsePaginationResult {\n  items: UsePaginationItem[];\n}\n\nexport default function usePagination(props: UsePaginationProps): UsePaginationResult;\n","node_modules/@mui/material/usePagination/index.d.ts":"export { default } from './usePagination';\nexport * from './usePagination';\n","node_modules/@mui/material/useAutocomplete/useAutocomplete.d.ts":"export { useAutocomplete as default } from '@mui/base/useAutocomplete';\nexport * from '@mui/base/useAutocomplete';\n","node_modules/@mui/material/useAutocomplete/index.d.ts":"export { default } from './useAutocomplete';\nexport * from './useAutocomplete';\n","node_modules/@mui/material/useMediaQuery/useMediaQueryTheme.d.ts":"import useMediaQuery from '@mui/system/useMediaQuery';\n\nexport default useMediaQuery;\n","node_modules/@mui/material/useMediaQuery/index.d.ts":"export { default } from '@mui/system/useMediaQuery';\nexport * from '@mui/system/useMediaQuery';\n","node_modules/@mui/material/zero-styled/index.d.ts":"import useThemeProps from '../styles/useThemeProps';\nexport { default as styled } from '../styles/styled';\nexport declare function createUseThemeProps(name: string): typeof useThemeProps;\n","node_modules/@mui/material/useTouchRipple/useTouchRipple.d.ts":"import * as React from 'react';\nimport { TouchRippleActions } from '../ButtonBase/TouchRipple';\ninterface UseTouchRippleProps {\n    disabled: boolean;\n    disableFocusRipple?: boolean;\n    disableRipple?: boolean;\n    disableTouchRipple?: boolean;\n    focusVisible: boolean;\n    rippleRef: React.RefObject<TouchRippleActions>;\n}\ninterface RippleEventHandlers {\n    onBlur: React.FocusEventHandler;\n    onContextMenu: React.MouseEventHandler;\n    onDragLeave: React.DragEventHandler;\n    onKeyDown: React.KeyboardEventHandler;\n    onKeyUp: React.KeyboardEventHandler;\n    onMouseDown: React.MouseEventHandler;\n    onMouseLeave: React.MouseEventHandler;\n    onMouseUp: React.MouseEventHandler;\n    onTouchEnd: React.TouchEventHandler;\n    onTouchMove: React.TouchEventHandler;\n    onTouchStart: React.TouchEventHandler;\n}\ndeclare const useTouchRipple: (props: UseTouchRippleProps) => {\n    enableTouchRipple: boolean;\n    getRippleHandlers: (otherEvents?: Partial<RippleEventHandlers>) => RippleEventHandlers;\n};\nexport default useTouchRipple;\n","node_modules/@mui/material/useTouchRipple/index.d.ts":"export { default } from './useTouchRipple';\n","node_modules/@mui/material/transitions/utils.d.ts":"import * as React from 'react';\nexport declare const reflow: (node: Element) => number;\ninterface ComponentProps {\n    easing: string | {\n        enter?: string;\n        exit?: string;\n    } | undefined;\n    style: React.CSSProperties | undefined;\n    timeout: number | {\n        enter?: number;\n        exit?: number;\n    };\n}\ninterface Options {\n    mode: 'enter' | 'exit';\n}\ninterface TransitionProps {\n    duration: string | number;\n    easing: string | undefined;\n    delay: string | undefined;\n}\nexport declare function getTransitionProps(props: ComponentProps, options: Options): TransitionProps;\nexport {};\n","node_modules/@mui/material/transitions/transition.d.ts":"import { TransitionProps as _TransitionProps, TransitionActions } from 'react-transition-group/Transition';\nimport * as React from 'react';\nexport type TransitionHandlerKeys = 'onEnter' | 'onEntering' | 'onEntered' | 'onExit' | 'onExiting' | 'onExited';\nexport type TransitionHandlerProps = Pick<_TransitionProps, TransitionHandlerKeys>;\nexport interface EasingProps {\n    easing: string | {\n        enter?: string;\n        exit?: string;\n    };\n}\nexport type TransitionKeys = 'in' | 'mountOnEnter' | 'unmountOnExit' | 'timeout' | 'easing' | 'addEndListener' | TransitionHandlerKeys;\nexport interface TransitionProps extends TransitionActions, Partial<Pick<_TransitionProps & EasingProps, TransitionKeys>>, React.HTMLAttributes<HTMLElement> {\n}\n","node_modules/@mui/material/transitions/index.d.ts":"export * from './transition';\n","node_modules/@mui/material/styles/zIndex.d.ts":"export interface ZIndex {\n  mobileStepper: number;\n  speedDial: number;\n  appBar: number;\n  drawer: number;\n  modal: number;\n  snackbar: number;\n  tooltip: number;\n  fab: number;\n}\n\nexport type ZIndexOptions = Partial<ZIndex>;\n\ndeclare const zIndex: ZIndex;\n\nexport default zIndex;\n","node_modules/@mui/material/styles/withTheme.d.ts":"export default function withTheme(Component: any): never;\n","node_modules/@mui/material/styles/withStyles.d.ts":"export default function withStyles(stylesCreator: any, options?: object): never;\n","node_modules/@mui/material/styles/variants.d.ts":"import { Interpolation } from '@mui/system';\nimport { ComponentsPropsList } from './props';\n\nexport type ComponentsVariants<Theme = unknown> = {\n  [Name in keyof ComponentsPropsList]?: Array<{\n    props:\n      | Partial<ComponentsPropsList[Name]>\n      | ((\n          props: Partial<ComponentsPropsList[Name]> & {\n            ownerState: Partial<ComponentsPropsList[Name]>;\n          },\n        ) => boolean);\n    style: Interpolation<{ theme: Theme }>;\n  }>;\n};\n","node_modules/@mui/material/styles/useThemeProps.d.ts":"import { Theme } from './createTheme';\nimport { Components } from './components';\n\nexport interface ThemeWithProps {\n  components?: Components<Omit<Theme, 'components'>>;\n}\n\nexport type ThemedProps<Theme, Name extends keyof any> = Theme extends {\n  components: Record<Name, { defaultProps: infer Props }>;\n}\n  ? Props\n  : {};\n\nexport default function useThemeProps<\n  Theme extends ThemeWithProps,\n  Props,\n  Name extends keyof any,\n>(params: { props: Props; name: Name }): Props & ThemedProps<Theme, Name>;\n","node_modules/@mui/material/styles/useTheme.d.ts":"import { Theme } from './createTheme';\n\nexport default function useTheme<T = Theme>(): T;\n","node_modules/@mui/material/styles/styled.d.ts":"import { CreateMUIStyled } from '@mui/system';\nimport { Theme } from './createTheme';\n\nexport { default as slotShouldForwardProp } from './slotShouldForwardProp';\nexport { default as rootShouldForwardProp } from './rootShouldForwardProp';\n\n/**\n * Custom styled utility that has a default MUI theme.\n * @param tag HTML tag or component that should serve as base.\n * @param options Styled options for the created component.\n * @returns React component that has styles attached to it.\n */\ndeclare const styled: CreateMUIStyled<Theme>;\n\nexport default styled;\n","node_modules/@mui/material/styles/slotShouldForwardProp.d.ts":"declare function slotShouldForwardProp(prop: string): boolean;\nexport default slotShouldForwardProp;\n","node_modules/@mui/material/styles/shouldSkipGeneratingVar.d.ts":"export default function shouldSkipGeneratingVar(keys: string[]): boolean;\n","node_modules/@mui/material/styles/shadows.d.ts":"export type Shadows = [\n  'none',\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n  string,\n];\ndeclare const shadows: Shadows;\nexport default shadows;\n","node_modules/@mui/material/styles/rootShouldForwardProp.d.ts":"declare const rootShouldForwardProp: (prop: string) => boolean;\nexport default rootShouldForwardProp;\n","node_modules/@mui/material/styles/responsiveFontSizes.d.ts":"import { Breakpoint } from '@mui/system';\nimport { Typography } from './createTypography';\nimport { Theme } from './createTheme';\n\nexport interface ResponsiveFontSizesOptions {\n  breakpoints?: Breakpoint[];\n  disableAlign?: boolean;\n  factor?: number;\n  variants?: Array<keyof Typography>;\n}\n\nexport default function responsiveFontSizes(\n  theme: Theme,\n  options?: ResponsiveFontSizesOptions,\n): Theme;\n","node_modules/@mui/material/styles/props.d.ts":"import { AlertProps } from '../Alert';\nimport { AlertTitleProps } from '../AlertTitle';\nimport { AppBarProps } from '../AppBar';\nimport { AutocompleteProps } from '../Autocomplete';\nimport { AvatarProps } from '../Avatar';\nimport { AvatarGroupProps } from '../AvatarGroup';\nimport { BackdropProps } from '../Backdrop';\nimport { BadgeProps } from '../Badge';\nimport { BottomNavigationActionProps } from '../BottomNavigationAction';\nimport { BottomNavigationProps } from '../BottomNavigation';\nimport { BreadcrumbsProps } from '../Breadcrumbs';\nimport { ButtonBaseProps } from '../ButtonBase';\nimport { ButtonGroupProps } from '../ButtonGroup';\nimport { ButtonProps } from '../Button';\nimport { CardActionAreaProps } from '../CardActionArea';\nimport { CardActionsProps } from '../CardActions';\nimport { CardContentProps } from '../CardContent';\nimport { CardHeaderProps } from '../CardHeader';\nimport { CardMediaProps } from '../CardMedia';\nimport { CardProps } from '../Card';\nimport { CheckboxProps } from '../Checkbox';\nimport { ChipProps } from '../Chip';\nimport { CircularProgressProps } from '../CircularProgress';\nimport { CollapseProps } from '../Collapse';\nimport { ContainerProps } from '../Container';\nimport { CssBaselineProps } from '../CssBaseline';\nimport { DialogActionsProps } from '../DialogActions';\nimport { DialogContentProps } from '../DialogContent';\nimport { DialogContentTextProps } from '../DialogContentText';\nimport { DialogProps } from '../Dialog';\nimport { DialogTitleProps } from '../DialogTitle';\nimport { DividerProps } from '../Divider';\nimport { DrawerProps } from '../Drawer';\nimport { AccordionActionsProps } from '../AccordionActions';\nimport { AccordionDetailsProps } from '../AccordionDetails';\nimport { AccordionProps } from '../Accordion';\nimport { AccordionSummaryProps } from '../AccordionSummary';\nimport { FabProps } from '../Fab';\nimport { FilledInputProps } from '../FilledInput';\nimport { FormControlLabelProps } from '../FormControlLabel';\nimport { FormControlProps } from '../FormControl';\nimport { FormGroupProps } from '../FormGroup';\nimport { FormHelperTextProps } from '../FormHelperText';\nimport { FormLabelProps } from '../FormLabel';\nimport { GridProps } from '../Grid';\nimport { Grid2Props } from '../Unstable_Grid2';\nimport { IconButtonProps } from '../IconButton';\nimport { IconProps } from '../Icon';\nimport { ImageListProps } from '../ImageList';\nimport { ImageListItemBarProps } from '../ImageListItemBar';\nimport { ImageListItemProps } from '../ImageListItem';\nimport { InputAdornmentProps } from '../InputAdornment';\nimport { InputBaseProps } from '../InputBase';\nimport { InputLabelProps } from '../InputLabel';\nimport { InputProps } from '../Input';\nimport { LinearProgressProps } from '../LinearProgress';\nimport { LinkProps } from '../Link';\nimport { ListItemAvatarProps } from '../ListItemAvatar';\nimport { ListItemIconProps } from '../ListItemIcon';\nimport { ListItemProps } from '../ListItem';\nimport { ListItemButtonProps } from '../ListItemButton';\nimport { ListItemSecondaryActionProps } from '../ListItemSecondaryAction';\nimport { ListItemTextProps } from '../ListItemText';\nimport { ListProps } from '../List';\nimport { ListSubheaderProps } from '../ListSubheader';\nimport { MenuItemProps } from '../MenuItem';\nimport { MenuListProps } from '../MenuList';\nimport { MenuProps } from '../Menu';\nimport { MobileStepperProps } from '../MobileStepper';\nimport { ModalProps } from '../Modal';\nimport { NativeSelectProps } from '../NativeSelect';\nimport { UseMediaQueryOptions } from '../useMediaQuery';\nimport { OutlinedInputProps } from '../OutlinedInput';\nimport { PaginationProps } from '../Pagination';\nimport { PaginationItemProps } from '../PaginationItem';\nimport { PaperProps } from '../Paper';\nimport { PopoverProps } from '../Popover';\nimport { RadioGroupProps } from '../RadioGroup';\nimport { RadioProps } from '../Radio';\nimport { RatingProps } from '../Rating';\nimport { ScopedCssBaselineProps } from '../ScopedCssBaseline';\nimport { SelectProps } from '../Select';\nimport { SkeletonProps } from '../Skeleton';\nimport { SliderProps } from '../Slider';\nimport { SnackbarContentProps } from '../SnackbarContent';\nimport { SnackbarProps } from '../Snackbar';\nimport { SpeedDialProps } from '../SpeedDial';\nimport { SpeedDialActionProps } from '../SpeedDialAction';\nimport { SpeedDialIconProps } from '../SpeedDialIcon';\nimport { StackProps } from '../Stack';\nimport { StepButtonProps } from '../StepButton';\nimport { StepConnectorProps } from '../StepConnector';\nimport { StepContentProps } from '../StepContent';\nimport { StepIconProps } from '../StepIcon';\nimport { StepLabelProps } from '../StepLabel';\nimport { StepperProps } from '../Stepper';\nimport { StepProps } from '../Step';\nimport { SvgIconProps } from '../SvgIcon';\nimport { SwipeableDrawerProps } from '../SwipeableDrawer';\nimport { SwitchProps } from '../Switch';\nimport { TableBodyProps } from '../TableBody';\nimport { TableCellProps } from '../TableCell';\nimport { TableContainerProps } from '../TableContainer';\nimport { TableHeadProps } from '../TableHead';\nimport { TablePaginationProps } from '../TablePagination';\nimport { TableProps } from '../Table';\nimport { TableRowProps } from '../TableRow';\nimport { TableSortLabelProps } from '../TableSortLabel';\nimport { TableFooterProps } from '../TableFooter';\nimport { TabProps } from '../Tab';\nimport { TabsProps } from '../Tabs';\nimport { TextFieldProps } from '../TextField';\nimport { ToggleButtonProps } from '../ToggleButton';\nimport { ToggleButtonGroupProps } from '../ToggleButtonGroup';\nimport { ToolbarProps } from '../Toolbar';\nimport { TooltipProps } from '../Tooltip';\nimport { TouchRippleProps } from '../ButtonBase/TouchRipple';\nimport { TypographyProps } from '../Typography';\nimport { PopperProps } from '../Popper';\n\nexport type ComponentsProps = {\n  [Name in keyof ComponentsPropsList]?: Partial<ComponentsPropsList[Name]>;\n};\n\nexport interface ComponentsPropsList {\n  MuiAlert: AlertProps;\n  MuiAlertTitle: AlertTitleProps;\n  MuiAppBar: AppBarProps;\n  MuiAutocomplete: AutocompleteProps<any, any, any, any>;\n  MuiAvatar: AvatarProps;\n  MuiAvatarGroup: AvatarGroupProps;\n  MuiBackdrop: BackdropProps;\n  MuiBadge: BadgeProps;\n  MuiBottomNavigation: BottomNavigationProps;\n  MuiBottomNavigationAction: BottomNavigationActionProps;\n  MuiBreadcrumbs: BreadcrumbsProps;\n  MuiButton: ButtonProps;\n  MuiButtonBase: ButtonBaseProps;\n  MuiButtonGroup: ButtonGroupProps;\n  MuiCard: CardProps;\n  MuiCardActionArea: CardActionAreaProps;\n  MuiCardActions: CardActionsProps;\n  MuiCardContent: CardContentProps;\n  MuiCardHeader: CardHeaderProps;\n  MuiCardMedia: CardMediaProps;\n  MuiCheckbox: CheckboxProps;\n  MuiChip: ChipProps;\n  MuiCircularProgress: CircularProgressProps;\n  MuiCollapse: CollapseProps;\n  MuiContainer: ContainerProps;\n  MuiCssBaseline: CssBaselineProps;\n  MuiDialog: DialogProps;\n  MuiDialogActions: DialogActionsProps;\n  MuiDialogContent: DialogContentProps;\n  MuiDialogContentText: DialogContentTextProps;\n  MuiDialogTitle: DialogTitleProps;\n  MuiDivider: DividerProps;\n  MuiDrawer: DrawerProps;\n  MuiAccordion: AccordionProps;\n  MuiAccordionActions: AccordionActionsProps;\n  MuiAccordionDetails: AccordionDetailsProps;\n  MuiAccordionSummary: AccordionSummaryProps;\n  MuiFab: FabProps;\n  MuiFilledInput: FilledInputProps;\n  MuiFormControl: FormControlProps;\n  MuiFormControlLabel: FormControlLabelProps;\n  MuiFormGroup: FormGroupProps;\n  MuiFormHelperText: FormHelperTextProps;\n  MuiFormLabel: FormLabelProps;\n  MuiGrid: GridProps;\n  MuiGrid2: Grid2Props;\n  MuiImageList: ImageListProps;\n  MuiImageListItem: ImageListItemProps;\n  MuiImageListItemBar: ImageListItemBarProps;\n  MuiIcon: IconProps;\n  MuiIconButton: IconButtonProps;\n  MuiInput: InputProps;\n  MuiInputAdornment: InputAdornmentProps;\n  MuiInputBase: InputBaseProps;\n  MuiInputLabel: InputLabelProps;\n  MuiLinearProgress: LinearProgressProps;\n  MuiLink: LinkProps;\n  MuiList: ListProps;\n  MuiListItem: ListItemProps;\n  MuiListItemButton: ListItemButtonProps;\n  MuiListItemAvatar: ListItemAvatarProps;\n  MuiListItemIcon: ListItemIconProps;\n  MuiListItemSecondaryAction: ListItemSecondaryActionProps;\n  MuiListItemText: ListItemTextProps;\n  MuiListSubheader: ListSubheaderProps;\n  MuiMenu: MenuProps;\n  MuiMenuItem: MenuItemProps;\n  MuiMenuList: MenuListProps;\n  MuiMobileStepper: MobileStepperProps;\n  MuiModal: ModalProps;\n  MuiNativeSelect: NativeSelectProps;\n  MuiOutlinedInput: OutlinedInputProps;\n  MuiPagination: PaginationProps;\n  MuiPaginationItem: PaginationItemProps;\n  MuiPaper: PaperProps;\n  MuiPopper: PopperProps;\n  MuiPopover: PopoverProps;\n  MuiRadio: RadioProps;\n  MuiRadioGroup: RadioGroupProps;\n  MuiRating: RatingProps;\n  MuiScopedCssBaseline: ScopedCssBaselineProps;\n  MuiSelect: SelectProps;\n  MuiSkeleton: SkeletonProps;\n  MuiSlider: SliderProps;\n  MuiSnackbar: SnackbarProps;\n  MuiSnackbarContent: SnackbarContentProps;\n  MuiSpeedDial: SpeedDialProps;\n  MuiSpeedDialAction: SpeedDialActionProps;\n  MuiSpeedDialIcon: SpeedDialIconProps;\n  MuiStack: StackProps;\n  MuiStep: StepProps;\n  MuiStepButton: StepButtonProps;\n  MuiStepConnector: StepConnectorProps;\n  MuiStepContent: StepContentProps;\n  MuiStepIcon: StepIconProps;\n  MuiStepLabel: StepLabelProps;\n  MuiStepper: StepperProps;\n  MuiSvgIcon: SvgIconProps;\n  MuiSwipeableDrawer: SwipeableDrawerProps;\n  MuiSwitch: SwitchProps;\n  MuiTab: TabProps;\n  MuiTable: TableProps;\n  MuiTableBody: TableBodyProps;\n  MuiTableCell: TableCellProps;\n  MuiTableContainer: TableContainerProps;\n  MuiTableFooter: TableFooterProps;\n  MuiTableHead: TableHeadProps;\n  MuiTablePagination: TablePaginationProps;\n  MuiTableRow: TableRowProps;\n  MuiTableSortLabel: TableSortLabelProps;\n  MuiTabs: TabsProps;\n  MuiTextField: TextFieldProps;\n  MuiToggleButton: ToggleButtonProps;\n  MuiToggleButtonGroup: ToggleButtonGroupProps;\n  MuiToolbar: ToolbarProps;\n  MuiTooltip: TooltipProps;\n  MuiTouchRipple: TouchRippleProps;\n  MuiTypography: TypographyProps;\n  MuiUseMediaQuery: UseMediaQueryOptions;\n}\n","node_modules/@mui/material/styles/overrides.d.ts":"import { CSSObject, CSSInterpolation, Interpolation } from '@mui/system';\nimport { PopperClassKey } from '@mui/base/Popper';\nimport { ComponentsPropsList } from './props';\nimport { AccordionActionsClassKey } from '../AccordionActions';\nimport { AccordionClassKey } from '../Accordion';\nimport { AccordionDetailsClassKey } from '../AccordionDetails';\nimport { AccordionSummaryClassKey } from '../AccordionSummary';\nimport { AlertClassKey } from '../Alert';\nimport { AlertTitleClassKey } from '../AlertTitle';\nimport { AppBarClassKey } from '../AppBar';\nimport { AutocompleteClassKey } from '../Autocomplete';\nimport { AvatarClassKey } from '../Avatar';\nimport { AvatarGroupClassKey } from '../AvatarGroup';\nimport { BackdropClassKey } from '../Backdrop';\nimport { BadgeClassKey } from '../Badge';\nimport { BottomNavigationActionClassKey } from '../BottomNavigationAction';\nimport { BottomNavigationClassKey } from '../BottomNavigation';\nimport { BreadcrumbsClassKey } from '../Breadcrumbs';\nimport { ButtonBaseClassKey } from '../ButtonBase';\nimport { ButtonClassKey } from '../Button';\nimport { ButtonGroupClassKey } from '../ButtonGroup';\nimport { CardActionAreaClassKey } from '../CardActionArea';\nimport { CardActionsClassKey } from '../CardActions';\nimport { CardClassKey } from '../Card';\nimport { CardContentClassKey } from '../CardContent';\nimport { CardHeaderClassKey } from '../CardHeader';\nimport { CardMediaClassKey } from '../CardMedia';\nimport { CheckboxClassKey } from '../Checkbox';\nimport { ChipClassKey } from '../Chip';\nimport { CircularProgressClassKey } from '../CircularProgress';\nimport { CollapseClassKey } from '../Collapse';\nimport { ContainerClassKey } from '../Container';\nimport { DialogActionsClassKey } from '../DialogActions';\nimport { DialogClassKey } from '../Dialog';\nimport { DialogContentClassKey } from '../DialogContent';\nimport { DialogContentTextClassKey } from '../DialogContentText';\nimport { DialogTitleClassKey } from '../DialogTitle';\nimport { DividerClassKey } from '../Divider';\nimport { DrawerClassKey } from '../Drawer';\nimport { FabClassKey } from '../Fab';\nimport { FilledInputClassKey } from '../FilledInput';\nimport { FormControlClassKey } from '../FormControl';\nimport { FormControlLabelClassKey } from '../FormControlLabel';\nimport { FormGroupClassKey } from '../FormGroup';\nimport { FormHelperTextClassKey } from '../FormHelperText';\nimport { FormLabelClassKey } from '../FormLabel';\nimport { GridClassKey } from '../Grid';\nimport { Grid2Slot } from '../Unstable_Grid2';\nimport { IconButtonClassKey } from '../IconButton';\nimport { IconClassKey } from '../Icon';\nimport { ImageListClassKey } from '../ImageList';\nimport { ImageListItemBarClassKey } from '../ImageListItemBar';\nimport { ImageListItemClassKey } from '../ImageListItem';\nimport { InputAdornmentClassKey } from '../InputAdornment';\nimport { InputBaseClassKey } from '../InputBase';\nimport { InputClassKey } from '../Input';\nimport { InputLabelClassKey } from '../InputLabel';\nimport { LinearProgressClassKey } from '../LinearProgress';\nimport { LinkClassKey } from '../Link';\nimport { ListClassKey } from '../List';\nimport { ListItemAvatarClassKey } from '../ListItemAvatar';\nimport { ListItemClassKey } from '../ListItem';\nimport { ListItemButtonClassKey } from '../ListItemButton';\nimport { ListItemIconClassKey } from '../ListItemIcon';\nimport { ListItemSecondaryActionClassKey } from '../ListItemSecondaryAction';\nimport { ListItemTextClassKey } from '../ListItemText';\nimport { ListSubheaderClassKey } from '../ListSubheader';\nimport { MenuClassKey } from '../Menu';\nimport { MenuItemClassKey } from '../MenuItem';\nimport { MenuListClassKey } from '../MenuList';\nimport { MobileStepperClassKey } from '../MobileStepper';\nimport { ModalClassKey } from '../Modal';\nimport { NativeSelectClassKey } from '../NativeSelect';\nimport { OutlinedInputClassKey } from '../OutlinedInput';\nimport { PaginationClassKey } from '../Pagination';\nimport { PaginationItemClassKey } from '../PaginationItem';\nimport { PaperClassKey } from '../Paper';\nimport { PopoverClassKey } from '../Popover';\nimport { RadioClassKey } from '../Radio';\nimport { RatingClassKey } from '../Rating';\nimport { ScopedCssBaselineClassKey } from '../ScopedCssBaseline';\nimport { SelectClassKey } from '../Select';\nimport { SkeletonClassKey } from '../Skeleton';\nimport { SliderClassKey } from '../Slider';\nimport { SnackbarClassKey } from '../Snackbar';\nimport { SnackbarContentClassKey } from '../SnackbarContent';\nimport { SpeedDialClassKey } from '../SpeedDial';\nimport { SpeedDialActionClassKey } from '../SpeedDialAction';\nimport { SpeedDialIconClassKey } from '../SpeedDialIcon';\nimport { StackClassKey } from '../Stack';\nimport { StepButtonClasskey } from '../StepButton';\nimport { StepClasskey } from '../Step';\nimport { StepConnectorClasskey } from '../StepConnector';\nimport { StepContentClasskey } from '../StepContent';\nimport { StepIconClasskey } from '../StepIcon';\nimport { StepLabelClasskey } from '../StepLabel';\nimport { StepperClasskey } from '../Stepper';\nimport { SvgIconClassKey } from '../SvgIcon';\nimport { SwitchClassKey } from '../Switch';\nimport { TabClassKey } from '../Tab';\nimport { TableBodyClassKey } from '../TableBody';\nimport { TableCellClassKey } from '../TableCell';\nimport { TableClassKey } from '../Table';\nimport { TableContainerClassKey } from '../TableContainer';\nimport { TableFooterClassKey } from '../TableFooter';\nimport { TableHeadClassKey } from '../TableHead';\nimport { TablePaginationClassKey } from '../TablePagination';\nimport { TableRowClassKey } from '../TableRow';\nimport { TableSortLabelClassKey } from '../TableSortLabel';\nimport { TabsClassKey } from '../Tabs';\nimport { TextFieldClassKey } from '../TextField';\nimport { ToggleButtonClassKey } from '../ToggleButton';\nimport { ToggleButtonGroupClassKey } from '../ToggleButtonGroup';\nimport { ToolbarClassKey } from '../Toolbar';\nimport { TooltipClassKey } from '../Tooltip';\nimport { TouchRippleClassKey } from '../ButtonBase/TouchRipple';\nimport { TypographyClassKey } from '../Typography';\n\nexport type OverridesStyleRules<\n  ClassKey extends string = string,\n  ComponentName = keyof ComponentsPropsList,\n  Theme = unknown,\n> = Record<\n  ClassKey,\n  Interpolation<\n    // Record<string, unknown> is for other props that the slot receive internally\n    // Documenting all ownerStates could be a huge work, let's wait until we have a real needs from developers.\n    (ComponentName extends keyof ComponentsPropsList\n      ? ComponentsPropsList[ComponentName] &\n          Record<string, unknown> & {\n            ownerState: ComponentsPropsList[ComponentName] & Record<string, unknown>;\n          }\n      : {}) & {\n      theme: Theme;\n    } & Record<string, unknown>\n  >\n>;\n\nexport type ComponentsOverrides<Theme = unknown> = {\n  [Name in keyof ComponentNameToClassKey]?: Partial<\n    OverridesStyleRules<ComponentNameToClassKey[Name], Name, Theme>\n  >;\n} & {\n  MuiCssBaseline?: CSSObject | string | ((theme: Theme) => CSSInterpolation);\n};\n\nexport interface ComponentNameToClassKey {\n  MuiAlert: AlertClassKey;\n  MuiAlertTitle: AlertTitleClassKey;\n  MuiAppBar: AppBarClassKey;\n  MuiAutocomplete: AutocompleteClassKey;\n  MuiAvatar: AvatarClassKey;\n  MuiAvatarGroup: AvatarGroupClassKey;\n  MuiBackdrop: BackdropClassKey;\n  MuiBadge: BadgeClassKey;\n  MuiBottomNavigation: BottomNavigationClassKey;\n  MuiBottomNavigationAction: BottomNavigationActionClassKey;\n  MuiBreadcrumbs: BreadcrumbsClassKey;\n  MuiButton: ButtonClassKey;\n  MuiButtonBase: ButtonBaseClassKey;\n  MuiButtonGroup: ButtonGroupClassKey;\n  MuiCard: CardClassKey;\n  MuiCardActionArea: CardActionAreaClassKey;\n  MuiCardActions: CardActionsClassKey;\n  MuiCardContent: CardContentClassKey;\n  MuiCardHeader: CardHeaderClassKey;\n  MuiCardMedia: CardMediaClassKey;\n  MuiCheckbox: CheckboxClassKey;\n  MuiChip: ChipClassKey;\n  MuiCircularProgress: CircularProgressClassKey;\n  MuiCollapse: CollapseClassKey;\n  MuiContainer: ContainerClassKey;\n  MuiDialog: DialogClassKey;\n  MuiDialogActions: DialogActionsClassKey;\n  MuiDialogContent: DialogContentClassKey;\n  MuiDialogContentText: DialogContentTextClassKey;\n  MuiDialogTitle: DialogTitleClassKey;\n  MuiDivider: DividerClassKey;\n  MuiDrawer: DrawerClassKey;\n  MuiAccordion: AccordionClassKey;\n  MuiAccordionActions: AccordionActionsClassKey;\n  MuiAccordionDetails: AccordionDetailsClassKey;\n  MuiAccordionSummary: AccordionSummaryClassKey;\n  MuiFab: FabClassKey;\n  MuiFilledInput: FilledInputClassKey;\n  MuiFormControl: FormControlClassKey;\n  MuiFormControlLabel: FormControlLabelClassKey;\n  MuiFormGroup: FormGroupClassKey;\n  MuiFormHelperText: FormHelperTextClassKey;\n  MuiFormLabel: FormLabelClassKey;\n  MuiGrid: GridClassKey;\n  MuiGrid2: Grid2Slot;\n  MuiIcon: IconClassKey;\n  MuiIconButton: IconButtonClassKey;\n  MuiImageList: ImageListClassKey;\n  MuiImageListItem: ImageListItemClassKey;\n  MuiImageListItemBar: ImageListItemBarClassKey;\n  MuiInput: InputClassKey;\n  MuiInputAdornment: InputAdornmentClassKey;\n  MuiInputBase: InputBaseClassKey;\n  MuiInputLabel: InputLabelClassKey;\n  MuiLinearProgress: LinearProgressClassKey;\n  MuiLink: LinkClassKey;\n  MuiList: ListClassKey;\n  MuiListItem: ListItemClassKey;\n  MuiListItemButton: ListItemButtonClassKey;\n  MuiListItemAvatar: ListItemAvatarClassKey;\n  MuiListItemIcon: ListItemIconClassKey;\n  MuiListItemSecondaryAction: ListItemSecondaryActionClassKey;\n  MuiListItemText: ListItemTextClassKey;\n  MuiListSubheader: ListSubheaderClassKey;\n  MuiMenu: MenuClassKey;\n  MuiMenuItem: MenuItemClassKey;\n  MuiMenuList: MenuListClassKey;\n  MuiMobileStepper: MobileStepperClassKey;\n  MuiModal: ModalClassKey;\n  MuiNativeSelect: NativeSelectClassKey;\n  MuiOutlinedInput: OutlinedInputClassKey;\n  MuiPagination: PaginationClassKey;\n  MuiPaginationItem: PaginationItemClassKey;\n  MuiPaper: PaperClassKey;\n  MuiPopover: PopoverClassKey;\n  MuiPopper: PopperClassKey;\n  MuiRadio: RadioClassKey;\n  MuiRating: RatingClassKey;\n  MuiScopedCssBaseline: ScopedCssBaselineClassKey;\n  MuiSelect: SelectClassKey;\n  MuiSkeleton: SkeletonClassKey;\n  MuiSlider: SliderClassKey;\n  MuiSnackbar: SnackbarClassKey;\n  MuiSnackbarContent: SnackbarContentClassKey;\n  MuiSpeedDial: SpeedDialClassKey;\n  MuiSpeedDialAction: SpeedDialActionClassKey;\n  MuiSpeedDialIcon: SpeedDialIconClassKey;\n  MuiStack: StackClassKey;\n  MuiStep: StepClasskey;\n  MuiStepButton: StepButtonClasskey;\n  MuiStepConnector: StepConnectorClasskey;\n  MuiStepContent: StepContentClasskey;\n  MuiStepIcon: StepIconClasskey;\n  MuiStepLabel: StepLabelClasskey;\n  MuiStepper: StepperClasskey;\n  MuiSvgIcon: SvgIconClassKey;\n  MuiSwitch: SwitchClassKey;\n  MuiTab: TabClassKey;\n  MuiTable: TableClassKey;\n  MuiTableBody: TableBodyClassKey;\n  MuiTableCell: TableCellClassKey;\n  MuiTableContainer: TableContainerClassKey;\n  MuiTableFooter: TableFooterClassKey;\n  MuiTableHead: TableHeadClassKey;\n  MuiTablePagination: TablePaginationClassKey;\n  MuiTableRow: TableRowClassKey;\n  MuiTableSortLabel: TableSortLabelClassKey;\n  MuiTabs: TabsClassKey;\n  MuiTextField: TextFieldClassKey;\n  MuiToggleButton: ToggleButtonClassKey;\n  MuiToggleButtonGroup: ToggleButtonGroupClassKey;\n  MuiToolbar: ToolbarClassKey;\n  MuiTooltip: TooltipClassKey;\n  MuiTouchRipple: TouchRippleClassKey;\n  MuiTypography: TypographyClassKey;\n}\n","node_modules/@mui/material/styles/makeStyles.d.ts":"export default function makeStyles(stylesCreator: any, options?: object): never;\n","node_modules/@mui/material/styles/index.d.ts":"export { default as THEME_ID } from './identifier';\nexport {\n  default as createTheme,\n  default as unstable_createMuiStrictModeTheme,\n  createMuiTheme,\n  ThemeOptions,\n  Theme,\n} from './createTheme';\nexport { default as adaptV4Theme, DeprecatedThemeOptions } from './adaptV4Theme';\nexport { Shadows } from './shadows';\nexport { ZIndex } from './zIndex';\nexport {\n  CommonColors,\n  Palette,\n  PaletteColor,\n  PaletteColorOptions,\n  PaletteOptions,\n  SimplePaletteColorOptions,\n  TypeText,\n  TypeAction,\n  TypeBackground,\n} from './createPalette';\nexport { default as createStyles } from './createStyles';\nexport {\n  Typography as TypographyVariants,\n  TypographyOptions as TypographyVariantsOptions,\n  TypographyStyle,\n  Variant as TypographyVariant,\n} from './createTypography';\nexport { default as responsiveFontSizes } from './responsiveFontSizes';\nexport {\n  Duration,\n  Easing,\n  Transitions,\n  TransitionsOptions,\n  duration,\n  easing,\n} from './createTransitions';\nexport { Mixins } from './createMixins';\nexport {\n  Direction,\n  Breakpoint,\n  BreakpointOverrides,\n  Breakpoints,\n  BreakpointsOptions,\n  CreateMUIStyled,\n  Interpolation,\n  CSSInterpolation,\n  CSSObject,\n  css,\n  keyframes,\n  // color manipulators\n  hexToRgb,\n  rgbToHex,\n  hslToRgb,\n  decomposeColor,\n  recomposeColor,\n  getContrastRatio,\n  getLuminance,\n  emphasize,\n  alpha,\n  darken,\n  lighten,\n  ColorFormat,\n  ColorObject,\n  StyledEngineProvider,\n  SxProps,\n} from '@mui/system';\n// TODO: Remove this function in v6.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function experimental_sx(): any;\nexport { default as useTheme } from './useTheme';\nexport { default as useThemeProps } from './useThemeProps';\nexport * from './useThemeProps';\nexport { default as styled } from './styled';\n/**\n * @deprecated will be removed in v5.beta, please use styled from @mui/material/styles instead\n */\nexport { default as experimentalStyled } from './styled';\nexport { default as ThemeProvider } from './ThemeProvider';\nexport { ComponentsProps, ComponentsPropsList } from './props';\nexport { ComponentsVariants } from './variants';\nexport { ComponentsOverrides, ComponentNameToClassKey } from './overrides';\nexport { Components } from './components';\nexport { getUnit as unstable_getUnit, toUnitless as unstable_toUnitless } from './cssUtils';\n\nexport type ClassNameMap<ClassKey extends string = string> = Record<ClassKey, string>;\n\nexport interface StyledComponentProps<ClassKey extends string = string> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ClassNameMap<ClassKey>>;\n}\n\nexport { default as makeStyles } from './makeStyles';\nexport { default as withStyles } from './withStyles';\nexport { default as withTheme } from './withTheme';\n\nexport * from './CssVarsProvider';\n\nexport { default as experimental_extendTheme } from './experimental_extendTheme';\nexport type {\n  ColorSchemeOverrides,\n  SupportedColorScheme,\n  ColorSystem,\n  CssVarsPalette,\n  Opacity,\n  Overlays,\n  PaletteAlert,\n  PaletteActionChannel,\n  PaletteAppBar,\n  PaletteAvatar,\n  PaletteChip,\n  PaletteColorChannel,\n  PaletteCommonChannel,\n  PaletteFilledInput,\n  PaletteLinearProgress,\n  PaletteSkeleton,\n  PaletteSlider,\n  PaletteSnackbarContent,\n  PaletteSpeedDialAction,\n  PaletteStepConnector,\n  PaletteStepContent,\n  PaletteSwitch,\n  PaletteTableCell,\n  PaletteTextChannel,\n  PaletteTooltip,\n  CssVarsThemeOptions,\n  CssVarsTheme,\n  ThemeVars,\n  ThemeCssVar,\n  ThemeCssVarOverrides,\n  ColorSystemOptions,\n} from './experimental_extendTheme';\nexport { default as getOverlayAlpha } from './getOverlayAlpha';\nexport { default as shouldSkipGeneratingVar } from './shouldSkipGeneratingVar';\n\n// Private methods for creating parts of the theme\nexport { default as private_createTypography } from './createTypography';\nexport { default as private_excludeVariablesFromRoot } from './excludeVariablesFromRoot';\n","node_modules/@mui/material/styles/identifier.d.ts":"declare const _default: \"$$material\";\nexport default _default;\n","node_modules/@mui/material/styles/getOverlayAlpha.d.ts":"declare const getOverlayAlpha: (elevation: number) => string;\nexport default getOverlayAlpha;\n","node_modules/@mui/material/styles/experimental_extendTheme.d.ts":"/* eslint-disable @typescript-eslint/naming-convention */\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxConfig, SxProps, CSSObject, ApplyStyles } from '@mui/system';\nimport { ThemeOptions, Theme } from './createTheme';\nimport { Palette, PaletteOptions } from './createPalette';\nimport { Shadows } from './shadows';\nimport { ZIndex } from './zIndex';\nimport { Components } from './components';\n\n/**\n * default MD color-schemes\n */\nexport type DefaultColorScheme = 'light' | 'dark';\n\n/**\n * The application can add more color-scheme by extending this interface via module augmentation\n *\n * Ex.\n * declare module @mui/material/styles {\n *   interface ColorSchemeOverrides {\n *     foo: true;\n *   }\n * }\n *\n * // SupportedColorScheme = 'light' | 'dark' | 'foo';\n */\nexport interface ColorSchemeOverrides {}\nexport type ExtendedColorScheme = OverridableStringUnion<never, ColorSchemeOverrides>;\n\n/**\n * All color-schemes that the application has\n */\nexport type SupportedColorScheme = DefaultColorScheme | ExtendedColorScheme;\n\nexport interface Opacity {\n  inputPlaceholder: number;\n  inputUnderline: number;\n  switchTrackDisabled: number;\n  switchTrack: number;\n}\n\nexport type Overlays = [\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n  string | undefined,\n];\n\nexport interface PaletteBackgroundChannel {\n  defaultChannel: string;\n  paperChannel: string;\n}\n\nexport interface PaletteCommonChannel {\n  background: string;\n  backgroundChannel: string;\n  onBackground: string;\n  onBackgroundChannel: string;\n}\n\nexport interface PaletteColorChannel {\n  mainChannel: string;\n  lightChannel: string;\n  darkChannel: string;\n  contrastTextChannel: string;\n}\n\nexport interface PaletteActionChannel {\n  activeChannel: string;\n  selectedChannel: string;\n}\n\nexport interface PaletteTextChannel {\n  primaryChannel: string;\n  secondaryChannel: string;\n}\n\nexport interface PaletteAlert {\n  errorColor: string;\n  infoColor: string;\n  successColor: string;\n  warningColor: string;\n  errorFilledBg: string;\n  infoFilledBg: string;\n  successFilledBg: string;\n  warningFilledBg: string;\n  errorFilledColor: string;\n  infoFilledColor: string;\n  successFilledColor: string;\n  warningFilledColor: string;\n  errorStandardBg: string;\n  infoStandardBg: string;\n  successStandardBg: string;\n  warningStandardBg: string;\n  errorIconColor: string;\n  infoIconColor: string;\n  successIconColor: string;\n  warningIconColor: string;\n}\n\nexport interface PaletteAppBar {\n  defaultBg: string;\n  darkBg: string;\n  darkColor: string;\n}\n\nexport interface PaletteAvatar {\n  defaultBg: string;\n}\n\nexport interface PaletteButton {\n  inheritContainedBg: string;\n  inheritContainedHoverBg: string;\n}\n\nexport interface PaletteChip {\n  defaultBorder: string;\n  defaultAvatarColor: string;\n  defaultIconColor: string;\n}\n\nexport interface PaletteFilledInput {\n  bg: string;\n  hoverBg: string;\n  disabledBg: string;\n}\n\nexport interface PaletteLinearProgress {\n  primaryBg: string;\n  secondaryBg: string;\n  errorBg: string;\n  infoBg: string;\n  successBg: string;\n  warningBg: string;\n}\n\nexport interface PaletteSkeleton {\n  bg: string;\n}\n\nexport interface PaletteSlider {\n  primaryTrack: string;\n  secondaryTrack: string;\n  errorTrack: string;\n  infoTrack: string;\n  successTrack: string;\n  warningTrack: string;\n}\n\nexport interface PaletteSnackbarContent {\n  bg: string;\n  color: string;\n}\n\nexport interface PaletteSpeedDialAction {\n  fabHoverBg: string;\n}\n\nexport interface PaletteStepConnector {\n  border: string;\n}\n\nexport interface PaletteStepContent {\n  border: string;\n}\n\nexport interface PaletteSwitch {\n  defaultColor: string;\n  defaultDisabledColor: string;\n  primaryDisabledColor: string;\n  secondaryDisabledColor: string;\n  errorDisabledColor: string;\n  infoDisabledColor: string;\n  successDisabledColor: string;\n  warningDisabledColor: string;\n}\n\nexport interface PaletteTableCell {\n  border: string;\n}\n\nexport interface PaletteTooltip {\n  bg: string;\n}\n\n// The Palette should be sync with `../themeCssVarsAugmentation/index.d.ts`\nexport interface ColorSystemOptions {\n  palette?: PaletteOptions & {\n    background?: Partial<PaletteBackgroundChannel>;\n    common?: Partial<PaletteCommonChannel>;\n    primary?: Partial<PaletteColorChannel>;\n    secondary?: Partial<PaletteColorChannel>;\n    error?: Partial<PaletteColorChannel>;\n    info?: Partial<PaletteColorChannel>;\n    success?: Partial<PaletteColorChannel>;\n    text?: Partial<PaletteTextChannel>;\n    dividerChannel?: Partial<string>;\n    action?: Partial<PaletteActionChannel>;\n    Alert?: Partial<PaletteAlert>;\n    AppBar?: Partial<PaletteAppBar>;\n    Avatar?: Partial<PaletteAvatar>;\n    Button?: Partial<PaletteButton>;\n    Chip?: Partial<PaletteChip>;\n    FilledInput?: Partial<PaletteFilledInput>;\n    LinearProgress?: Partial<PaletteLinearProgress>;\n    Skeleton?: Partial<PaletteSkeleton>;\n    Slider?: Partial<PaletteSlider>;\n    SnackbarContent?: Partial<PaletteSnackbarContent>;\n    SpeedDialAction?: Partial<PaletteSpeedDialAction>;\n    StepConnector?: Partial<PaletteStepConnector>;\n    StepContent?: Partial<PaletteStepContent>;\n    Switch?: Partial<PaletteSwitch>;\n    TableCell?: Partial<PaletteTableCell>;\n    Tooltip?: Partial<PaletteTooltip>;\n  };\n  opacity?: Partial<Opacity>;\n  overlays?: Overlays;\n}\n\nexport interface CssVarsPalette {\n  colorScheme: SupportedColorScheme;\n  common: PaletteCommonChannel;\n  primary: PaletteColorChannel;\n  secondary: PaletteColorChannel;\n  error: PaletteColorChannel;\n  info: PaletteColorChannel;\n  success: PaletteColorChannel;\n  warning: PaletteColorChannel;\n  text: PaletteTextChannel;\n  background: PaletteBackgroundChannel;\n  dividerChannel: string;\n  action: PaletteActionChannel;\n  Alert: PaletteAlert;\n  AppBar: PaletteAppBar;\n  Avatar: PaletteAvatar;\n  Button: PaletteButton;\n  Chip: PaletteChip;\n  FilledInput: PaletteFilledInput;\n  LinearProgress: PaletteLinearProgress;\n  Skeleton: PaletteSkeleton;\n  Slider: PaletteSlider;\n  SnackbarContent: PaletteSnackbarContent;\n  SpeedDialAction: PaletteSpeedDialAction;\n  StepConnector: PaletteStepConnector;\n  StepContent: PaletteStepContent;\n  Switch: PaletteSwitch;\n  TableCell: PaletteTableCell;\n  Tooltip: PaletteTooltip;\n}\n\nexport interface ColorSystem {\n  palette: Palette & CssVarsPalette;\n  opacity: Opacity;\n  overlays: Overlays;\n}\n\nexport interface CssVarsThemeOptions extends Omit<ThemeOptions, 'palette' | 'components'> {\n  /**\n   * Prefix of the generated CSS variables\n   * @default 'mui'\n   */\n  cssVarPrefix?: string;\n  /**\n   * Theme components\n   */\n  components?: Components<Omit<Theme, 'components' | 'palette'> & CssVarsTheme>;\n  /**\n   * Color schemes configuration\n   */\n  colorSchemes?: Partial<Record<SupportedColorScheme, ColorSystemOptions>>;\n  /**\n   * A function to determine if the key, value should be attached as CSS Variable\n   * `keys` is an array that represents the object path keys.\n   *  Ex, if the theme is { foo: { bar: 'var(--test)' } }\n   *  then, keys = ['foo', 'bar']\n   *        value = 'var(--test)'\n   */\n  shouldSkipGeneratingVar?: (keys: string[], value: string | number) => boolean;\n}\n\n// should not include keys defined in `shouldSkipGeneratingVar` and have value typeof function\nexport interface ThemeVars {\n  palette: Omit<\n    ColorSystem['palette'],\n    | 'colorScheme'\n    | 'mode'\n    | 'contrastThreshold'\n    | 'tonalOffset'\n    | 'getContrastText'\n    | 'augmentColor'\n  >;\n  opacity: Opacity;\n  overlays: Overlays;\n  shadows: Shadows;\n  shape: Theme['shape'];\n  zIndex: ZIndex;\n}\n\ntype Split<T, K extends keyof T = keyof T> = K extends string | number\n  ? { [k in K]: Exclude<T[K], undefined> }\n  : never;\n\ntype ConcatDeep<T> =\n  T extends Record<string | number, infer V>\n    ? keyof T extends string | number\n      ? V extends string | number\n        ? keyof T\n        : keyof V extends string | number\n          ? `${keyof T}-${ConcatDeep<Split<V>>}`\n          : never\n      : never\n    : never;\n\n/**\n * Does not work for these cases:\n * - { borderRadius: string | number } // the value can't be a union\n * - { shadows: [string, string, ..., string] } // the value can't be an array\n */\ntype NormalizeVars<T> = ConcatDeep<Split<T>>;\n\n// shut off automatic exporting for the Generics above\nexport {};\n\nexport interface ThemeCssVarOverrides {}\n\nexport type ThemeCssVar = OverridableStringUnion<\n  | NormalizeVars<Omit<ThemeVars, 'overlays' | 'shadows' | 'shape'>>\n  | 'shape-borderRadius'\n  | 'shadows-0'\n  | 'shadows-1'\n  | 'shadows-2'\n  | 'shadows-3'\n  | 'shadows-4'\n  | 'shadows-5'\n  | 'shadows-6'\n  | 'shadows-7'\n  | 'shadows-8'\n  | 'shadows-9'\n  | 'shadows-10'\n  | 'shadows-11'\n  | 'shadows-12'\n  | 'shadows-13'\n  | 'shadows-14'\n  | 'shadows-15'\n  | 'shadows-16'\n  | 'shadows-17'\n  | 'shadows-18'\n  | 'shadows-19'\n  | 'shadows-20'\n  | 'shadows-21'\n  | 'shadows-22'\n  | 'shadows-23'\n  | 'shadows-24'\n  | 'overlays-0'\n  | 'overlays-1'\n  | 'overlays-2'\n  | 'overlays-3'\n  | 'overlays-4'\n  | 'overlays-5'\n  | 'overlays-6'\n  | 'overlays-7'\n  | 'overlays-8'\n  | 'overlays-9'\n  | 'overlays-10'\n  | 'overlays-11'\n  | 'overlays-12'\n  | 'overlays-13'\n  | 'overlays-14'\n  | 'overlays-15'\n  | 'overlays-16'\n  | 'overlays-17'\n  | 'overlays-18'\n  | 'overlays-19'\n  | 'overlays-20'\n  | 'overlays-21'\n  | 'overlays-22'\n  | 'overlays-23'\n  | 'overlays-24',\n  ThemeCssVarOverrides\n>;\n\n/**\n * Theme properties generated by extendTheme and CssVarsProvider\n */\nexport interface CssVarsTheme extends ColorSystem {\n  colorSchemes: Record<SupportedColorScheme, ColorSystem>;\n  cssVarPrefix: string;\n  vars: ThemeVars;\n  getCssVar: (field: ThemeCssVar, ...vars: ThemeCssVar[]) => string;\n  getColorSchemeSelector: (colorScheme: SupportedColorScheme) => string;\n  generateCssVars: (colorScheme?: SupportedColorScheme) => {\n    css: Record<string, string | number>;\n    vars: ThemeVars;\n  };\n\n  // Default theme tokens\n  spacing: Theme['spacing'];\n  breakpoints: Theme['breakpoints'];\n  shape: Theme['shape'];\n  typography: Theme['typography'];\n  transitions: Theme['transitions'];\n  shadows: Theme['shadows'];\n  mixins: Theme['mixins'];\n  zIndex: Theme['zIndex'];\n  direction: Theme['direction'];\n  /**\n   * A function to determine if the key, value should be attached as CSS Variable\n   * `keys` is an array that represents the object path keys.\n   *  Ex, if the theme is { foo: { bar: 'var(--test)' } }\n   *  then, keys = ['foo', 'bar']\n   *        value = 'var(--test)'\n   */\n  shouldSkipGeneratingVar: (keys: string[], value: string | number) => boolean;\n  unstable_sxConfig: SxConfig;\n  unstable_sx: (props: SxProps<CssVarsTheme>) => CSSObject;\n  applyStyles: ApplyStyles<SupportedColorScheme>;\n}\n\n/**\n * Generate a theme base on the options received.\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @param args Deep merge the arguments with the about to be returned theme.\n * @returns A complete, ready-to-use theme object.\n */\nexport default function experimental_extendTheme(\n  options?: CssVarsThemeOptions,\n  ...args: object[]\n): Omit<Theme, 'palette' | 'applyStyles'> & CssVarsTheme;\n","node_modules/@mui/material/styles/excludeVariablesFromRoot.d.ts":"/**\n * @internal These variables should not appear in the :root stylesheet when the `defaultMode=\"dark\"`\n */\ndeclare const excludeVariablesFromRoot: (cssVarPrefix: string) => string[];\nexport default excludeVariablesFromRoot;\n","node_modules/@mui/material/styles/cssUtils.d.ts":"import { CSSProperties } from './createTypography';\n\nexport function isUnitless(value: string): boolean;\n\nexport function getUnit(input: string): string;\n\nexport function toUnitless(value: string): number;\n\nexport function convertLength(baseFontSize: string): (length: string, toUnit: string) => string;\n\nexport interface AlignPropertyParams {\n  size: number;\n  grid: number;\n}\nexport function alignProperty(params: AlignPropertyParams): number;\n\nexport interface FontGridParams {\n  lineHeight: number;\n  pixels: number;\n  htmlFontSize: number;\n}\nexport function fontGrid(params: FontGridParams): number;\n\nexport interface ResponsivePropertyParams {\n  cssProperty: string;\n  min: number;\n  max: number;\n  unit?: string;\n  breakpoints?: number[];\n  transform?: (value: number) => number;\n}\nexport function responsiveProperty(params: ResponsivePropertyParams): CSSProperties;\n","node_modules/@mui/material/styles/createTypography.d.ts":"import * as React from 'react';\nimport * as CSS from 'csstype';\nimport { Palette } from './createPalette';\n\nexport type Variant =\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'subtitle1'\n  | 'subtitle2'\n  | 'body1'\n  | 'body2'\n  | 'caption'\n  | 'button'\n  | 'overline';\n\nexport interface FontStyle {\n  fontFamily: React.CSSProperties['fontFamily'];\n  fontSize: number;\n  fontWeightLight: React.CSSProperties['fontWeight'];\n  fontWeightRegular: React.CSSProperties['fontWeight'];\n  fontWeightMedium: React.CSSProperties['fontWeight'];\n  fontWeightBold: React.CSSProperties['fontWeight'];\n  htmlFontSize: number;\n}\n\nexport type NormalCssProperties = CSS.Properties<number | string>;\nexport type Fontface = CSS.AtRule.FontFace & { fallbacks?: CSS.AtRule.FontFace[] };\n\n/**\n * Allows the user to augment the properties available\n */\nexport interface BaseCSSProperties extends NormalCssProperties {\n  '@font-face'?: Fontface | Fontface[];\n}\n\nexport interface CSSProperties extends BaseCSSProperties {\n  // Allow pseudo selectors and media queries\n  // `unknown` is used since TS does not allow assigning an interface without\n  // an index signature to one with an index signature. This is to allow type safe\n  // module augmentation.\n  // Technically we want any key not typed in `BaseCSSProperties` to be of type\n  // `CSSProperties` but this doesn't work. The index signature needs to cover\n  // BaseCSSProperties as well. Usually you would use `BaseCSSProperties[keyof BaseCSSProperties]`\n  // but this would not allow assigning React.CSSProperties to CSSProperties\n  [k: string]: unknown | CSSProperties;\n}\n\nexport interface FontStyleOptions extends Partial<FontStyle> {\n  allVariants?: React.CSSProperties;\n}\n\n// TODO: which one should actually be allowed to be subject to module augmentation?\n// current type vs interface decision is kept for historical reasons until we\n// made a decision\nexport type TypographyStyle = CSSProperties;\nexport interface TypographyStyleOptions extends TypographyStyle {}\n\nexport interface TypographyUtils {\n  pxToRem: (px: number) => string;\n}\n\nexport interface Typography extends Record<Variant, TypographyStyle>, FontStyle, TypographyUtils {}\n\nexport interface TypographyOptions\n  extends Partial<Record<Variant, TypographyStyleOptions> & FontStyleOptions> {}\n\nexport default function createTypography(\n  palette: Palette,\n  typography: TypographyOptions | ((palette: Palette) => TypographyOptions),\n): Typography;\n","node_modules/@mui/material/styles/createTransitions.d.ts":"export interface Easing {\n  easeInOut: string;\n  easeOut: string;\n  easeIn: string;\n  sharp: string;\n}\nexport const easing: Easing;\n\nexport interface Duration {\n  shortest: number;\n  shorter: number;\n  short: number;\n  standard: number;\n  complex: number;\n  enteringScreen: number;\n  leavingScreen: number;\n}\nexport const duration: Duration;\n\nexport interface TransitionsOptions {\n  easing?: Partial<Easing>;\n  duration?: Partial<Duration>;\n  create?: (\n    props: string | string[],\n    options?: Partial<{ duration: number | string; easing: string; delay: number | string }>,\n  ) => string;\n  getAutoHeightDuration?: (height: number) => number;\n}\n\n/**\n * @internal\n * @param props\n * @param options\n */\nexport function create(\n  props: string | string[],\n  options?: Partial<{ duration: number | string; easing: string; delay: number | string }>,\n): string;\n\n/**\n * @internal\n * @param height\n */\nexport function getAutoHeightDuration(height: number): number;\n\nexport interface Transitions {\n  easing: Easing;\n  duration: Duration;\n  create: typeof create;\n  getAutoHeightDuration: typeof getAutoHeightDuration;\n}\n","node_modules/@mui/material/styles/createTheme.d.ts":"import {\n  ThemeOptions as SystemThemeOptions,\n  Theme as SystemTheme,\n  SxProps,\n  CSSObject,\n  SxConfig,\n} from '@mui/system';\nimport { Mixins, MixinsOptions } from './createMixins';\nimport { Palette, PaletteOptions } from './createPalette';\nimport { Typography, TypographyOptions } from './createTypography';\nimport { Shadows } from './shadows';\nimport { Transitions, TransitionsOptions } from './createTransitions';\nimport { ZIndex, ZIndexOptions } from './zIndex';\nimport { Components } from './components';\n\nexport interface ThemeOptions extends Omit<SystemThemeOptions, 'zIndex'> {\n  mixins?: MixinsOptions;\n  components?: Components<Omit<Theme, 'components'>>;\n  palette?: PaletteOptions;\n  shadows?: Shadows;\n  transitions?: TransitionsOptions;\n  typography?: TypographyOptions | ((palette: Palette) => TypographyOptions);\n  zIndex?: ZIndexOptions;\n  unstable_strictMode?: boolean;\n  unstable_sxConfig?: SxConfig;\n}\n\ninterface BaseTheme extends SystemTheme {\n  mixins: Mixins;\n  palette: Palette;\n  shadows: Shadows;\n  transitions: Transitions;\n  typography: Typography;\n  zIndex: ZIndex;\n  unstable_strictMode?: boolean;\n}\n\n// shut off automatic exporting for the `BaseTheme` above\nexport {};\n\n/**\n * Our [TypeScript guide on theme customization](https://mui.com/material-ui/guides/typescript/#customization-of-theme) explains in detail how you would add custom properties.\n */\nexport interface Theme extends BaseTheme {\n  components?: Components<BaseTheme>;\n  unstable_sx: (props: SxProps<Theme>) => CSSObject;\n  unstable_sxConfig: SxConfig;\n}\n\n/**\n * @deprecated\n * Use `import { createTheme } from '@mui/material/styles'` instead.\n */\nexport function createMuiTheme(options?: ThemeOptions, ...args: object[]): Theme;\n\n/**\n * Generate a theme base on the options received.\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @param args Deep merge the arguments with the about to be returned theme.\n * @returns A complete, ready-to-use theme object.\n */\nexport default function createTheme(options?: ThemeOptions, ...args: object[]): Theme;\n","node_modules/@mui/material/styles/createStyles.d.ts":"export default function createStyles(styles: any): never;\n","node_modules/@mui/material/styles/createPalette.d.ts":"import { Color, PaletteMode } from '..';\n\nexport {};\n// use standalone interface over typeof colors/commons\n// to enable module augmentation\nexport interface CommonColors {\n  black: string;\n  white: string;\n}\n\nexport type ColorPartial = Partial<Color>;\n\nexport interface TypeText {\n  primary: string;\n  secondary: string;\n  disabled: string;\n}\n\nexport interface TypeAction {\n  active: string;\n  hover: string;\n  hoverOpacity: number;\n  selected: string;\n  selectedOpacity: number;\n  disabled: string;\n  disabledOpacity: number;\n  disabledBackground: string;\n  focus: string;\n  focusOpacity: number;\n  activatedOpacity: number;\n}\n\nexport interface TypeBackground {\n  default: string;\n  paper: string;\n}\n\nexport type TypeDivider = string;\n\nexport type PaletteColorOptions = SimplePaletteColorOptions | ColorPartial;\n\nexport interface SimplePaletteColorOptions {\n  light?: string;\n  main: string;\n  dark?: string;\n  contrastText?: string;\n}\n\nexport interface PaletteColor {\n  light: string;\n  main: string;\n  dark: string;\n  contrastText: string;\n}\n\nexport interface TypeObject {\n  text: TypeText;\n  action: TypeAction;\n  divider: TypeDivider;\n  background: TypeBackground;\n}\n\nexport type PaletteTonalOffset =\n  | number\n  | {\n      light: number;\n      dark: number;\n    };\n\nexport const light: TypeObject;\nexport const dark: TypeObject;\n\nexport interface PaletteAugmentColorOptions {\n  color: PaletteColorOptions;\n  mainShade?: number | string;\n  lightShade?: number | string;\n  darkShade?: number | string;\n  name?: number | string;\n}\n\nexport interface Palette {\n  common: CommonColors;\n  mode: PaletteMode;\n  contrastThreshold: number;\n  tonalOffset: PaletteTonalOffset;\n  primary: PaletteColor;\n  secondary: PaletteColor;\n  error: PaletteColor;\n  warning: PaletteColor;\n  info: PaletteColor;\n  success: PaletteColor;\n  grey: Color;\n  text: TypeText;\n  divider: TypeDivider;\n  action: TypeAction;\n  background: TypeBackground;\n  getContrastText: (background: string) => string;\n  augmentColor: (options: PaletteAugmentColorOptions) => PaletteColor;\n}\n\nexport interface Channels {\n  mainChannel: string;\n  lightChannel: string;\n  darkChannel: string;\n  contrastTextChannel: string;\n}\n\nexport type PartialTypeObject = { [P in keyof TypeObject]?: Partial<TypeObject[P]> };\n\nexport interface PaletteOptions {\n  primary?: PaletteColorOptions;\n  secondary?: PaletteColorOptions;\n  error?: PaletteColorOptions;\n  warning?: PaletteColorOptions;\n  info?: PaletteColorOptions;\n  success?: PaletteColorOptions;\n  mode?: PaletteMode;\n  tonalOffset?: PaletteTonalOffset;\n  contrastThreshold?: number;\n  common?: Partial<CommonColors>;\n  grey?: ColorPartial;\n  text?: Partial<TypeText>;\n  divider?: string;\n  action?: Partial<TypeAction>;\n  background?: Partial<TypeBackground>;\n  getContrastText?: (background: string) => string;\n}\n\nexport default function createPalette(palette: PaletteOptions): Palette;\n","node_modules/@mui/material/styles/createMixins.d.ts":"import * as CSS from 'csstype';\nimport { Breakpoints } from '@mui/system';\n\nexport type NormalCssProperties = CSS.Properties<number | string>;\nexport type Fontface = CSS.AtRule.FontFace & { fallbacks?: CSS.AtRule.FontFace[] };\n\n/**\n * Allows the user to augment the properties available\n */\nexport interface BaseCSSProperties extends NormalCssProperties {\n  '@font-face'?: Fontface | Fontface[];\n}\n\nexport interface CSSProperties extends BaseCSSProperties {\n  // Allow pseudo selectors and media queries\n  // `unknown` is used since TS does not allow assigning an interface without\n  // an index signature to one with an index signature. This is to allow type safe\n  // module augmentation.\n  // Technically we want any key not typed in `BaseCSSProperties` to be of type\n  // `CSSProperties` but this doesn't work. The index signature needs to cover\n  // BaseCSSProperties as well. Usually you would use `BaseCSSProperties[keyof BaseCSSProperties]`\n  // but this would not allow assigning React.CSSProperties to CSSProperties\n  [k: string]: unknown | CSSProperties;\n}\n\nexport interface Mixins {\n  toolbar: CSSProperties;\n  // ... use interface declaration merging to add custom mixins\n}\n\nexport interface MixinsOptions extends Partial<Mixins> {\n  // ... use interface declaration merging to add custom mixin options\n}\n\nexport default function createMixins(breakpoints: Breakpoints, mixins: MixinsOptions): Mixins;\n","node_modules/@mui/material/styles/components.d.ts":"import { ComponentsProps } from './props';\nimport { ComponentsOverrides } from './overrides';\nimport { ComponentsVariants } from './variants';\n\nexport interface Components<Theme = unknown> {\n  MuiAlert?: {\n    defaultProps?: ComponentsProps['MuiAlert'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAlert'];\n    variants?: ComponentsVariants<Theme>['MuiAlert'];\n  };\n  MuiAlertTitle?: {\n    defaultProps?: ComponentsProps['MuiAlertTitle'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAlertTitle'];\n    variants?: ComponentsVariants<Theme>['MuiAlertTitle'];\n  };\n  MuiAppBar?: {\n    defaultProps?: ComponentsProps['MuiAppBar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAppBar'];\n    variants?: ComponentsVariants<Theme>['MuiAppBar'];\n  };\n  MuiAutocomplete?: {\n    defaultProps?: ComponentsProps['MuiAutocomplete'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAutocomplete'];\n    variants?: ComponentsVariants<Theme>['MuiAutocomplete'];\n  };\n  MuiAvatar?: {\n    defaultProps?: ComponentsProps['MuiAvatar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAvatar'];\n    variants?: ComponentsVariants<Theme>['MuiAvatar'];\n  };\n  MuiAvatarGroup?: {\n    defaultProps?: ComponentsProps['MuiAvatarGroup'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAvatarGroup'];\n    variants?: ComponentsVariants<Theme>['MuiAvatarGroup'];\n  };\n  MuiBackdrop?: {\n    defaultProps?: ComponentsProps['MuiBackdrop'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiBackdrop'];\n    variants?: ComponentsVariants<Theme>['MuiBackdrop'];\n  };\n  MuiBadge?: {\n    defaultProps?: ComponentsProps['MuiBadge'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiBadge'];\n    variants?: ComponentsVariants<Theme>['MuiBadge'];\n  };\n  MuiBottomNavigation?: {\n    defaultProps?: ComponentsProps['MuiBottomNavigation'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiBottomNavigation'];\n    variants?: ComponentsVariants<Theme>['MuiBottomNavigation'];\n  };\n  MuiBottomNavigationAction?: {\n    defaultProps?: ComponentsProps['MuiBottomNavigationAction'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiBottomNavigationAction'];\n    variants?: ComponentsVariants<Theme>['MuiBottomNavigationAction'];\n  };\n  MuiBreadcrumbs?: {\n    defaultProps?: ComponentsProps['MuiBreadcrumbs'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiBreadcrumbs'];\n    variants?: ComponentsVariants<Theme>['MuiBreadcrumbs'];\n  };\n  MuiButton?: {\n    defaultProps?: ComponentsProps['MuiButton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiButton'];\n    variants?: ComponentsVariants<Theme>['MuiButton'];\n  };\n  MuiButtonBase?: {\n    defaultProps?: ComponentsProps['MuiButtonBase'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiButtonBase'];\n    variants?: ComponentsVariants<Theme>['MuiButtonBase'];\n  };\n  MuiButtonGroup?: {\n    defaultProps?: ComponentsProps['MuiButtonGroup'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiButtonGroup'];\n    variants?: ComponentsVariants<Theme>['MuiButtonGroup'];\n  };\n  MuiCard?: {\n    defaultProps?: ComponentsProps['MuiCard'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCard'];\n    variants?: ComponentsVariants<Theme>['MuiCard'];\n  };\n  MuiCardActionArea?: {\n    defaultProps?: ComponentsProps['MuiCardActionArea'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCardActionArea'];\n    variants?: ComponentsVariants<Theme>['MuiCardActionArea'];\n  };\n  MuiCardActions?: {\n    defaultProps?: ComponentsProps['MuiCardActions'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCardActions'];\n    variants?: ComponentsVariants<Theme>['MuiCardActions'];\n  };\n  MuiCardContent?: {\n    defaultProps?: ComponentsProps['MuiCardContent'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCardContent'];\n    variants?: ComponentsVariants<Theme>['MuiCardContent'];\n  };\n  MuiCardHeader?: {\n    defaultProps?: ComponentsProps['MuiCardHeader'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCardHeader'];\n    variants?: ComponentsVariants<Theme>['MuiCardHeader'];\n  };\n  MuiCardMedia?: {\n    defaultProps?: ComponentsProps['MuiCardMedia'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCardMedia'];\n    variants?: ComponentsVariants<Theme>['MuiCardMedia'];\n  };\n  MuiCheckbox?: {\n    defaultProps?: ComponentsProps['MuiCheckbox'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCheckbox'];\n    variants?: ComponentsVariants<Theme>['MuiCheckbox'];\n  };\n  MuiChip?: {\n    defaultProps?: ComponentsProps['MuiChip'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiChip'];\n    variants?: ComponentsVariants<Theme>['MuiChip'];\n  };\n  MuiCircularProgress?: {\n    defaultProps?: ComponentsProps['MuiCircularProgress'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCircularProgress'];\n    variants?: ComponentsVariants<Theme>['MuiCircularProgress'];\n  };\n  MuiCollapse?: {\n    defaultProps?: ComponentsProps['MuiCollapse'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCollapse'];\n    variants?: ComponentsVariants<Theme>['MuiCollapse'];\n  };\n  MuiContainer?: {\n    defaultProps?: ComponentsProps['MuiContainer'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiContainer'];\n    variants?: ComponentsVariants<Theme>['MuiContainer'];\n  };\n  MuiCssBaseline?: {\n    defaultProps?: ComponentsProps['MuiCssBaseline'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiCssBaseline'];\n    variants?: ComponentsVariants<Theme>['MuiCssBaseline'];\n  };\n  MuiDialog?: {\n    defaultProps?: ComponentsProps['MuiDialog'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDialog'];\n    variants?: ComponentsVariants<Theme>['MuiDialog'];\n  };\n  MuiDialogActions?: {\n    defaultProps?: ComponentsProps['MuiDialogActions'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDialogActions'];\n    variants?: ComponentsVariants<Theme>['MuiDialogActions'];\n  };\n  MuiDialogContent?: {\n    defaultProps?: ComponentsProps['MuiDialogContent'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDialogContent'];\n    variants?: ComponentsVariants<Theme>['MuiDialogContent'];\n  };\n  MuiDialogContentText?: {\n    defaultProps?: ComponentsProps['MuiDialogContentText'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDialogContentText'];\n    variants?: ComponentsVariants<Theme>['MuiDialogContentText'];\n  };\n  MuiDialogTitle?: {\n    defaultProps?: ComponentsProps['MuiDialogTitle'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDialogTitle'];\n    variants?: ComponentsVariants<Theme>['MuiDialogTitle'];\n  };\n  MuiDivider?: {\n    defaultProps?: ComponentsProps['MuiDivider'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDivider'];\n    variants?: ComponentsVariants<Theme>['MuiDivider'];\n  };\n  MuiDrawer?: {\n    defaultProps?: ComponentsProps['MuiDrawer'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDrawer'];\n    variants?: ComponentsVariants<Theme>['MuiDrawer'];\n  };\n  MuiAccordion?: {\n    defaultProps?: ComponentsProps['MuiAccordion'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAccordion'];\n    variants?: ComponentsVariants<Theme>['MuiAccordion'];\n  };\n  MuiAccordionActions?: {\n    defaultProps?: ComponentsProps['MuiAccordionActions'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAccordionActions'];\n    variants?: ComponentsVariants<Theme>['MuiAccordionActions'];\n  };\n  MuiAccordionDetails?: {\n    defaultProps?: ComponentsProps['MuiAccordionDetails'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAccordionDetails'];\n    variants?: ComponentsVariants<Theme>['MuiAccordionDetails'];\n  };\n  MuiAccordionSummary?: {\n    defaultProps?: ComponentsProps['MuiAccordionSummary'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiAccordionSummary'];\n    variants?: ComponentsVariants<Theme>['MuiAccordionSummary'];\n  };\n  MuiFab?: {\n    defaultProps?: ComponentsProps['MuiFab'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFab'];\n    variants?: ComponentsVariants<Theme>['MuiFab'];\n  };\n  MuiFilledInput?: {\n    defaultProps?: ComponentsProps['MuiFilledInput'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFilledInput'];\n    variants?: ComponentsVariants<Theme>['MuiFilledInput'];\n  };\n  MuiFormControl?: {\n    defaultProps?: ComponentsProps['MuiFormControl'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFormControl'];\n    variants?: ComponentsVariants<Theme>['MuiFormControl'];\n  };\n  MuiFormControlLabel?: {\n    defaultProps?: ComponentsProps['MuiFormControlLabel'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFormControlLabel'];\n    variants?: ComponentsVariants<Theme>['MuiFormControlLabel'];\n  };\n  MuiFormGroup?: {\n    defaultProps?: ComponentsProps['MuiFormGroup'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFormGroup'];\n    variants?: ComponentsVariants<Theme>['MuiFormGroup'];\n  };\n  MuiFormHelperText?: {\n    defaultProps?: ComponentsProps['MuiFormHelperText'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFormHelperText'];\n    variants?: ComponentsVariants<Theme>['MuiFormHelperText'];\n  };\n  MuiFormLabel?: {\n    defaultProps?: ComponentsProps['MuiFormLabel'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiFormLabel'];\n    variants?: ComponentsVariants<Theme>['MuiFormLabel'];\n  };\n  MuiGrid?: {\n    defaultProps?: ComponentsProps['MuiGrid'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiGrid'];\n    variants?: ComponentsVariants<Theme>['MuiGrid'];\n  };\n  MuiGrid2?: {\n    defaultProps?: ComponentsProps['MuiGrid2'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiGrid2'];\n    variants?: ComponentsVariants<Theme>['MuiGrid2'];\n  };\n  MuiImageList?: {\n    defaultProps?: ComponentsProps['MuiImageList'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiImageList'];\n    variants?: ComponentsVariants<Theme>['MuiImageList'];\n  };\n  MuiImageListItem?: {\n    defaultProps?: ComponentsProps['MuiImageListItem'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiImageListItem'];\n    variants?: ComponentsVariants<Theme>['MuiImageListItem'];\n  };\n  MuiImageListItemBar?: {\n    defaultProps?: ComponentsProps['MuiImageListItemBar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiImageListItemBar'];\n    variants?: ComponentsVariants<Theme>['MuiImageListItemBar'];\n  };\n  MuiIcon?: {\n    defaultProps?: ComponentsProps['MuiIcon'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiIcon'];\n    variants?: ComponentsVariants<Theme>['MuiIcon'];\n  };\n  MuiIconButton?: {\n    defaultProps?: ComponentsProps['MuiIconButton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiIconButton'];\n    variants?: ComponentsVariants<Theme>['MuiIconButton'];\n  };\n  MuiInput?: {\n    defaultProps?: ComponentsProps['MuiInput'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiInput'];\n    variants?: ComponentsVariants<Theme>['MuiInput'];\n  };\n  MuiInputAdornment?: {\n    defaultProps?: ComponentsProps['MuiInputAdornment'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiInputAdornment'];\n    variants?: ComponentsVariants<Theme>['MuiInputAdornment'];\n  };\n  MuiInputBase?: {\n    defaultProps?: ComponentsProps['MuiInputBase'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiInputBase'];\n    variants?: ComponentsVariants<Theme>['MuiInputBase'];\n  };\n  MuiInputLabel?: {\n    defaultProps?: ComponentsProps['MuiInputLabel'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiInputLabel'];\n    variants?: ComponentsVariants<Theme>['MuiInputLabel'];\n  };\n  MuiLinearProgress?: {\n    defaultProps?: ComponentsProps['MuiLinearProgress'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiLinearProgress'];\n    variants?: ComponentsVariants<Theme>['MuiLinearProgress'];\n  };\n  MuiLink?: {\n    defaultProps?: ComponentsProps['MuiLink'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiLink'];\n    variants?: ComponentsVariants<Theme>['MuiLink'];\n  };\n  MuiList?: {\n    defaultProps?: ComponentsProps['MuiList'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiList'];\n    variants?: ComponentsVariants<Theme>['MuiList'];\n  };\n  MuiListItem?: {\n    defaultProps?: ComponentsProps['MuiListItem'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListItem'];\n    variants?: ComponentsVariants<Theme>['MuiListItem'];\n  };\n  MuiListItemButton?: {\n    defaultProps?: ComponentsProps['MuiListItemButton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListItemButton'];\n    variants?: ComponentsVariants<Theme>['MuiListItemButton'];\n  };\n  MuiListItemAvatar?: {\n    defaultProps?: ComponentsProps['MuiListItemAvatar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListItemAvatar'];\n    variants?: ComponentsVariants<Theme>['MuiListItemAvatar'];\n  };\n  MuiListItemIcon?: {\n    defaultProps?: ComponentsProps['MuiListItemIcon'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListItemIcon'];\n    variants?: ComponentsVariants<Theme>['MuiListItemIcon'];\n  };\n  MuiListItemSecondaryAction?: {\n    defaultProps?: ComponentsProps['MuiListItemSecondaryAction'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListItemSecondaryAction'];\n    variants?: ComponentsVariants<Theme>['MuiListItemSecondaryAction'];\n  };\n  MuiListItemText?: {\n    defaultProps?: ComponentsProps['MuiListItemText'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListItemText'];\n    variants?: ComponentsVariants<Theme>['MuiListItemText'];\n  };\n  MuiListSubheader?: {\n    defaultProps?: ComponentsProps['MuiListSubheader'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiListSubheader'];\n    variants?: ComponentsVariants<Theme>['MuiListSubheader'];\n  };\n  MuiMenu?: {\n    defaultProps?: ComponentsProps['MuiMenu'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMenu'];\n    variants?: ComponentsVariants<Theme>['MuiMenu'];\n  };\n  MuiMenuItem?: {\n    defaultProps?: ComponentsProps['MuiMenuItem'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMenuItem'];\n    variants?: ComponentsVariants<Theme>['MuiMenuItem'];\n  };\n  MuiMenuList?: {\n    defaultProps?: ComponentsProps['MuiMenuList'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMenuList'];\n    variants?: ComponentsVariants<Theme>['MuiMenuList'];\n  };\n  MuiMobileStepper?: {\n    defaultProps?: ComponentsProps['MuiMobileStepper'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMobileStepper'];\n    variants?: ComponentsVariants<Theme>['MuiMobileStepper'];\n  };\n  MuiModal?: {\n    defaultProps?: ComponentsProps['MuiModal'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiModal'];\n    variants?: ComponentsVariants<Theme>['MuiModal'];\n  };\n  MuiNativeSelect?: {\n    defaultProps?: ComponentsProps['MuiNativeSelect'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiNativeSelect'];\n    variants?: ComponentsVariants<Theme>['MuiNativeSelect'];\n  };\n  MuiOutlinedInput?: {\n    defaultProps?: ComponentsProps['MuiOutlinedInput'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiOutlinedInput'];\n    variants?: ComponentsVariants<Theme>['MuiOutlinedInput'];\n  };\n  MuiPagination?: {\n    defaultProps?: ComponentsProps['MuiPagination'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPagination'];\n    variants?: ComponentsVariants<Theme>['MuiPagination'];\n  };\n  MuiPaginationItem?: {\n    defaultProps?: ComponentsProps['MuiPaginationItem'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPaginationItem'];\n    variants?: ComponentsVariants<Theme>['MuiPaginationItem'];\n  };\n  MuiPaper?: {\n    defaultProps?: ComponentsProps['MuiPaper'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPaper'];\n    variants?: ComponentsVariants<Theme>['MuiPaper'];\n  };\n  MuiPopper?: {\n    defaultProps?: ComponentsProps['MuiPopper'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPopper'];\n  };\n  MuiPopover?: {\n    defaultProps?: ComponentsProps['MuiPopover'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPopover'];\n    variants?: ComponentsVariants<Theme>['MuiPopover'];\n  };\n  MuiRadio?: {\n    defaultProps?: ComponentsProps['MuiRadio'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiRadio'];\n    variants?: ComponentsVariants<Theme>['MuiRadio'];\n  };\n  MuiRating?: {\n    defaultProps?: ComponentsProps['MuiRating'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiRating'];\n    variants?: ComponentsVariants<Theme>['MuiRating'];\n  };\n  MuiScopedCssBaseline?: {\n    defaultProps?: ComponentsProps['MuiScopedCssBaseline'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiScopedCssBaseline'];\n    variants?: ComponentsVariants<Theme>['MuiScopedCssBaseline'];\n  };\n  MuiSelect?: {\n    defaultProps?: ComponentsProps['MuiSelect'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSelect'];\n    variants?: ComponentsVariants<Theme>['MuiSelect'];\n  };\n  MuiSkeleton?: {\n    defaultProps?: ComponentsProps['MuiSkeleton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSkeleton'];\n    variants?: ComponentsVariants<Theme>['MuiSkeleton'];\n  };\n  MuiSlider?: {\n    defaultProps?: ComponentsProps['MuiSlider'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSlider'];\n    variants?: ComponentsVariants<Theme>['MuiSlider'];\n  };\n  MuiSnackbar?: {\n    defaultProps?: ComponentsProps['MuiSnackbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSnackbar'];\n    variants?: ComponentsVariants<Theme>['MuiSnackbar'];\n  };\n  MuiSnackbarContent?: {\n    defaultProps?: ComponentsProps['MuiSnackbarContent'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSnackbarContent'];\n    variants?: ComponentsVariants<Theme>['MuiSnackbarContent'];\n  };\n  MuiSpeedDial?: {\n    defaultProps?: ComponentsProps['MuiSpeedDial'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSpeedDial'];\n    variants?: ComponentsVariants<Theme>['MuiSpeedDial'];\n  };\n  MuiSpeedDialAction?: {\n    defaultProps?: ComponentsProps['MuiSpeedDialAction'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSpeedDialAction'];\n    variants?: ComponentsVariants<Theme>['MuiSpeedDialAction'];\n  };\n  MuiSpeedDialIcon?: {\n    defaultProps?: ComponentsProps['MuiSpeedDialIcon'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSpeedDialIcon'];\n    variants?: ComponentsVariants<Theme>['MuiSpeedDialIcon'];\n  };\n  MuiStack?: {\n    defaultProps?: ComponentsProps['MuiStack'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStack'];\n    variants?: ComponentsVariants<Theme>['MuiStack'];\n  };\n  MuiStep?: {\n    defaultProps?: ComponentsProps['MuiStep'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStep'];\n    variants?: ComponentsVariants<Theme>['MuiStep'];\n  };\n  MuiStepButton?: {\n    defaultProps?: ComponentsProps['MuiStepButton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStepButton'];\n    variants?: ComponentsVariants<Theme>['MuiStepButton'];\n  };\n  MuiStepConnector?: {\n    defaultProps?: ComponentsProps['MuiStepConnector'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStepConnector'];\n    variants?: ComponentsVariants<Theme>['MuiStepConnector'];\n  };\n  MuiStepContent?: {\n    defaultProps?: ComponentsProps['MuiStepContent'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStepContent'];\n    variants?: ComponentsVariants<Theme>['MuiStepContent'];\n  };\n  MuiStepIcon?: {\n    defaultProps?: ComponentsProps['MuiStepIcon'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStepIcon'];\n    variants?: ComponentsVariants<Theme>['MuiStepIcon'];\n  };\n  MuiStepLabel?: {\n    defaultProps?: ComponentsProps['MuiStepLabel'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStepLabel'];\n    variants?: ComponentsVariants<Theme>['MuiStepLabel'];\n  };\n  MuiStepper?: {\n    defaultProps?: ComponentsProps['MuiStepper'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiStepper'];\n    variants?: ComponentsVariants<Theme>['MuiStepper'];\n  };\n  MuiSvgIcon?: {\n    defaultProps?: ComponentsProps['MuiSvgIcon'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSvgIcon'];\n    variants?: ComponentsVariants<Theme>['MuiSvgIcon'];\n  };\n  MuiSwipeableDrawer?: {\n    defaultProps?: ComponentsProps['MuiSwipeableDrawer'];\n  };\n  MuiSwitch?: {\n    defaultProps?: ComponentsProps['MuiSwitch'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiSwitch'];\n    variants?: ComponentsVariants<Theme>['MuiSwitch'];\n  };\n  MuiTab?: {\n    defaultProps?: ComponentsProps['MuiTab'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTab'];\n    variants?: ComponentsVariants<Theme>['MuiTab'];\n  };\n  MuiTable?: {\n    defaultProps?: ComponentsProps['MuiTable'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTable'];\n    variants?: ComponentsVariants<Theme>['MuiTable'];\n  };\n  MuiTableBody?: {\n    defaultProps?: ComponentsProps['MuiTableBody'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableBody'];\n    variants?: ComponentsVariants<Theme>['MuiTableBody'];\n  };\n  MuiTableCell?: {\n    defaultProps?: ComponentsProps['MuiTableCell'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableCell'];\n    variants?: ComponentsVariants<Theme>['MuiTableCell'];\n  };\n  MuiTableContainer?: {\n    defaultProps?: ComponentsProps['MuiTableContainer'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableContainer'];\n    variants?: ComponentsVariants<Theme>['MuiTableContainer'];\n  };\n  MuiTableFooter?: {\n    defaultProps?: ComponentsProps['MuiTableFooter'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableFooter'];\n    variants?: ComponentsVariants<Theme>['MuiTableFooter'];\n  };\n  MuiTableHead?: {\n    defaultProps?: ComponentsProps['MuiTableHead'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableHead'];\n    variants?: ComponentsVariants<Theme>['MuiTableHead'];\n  };\n  MuiTablePagination?: {\n    defaultProps?: ComponentsProps['MuiTablePagination'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTablePagination'];\n    variants?: ComponentsVariants<Theme>['MuiTablePagination'];\n  };\n  MuiTableRow?: {\n    defaultProps?: ComponentsProps['MuiTableRow'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableRow'];\n    variants?: ComponentsVariants<Theme>['MuiTableRow'];\n  };\n  MuiTableSortLabel?: {\n    defaultProps?: ComponentsProps['MuiTableSortLabel'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTableSortLabel'];\n    variants?: ComponentsVariants<Theme>['MuiTableSortLabel'];\n  };\n  MuiTabs?: {\n    defaultProps?: ComponentsProps['MuiTabs'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTabs'];\n    variants?: ComponentsVariants<Theme>['MuiTabs'];\n  };\n  MuiTextField?: {\n    defaultProps?: ComponentsProps['MuiTextField'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTextField'];\n    variants?: ComponentsVariants<Theme>['MuiTextField'];\n  };\n  MuiToggleButton?: {\n    defaultProps?: ComponentsProps['MuiToggleButton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiToggleButton'];\n    variants?: ComponentsVariants<Theme>['MuiToggleButton'];\n  };\n  MuiToggleButtonGroup?: {\n    defaultProps?: ComponentsProps['MuiToggleButtonGroup'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiToggleButtonGroup'];\n    variants?: ComponentsVariants<Theme>['MuiToggleButtonGroup'];\n  };\n  MuiToolbar?: {\n    defaultProps?: ComponentsProps['MuiToolbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiToolbar'];\n    variants?: ComponentsVariants<Theme>['MuiToolbar'];\n  };\n  MuiTooltip?: {\n    defaultProps?: ComponentsProps['MuiTooltip'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTooltip'];\n    variants?: ComponentsVariants<Theme>['MuiTooltip'];\n  };\n  MuiTouchRipple?: {\n    defaultProps?: ComponentsProps['MuiTouchRipple'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTouchRipple'];\n    variants?: ComponentsVariants<Theme>['MuiTouchRipple'];\n  };\n  MuiTypography?: {\n    defaultProps?: ComponentsProps['MuiTypography'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTypography'];\n    variants?: ComponentsVariants<Theme>['MuiTypography'];\n  };\n  MuiUseMediaQuery?: {\n    defaultProps?: ComponentsProps['MuiUseMediaQuery'];\n  };\n}\n","node_modules/@mui/material/styles/adaptV4Theme.d.ts":"import { BreakpointsOptions, ShapeOptions, SpacingOptions } from '@mui/system';\nimport { MixinsOptions } from './createMixins';\nimport { Palette, PaletteOptions } from './createPalette';\nimport { TypographyOptions } from './createTypography';\nimport { Shadows } from './shadows';\nimport { TransitionsOptions } from './createTransitions';\nimport { ZIndexOptions } from './zIndex';\nimport { ComponentsOverrides } from './overrides';\nimport { ComponentsVariants } from './variants';\nimport { ComponentsProps } from './props';\nimport { Theme } from './createTheme';\n\nexport type Direction = 'ltr' | 'rtl';\n\nexport interface DeprecatedThemeOptions {\n  shape?: ShapeOptions;\n  breakpoints?: BreakpointsOptions;\n  direction?: Direction;\n  mixins?: MixinsOptions;\n  overrides?: ComponentsOverrides;\n  palette?: PaletteOptions;\n  props?: ComponentsProps;\n  shadows?: Shadows;\n  spacing?: SpacingOptions;\n  transitions?: TransitionsOptions;\n  typography?: TypographyOptions | ((palette: Palette) => TypographyOptions);\n  variants?: ComponentsVariants;\n  zIndex?: ZIndexOptions;\n  unstable_strictMode?: boolean;\n}\n\n/**\n * Generate a theme base on the V4 theme options received.\n * @deprecated Follow the upgrade guide on https://mui.com/r/migration-v4#theme\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @returns A complete, ready-to-use theme object.\n */\nexport default function adaptV4Theme(options?: DeprecatedThemeOptions): Theme;\n","node_modules/@mui/material/styles/ThemeProvider.d.ts":"import { DefaultTheme } from '@mui/system';\n\nexport interface ThemeProviderProps<Theme = DefaultTheme> {\n  children?: React.ReactNode;\n  theme: Partial<Theme> | ((outerTheme: Theme) => Theme);\n}\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n * API:\n *\n * - [ThemeProvider API](https://mui.com/material-ui/customization/theming/#themeprovider)\n */\nexport default function ThemeProvider<Theme = DefaultTheme>(\n  props: ThemeProviderProps<Theme>,\n): React.ReactElement<ThemeProviderProps<Theme>>;\n","node_modules/@mui/material/styles/CssVarsProvider.d.ts":"import * as React from 'react';\nimport { SupportedColorScheme } from './experimental_extendTheme';\ndeclare const CssVarsProvider: (props: React.PropsWithChildren<Partial<import(\"@mui/system\").CssVarsProviderConfig<SupportedColorScheme>> & {\n    theme?: {\n        cssVarPrefix?: string | undefined;\n        colorSchemes: Record<SupportedColorScheme, Record<string, any>>;\n    } | {\n        $$material: {\n            cssVarPrefix?: string | undefined;\n            colorSchemes: Record<SupportedColorScheme, Record<string, any>>;\n        };\n    } | undefined;\n    documentNode?: Document | null | undefined;\n    colorSchemeNode?: Element | null | undefined;\n    colorSchemeSelector?: string | undefined;\n    storageWindow?: Window | null | undefined;\n    disableNestedContext?: boolean | undefined;\n    disableStyleSheetGeneration?: boolean | undefined;\n}>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>, useColorScheme: () => import(\"@mui/system\").ColorSchemeContextValue<SupportedColorScheme>, getInitColorSchemeScript: typeof import(\"@mui/system\").getInitColorSchemeScript;\nexport { useColorScheme, getInitColorSchemeScript, CssVarsProvider as Experimental_CssVarsProvider, };\n","node_modules/@mui/material/types/OverridableComponentAugmentation.d.ts":"import * as React from 'react';\nimport { DistributiveOmit } from '@mui/types';\ndeclare module '@mui/material/OverridableComponent' {\n    /**\n     * A component whose root component can be controlled via a `component` prop.\n     *\n     * Adjusts valid props based on the type of `component`.\n     */\n    interface OverridableComponent<TypeMap extends OverridableTypeMap> {\n        <DefaultComponent extends React.ElementType>(props: {\n            /**\n             * The component used for the root node.\n             * Either a string to use a HTML element or a component.\n             */\n            component: DefaultComponent;\n        } & OverridePropsVer2<TypeMap, DefaultComponent>): JSX.Element;\n        (props: DefaultComponentPropsVer2<TypeMap>): JSX.Element;\n    }\n    /**\n     * Props of the component if `component={Component}` is used.\n     */\n    type OverridePropsVer2<TypeMap extends OverridableTypeMap, RootComponent extends React.ElementType> = (BaseProps<TypeMap> & DistributiveOmit<React.ComponentPropsWithoutRef<RootComponent>, keyof BaseProps<TypeMap>> & {\n        ref?: React.Ref<Element>;\n    });\n    /**\n     * Props if `component={Component}` is NOT used.\n     */\n    type DefaultComponentPropsVer2<TypeMap extends OverridableTypeMap> = BaseProps<TypeMap> & DistributiveOmit<React.ComponentPropsWithoutRef<TypeMap['defaultComponent']>, keyof BaseProps<TypeMap>> & {\n        ref?: React.Ref<Element>;\n    };\n}\n","node_modules/@mui/material/themeCssVarsAugmentation/index.d.ts":"import type {\n  CssVarsTheme,\n  CssVarsPalette,\n  PaletteBackgroundChannel,\n  PaletteCommonChannel,\n  PaletteColorChannel,\n  PaletteTextChannel,\n  PaletteActionChannel,\n} from '../styles/experimental_extendTheme';\n\n/**\n * Enhance the theme types to include new properties from the CssVarsProvider.\n * The theme is typed with CSS variables in `styled`, `sx`, `useTheme`, etc.\n */\ndeclare module '@mui/material/styles' {\n  // The palette must be extended in each node.\n  interface Theme extends Omit<CssVarsTheme, 'palette'> {}\n\n  // Extend the type that will be used in palette\n  interface CommonColors extends PaletteCommonChannel {}\n  interface PaletteColor extends PaletteColorChannel {}\n  interface TypeBackground extends PaletteBackgroundChannel {}\n  interface TypeText extends PaletteTextChannel {}\n  interface TypeAction extends PaletteActionChannel {}\n\n  // The extended Palette should be in sync with `extendTheme`\n  interface Palette extends CssVarsPalette {}\n}\n","node_modules/@mui/material/locale/index.d.ts":"import { ComponentsPropsList } from '../styles/props';\nexport interface Localization {\n    components?: {\n        MuiAlert?: {\n            defaultProps: Pick<ComponentsPropsList['MuiAlert'], 'closeText'>;\n        };\n        MuiBreadcrumbs?: {\n            defaultProps: Pick<ComponentsPropsList['MuiBreadcrumbs'], 'expandText'>;\n        };\n        MuiTablePagination?: {\n            defaultProps: Pick<ComponentsPropsList['MuiTablePagination'], 'labelRowsPerPage' | 'labelDisplayedRows' | 'getItemAriaLabel'>;\n        };\n        MuiRating?: {\n            defaultProps: Pick<ComponentsPropsList['MuiRating'], 'emptyLabelText' | 'getLabelText'>;\n        };\n        MuiAutocomplete?: {\n            defaultProps: Pick<ComponentsPropsList['MuiAutocomplete'], 'clearText' | 'closeText' | 'loadingText' | 'noOptionsText' | 'openText'>;\n        };\n        MuiPagination?: {\n            defaultProps: Pick<ComponentsPropsList['MuiPagination'], 'aria-label' | 'getItemAriaLabel'>;\n        };\n    };\n}\nexport declare const amET: Localization;\nexport declare const arEG: Localization;\nexport declare const arSA: Localization;\nexport declare const arSD: Localization;\nexport declare const azAZ: Localization;\nexport declare const bnBD: Localization;\nexport declare const beBY: Localization;\nexport declare const bgBG: Localization;\nexport declare const caES: Localization;\nexport declare const csCZ: Localization;\nexport declare const daDK: Localization;\nexport declare const deDE: Localization;\nexport declare const elGR: Localization;\nexport declare const enUS: Localization;\nexport declare const esES: Localization;\nexport declare const etEE: Localization;\nexport declare const faIR: Localization;\nexport declare const fiFI: Localization;\nexport declare const frFR: Localization;\nexport declare const heIL: Localization;\nexport declare const hiIN: Localization;\nexport declare const hrHR: Localization;\nexport declare const huHU: Localization;\nexport declare const hyAM: Localization;\nexport declare const idID: Localization;\nexport declare const isIS: Localization;\nexport declare const itIT: Localization;\nexport declare const jaJP: Localization;\nexport declare const khKH: Localization;\nexport declare const koKR: Localization;\nexport declare const kuCKB: Localization;\nexport declare const kuLatn: Localization;\nexport declare const kkKZ: Localization;\nexport declare const mkMK: Localization;\nexport declare const myMY: Localization;\nexport declare const msMS: Localization;\nexport declare const neNP: Localization;\nexport declare const nbNO: Localization;\nexport declare const nnNO: Localization;\nexport declare const nlNL: Localization;\nexport declare const plPL: Localization;\nexport declare const ptBR: Localization;\nexport declare const ptPT: Localization;\nexport declare const roRO: Localization;\nexport declare const srRS: Localization;\nexport declare const ruRU: Localization;\nexport declare const siLK: Localization;\nexport declare const skSK: Localization;\nexport declare const svSE: Localization;\nexport declare const thTH: Localization;\nexport declare const trTR: Localization;\nexport declare const tlTL: Localization;\nexport declare const ukUA: Localization;\nexport declare const urPK: Localization;\nexport declare const viVN: Localization;\nexport declare const zhCN: Localization;\nexport declare const zhHK: Localization;\nexport declare const zhTW: Localization;\n","node_modules/@mui/material/internal/switchBaseClasses.d.ts":"export interface SwitchBaseClasses {\n    root: string;\n    checked: string;\n    disabled: string;\n    input: string;\n    edgeStart: string;\n    edgeEnd: string;\n}\nexport type SwitchBaseClassKey = keyof SwitchBaseClasses;\nexport declare function getSwitchBaseUtilityClass(slot: string): string;\ndeclare const switchBaseClasses: SwitchBaseClasses;\nexport default switchBaseClasses;\n","node_modules/@mui/material/internal/SwitchBase.d.ts":"import * as React from 'react';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { ButtonBaseProps } from '../ButtonBase';\nimport { SwitchBaseClasses } from './switchBaseClasses';\n\nexport interface SwitchBaseProps\n  extends StandardProps<ButtonBaseProps, 'children' | 'onChange' | 'type' | 'value'> {\n  autoFocus?: boolean;\n  /**\n   * If `true`, the component is checked.\n   */\n  checked?: boolean;\n  checkedIcon: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SwitchBaseClasses>;\n  /**\n   * The default checked state. Use when the component is not controlled.\n   */\n  defaultChecked?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple?: boolean;\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge?: 'start' | 'end' | false;\n  icon: React.ReactNode;\n  /**\n   * The id of the `input` element.\n   */\n  id?: string;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: React.InputHTMLAttributes<HTMLInputElement>;\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * Name attribute of the `input` element.\n   */\n  name?: string;\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;\n  readOnly?: boolean;\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required?: boolean;\n  tabIndex?: number;\n  type?: React.InputHTMLAttributes<HTMLInputElement>['type'];\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value?: unknown;\n}\n\ndeclare const SwitchBase: React.JSXElementConstructor<SwitchBaseProps>;\n\nexport default SwitchBase;\n","node_modules/@mui/material/darkScrollbar/index.d.ts":"export default function darkScrollbar(options?: {\n    track: string;\n    thumb: string;\n    active: string;\n}): {\n    scrollbarColor: string;\n    '&::-webkit-scrollbar, & *::-webkit-scrollbar': {\n        backgroundColor: string;\n    };\n    '&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb': {\n        borderRadius: number;\n        backgroundColor: string;\n        minHeight: number;\n        border: string;\n    };\n    '&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus': {\n        backgroundColor: string;\n    };\n    '&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active': {\n        backgroundColor: string;\n    };\n    '&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover': {\n        backgroundColor: string;\n    };\n    '&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner': {\n        backgroundColor: string;\n    };\n};\n","node_modules/@mui/material/generateUtilityClass/index.d.ts":"export { unstable_generateUtilityClass as default } from '@mui/utils';\nexport type { GlobalStateSlot } from '@mui/utils';\n","node_modules/@mui/material/generateUtilityClasses/index.d.ts":"export { unstable_generateUtilityClasses as default } from '@mui/utils';\n","node_modules/@mui/material/className/index.d.ts":"export { unstable_ClassNameGenerator } from '@mui/utils';\n","node_modules/@mui/material/colors/yellow.d.ts":"/**\n * ![yellow 50](https://mui.com/static/colors-preview/yellow-50-24x24.png) ![yellow 100](https://mui.com/static/colors-preview/yellow-100-24x24.png) ![yellow 200](https://mui.com/static/colors-preview/yellow-200-24x24.png) ![yellow 300](https://mui.com/static/colors-preview/yellow-300-24x24.png) ![yellow 400](https://mui.com/static/colors-preview/yellow-400-24x24.png) ![yellow 500](https://mui.com/static/colors-preview/yellow-500-24x24.png) ![yellow 600](https://mui.com/static/colors-preview/yellow-600-24x24.png) ![yellow 700](https://mui.com/static/colors-preview/yellow-700-24x24.png) ![yellow 800](https://mui.com/static/colors-preview/yellow-800-24x24.png) ![yellow 900](https://mui.com/static/colors-preview/yellow-900-24x24.png) ![yellow A100](https://mui.com/static/colors-preview/yellow-A100-24x24.png) ![yellow A200](https://mui.com/static/colors-preview/yellow-A200-24x24.png) ![yellow A400](https://mui.com/static/colors-preview/yellow-A400-24x24.png) ![yellow A700](https://mui.com/static/colors-preview/yellow-A700-24x24.png)\n */\ndeclare const yellow: {\n  /**\n   * Preview: ![yellow 50](https://mui.com/static/colors-preview/yellow-50-24x24.png)\n   */\n  50: '#fffde7';\n  /**\n   * Preview: ![yellow 100](https://mui.com/static/colors-preview/yellow-100-24x24.png)\n   */\n  100: '#fff9c4';\n  /**\n   * Preview: ![yellow 200](https://mui.com/static/colors-preview/yellow-200-24x24.png)\n   */\n  200: '#fff59d';\n  /**\n   * Preview: ![yellow 300](https://mui.com/static/colors-preview/yellow-300-24x24.png)\n   */\n  300: '#fff176';\n  /**\n   * Preview: ![yellow 400](https://mui.com/static/colors-preview/yellow-400-24x24.png)\n   */\n  400: '#ffee58';\n  /**\n   * Preview: ![yellow 500](https://mui.com/static/colors-preview/yellow-500-24x24.png)\n   */\n  500: '#ffeb3b';\n  /**\n   * Preview: ![yellow 600](https://mui.com/static/colors-preview/yellow-600-24x24.png)\n   */\n  600: '#fdd835';\n  /**\n   * Preview: ![yellow 700](https://mui.com/static/colors-preview/yellow-700-24x24.png)\n   */\n  700: '#fbc02d';\n  /**\n   * Preview: ![yellow 800](https://mui.com/static/colors-preview/yellow-800-24x24.png)\n   */\n  800: '#f9a825';\n  /**\n   * Preview: ![yellow 900](https://mui.com/static/colors-preview/yellow-900-24x24.png)\n   */\n  900: '#f57f17';\n  /**\n   * Preview: ![yellow A100](https://mui.com/static/colors-preview/yellow-A100-24x24.png)\n   */\n  A100: '#ffff8d';\n  /**\n   * Preview: ![yellow A200](https://mui.com/static/colors-preview/yellow-A200-24x24.png)\n   */\n  A200: '#ffff00';\n  /**\n   * Preview: ![yellow A400](https://mui.com/static/colors-preview/yellow-A400-24x24.png)\n   */\n  A400: '#ffea00';\n  /**\n   * Preview: ![yellow A700](https://mui.com/static/colors-preview/yellow-A700-24x24.png)\n   */\n  A700: '#ffd600';\n};\n\nexport default yellow;\n","node_modules/@mui/material/colors/teal.d.ts":"/**\n * ![teal 50](https://mui.com/static/colors-preview/teal-50-24x24.png) ![teal 100](https://mui.com/static/colors-preview/teal-100-24x24.png) ![teal 200](https://mui.com/static/colors-preview/teal-200-24x24.png) ![teal 300](https://mui.com/static/colors-preview/teal-300-24x24.png) ![teal 400](https://mui.com/static/colors-preview/teal-400-24x24.png) ![teal 500](https://mui.com/static/colors-preview/teal-500-24x24.png) ![teal 600](https://mui.com/static/colors-preview/teal-600-24x24.png) ![teal 700](https://mui.com/static/colors-preview/teal-700-24x24.png) ![teal 800](https://mui.com/static/colors-preview/teal-800-24x24.png) ![teal 900](https://mui.com/static/colors-preview/teal-900-24x24.png) ![teal A100](https://mui.com/static/colors-preview/teal-A100-24x24.png) ![teal A200](https://mui.com/static/colors-preview/teal-A200-24x24.png) ![teal A400](https://mui.com/static/colors-preview/teal-A400-24x24.png) ![teal A700](https://mui.com/static/colors-preview/teal-A700-24x24.png)\n */\ndeclare const teal: {\n  /**\n   * Preview: ![teal 50](https://mui.com/static/colors-preview/teal-50-24x24.png)\n   */\n  50: '#e0f2f1';\n  /**\n   * Preview: ![teal 100](https://mui.com/static/colors-preview/teal-100-24x24.png)\n   */\n  100: '#b2dfdb';\n  /**\n   * Preview: ![teal 200](https://mui.com/static/colors-preview/teal-200-24x24.png)\n   */\n  200: '#80cbc4';\n  /**\n   * Preview: ![teal 300](https://mui.com/static/colors-preview/teal-300-24x24.png)\n   */\n  300: '#4db6ac';\n  /**\n   * Preview: ![teal 400](https://mui.com/static/colors-preview/teal-400-24x24.png)\n   */\n  400: '#26a69a';\n  /**\n   * Preview: ![teal 500](https://mui.com/static/colors-preview/teal-500-24x24.png)\n   */\n  500: '#009688';\n  /**\n   * Preview: ![teal 600](https://mui.com/static/colors-preview/teal-600-24x24.png)\n   */\n  600: '#00897b';\n  /**\n   * Preview: ![teal 700](https://mui.com/static/colors-preview/teal-700-24x24.png)\n   */\n  700: '#00796b';\n  /**\n   * Preview: ![teal 800](https://mui.com/static/colors-preview/teal-800-24x24.png)\n   */\n  800: '#00695c';\n  /**\n   * Preview: ![teal 900](https://mui.com/static/colors-preview/teal-900-24x24.png)\n   */\n  900: '#004d40';\n  /**\n   * Preview: ![teal A100](https://mui.com/static/colors-preview/teal-A100-24x24.png)\n   */\n  A100: '#a7ffeb';\n  /**\n   * Preview: ![teal A200](https://mui.com/static/colors-preview/teal-A200-24x24.png)\n   */\n  A200: '#64ffda';\n  /**\n   * Preview: ![teal A400](https://mui.com/static/colors-preview/teal-A400-24x24.png)\n   */\n  A400: '#1de9b6';\n  /**\n   * Preview: ![teal A700](https://mui.com/static/colors-preview/teal-A700-24x24.png)\n   */\n  A700: '#00bfa5';\n};\n\nexport default teal;\n","node_modules/@mui/material/colors/red.d.ts":"/**\n * ![red 50](https://mui.com/static/colors-preview/red-50-24x24.png) ![red 100](https://mui.com/static/colors-preview/red-100-24x24.png) ![red 200](https://mui.com/static/colors-preview/red-200-24x24.png) ![red 300](https://mui.com/static/colors-preview/red-300-24x24.png) ![red 400](https://mui.com/static/colors-preview/red-400-24x24.png) ![red 500](https://mui.com/static/colors-preview/red-500-24x24.png) ![red 600](https://mui.com/static/colors-preview/red-600-24x24.png) ![red 700](https://mui.com/static/colors-preview/red-700-24x24.png) ![red 800](https://mui.com/static/colors-preview/red-800-24x24.png) ![red 900](https://mui.com/static/colors-preview/red-900-24x24.png) ![red A100](https://mui.com/static/colors-preview/red-A100-24x24.png) ![red A200](https://mui.com/static/colors-preview/red-A200-24x24.png) ![red A400](https://mui.com/static/colors-preview/red-A400-24x24.png) ![red A700](https://mui.com/static/colors-preview/red-A700-24x24.png)\n */\ndeclare const red: {\n  /**\n   * Preview: ![red 50](https://mui.com/static/colors-preview/red-50-24x24.png)\n   */\n  50: '#ffebee';\n  /**\n   * Preview: ![red 100](https://mui.com/static/colors-preview/red-100-24x24.png)\n   */\n  100: '#ffcdd2';\n  /**\n   * Preview: ![red 200](https://mui.com/static/colors-preview/red-200-24x24.png)\n   */\n  200: '#ef9a9a';\n  /**\n   * Preview: ![red 300](https://mui.com/static/colors-preview/red-300-24x24.png)\n   */\n  300: '#e57373';\n  /**\n   * Preview: ![red 400](https://mui.com/static/colors-preview/red-400-24x24.png)\n   */\n  400: '#ef5350';\n  /**\n   * Preview: ![red 500](https://mui.com/static/colors-preview/red-500-24x24.png)\n   */\n  500: '#f44336';\n  /**\n   * Preview: ![red 600](https://mui.com/static/colors-preview/red-600-24x24.png)\n   */\n  600: '#e53935';\n  /**\n   * Preview: ![red 700](https://mui.com/static/colors-preview/red-700-24x24.png)\n   */\n  700: '#d32f2f';\n  /**\n   * Preview: ![red 800](https://mui.com/static/colors-preview/red-800-24x24.png)\n   */\n  800: '#c62828';\n  /**\n   * Preview: ![red 900](https://mui.com/static/colors-preview/red-900-24x24.png)\n   */\n  900: '#b71c1c';\n  /**\n   * Preview: ![red A100](https://mui.com/static/colors-preview/red-A100-24x24.png)\n   */\n  A100: '#ff8a80';\n  /**\n   * Preview: ![red A200](https://mui.com/static/colors-preview/red-A200-24x24.png)\n   */\n  A200: '#ff5252';\n  /**\n   * Preview: ![red A400](https://mui.com/static/colors-preview/red-A400-24x24.png)\n   */\n  A400: '#ff1744';\n  /**\n   * Preview: ![red A700](https://mui.com/static/colors-preview/red-A700-24x24.png)\n   */\n  A700: '#d50000';\n};\n\nexport default red;\n","node_modules/@mui/material/colors/purple.d.ts":"/**\n * ![purple 50](https://mui.com/static/colors-preview/purple-50-24x24.png) ![purple 100](https://mui.com/static/colors-preview/purple-100-24x24.png) ![purple 200](https://mui.com/static/colors-preview/purple-200-24x24.png) ![purple 300](https://mui.com/static/colors-preview/purple-300-24x24.png) ![purple 400](https://mui.com/static/colors-preview/purple-400-24x24.png) ![purple 500](https://mui.com/static/colors-preview/purple-500-24x24.png) ![purple 600](https://mui.com/static/colors-preview/purple-600-24x24.png) ![purple 700](https://mui.com/static/colors-preview/purple-700-24x24.png) ![purple 800](https://mui.com/static/colors-preview/purple-800-24x24.png) ![purple 900](https://mui.com/static/colors-preview/purple-900-24x24.png) ![purple A100](https://mui.com/static/colors-preview/purple-A100-24x24.png) ![purple A200](https://mui.com/static/colors-preview/purple-A200-24x24.png) ![purple A400](https://mui.com/static/colors-preview/purple-A400-24x24.png) ![purple A700](https://mui.com/static/colors-preview/purple-A700-24x24.png)\n */\ndeclare const purple: {\n  /**\n   * Preview: ![purple 50](https://mui.com/static/colors-preview/purple-50-24x24.png)\n   */\n  50: '#f3e5f5';\n  /**\n   * Preview: ![purple 100](https://mui.com/static/colors-preview/purple-100-24x24.png)\n   */\n  100: '#e1bee7';\n  /**\n   * Preview: ![purple 200](https://mui.com/static/colors-preview/purple-200-24x24.png)\n   */\n  200: '#ce93d8';\n  /**\n   * Preview: ![purple 300](https://mui.com/static/colors-preview/purple-300-24x24.png)\n   */\n  300: '#ba68c8';\n  /**\n   * Preview: ![purple 400](https://mui.com/static/colors-preview/purple-400-24x24.png)\n   */\n  400: '#ab47bc';\n  /**\n   * Preview: ![purple 500](https://mui.com/static/colors-preview/purple-500-24x24.png)\n   */\n  500: '#9c27b0';\n  /**\n   * Preview: ![purple 600](https://mui.com/static/colors-preview/purple-600-24x24.png)\n   */\n  600: '#8e24aa';\n  /**\n   * Preview: ![purple 700](https://mui.com/static/colors-preview/purple-700-24x24.png)\n   */\n  700: '#7b1fa2';\n  /**\n   * Preview: ![purple 800](https://mui.com/static/colors-preview/purple-800-24x24.png)\n   */\n  800: '#6a1b9a';\n  /**\n   * Preview: ![purple 900](https://mui.com/static/colors-preview/purple-900-24x24.png)\n   */\n  900: '#4a148c';\n  /**\n   * Preview: ![purple A100](https://mui.com/static/colors-preview/purple-A100-24x24.png)\n   */\n  A100: '#ea80fc';\n  /**\n   * Preview: ![purple A200](https://mui.com/static/colors-preview/purple-A200-24x24.png)\n   */\n  A200: '#e040fb';\n  /**\n   * Preview: ![purple A400](https://mui.com/static/colors-preview/purple-A400-24x24.png)\n   */\n  A400: '#d500f9';\n  /**\n   * Preview: ![purple A700](https://mui.com/static/colors-preview/purple-A700-24x24.png)\n   */\n  A700: '#aa00ff';\n};\n\nexport default purple;\n","node_modules/@mui/material/colors/pink.d.ts":"/**\n * ![pink 50](https://mui.com/static/colors-preview/pink-50-24x24.png) ![pink 100](https://mui.com/static/colors-preview/pink-100-24x24.png) ![pink 200](https://mui.com/static/colors-preview/pink-200-24x24.png) ![pink 300](https://mui.com/static/colors-preview/pink-300-24x24.png) ![pink 400](https://mui.com/static/colors-preview/pink-400-24x24.png) ![pink 500](https://mui.com/static/colors-preview/pink-500-24x24.png) ![pink 600](https://mui.com/static/colors-preview/pink-600-24x24.png) ![pink 700](https://mui.com/static/colors-preview/pink-700-24x24.png) ![pink 800](https://mui.com/static/colors-preview/pink-800-24x24.png) ![pink 900](https://mui.com/static/colors-preview/pink-900-24x24.png) ![pink A100](https://mui.com/static/colors-preview/pink-A100-24x24.png) ![pink A200](https://mui.com/static/colors-preview/pink-A200-24x24.png) ![pink A400](https://mui.com/static/colors-preview/pink-A400-24x24.png) ![pink A700](https://mui.com/static/colors-preview/pink-A700-24x24.png)\n */\ndeclare const pink: {\n  /**\n   * Preview: ![pink 50](https://mui.com/static/colors-preview/pink-50-24x24.png)\n   */\n  50: '#fce4ec';\n  /**\n   * Preview: ![pink 100](https://mui.com/static/colors-preview/pink-100-24x24.png)\n   */\n  100: '#f8bbd0';\n  /**\n   * Preview: ![pink 200](https://mui.com/static/colors-preview/pink-200-24x24.png)\n   */\n  200: '#f48fb1';\n  /**\n   * Preview: ![pink 300](https://mui.com/static/colors-preview/pink-300-24x24.png)\n   */\n  300: '#f06292';\n  /**\n   * Preview: ![pink 400](https://mui.com/static/colors-preview/pink-400-24x24.png)\n   */\n  400: '#ec407a';\n  /**\n   * Preview: ![pink 500](https://mui.com/static/colors-preview/pink-500-24x24.png)\n   */\n  500: '#e91e63';\n  /**\n   * Preview: ![pink 600](https://mui.com/static/colors-preview/pink-600-24x24.png)\n   */\n  600: '#d81b60';\n  /**\n   * Preview: ![pink 700](https://mui.com/static/colors-preview/pink-700-24x24.png)\n   */\n  700: '#c2185b';\n  /**\n   * Preview: ![pink 800](https://mui.com/static/colors-preview/pink-800-24x24.png)\n   */\n  800: '#ad1457';\n  /**\n   * Preview: ![pink 900](https://mui.com/static/colors-preview/pink-900-24x24.png)\n   */\n  900: '#880e4f';\n  /**\n   * Preview: ![pink A100](https://mui.com/static/colors-preview/pink-A100-24x24.png)\n   */\n  A100: '#ff80ab';\n  /**\n   * Preview: ![pink A200](https://mui.com/static/colors-preview/pink-A200-24x24.png)\n   */\n  A200: '#ff4081';\n  /**\n   * Preview: ![pink A400](https://mui.com/static/colors-preview/pink-A400-24x24.png)\n   */\n  A400: '#f50057';\n  /**\n   * Preview: ![pink A700](https://mui.com/static/colors-preview/pink-A700-24x24.png)\n   */\n  A700: '#c51162';\n};\n\nexport default pink;\n","node_modules/@mui/material/colors/orange.d.ts":"/**\n * ![orange 50](https://mui.com/static/colors-preview/orange-50-24x24.png) ![orange 100](https://mui.com/static/colors-preview/orange-100-24x24.png) ![orange 200](https://mui.com/static/colors-preview/orange-200-24x24.png) ![orange 300](https://mui.com/static/colors-preview/orange-300-24x24.png) ![orange 400](https://mui.com/static/colors-preview/orange-400-24x24.png) ![orange 500](https://mui.com/static/colors-preview/orange-500-24x24.png) ![orange 600](https://mui.com/static/colors-preview/orange-600-24x24.png) ![orange 700](https://mui.com/static/colors-preview/orange-700-24x24.png) ![orange 800](https://mui.com/static/colors-preview/orange-800-24x24.png) ![orange 900](https://mui.com/static/colors-preview/orange-900-24x24.png) ![orange A100](https://mui.com/static/colors-preview/orange-A100-24x24.png) ![orange A200](https://mui.com/static/colors-preview/orange-A200-24x24.png) ![orange A400](https://mui.com/static/colors-preview/orange-A400-24x24.png) ![orange A700](https://mui.com/static/colors-preview/orange-A700-24x24.png)\n */\ndeclare const orange: {\n  /**\n   * Preview: ![orange 50](https://mui.com/static/colors-preview/orange-50-24x24.png)\n   */\n  50: '#fff3e0';\n  /**\n   * Preview: ![orange 100](https://mui.com/static/colors-preview/orange-100-24x24.png)\n   */\n  100: '#ffe0b2';\n  /**\n   * Preview: ![orange 200](https://mui.com/static/colors-preview/orange-200-24x24.png)\n   */\n  200: '#ffcc80';\n  /**\n   * Preview: ![orange 300](https://mui.com/static/colors-preview/orange-300-24x24.png)\n   */\n  300: '#ffb74d';\n  /**\n   * Preview: ![orange 400](https://mui.com/static/colors-preview/orange-400-24x24.png)\n   */\n  400: '#ffa726';\n  /**\n   * Preview: ![orange 500](https://mui.com/static/colors-preview/orange-500-24x24.png)\n   */\n  500: '#ff9800';\n  /**\n   * Preview: ![orange 600](https://mui.com/static/colors-preview/orange-600-24x24.png)\n   */\n  600: '#fb8c00';\n  /**\n   * Preview: ![orange 700](https://mui.com/static/colors-preview/orange-700-24x24.png)\n   */\n  700: '#f57c00';\n  /**\n   * Preview: ![orange 800](https://mui.com/static/colors-preview/orange-800-24x24.png)\n   */\n  800: '#ef6c00';\n  /**\n   * Preview: ![orange 900](https://mui.com/static/colors-preview/orange-900-24x24.png)\n   */\n  900: '#e65100';\n  /**\n   * Preview: ![orange A100](https://mui.com/static/colors-preview/orange-A100-24x24.png)\n   */\n  A100: '#ffd180';\n  /**\n   * Preview: ![orange A200](https://mui.com/static/colors-preview/orange-A200-24x24.png)\n   */\n  A200: '#ffab40';\n  /**\n   * Preview: ![orange A400](https://mui.com/static/colors-preview/orange-A400-24x24.png)\n   */\n  A400: '#ff9100';\n  /**\n   * Preview: ![orange A700](https://mui.com/static/colors-preview/orange-A700-24x24.png)\n   */\n  A700: '#ff6d00';\n};\n\nexport default orange;\n","node_modules/@mui/material/colors/lime.d.ts":"/**\n * ![lime 50](https://mui.com/static/colors-preview/lime-50-24x24.png) ![lime 100](https://mui.com/static/colors-preview/lime-100-24x24.png) ![lime 200](https://mui.com/static/colors-preview/lime-200-24x24.png) ![lime 300](https://mui.com/static/colors-preview/lime-300-24x24.png) ![lime 400](https://mui.com/static/colors-preview/lime-400-24x24.png) ![lime 500](https://mui.com/static/colors-preview/lime-500-24x24.png) ![lime 600](https://mui.com/static/colors-preview/lime-600-24x24.png) ![lime 700](https://mui.com/static/colors-preview/lime-700-24x24.png) ![lime 800](https://mui.com/static/colors-preview/lime-800-24x24.png) ![lime 900](https://mui.com/static/colors-preview/lime-900-24x24.png) ![lime A100](https://mui.com/static/colors-preview/lime-A100-24x24.png) ![lime A200](https://mui.com/static/colors-preview/lime-A200-24x24.png) ![lime A400](https://mui.com/static/colors-preview/lime-A400-24x24.png) ![lime A700](https://mui.com/static/colors-preview/lime-A700-24x24.png)\n */\ndeclare const lime: {\n  /**\n   * Preview: ![lime 50](https://mui.com/static/colors-preview/lime-50-24x24.png)\n   */\n  50: '#f9fbe7';\n  /**\n   * Preview: ![lime 100](https://mui.com/static/colors-preview/lime-100-24x24.png)\n   */\n  100: '#f0f4c3';\n  /**\n   * Preview: ![lime 200](https://mui.com/static/colors-preview/lime-200-24x24.png)\n   */\n  200: '#e6ee9c';\n  /**\n   * Preview: ![lime 300](https://mui.com/static/colors-preview/lime-300-24x24.png)\n   */\n  300: '#dce775';\n  /**\n   * Preview: ![lime 400](https://mui.com/static/colors-preview/lime-400-24x24.png)\n   */\n  400: '#d4e157';\n  /**\n   * Preview: ![lime 500](https://mui.com/static/colors-preview/lime-500-24x24.png)\n   */\n  500: '#cddc39';\n  /**\n   * Preview: ![lime 600](https://mui.com/static/colors-preview/lime-600-24x24.png)\n   */\n  600: '#c0ca33';\n  /**\n   * Preview: ![lime 700](https://mui.com/static/colors-preview/lime-700-24x24.png)\n   */\n  700: '#afb42b';\n  /**\n   * Preview: ![lime 800](https://mui.com/static/colors-preview/lime-800-24x24.png)\n   */\n  800: '#9e9d24';\n  /**\n   * Preview: ![lime 900](https://mui.com/static/colors-preview/lime-900-24x24.png)\n   */\n  900: '#827717';\n  /**\n   * Preview: ![lime A100](https://mui.com/static/colors-preview/lime-A100-24x24.png)\n   */\n  A100: '#f4ff81';\n  /**\n   * Preview: ![lime A200](https://mui.com/static/colors-preview/lime-A200-24x24.png)\n   */\n  A200: '#eeff41';\n  /**\n   * Preview: ![lime A400](https://mui.com/static/colors-preview/lime-A400-24x24.png)\n   */\n  A400: '#c6ff00';\n  /**\n   * Preview: ![lime A700](https://mui.com/static/colors-preview/lime-A700-24x24.png)\n   */\n  A700: '#aeea00';\n};\n\nexport default lime;\n","node_modules/@mui/material/colors/lightGreen.d.ts":"/**\n * ![lightGreen 50](https://mui.com/static/colors-preview/lightGreen-50-24x24.png) ![lightGreen 100](https://mui.com/static/colors-preview/lightGreen-100-24x24.png) ![lightGreen 200](https://mui.com/static/colors-preview/lightGreen-200-24x24.png) ![lightGreen 300](https://mui.com/static/colors-preview/lightGreen-300-24x24.png) ![lightGreen 400](https://mui.com/static/colors-preview/lightGreen-400-24x24.png) ![lightGreen 500](https://mui.com/static/colors-preview/lightGreen-500-24x24.png) ![lightGreen 600](https://mui.com/static/colors-preview/lightGreen-600-24x24.png) ![lightGreen 700](https://mui.com/static/colors-preview/lightGreen-700-24x24.png) ![lightGreen 800](https://mui.com/static/colors-preview/lightGreen-800-24x24.png) ![lightGreen 900](https://mui.com/static/colors-preview/lightGreen-900-24x24.png) ![lightGreen A100](https://mui.com/static/colors-preview/lightGreen-A100-24x24.png) ![lightGreen A200](https://mui.com/static/colors-preview/lightGreen-A200-24x24.png) ![lightGreen A400](https://mui.com/static/colors-preview/lightGreen-A400-24x24.png) ![lightGreen A700](https://mui.com/static/colors-preview/lightGreen-A700-24x24.png)\n */\ndeclare const lightGreen: {\n  /**\n   * Preview: ![lightGreen 50](https://mui.com/static/colors-preview/lightGreen-50-24x24.png)\n   */\n  50: '#f1f8e9';\n  /**\n   * Preview: ![lightGreen 100](https://mui.com/static/colors-preview/lightGreen-100-24x24.png)\n   */\n  100: '#dcedc8';\n  /**\n   * Preview: ![lightGreen 200](https://mui.com/static/colors-preview/lightGreen-200-24x24.png)\n   */\n  200: '#c5e1a5';\n  /**\n   * Preview: ![lightGreen 300](https://mui.com/static/colors-preview/lightGreen-300-24x24.png)\n   */\n  300: '#aed581';\n  /**\n   * Preview: ![lightGreen 400](https://mui.com/static/colors-preview/lightGreen-400-24x24.png)\n   */\n  400: '#9ccc65';\n  /**\n   * Preview: ![lightGreen 500](https://mui.com/static/colors-preview/lightGreen-500-24x24.png)\n   */\n  500: '#8bc34a';\n  /**\n   * Preview: ![lightGreen 600](https://mui.com/static/colors-preview/lightGreen-600-24x24.png)\n   */\n  600: '#7cb342';\n  /**\n   * Preview: ![lightGreen 700](https://mui.com/static/colors-preview/lightGreen-700-24x24.png)\n   */\n  700: '#689f38';\n  /**\n   * Preview: ![lightGreen 800](https://mui.com/static/colors-preview/lightGreen-800-24x24.png)\n   */\n  800: '#558b2f';\n  /**\n   * Preview: ![lightGreen 900](https://mui.com/static/colors-preview/lightGreen-900-24x24.png)\n   */\n  900: '#33691e';\n  /**\n   * Preview: ![lightGreen A100](https://mui.com/static/colors-preview/lightGreen-A100-24x24.png)\n   */\n  A100: '#ccff90';\n  /**\n   * Preview: ![lightGreen A200](https://mui.com/static/colors-preview/lightGreen-A200-24x24.png)\n   */\n  A200: '#b2ff59';\n  /**\n   * Preview: ![lightGreen A400](https://mui.com/static/colors-preview/lightGreen-A400-24x24.png)\n   */\n  A400: '#76ff03';\n  /**\n   * Preview: ![lightGreen A700](https://mui.com/static/colors-preview/lightGreen-A700-24x24.png)\n   */\n  A700: '#64dd17';\n};\n\nexport default lightGreen;\n","node_modules/@mui/material/colors/lightBlue.d.ts":"/**\n * ![lightBlue 50](https://mui.com/static/colors-preview/lightBlue-50-24x24.png) ![lightBlue 100](https://mui.com/static/colors-preview/lightBlue-100-24x24.png) ![lightBlue 200](https://mui.com/static/colors-preview/lightBlue-200-24x24.png) ![lightBlue 300](https://mui.com/static/colors-preview/lightBlue-300-24x24.png) ![lightBlue 400](https://mui.com/static/colors-preview/lightBlue-400-24x24.png) ![lightBlue 500](https://mui.com/static/colors-preview/lightBlue-500-24x24.png) ![lightBlue 600](https://mui.com/static/colors-preview/lightBlue-600-24x24.png) ![lightBlue 700](https://mui.com/static/colors-preview/lightBlue-700-24x24.png) ![lightBlue 800](https://mui.com/static/colors-preview/lightBlue-800-24x24.png) ![lightBlue 900](https://mui.com/static/colors-preview/lightBlue-900-24x24.png) ![lightBlue A100](https://mui.com/static/colors-preview/lightBlue-A100-24x24.png) ![lightBlue A200](https://mui.com/static/colors-preview/lightBlue-A200-24x24.png) ![lightBlue A400](https://mui.com/static/colors-preview/lightBlue-A400-24x24.png) ![lightBlue A700](https://mui.com/static/colors-preview/lightBlue-A700-24x24.png)\n */\ndeclare const lightBlue: {\n  /**\n   * Preview: ![lightBlue 50](https://mui.com/static/colors-preview/lightBlue-50-24x24.png)\n   */\n  50: '#e1f5fe';\n  /**\n   * Preview: ![lightBlue 100](https://mui.com/static/colors-preview/lightBlue-100-24x24.png)\n   */\n  100: '#b3e5fc';\n  /**\n   * Preview: ![lightBlue 200](https://mui.com/static/colors-preview/lightBlue-200-24x24.png)\n   */\n  200: '#81d4fa';\n  /**\n   * Preview: ![lightBlue 300](https://mui.com/static/colors-preview/lightBlue-300-24x24.png)\n   */\n  300: '#4fc3f7';\n  /**\n   * Preview: ![lightBlue 400](https://mui.com/static/colors-preview/lightBlue-400-24x24.png)\n   */\n  400: '#29b6f6';\n  /**\n   * Preview: ![lightBlue 500](https://mui.com/static/colors-preview/lightBlue-500-24x24.png)\n   */\n  500: '#03a9f4';\n  /**\n   * Preview: ![lightBlue 600](https://mui.com/static/colors-preview/lightBlue-600-24x24.png)\n   */\n  600: '#039be5';\n  /**\n   * Preview: ![lightBlue 700](https://mui.com/static/colors-preview/lightBlue-700-24x24.png)\n   */\n  700: '#0288d1';\n  /**\n   * Preview: ![lightBlue 800](https://mui.com/static/colors-preview/lightBlue-800-24x24.png)\n   */\n  800: '#0277bd';\n  /**\n   * Preview: ![lightBlue 900](https://mui.com/static/colors-preview/lightBlue-900-24x24.png)\n   */\n  900: '#01579b';\n  /**\n   * Preview: ![lightBlue A100](https://mui.com/static/colors-preview/lightBlue-A100-24x24.png)\n   */\n  A100: '#80d8ff';\n  /**\n   * Preview: ![lightBlue A200](https://mui.com/static/colors-preview/lightBlue-A200-24x24.png)\n   */\n  A200: '#40c4ff';\n  /**\n   * Preview: ![lightBlue A400](https://mui.com/static/colors-preview/lightBlue-A400-24x24.png)\n   */\n  A400: '#00b0ff';\n  /**\n   * Preview: ![lightBlue A700](https://mui.com/static/colors-preview/lightBlue-A700-24x24.png)\n   */\n  A700: '#0091ea';\n};\n\nexport default lightBlue;\n","node_modules/@mui/material/colors/indigo.d.ts":"/**\n * ![indigo 50](https://mui.com/static/colors-preview/indigo-50-24x24.png) ![indigo 100](https://mui.com/static/colors-preview/indigo-100-24x24.png) ![indigo 200](https://mui.com/static/colors-preview/indigo-200-24x24.png) ![indigo 300](https://mui.com/static/colors-preview/indigo-300-24x24.png) ![indigo 400](https://mui.com/static/colors-preview/indigo-400-24x24.png) ![indigo 500](https://mui.com/static/colors-preview/indigo-500-24x24.png) ![indigo 600](https://mui.com/static/colors-preview/indigo-600-24x24.png) ![indigo 700](https://mui.com/static/colors-preview/indigo-700-24x24.png) ![indigo 800](https://mui.com/static/colors-preview/indigo-800-24x24.png) ![indigo 900](https://mui.com/static/colors-preview/indigo-900-24x24.png) ![indigo A100](https://mui.com/static/colors-preview/indigo-A100-24x24.png) ![indigo A200](https://mui.com/static/colors-preview/indigo-A200-24x24.png) ![indigo A400](https://mui.com/static/colors-preview/indigo-A400-24x24.png) ![indigo A700](https://mui.com/static/colors-preview/indigo-A700-24x24.png)\n */\ndeclare const indigo: {\n  /**\n   * Preview: ![indigo 50](https://mui.com/static/colors-preview/indigo-50-24x24.png)\n   */\n  50: '#e8eaf6';\n  /**\n   * Preview: ![indigo 100](https://mui.com/static/colors-preview/indigo-100-24x24.png)\n   */\n  100: '#c5cae9';\n  /**\n   * Preview: ![indigo 200](https://mui.com/static/colors-preview/indigo-200-24x24.png)\n   */\n  200: '#9fa8da';\n  /**\n   * Preview: ![indigo 300](https://mui.com/static/colors-preview/indigo-300-24x24.png)\n   */\n  300: '#7986cb';\n  /**\n   * Preview: ![indigo 400](https://mui.com/static/colors-preview/indigo-400-24x24.png)\n   */\n  400: '#5c6bc0';\n  /**\n   * Preview: ![indigo 500](https://mui.com/static/colors-preview/indigo-500-24x24.png)\n   */\n  500: '#3f51b5';\n  /**\n   * Preview: ![indigo 600](https://mui.com/static/colors-preview/indigo-600-24x24.png)\n   */\n  600: '#3949ab';\n  /**\n   * Preview: ![indigo 700](https://mui.com/static/colors-preview/indigo-700-24x24.png)\n   */\n  700: '#303f9f';\n  /**\n   * Preview: ![indigo 800](https://mui.com/static/colors-preview/indigo-800-24x24.png)\n   */\n  800: '#283593';\n  /**\n   * Preview: ![indigo 900](https://mui.com/static/colors-preview/indigo-900-24x24.png)\n   */\n  900: '#1a237e';\n  /**\n   * Preview: ![indigo A100](https://mui.com/static/colors-preview/indigo-A100-24x24.png)\n   */\n  A100: '#8c9eff';\n  /**\n   * Preview: ![indigo A200](https://mui.com/static/colors-preview/indigo-A200-24x24.png)\n   */\n  A200: '#536dfe';\n  /**\n   * Preview: ![indigo A400](https://mui.com/static/colors-preview/indigo-A400-24x24.png)\n   */\n  A400: '#3d5afe';\n  /**\n   * Preview: ![indigo A700](https://mui.com/static/colors-preview/indigo-A700-24x24.png)\n   */\n  A700: '#304ffe';\n};\n\nexport default indigo;\n","node_modules/@mui/material/colors/index.d.ts":"export { default as amber } from './amber';\nexport { default as blue } from './blue';\nexport { default as blueGrey } from './blueGrey';\nexport { default as brown } from './brown';\nexport { default as common } from './common';\nexport { default as cyan } from './cyan';\nexport { default as deepOrange } from './deepOrange';\nexport { default as deepPurple } from './deepPurple';\nexport { default as green } from './green';\nexport { default as grey } from './grey';\nexport { default as indigo } from './indigo';\nexport { default as lightBlue } from './lightBlue';\nexport { default as lightGreen } from './lightGreen';\nexport { default as lime } from './lime';\nexport { default as orange } from './orange';\nexport { default as pink } from './pink';\nexport { default as purple } from './purple';\nexport { default as red } from './red';\nexport { default as teal } from './teal';\nexport { default as yellow } from './yellow';\n","node_modules/@mui/material/colors/grey.d.ts":"/**\n * ![grey 50](https://mui.com/static/colors-preview/grey-50-24x24.png) ![grey 100](https://mui.com/static/colors-preview/grey-100-24x24.png) ![grey 200](https://mui.com/static/colors-preview/grey-200-24x24.png) ![grey 300](https://mui.com/static/colors-preview/grey-300-24x24.png) ![grey 400](https://mui.com/static/colors-preview/grey-400-24x24.png) ![grey 500](https://mui.com/static/colors-preview/grey-500-24x24.png) ![grey 600](https://mui.com/static/colors-preview/grey-600-24x24.png) ![grey 700](https://mui.com/static/colors-preview/grey-700-24x24.png) ![grey 800](https://mui.com/static/colors-preview/grey-800-24x24.png) ![grey 900](https://mui.com/static/colors-preview/grey-900-24x24.png) ![grey A100](https://mui.com/static/colors-preview/grey-A100-24x24.png) ![grey A200](https://mui.com/static/colors-preview/grey-A200-24x24.png) ![grey A400](https://mui.com/static/colors-preview/grey-A400-24x24.png) ![grey A700](https://mui.com/static/colors-preview/grey-A700-24x24.png)\n */\ndeclare const grey: {\n  /**\n   * Preview: ![grey 50](https://mui.com/static/colors-preview/grey-50-24x24.png)\n   */\n  50: '#fafafa';\n  /**\n   * Preview: ![grey 100](https://mui.com/static/colors-preview/grey-100-24x24.png)\n   */\n  100: '#f5f5f5';\n  /**\n   * Preview: ![grey 200](https://mui.com/static/colors-preview/grey-200-24x24.png)\n   */\n  200: '#eeeeee';\n  /**\n   * Preview: ![grey 300](https://mui.com/static/colors-preview/grey-300-24x24.png)\n   */\n  300: '#e0e0e0';\n  /**\n   * Preview: ![grey 400](https://mui.com/static/colors-preview/grey-400-24x24.png)\n   */\n  400: '#bdbdbd';\n  /**\n   * Preview: ![grey 500](https://mui.com/static/colors-preview/grey-500-24x24.png)\n   */\n  500: '#9e9e9e';\n  /**\n   * Preview: ![grey 600](https://mui.com/static/colors-preview/grey-600-24x24.png)\n   */\n  600: '#757575';\n  /**\n   * Preview: ![grey 700](https://mui.com/static/colors-preview/grey-700-24x24.png)\n   */\n  700: '#616161';\n  /**\n   * Preview: ![grey 800](https://mui.com/static/colors-preview/grey-800-24x24.png)\n   */\n  800: '#424242';\n  /**\n   * Preview: ![grey 900](https://mui.com/static/colors-preview/grey-900-24x24.png)\n   */\n  900: '#212121';\n  /**\n   * Preview: ![grey A100](https://mui.com/static/colors-preview/grey-A100-24x24.png)\n   */\n  A100: '#f5f5f5';\n  /**\n   * Preview: ![grey A200](https://mui.com/static/colors-preview/grey-A200-24x24.png)\n   */\n  A200: '#eeeeee';\n  /**\n   * Preview: ![grey A400](https://mui.com/static/colors-preview/grey-A400-24x24.png)\n   */\n  A400: '#bdbdbd';\n  /**\n   * Preview: ![grey A700](https://mui.com/static/colors-preview/grey-A700-24x24.png)\n   */\n  A700: '#616161';\n};\n\nexport default grey;\n","node_modules/@mui/material/colors/green.d.ts":"/**\n * ![green 50](https://mui.com/static/colors-preview/green-50-24x24.png) ![green 100](https://mui.com/static/colors-preview/green-100-24x24.png) ![green 200](https://mui.com/static/colors-preview/green-200-24x24.png) ![green 300](https://mui.com/static/colors-preview/green-300-24x24.png) ![green 400](https://mui.com/static/colors-preview/green-400-24x24.png) ![green 500](https://mui.com/static/colors-preview/green-500-24x24.png) ![green 600](https://mui.com/static/colors-preview/green-600-24x24.png) ![green 700](https://mui.com/static/colors-preview/green-700-24x24.png) ![green 800](https://mui.com/static/colors-preview/green-800-24x24.png) ![green 900](https://mui.com/static/colors-preview/green-900-24x24.png) ![green A100](https://mui.com/static/colors-preview/green-A100-24x24.png) ![green A200](https://mui.com/static/colors-preview/green-A200-24x24.png) ![green A400](https://mui.com/static/colors-preview/green-A400-24x24.png) ![green A700](https://mui.com/static/colors-preview/green-A700-24x24.png)\n */\ndeclare const green: {\n  /**\n   * Preview: ![green 50](https://mui.com/static/colors-preview/green-50-24x24.png)\n   */\n  50: '#e8f5e9';\n  /**\n   * Preview: ![green 100](https://mui.com/static/colors-preview/green-100-24x24.png)\n   */\n  100: '#c8e6c9';\n  /**\n   * Preview: ![green 200](https://mui.com/static/colors-preview/green-200-24x24.png)\n   */\n  200: '#a5d6a7';\n  /**\n   * Preview: ![green 300](https://mui.com/static/colors-preview/green-300-24x24.png)\n   */\n  300: '#81c784';\n  /**\n   * Preview: ![green 400](https://mui.com/static/colors-preview/green-400-24x24.png)\n   */\n  400: '#66bb6a';\n  /**\n   * Preview: ![green 500](https://mui.com/static/colors-preview/green-500-24x24.png)\n   */\n  500: '#4caf50';\n  /**\n   * Preview: ![green 600](https://mui.com/static/colors-preview/green-600-24x24.png)\n   */\n  600: '#43a047';\n  /**\n   * Preview: ![green 700](https://mui.com/static/colors-preview/green-700-24x24.png)\n   */\n  700: '#388e3c';\n  /**\n   * Preview: ![green 800](https://mui.com/static/colors-preview/green-800-24x24.png)\n   */\n  800: '#2e7d32';\n  /**\n   * Preview: ![green 900](https://mui.com/static/colors-preview/green-900-24x24.png)\n   */\n  900: '#1b5e20';\n  /**\n   * Preview: ![green A100](https://mui.com/static/colors-preview/green-A100-24x24.png)\n   */\n  A100: '#b9f6ca';\n  /**\n   * Preview: ![green A200](https://mui.com/static/colors-preview/green-A200-24x24.png)\n   */\n  A200: '#69f0ae';\n  /**\n   * Preview: ![green A400](https://mui.com/static/colors-preview/green-A400-24x24.png)\n   */\n  A400: '#00e676';\n  /**\n   * Preview: ![green A700](https://mui.com/static/colors-preview/green-A700-24x24.png)\n   */\n  A700: '#00c853';\n};\n\nexport default green;\n","node_modules/@mui/material/colors/deepPurple.d.ts":"/**\n * ![deepPurple 50](https://mui.com/static/colors-preview/deepPurple-50-24x24.png) ![deepPurple 100](https://mui.com/static/colors-preview/deepPurple-100-24x24.png) ![deepPurple 200](https://mui.com/static/colors-preview/deepPurple-200-24x24.png) ![deepPurple 300](https://mui.com/static/colors-preview/deepPurple-300-24x24.png) ![deepPurple 400](https://mui.com/static/colors-preview/deepPurple-400-24x24.png) ![deepPurple 500](https://mui.com/static/colors-preview/deepPurple-500-24x24.png) ![deepPurple 600](https://mui.com/static/colors-preview/deepPurple-600-24x24.png) ![deepPurple 700](https://mui.com/static/colors-preview/deepPurple-700-24x24.png) ![deepPurple 800](https://mui.com/static/colors-preview/deepPurple-800-24x24.png) ![deepPurple 900](https://mui.com/static/colors-preview/deepPurple-900-24x24.png) ![deepPurple A100](https://mui.com/static/colors-preview/deepPurple-A100-24x24.png) ![deepPurple A200](https://mui.com/static/colors-preview/deepPurple-A200-24x24.png) ![deepPurple A400](https://mui.com/static/colors-preview/deepPurple-A400-24x24.png) ![deepPurple A700](https://mui.com/static/colors-preview/deepPurple-A700-24x24.png)\n */\ndeclare const deepPurple: {\n  /**\n   * Preview: ![deepPurple 50](https://mui.com/static/colors-preview/deepPurple-50-24x24.png)\n   */\n  50: '#ede7f6';\n  /**\n   * Preview: ![deepPurple 100](https://mui.com/static/colors-preview/deepPurple-100-24x24.png)\n   */\n  100: '#d1c4e9';\n  /**\n   * Preview: ![deepPurple 200](https://mui.com/static/colors-preview/deepPurple-200-24x24.png)\n   */\n  200: '#b39ddb';\n  /**\n   * Preview: ![deepPurple 300](https://mui.com/static/colors-preview/deepPurple-300-24x24.png)\n   */\n  300: '#9575cd';\n  /**\n   * Preview: ![deepPurple 400](https://mui.com/static/colors-preview/deepPurple-400-24x24.png)\n   */\n  400: '#7e57c2';\n  /**\n   * Preview: ![deepPurple 500](https://mui.com/static/colors-preview/deepPurple-500-24x24.png)\n   */\n  500: '#673ab7';\n  /**\n   * Preview: ![deepPurple 600](https://mui.com/static/colors-preview/deepPurple-600-24x24.png)\n   */\n  600: '#5e35b1';\n  /**\n   * Preview: ![deepPurple 700](https://mui.com/static/colors-preview/deepPurple-700-24x24.png)\n   */\n  700: '#512da8';\n  /**\n   * Preview: ![deepPurple 800](https://mui.com/static/colors-preview/deepPurple-800-24x24.png)\n   */\n  800: '#4527a0';\n  /**\n   * Preview: ![deepPurple 900](https://mui.com/static/colors-preview/deepPurple-900-24x24.png)\n   */\n  900: '#311b92';\n  /**\n   * Preview: ![deepPurple A100](https://mui.com/static/colors-preview/deepPurple-A100-24x24.png)\n   */\n  A100: '#b388ff';\n  /**\n   * Preview: ![deepPurple A200](https://mui.com/static/colors-preview/deepPurple-A200-24x24.png)\n   */\n  A200: '#7c4dff';\n  /**\n   * Preview: ![deepPurple A400](https://mui.com/static/colors-preview/deepPurple-A400-24x24.png)\n   */\n  A400: '#651fff';\n  /**\n   * Preview: ![deepPurple A700](https://mui.com/static/colors-preview/deepPurple-A700-24x24.png)\n   */\n  A700: '#6200ea';\n};\n\nexport default deepPurple;\n","node_modules/@mui/material/colors/deepOrange.d.ts":"/**\n * ![deepOrange 50](https://mui.com/static/colors-preview/deepOrange-50-24x24.png) ![deepOrange 100](https://mui.com/static/colors-preview/deepOrange-100-24x24.png) ![deepOrange 200](https://mui.com/static/colors-preview/deepOrange-200-24x24.png) ![deepOrange 300](https://mui.com/static/colors-preview/deepOrange-300-24x24.png) ![deepOrange 400](https://mui.com/static/colors-preview/deepOrange-400-24x24.png) ![deepOrange 500](https://mui.com/static/colors-preview/deepOrange-500-24x24.png) ![deepOrange 600](https://mui.com/static/colors-preview/deepOrange-600-24x24.png) ![deepOrange 700](https://mui.com/static/colors-preview/deepOrange-700-24x24.png) ![deepOrange 800](https://mui.com/static/colors-preview/deepOrange-800-24x24.png) ![deepOrange 900](https://mui.com/static/colors-preview/deepOrange-900-24x24.png) ![deepOrange A100](https://mui.com/static/colors-preview/deepOrange-A100-24x24.png) ![deepOrange A200](https://mui.com/static/colors-preview/deepOrange-A200-24x24.png) ![deepOrange A400](https://mui.com/static/colors-preview/deepOrange-A400-24x24.png) ![deepOrange A700](https://mui.com/static/colors-preview/deepOrange-A700-24x24.png)\n */\ndeclare const deepOrange: {\n  /**\n   * Preview: ![deepOrange 50](https://mui.com/static/colors-preview/deepOrange-50-24x24.png)\n   */\n  50: '#fbe9e7';\n  /**\n   * Preview: ![deepOrange 100](https://mui.com/static/colors-preview/deepOrange-100-24x24.png)\n   */\n  100: '#ffccbc';\n  /**\n   * Preview: ![deepOrange 200](https://mui.com/static/colors-preview/deepOrange-200-24x24.png)\n   */\n  200: '#ffab91';\n  /**\n   * Preview: ![deepOrange 300](https://mui.com/static/colors-preview/deepOrange-300-24x24.png)\n   */\n  300: '#ff8a65';\n  /**\n   * Preview: ![deepOrange 400](https://mui.com/static/colors-preview/deepOrange-400-24x24.png)\n   */\n  400: '#ff7043';\n  /**\n   * Preview: ![deepOrange 500](https://mui.com/static/colors-preview/deepOrange-500-24x24.png)\n   */\n  500: '#ff5722';\n  /**\n   * Preview: ![deepOrange 600](https://mui.com/static/colors-preview/deepOrange-600-24x24.png)\n   */\n  600: '#f4511e';\n  /**\n   * Preview: ![deepOrange 700](https://mui.com/static/colors-preview/deepOrange-700-24x24.png)\n   */\n  700: '#e64a19';\n  /**\n   * Preview: ![deepOrange 800](https://mui.com/static/colors-preview/deepOrange-800-24x24.png)\n   */\n  800: '#d84315';\n  /**\n   * Preview: ![deepOrange 900](https://mui.com/static/colors-preview/deepOrange-900-24x24.png)\n   */\n  900: '#bf360c';\n  /**\n   * Preview: ![deepOrange A100](https://mui.com/static/colors-preview/deepOrange-A100-24x24.png)\n   */\n  A100: '#ff9e80';\n  /**\n   * Preview: ![deepOrange A200](https://mui.com/static/colors-preview/deepOrange-A200-24x24.png)\n   */\n  A200: '#ff6e40';\n  /**\n   * Preview: ![deepOrange A400](https://mui.com/static/colors-preview/deepOrange-A400-24x24.png)\n   */\n  A400: '#ff3d00';\n  /**\n   * Preview: ![deepOrange A700](https://mui.com/static/colors-preview/deepOrange-A700-24x24.png)\n   */\n  A700: '#dd2c00';\n};\n\nexport default deepOrange;\n","node_modules/@mui/material/colors/cyan.d.ts":"/**\n * ![cyan 50](https://mui.com/static/colors-preview/cyan-50-24x24.png) ![cyan 100](https://mui.com/static/colors-preview/cyan-100-24x24.png) ![cyan 200](https://mui.com/static/colors-preview/cyan-200-24x24.png) ![cyan 300](https://mui.com/static/colors-preview/cyan-300-24x24.png) ![cyan 400](https://mui.com/static/colors-preview/cyan-400-24x24.png) ![cyan 500](https://mui.com/static/colors-preview/cyan-500-24x24.png) ![cyan 600](https://mui.com/static/colors-preview/cyan-600-24x24.png) ![cyan 700](https://mui.com/static/colors-preview/cyan-700-24x24.png) ![cyan 800](https://mui.com/static/colors-preview/cyan-800-24x24.png) ![cyan 900](https://mui.com/static/colors-preview/cyan-900-24x24.png) ![cyan A100](https://mui.com/static/colors-preview/cyan-A100-24x24.png) ![cyan A200](https://mui.com/static/colors-preview/cyan-A200-24x24.png) ![cyan A400](https://mui.com/static/colors-preview/cyan-A400-24x24.png) ![cyan A700](https://mui.com/static/colors-preview/cyan-A700-24x24.png)\n */\ndeclare const cyan: {\n  /**\n   * Preview: ![cyan 50](https://mui.com/static/colors-preview/cyan-50-24x24.png)\n   */\n  50: '#e0f7fa';\n  /**\n   * Preview: ![cyan 100](https://mui.com/static/colors-preview/cyan-100-24x24.png)\n   */\n  100: '#b2ebf2';\n  /**\n   * Preview: ![cyan 200](https://mui.com/static/colors-preview/cyan-200-24x24.png)\n   */\n  200: '#80deea';\n  /**\n   * Preview: ![cyan 300](https://mui.com/static/colors-preview/cyan-300-24x24.png)\n   */\n  300: '#4dd0e1';\n  /**\n   * Preview: ![cyan 400](https://mui.com/static/colors-preview/cyan-400-24x24.png)\n   */\n  400: '#26c6da';\n  /**\n   * Preview: ![cyan 500](https://mui.com/static/colors-preview/cyan-500-24x24.png)\n   */\n  500: '#00bcd4';\n  /**\n   * Preview: ![cyan 600](https://mui.com/static/colors-preview/cyan-600-24x24.png)\n   */\n  600: '#00acc1';\n  /**\n   * Preview: ![cyan 700](https://mui.com/static/colors-preview/cyan-700-24x24.png)\n   */\n  700: '#0097a7';\n  /**\n   * Preview: ![cyan 800](https://mui.com/static/colors-preview/cyan-800-24x24.png)\n   */\n  800: '#00838f';\n  /**\n   * Preview: ![cyan 900](https://mui.com/static/colors-preview/cyan-900-24x24.png)\n   */\n  900: '#006064';\n  /**\n   * Preview: ![cyan A100](https://mui.com/static/colors-preview/cyan-A100-24x24.png)\n   */\n  A100: '#84ffff';\n  /**\n   * Preview: ![cyan A200](https://mui.com/static/colors-preview/cyan-A200-24x24.png)\n   */\n  A200: '#18ffff';\n  /**\n   * Preview: ![cyan A400](https://mui.com/static/colors-preview/cyan-A400-24x24.png)\n   */\n  A400: '#00e5ff';\n  /**\n   * Preview: ![cyan A700](https://mui.com/static/colors-preview/cyan-A700-24x24.png)\n   */\n  A700: '#00b8d4';\n};\n\nexport default cyan;\n","node_modules/@mui/material/colors/common.d.ts":"/**\n * ![common black](https://mui.com/static/colors-preview/common-black-24x24.png) ![common white](https://mui.com/static/colors-preview/common-white-24x24.png)\n */\ndeclare const common: {\n  /**\n   * Preview: ![common black](https://mui.com/static/colors-preview/common-black-24x24.png)\n   */\n  black: '#000';\n  /**\n   * Preview: ![common white](https://mui.com/static/colors-preview/common-white-24x24.png)\n   */\n  white: '#fff';\n};\n\nexport default common;\n","node_modules/@mui/material/colors/brown.d.ts":"/**\n * ![brown 50](https://mui.com/static/colors-preview/brown-50-24x24.png) ![brown 100](https://mui.com/static/colors-preview/brown-100-24x24.png) ![brown 200](https://mui.com/static/colors-preview/brown-200-24x24.png) ![brown 300](https://mui.com/static/colors-preview/brown-300-24x24.png) ![brown 400](https://mui.com/static/colors-preview/brown-400-24x24.png) ![brown 500](https://mui.com/static/colors-preview/brown-500-24x24.png) ![brown 600](https://mui.com/static/colors-preview/brown-600-24x24.png) ![brown 700](https://mui.com/static/colors-preview/brown-700-24x24.png) ![brown 800](https://mui.com/static/colors-preview/brown-800-24x24.png) ![brown 900](https://mui.com/static/colors-preview/brown-900-24x24.png) ![brown A100](https://mui.com/static/colors-preview/brown-A100-24x24.png) ![brown A200](https://mui.com/static/colors-preview/brown-A200-24x24.png) ![brown A400](https://mui.com/static/colors-preview/brown-A400-24x24.png) ![brown A700](https://mui.com/static/colors-preview/brown-A700-24x24.png)\n */\ndeclare const brown: {\n  /**\n   * Preview: ![brown 50](https://mui.com/static/colors-preview/brown-50-24x24.png)\n   */\n  50: '#efebe9';\n  /**\n   * Preview: ![brown 100](https://mui.com/static/colors-preview/brown-100-24x24.png)\n   */\n  100: '#d7ccc8';\n  /**\n   * Preview: ![brown 200](https://mui.com/static/colors-preview/brown-200-24x24.png)\n   */\n  200: '#bcaaa4';\n  /**\n   * Preview: ![brown 300](https://mui.com/static/colors-preview/brown-300-24x24.png)\n   */\n  300: '#a1887f';\n  /**\n   * Preview: ![brown 400](https://mui.com/static/colors-preview/brown-400-24x24.png)\n   */\n  400: '#8d6e63';\n  /**\n   * Preview: ![brown 500](https://mui.com/static/colors-preview/brown-500-24x24.png)\n   */\n  500: '#795548';\n  /**\n   * Preview: ![brown 600](https://mui.com/static/colors-preview/brown-600-24x24.png)\n   */\n  600: '#6d4c41';\n  /**\n   * Preview: ![brown 700](https://mui.com/static/colors-preview/brown-700-24x24.png)\n   */\n  700: '#5d4037';\n  /**\n   * Preview: ![brown 800](https://mui.com/static/colors-preview/brown-800-24x24.png)\n   */\n  800: '#4e342e';\n  /**\n   * Preview: ![brown 900](https://mui.com/static/colors-preview/brown-900-24x24.png)\n   */\n  900: '#3e2723';\n  /**\n   * Preview: ![brown A100](https://mui.com/static/colors-preview/brown-A100-24x24.png)\n   */\n  A100: '#d7ccc8';\n  /**\n   * Preview: ![brown A200](https://mui.com/static/colors-preview/brown-A200-24x24.png)\n   */\n  A200: '#bcaaa4';\n  /**\n   * Preview: ![brown A400](https://mui.com/static/colors-preview/brown-A400-24x24.png)\n   */\n  A400: '#8d6e63';\n  /**\n   * Preview: ![brown A700](https://mui.com/static/colors-preview/brown-A700-24x24.png)\n   */\n  A700: '#5d4037';\n};\n\nexport default brown;\n","node_modules/@mui/material/colors/blueGrey.d.ts":"/**\n * ![blueGrey 50](https://mui.com/static/colors-preview/blueGrey-50-24x24.png) ![blueGrey 100](https://mui.com/static/colors-preview/blueGrey-100-24x24.png) ![blueGrey 200](https://mui.com/static/colors-preview/blueGrey-200-24x24.png) ![blueGrey 300](https://mui.com/static/colors-preview/blueGrey-300-24x24.png) ![blueGrey 400](https://mui.com/static/colors-preview/blueGrey-400-24x24.png) ![blueGrey 500](https://mui.com/static/colors-preview/blueGrey-500-24x24.png) ![blueGrey 600](https://mui.com/static/colors-preview/blueGrey-600-24x24.png) ![blueGrey 700](https://mui.com/static/colors-preview/blueGrey-700-24x24.png) ![blueGrey 800](https://mui.com/static/colors-preview/blueGrey-800-24x24.png) ![blueGrey 900](https://mui.com/static/colors-preview/blueGrey-900-24x24.png) ![blueGrey A100](https://mui.com/static/colors-preview/blueGrey-A100-24x24.png) ![blueGrey A200](https://mui.com/static/colors-preview/blueGrey-A200-24x24.png) ![blueGrey A400](https://mui.com/static/colors-preview/blueGrey-A400-24x24.png) ![blueGrey A700](https://mui.com/static/colors-preview/blueGrey-A700-24x24.png)\n */\ndeclare const blueGrey: {\n  /**\n   * Preview: ![blueGrey 50](https://mui.com/static/colors-preview/blueGrey-50-24x24.png)\n   */\n  50: '#eceff1';\n  /**\n   * Preview: ![blueGrey 100](https://mui.com/static/colors-preview/blueGrey-100-24x24.png)\n   */\n  100: '#cfd8dc';\n  /**\n   * Preview: ![blueGrey 200](https://mui.com/static/colors-preview/blueGrey-200-24x24.png)\n   */\n  200: '#b0bec5';\n  /**\n   * Preview: ![blueGrey 300](https://mui.com/static/colors-preview/blueGrey-300-24x24.png)\n   */\n  300: '#90a4ae';\n  /**\n   * Preview: ![blueGrey 400](https://mui.com/static/colors-preview/blueGrey-400-24x24.png)\n   */\n  400: '#78909c';\n  /**\n   * Preview: ![blueGrey 500](https://mui.com/static/colors-preview/blueGrey-500-24x24.png)\n   */\n  500: '#607d8b';\n  /**\n   * Preview: ![blueGrey 600](https://mui.com/static/colors-preview/blueGrey-600-24x24.png)\n   */\n  600: '#546e7a';\n  /**\n   * Preview: ![blueGrey 700](https://mui.com/static/colors-preview/blueGrey-700-24x24.png)\n   */\n  700: '#455a64';\n  /**\n   * Preview: ![blueGrey 800](https://mui.com/static/colors-preview/blueGrey-800-24x24.png)\n   */\n  800: '#37474f';\n  /**\n   * Preview: ![blueGrey 900](https://mui.com/static/colors-preview/blueGrey-900-24x24.png)\n   */\n  900: '#263238';\n  /**\n   * Preview: ![blueGrey A100](https://mui.com/static/colors-preview/blueGrey-A100-24x24.png)\n   */\n  A100: '#cfd8dc';\n  /**\n   * Preview: ![blueGrey A200](https://mui.com/static/colors-preview/blueGrey-A200-24x24.png)\n   */\n  A200: '#b0bec5';\n  /**\n   * Preview: ![blueGrey A400](https://mui.com/static/colors-preview/blueGrey-A400-24x24.png)\n   */\n  A400: '#78909c';\n  /**\n   * Preview: ![blueGrey A700](https://mui.com/static/colors-preview/blueGrey-A700-24x24.png)\n   */\n  A700: '#455a64';\n};\n\nexport default blueGrey;\n","node_modules/@mui/material/colors/blue.d.ts":"/**\n * ![blue 50](https://mui.com/static/colors-preview/blue-50-24x24.png) ![blue 100](https://mui.com/static/colors-preview/blue-100-24x24.png) ![blue 200](https://mui.com/static/colors-preview/blue-200-24x24.png) ![blue 300](https://mui.com/static/colors-preview/blue-300-24x24.png) ![blue 400](https://mui.com/static/colors-preview/blue-400-24x24.png) ![blue 500](https://mui.com/static/colors-preview/blue-500-24x24.png) ![blue 600](https://mui.com/static/colors-preview/blue-600-24x24.png) ![blue 700](https://mui.com/static/colors-preview/blue-700-24x24.png) ![blue 800](https://mui.com/static/colors-preview/blue-800-24x24.png) ![blue 900](https://mui.com/static/colors-preview/blue-900-24x24.png) ![blue A100](https://mui.com/static/colors-preview/blue-A100-24x24.png) ![blue A200](https://mui.com/static/colors-preview/blue-A200-24x24.png) ![blue A400](https://mui.com/static/colors-preview/blue-A400-24x24.png) ![blue A700](https://mui.com/static/colors-preview/blue-A700-24x24.png)\n */\ndeclare const blue: {\n  /**\n   * Preview: ![blue 50](https://mui.com/static/colors-preview/blue-50-24x24.png)\n   */\n  50: '#e3f2fd';\n  /**\n   * Preview: ![blue 100](https://mui.com/static/colors-preview/blue-100-24x24.png)\n   */\n  100: '#bbdefb';\n  /**\n   * Preview: ![blue 200](https://mui.com/static/colors-preview/blue-200-24x24.png)\n   */\n  200: '#90caf9';\n  /**\n   * Preview: ![blue 300](https://mui.com/static/colors-preview/blue-300-24x24.png)\n   */\n  300: '#64b5f6';\n  /**\n   * Preview: ![blue 400](https://mui.com/static/colors-preview/blue-400-24x24.png)\n   */\n  400: '#42a5f5';\n  /**\n   * Preview: ![blue 500](https://mui.com/static/colors-preview/blue-500-24x24.png)\n   */\n  500: '#2196f3';\n  /**\n   * Preview: ![blue 600](https://mui.com/static/colors-preview/blue-600-24x24.png)\n   */\n  600: '#1e88e5';\n  /**\n   * Preview: ![blue 700](https://mui.com/static/colors-preview/blue-700-24x24.png)\n   */\n  700: '#1976d2';\n  /**\n   * Preview: ![blue 800](https://mui.com/static/colors-preview/blue-800-24x24.png)\n   */\n  800: '#1565c0';\n  /**\n   * Preview: ![blue 900](https://mui.com/static/colors-preview/blue-900-24x24.png)\n   */\n  900: '#0d47a1';\n  /**\n   * Preview: ![blue A100](https://mui.com/static/colors-preview/blue-A100-24x24.png)\n   */\n  A100: '#82b1ff';\n  /**\n   * Preview: ![blue A200](https://mui.com/static/colors-preview/blue-A200-24x24.png)\n   */\n  A200: '#448aff';\n  /**\n   * Preview: ![blue A400](https://mui.com/static/colors-preview/blue-A400-24x24.png)\n   */\n  A400: '#2979ff';\n  /**\n   * Preview: ![blue A700](https://mui.com/static/colors-preview/blue-A700-24x24.png)\n   */\n  A700: '#2962ff';\n};\n\nexport default blue;\n","node_modules/@mui/material/colors/amber.d.ts":"/**\n * ![amber 50](https://mui.com/static/colors-preview/amber-50-24x24.png) ![amber 100](https://mui.com/static/colors-preview/amber-100-24x24.png) ![amber 200](https://mui.com/static/colors-preview/amber-200-24x24.png) ![amber 300](https://mui.com/static/colors-preview/amber-300-24x24.png) ![amber 400](https://mui.com/static/colors-preview/amber-400-24x24.png) ![amber 500](https://mui.com/static/colors-preview/amber-500-24x24.png) ![amber 600](https://mui.com/static/colors-preview/amber-600-24x24.png) ![amber 700](https://mui.com/static/colors-preview/amber-700-24x24.png) ![amber 800](https://mui.com/static/colors-preview/amber-800-24x24.png) ![amber 900](https://mui.com/static/colors-preview/amber-900-24x24.png) ![amber A100](https://mui.com/static/colors-preview/amber-A100-24x24.png) ![amber A200](https://mui.com/static/colors-preview/amber-A200-24x24.png) ![amber A400](https://mui.com/static/colors-preview/amber-A400-24x24.png) ![amber A700](https://mui.com/static/colors-preview/amber-A700-24x24.png)\n */\ndeclare const amber: {\n  /**\n   * Preview: ![amber 50](https://mui.com/static/colors-preview/amber-50-24x24.png)\n   */\n  50: '#fff8e1';\n  /**\n   * Preview: ![amber 100](https://mui.com/static/colors-preview/amber-100-24x24.png)\n   */\n  100: '#ffecb3';\n  /**\n   * Preview: ![amber 200](https://mui.com/static/colors-preview/amber-200-24x24.png)\n   */\n  200: '#ffe082';\n  /**\n   * Preview: ![amber 300](https://mui.com/static/colors-preview/amber-300-24x24.png)\n   */\n  300: '#ffd54f';\n  /**\n   * Preview: ![amber 400](https://mui.com/static/colors-preview/amber-400-24x24.png)\n   */\n  400: '#ffca28';\n  /**\n   * Preview: ![amber 500](https://mui.com/static/colors-preview/amber-500-24x24.png)\n   */\n  500: '#ffc107';\n  /**\n   * Preview: ![amber 600](https://mui.com/static/colors-preview/amber-600-24x24.png)\n   */\n  600: '#ffb300';\n  /**\n   * Preview: ![amber 700](https://mui.com/static/colors-preview/amber-700-24x24.png)\n   */\n  700: '#ffa000';\n  /**\n   * Preview: ![amber 800](https://mui.com/static/colors-preview/amber-800-24x24.png)\n   */\n  800: '#ff8f00';\n  /**\n   * Preview: ![amber 900](https://mui.com/static/colors-preview/amber-900-24x24.png)\n   */\n  900: '#ff6f00';\n  /**\n   * Preview: ![amber A100](https://mui.com/static/colors-preview/amber-A100-24x24.png)\n   */\n  A100: '#ffe57f';\n  /**\n   * Preview: ![amber A200](https://mui.com/static/colors-preview/amber-A200-24x24.png)\n   */\n  A200: '#ffd740';\n  /**\n   * Preview: ![amber A400](https://mui.com/static/colors-preview/amber-A400-24x24.png)\n   */\n  A400: '#ffc400';\n  /**\n   * Preview: ![amber A700](https://mui.com/static/colors-preview/amber-A700-24x24.png)\n   */\n  A700: '#ffab00';\n};\n\nexport default amber;\n","node_modules/@mui/material/Zoom/index.d.ts":"export { default } from './Zoom';\nexport * from './Zoom';\n","node_modules/@mui/material/Zoom/Zoom.d.ts":"import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface ZoomProps extends TransitionProps {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout?: TransitionProps['timeout'];\n}\n\n/**\n * The Zoom transition can be used for the floating variant of the\n * [Button](https://mui.com/material-ui/react-button/#floating-action-buttons) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Zoom API](https://mui.com/material-ui/api/zoom/)\n * - inherits [Transition API](https://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Zoom(props: ZoomProps): JSX.Element;\n","node_modules/@mui/material/Unstable_TrapFocus/index.d.ts":"export { FocusTrap as default } from '@mui/base/FocusTrap';\nexport { FocusTrapProps as TrapFocusProps } from '@mui/base/FocusTrap';\n","node_modules/@mui/material/Unstable_Grid2/index.d.ts":"export { default } from './Grid2';\nexport * from './Grid2Props';\nexport { default as grid2Classes } from './grid2Classes';\nexport * from './grid2Classes';\n","node_modules/@mui/material/Unstable_Grid2/grid2Classes.d.ts":"import { GridClasses } from '@mui/system/Unstable_Grid';\nexport type Grid2ClassKey = keyof GridClasses;\nexport declare function getGrid2UtilityClass(slot: string): string;\ndeclare const grid2Classes: GridClasses;\nexport default grid2Classes;\n","node_modules/@mui/material/Unstable_Grid2/Grid2Props.d.ts":"import * as React from 'react';\nimport { OverrideProps } from '@mui/types';\nimport { SxProps, SystemProps } from '@mui/system';\nimport { GridBaseProps } from '@mui/system/Unstable_Grid';\nimport { Theme } from '../styles';\nexport type Grid2Slot = 'root';\nexport interface Grid2TypeMap<P = {}, D extends React.ElementType = 'div'> {\n    props: P & GridBaseProps & {\n        sx?: SxProps<Theme>;\n    } & SystemProps<Theme>;\n    defaultComponent: D;\n}\nexport type Grid2Props<D extends React.ElementType = Grid2TypeMap['defaultComponent'], P = {\n    component?: React.ElementType;\n}> = OverrideProps<Grid2TypeMap<P, D>, D>;\n","node_modules/@mui/material/Unstable_Grid2/Grid2.d.ts":"import { OverridableComponent } from '@mui/types';\nimport { Grid2TypeMap } from './Grid2Props';\ndeclare const Grid2: OverridableComponent<Grid2TypeMap<{}, \"div\">>;\nexport default Grid2;\n","node_modules/@mui/material/Tooltip/tooltipClasses.d.ts":"export interface TooltipClasses {\n    /** Styles applied to the Popper component. */\n    popper: string;\n    /** Styles applied to the Popper component unless `disableInteractive={true}`. */\n    popperInteractive: string;\n    /** Styles applied to the Popper component if `arrow={true}`. */\n    popperArrow: string;\n    /** Styles applied to the Popper component unless the tooltip is open. */\n    popperClose: string;\n    /** Styles applied to the tooltip (label wrapper) element. */\n    tooltip: string;\n    /** Styles applied to the tooltip (label wrapper) element if `arrow={true}`. */\n    tooltipArrow: string;\n    /** Styles applied to the arrow element. */\n    arrow: string;\n    /** Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */\n    touch: string;\n    /** Styles applied to the tooltip (label wrapper) element if `placement` contains \"left\". */\n    tooltipPlacementLeft: string;\n    /** Styles applied to the tooltip (label wrapper) element if `placement` contains \"right\". */\n    tooltipPlacementRight: string;\n    /** Styles applied to the tooltip (label wrapper) element if `placement` contains \"top\". */\n    tooltipPlacementTop: string;\n    /** Styles applied to the tooltip (label wrapper) element if `placement` contains \"bottom\". */\n    tooltipPlacementBottom: string;\n}\nexport type TooltipClassKey = keyof TooltipClasses;\nexport declare function getTooltipUtilityClass(slot: string): string;\ndeclare const tooltipClasses: TooltipClasses;\nexport default tooltipClasses;\n","node_modules/@mui/material/Tooltip/index.d.ts":"export { default } from './Tooltip';\nexport * from './Tooltip';\n\nexport { default as tooltipClasses } from './tooltipClasses';\nexport * from './tooltipClasses';\n","node_modules/@mui/material/Tooltip/Tooltip.d.ts":"import * as React from 'react';\nimport { MUIStyledCommonProps, SxProps } from '@mui/system';\nimport { PopperProps } from '@mui/material/Popper';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TransitionProps } from '../transitions/transition';\nimport { TooltipClasses } from './tooltipClasses';\n\nexport interface TooltipComponentsPropsOverrides {}\n\nexport interface TooltipProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * If `true`, adds an arrow to the tooltip.\n   * @default false\n   */\n  arrow?: boolean;\n  /**\n   * Tooltip reference element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TooltipClasses>;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Popper?: React.ElementType<PopperProps>;\n    Transition?: React.ElementType;\n    Tooltip?: React.ElementType;\n    Arrow?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides;\n    transition?: TransitionProps & TooltipComponentsPropsOverrides;\n    tooltip?: React.HTMLProps<HTMLDivElement> &\n      MUIStyledCommonProps &\n      TooltipComponentsPropsOverrides;\n    arrow?: React.HTMLProps<HTMLSpanElement> &\n      MUIStyledCommonProps &\n      TooltipComponentsPropsOverrides;\n  };\n  /**\n   * Set to `true` if the `title` acts as an accessible description.\n   * By default the `title` acts as an accessible label for the child.\n   * @default false\n   */\n  describeChild?: boolean;\n  /**\n   * Do not respond to focus-visible events.\n   * @default false\n   */\n  disableFocusListener?: boolean;\n  /**\n   * Do not respond to hover events.\n   * @default false\n   */\n  disableHoverListener?: boolean;\n  /**\n   * Makes a tooltip not interactive, i.e. it will close when the user\n   * hovers over the tooltip before the `leaveDelay` is expired.\n   * @default false\n   */\n  disableInteractive?: boolean;\n  /**\n   * Do not respond to long press touch events.\n   * @default false\n   */\n  disableTouchListener?: boolean;\n  /**\n   * The number of milliseconds to wait before showing the tooltip.\n   * This prop won't impact the enter touch delay (`enterTouchDelay`).\n   * @default 100\n   */\n  enterDelay?: number;\n  /**\n   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.\n   * @default 0\n   */\n  enterNextDelay?: number;\n  /**\n   * The number of milliseconds a user must touch the element before showing the tooltip.\n   * @default 700\n   */\n  enterTouchDelay?: number;\n  /**\n   * If `true`, the tooltip follow the cursor over the wrapped element.\n   * @default false\n   */\n  followCursor?: boolean;\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide this prop. It falls back to a randomly generated id.\n   */\n  id?: string;\n  /**\n   * The number of milliseconds to wait before hiding the tooltip.\n   * This prop won't impact the leave touch delay (`leaveTouchDelay`).\n   * @default 0\n   */\n  leaveDelay?: number;\n  /**\n   * The number of milliseconds after the user stops touching an element before hiding the tooltip.\n   * @default 1500\n   */\n  leaveTouchDelay?: number;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose?: (event: React.SyntheticEvent | Event) => void;\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen?: (event: React.SyntheticEvent) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * Tooltip placement.\n   * @default 'bottom'\n   */\n  placement?:\n    | 'bottom-end'\n    | 'bottom-start'\n    | 'bottom'\n    | 'left-end'\n    | 'left-start'\n    | 'left'\n    | 'right-end'\n    | 'right-start'\n    | 'right'\n    | 'top-end'\n    | 'top-start'\n    | 'top';\n  /**\n   * The component used for the popper.\n   * @default Popper\n   */\n  PopperComponent?: React.JSXElementConstructor<PopperProps>;\n  /**\n   * Props applied to the [`Popper`](/material-ui/api/popper/) element.\n   * @default {}\n   */\n  PopperProps?: Partial<PopperProps>;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    popper?: Partial<PopperProps> & TooltipComponentsPropsOverrides;\n    transition?: TransitionProps & TooltipComponentsPropsOverrides;\n    tooltip?: React.HTMLProps<HTMLDivElement> &\n      MUIStyledCommonProps<Theme> &\n      TooltipComponentsPropsOverrides;\n    arrow?: React.HTMLProps<HTMLSpanElement> &\n      MUIStyledCommonProps<Theme> &\n      TooltipComponentsPropsOverrides;\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    popper?: React.ElementType<PopperProps>;\n    transition?: React.ElementType;\n    tooltip?: React.ElementType;\n    arrow?: React.ElementType;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.\n   */\n  title: React.ReactNode;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tooltip](https://mui.com/material-ui/react-tooltip/)\n *\n * API:\n *\n * - [Tooltip API](https://mui.com/material-ui/api/tooltip/)\n */\nexport default function Tooltip(props: TooltipProps): JSX.Element;\n","node_modules/@mui/material/Toolbar/toolbarClasses.d.ts":"export interface ToolbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `disableGutters={true}`. */\n    gutters: string;\n    /** Styles applied to the root element if `variant=\"regular\"`. */\n    regular: string;\n    /** Styles applied to the root element if `variant=\"dense\"`. */\n    dense: string;\n}\nexport type ToolbarClassKey = keyof ToolbarClasses;\nexport declare function getToolbarUtilityClass(slot: string): string;\ndeclare const toolbarClasses: ToolbarClasses;\nexport default toolbarClasses;\n","node_modules/@mui/material/Toolbar/index.d.ts":"export { default } from './Toolbar';\nexport * from './Toolbar';\n\nexport { default as toolbarClasses } from './toolbarClasses';\nexport * from './toolbarClasses';\n","node_modules/@mui/material/Toolbar/Toolbar.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ToolbarClasses } from './toolbarClasses';\n\nexport interface ToolbarPropsVariantOverrides {}\n\nexport interface ToolbarOwnProps {\n  /**\n   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.\n   * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ToolbarClasses>;\n  /**\n   * If `true`, disables gutter padding.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * The variant to use.\n   * @default 'regular'\n   */\n  variant?: OverridableStringUnion<'regular' | 'dense', ToolbarPropsVariantOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ToolbarTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & ToolbarOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [App Bar](https://mui.com/material-ui/react-app-bar/)\n *\n * API:\n *\n * - [Toolbar API](https://mui.com/material-ui/api/toolbar/)\n */\ndeclare const Toolbar: OverridableComponent<ToolbarTypeMap>;\n\nexport type ToolbarProps<\n  RootComponent extends React.ElementType = ToolbarTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ToolbarTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Toolbar;\n","node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.d.ts":"export interface ToggleButtonGroupClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the children. */\n    grouped: string;\n    /** Styles applied to the children if `orientation=\"horizontal\"`. */\n    groupedHorizontal: string;\n    /** Styles applied to the children if `orientation=\"vertical\"`. */\n    groupedVertical: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n    /** Styles applied to the first button in the toggle button group. */\n    firstButton: string;\n    /** Styles applied to the last button in the toggle button group. */\n    lastButton: string;\n    /** Styles applied to buttons in the middle of the toggle button group. */\n    middleButton: string;\n}\nexport type ToggleButtonGroupClassKey = keyof ToggleButtonGroupClasses;\nexport declare function getToggleButtonGroupUtilityClass(slot: string): string;\ndeclare const toggleButtonGroupClasses: ToggleButtonGroupClasses;\nexport default toggleButtonGroupClasses;\n","node_modules/@mui/material/ToggleButtonGroup/index.d.ts":"export { default } from './ToggleButtonGroup';\nexport * from './ToggleButtonGroup';\n\nexport { default as toggleButtonGroupClasses } from './toggleButtonGroupClasses';\nexport * from './toggleButtonGroupClasses';\n","node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupContext.d.ts":"import * as React from 'react';\nimport type { ToggleButtonGroupProps } from './ToggleButtonGroup';\ninterface ToggleButtonGroupContextType {\n    className?: string;\n    onChange?: ToggleButtonGroupProps['onChange'];\n    value?: ToggleButtonGroupProps['value'];\n    size?: ToggleButtonGroupProps['size'];\n    fullWidth?: ToggleButtonGroupProps['fullWidth'];\n    color?: ToggleButtonGroupProps['color'];\n    disabled?: ToggleButtonGroupProps['disabled'];\n}\n/**\n * @ignore - internal component.\n */\ndeclare const ToggleButtonGroupContext: React.Context<ToggleButtonGroupContextType>;\nexport default ToggleButtonGroupContext;\n","node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroupButtonContext.d.ts":"import * as React from 'react';\n/**\n * @ignore - internal component.\n */\ndeclare const ToggleButtonGroupButtonContext: React.Context<string | undefined>;\nexport default ToggleButtonGroupButtonContext;\n","node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { ToggleButtonGroupClasses } from './toggleButtonGroupClasses';\n\nexport interface ToggleButtonGroupPropsSizeOverrides {}\n\nexport interface ToggleButtonGroupPropsColorOverrides {}\n\nexport interface ToggleButtonGroupProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'onChange' | 'children'> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ToggleButtonGroupClasses>;\n  /**\n   * The color of the button when it is selected.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color?: OverridableStringUnion<\n    'standard' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    ToggleButtonGroupPropsColorOverrides\n  >;\n  /**\n   * If `true`, only allow one of the child ToggleButton values to be selected.\n   * @default false\n   */\n  exclusive?: boolean;\n  /**\n   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the button group will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected buttons. When `exclusive` is true\n   * this is a single value; when false an array of selected values. If no value\n   * is selected and `exclusive` is true the value is null; when false an empty array.\n   */\n  onChange?: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', ToggleButtonGroupPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The currently selected value within the group or an array of selected\n   * values when `exclusive` is false.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   */\n  value?: any;\n}\n\n/**\n *\n * Demos:\n *\n * - [Toggle Button](https://mui.com/material-ui/react-toggle-button/)\n *\n * API:\n *\n * - [ToggleButtonGroup API](https://mui.com/material-ui/api/toggle-button-group/)\n */\nexport default function ToggleButtonGroup(props: ToggleButtonGroupProps): JSX.Element;\n","node_modules/@mui/material/TextareaAutosize/index.d.ts":"export { TextareaAutosize as default } from '@mui/base/TextareaAutosize';\nexport * from '@mui/base/TextareaAutosize';\n","node_modules/@mui/material/Typography/typographyClasses.d.ts":"export interface TypographyClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"body2\"`. */\n    body2: string;\n    /** Styles applied to the root element if `variant=\"body1\"`. */\n    body1: string;\n    /** Styles applied to the root element if `variant=\"caption\"`. */\n    caption: string;\n    /** Styles applied to the root element if `variant=\"button\"`. */\n    button: string;\n    /** Styles applied to the root element if `variant=\"h1\"`. */\n    h1: string;\n    /** Styles applied to the root element if `variant=\"h2\"`. */\n    h2: string;\n    /** Styles applied to the root element if `variant=\"h3\"`. */\n    h3: string;\n    /** Styles applied to the root element if `variant=\"h4\"`. */\n    h4: string;\n    /** Styles applied to the root element if `variant=\"h5\"`. */\n    h5: string;\n    /** Styles applied to the root element if `variant=\"h6\"`. */\n    h6: string;\n    /** Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: string;\n    /** Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: string;\n    /** Styles applied to the root element if `variant=\"overline\"`. */\n    overline: string;\n    /** Styles applied to the root element if `variant=\"inherit\"`. */\n    inherit: string;\n    /** Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: string;\n    /** Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: string;\n    /** Styles applied to the root element if `align=\"right\"`. */\n    alignRight: string;\n    /** Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: string;\n    /** Styles applied to the root element if `nowrap={true}`. */\n    noWrap: string;\n    /** Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: string;\n    /** Styles applied to the root element if `paragraph={true}`. */\n    paragraph: string;\n}\nexport type TypographyClassKey = keyof TypographyClasses;\nexport declare function getTypographyUtilityClass(slot: string): string;\ndeclare const typographyClasses: TypographyClasses;\nexport default typographyClasses;\n","node_modules/@mui/material/Typography/index.d.ts":"export { default } from './Typography';\nexport * from './Typography';\n\nexport { default as typographyClasses } from './typographyClasses';\nexport * from './typographyClasses';\n","node_modules/@mui/material/Typography/Typography.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps, SystemProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { Variant } from '../styles/createTypography';\nimport { TypographyClasses } from './typographyClasses';\n\nexport interface TypographyPropsVariantOverrides {}\n\nexport interface TypographyOwnProps extends SystemProps<Theme> {\n  /**\n   * Set the text-align on the component.\n   * @default 'inherit'\n   */\n  align?: 'inherit' | 'left' | 'center' | 'right' | 'justify';\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TypographyClasses>;\n  /**\n   * If `true`, the text will have a bottom margin.\n   * @default false\n   */\n  gutterBottom?: boolean;\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   * @default false\n   */\n  noWrap?: boolean;\n  /**\n   * If `true`, the element will be a paragraph element.\n   * @default false\n   */\n  paragraph?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Applies the theme typography styles.\n   * @default 'body1'\n   */\n  variant?: OverridableStringUnion<Variant | 'inherit', TypographyPropsVariantOverrides>;\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   * @default {\n   *   h1: 'h1',\n   *   h2: 'h2',\n   *   h3: 'h3',\n   *   h4: 'h4',\n   *   h5: 'h5',\n   *   h6: 'h6',\n   *   subtitle1: 'h6',\n   *   subtitle2: 'h6',\n   *   body1: 'p',\n   *   body2: 'p',\n   *   inherit: 'p',\n   * }\n   */\n  variantMapping?: Partial<\n    Record<OverridableStringUnion<Variant | 'inherit', TypographyPropsVariantOverrides>, string>\n  >;\n}\n\nexport interface TypographyTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'span',\n> {\n  props: AdditionalProps & TypographyOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n * - [Typography](https://mui.com/material-ui/react-typography/)\n *\n * API:\n *\n * - [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const Typography: OverridableComponent<TypographyTypeMap>;\n\nexport type TypographyProps<\n  RootComponent extends React.ElementType = TypographyTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TypographyTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Typography;\n","node_modules/@mui/material/Tabs/tabsClasses.d.ts":"export interface TabsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the flex container element. */\n    flexContainer: string;\n    /** Styles applied to the flex container element if `orientation=\"vertical\"`. */\n    flexContainerVertical: string;\n    /** Styles applied to the flex container element if `centered={true}` & `!variant=\"scrollable\"`. */\n    centered: string;\n    /** Styles applied to the tablist element. */\n    scroller: string;\n    /** Styles applied to the tablist element if `!variant=\"scrollable\"`\b\b\b. */\n    fixed: string;\n    /** Styles applied to the tablist element if `variant=\"scrollable\"` and `orientation=\"horizontal\"`. */\n    scrollableX: string;\n    /** Styles applied to the tablist element if `variant=\"scrollable\"` and `orientation=\"vertical\"`. */\n    scrollableY: string;\n    /** Styles applied to the tablist element if `variant=\"scrollable\"` and `visibleScrollbar={false}`. */\n    hideScrollbar: string;\n    /** Styles applied to the ScrollButtonComponent component. */\n    scrollButtons: string;\n    /** Styles applied to the ScrollButtonComponent component if `allowScrollButtonsMobile={true}`. */\n    scrollButtonsHideMobile: string;\n    /** Styles applied to the TabIndicator component. */\n    indicator: string;\n}\nexport type TabsClassKey = keyof TabsClasses;\nexport declare function getTabsUtilityClass(slot: string): string;\ndeclare const tabsClasses: TabsClasses;\nexport default tabsClasses;\n","node_modules/@mui/material/Tabs/index.d.ts":"export { default } from './Tabs';\nexport * from './Tabs';\n\nexport { default as tabsClasses } from './tabsClasses';\nexport * from './tabsClasses';\n","node_modules/@mui/material/Tabs/Tabs.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { TabScrollButtonProps } from '../TabScrollButton';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TabsClasses } from './tabsClasses';\nimport SvgIcon from '../SvgIcon';\n\nexport interface TabsPropsIndicatorColorOverrides {}\n\nexport interface TabsStartScrollButtonIconSlotPropsOverrides {}\nexport interface TabsEndScrollButtonIconSlotPropsOverrides {}\n\nexport interface TabsOwnerState extends TabsProps {\n  vertical: boolean;\n  fixed: boolean;\n  hideScrollbar: boolean;\n  scrollableX: boolean;\n  scrollableY: boolean;\n  centered: boolean;\n  scrollButtonsHideMobile: boolean;\n}\n\nexport interface TabsOwnProps {\n  /**\n   * Callback fired when the component mounts.\n   * This is useful when you want to trigger an action programmatically.\n   * It supports two actions: `updateIndicator()` and `updateScrollButtons()`\n   *\n   * @param {object} actions This object contains all possible actions\n   * that can be triggered programmatically.\n   */\n  action?: React.Ref<TabsActions>;\n  /**\n   * If `true`, the scroll buttons aren't forced hidden on mobile.\n   * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.\n   * @default false\n   */\n  allowScrollButtonsMobile?: boolean;\n  /**\n   * The label for the Tabs as a string.\n   */\n  'aria-label'?: string;\n  /**\n   * An id or list of ids separated by a space that label the Tabs.\n   */\n  'aria-labelledby'?: string;\n  /**\n   * If `true`, the tabs are centered.\n   * This prop is intended for large views.\n   * @default false\n   */\n  centered?: boolean;\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TabsClasses>;\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots?: {\n    StartScrollButtonIcon?: React.ElementType;\n    EndScrollButtonIcon?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   * @default {}\n   */\n  slotProps?: {\n    startScrollButtonIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      TabsStartScrollButtonIconSlotPropsOverrides,\n      TabsOwnerState\n    >;\n    endScrollButtonIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      TabsEndScrollButtonIconSlotPropsOverrides,\n      TabsOwnerState\n    >;\n  };\n  /**\n   * Determines the color of the indicator.\n   * @default 'primary'\n   */\n  indicatorColor?: OverridableStringUnion<\n    'secondary' | 'primary',\n    TabsPropsIndicatorColorOverrides\n  >;\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {any} value We default to the index of the child (number)\n   */\n  onChange?: (event: React.SyntheticEvent, value: any) => void;\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The component used to render the scroll buttons.\n   * @default TabScrollButton\n   */\n  ScrollButtonComponent?: React.ElementType;\n  /**\n   * Determine behavior of scroll buttons when tabs are set to scroll:\n   *\n   * - `auto` will only present them when not all the items are visible.\n   * - `true` will always present them.\n   * - `false` will never present them.\n   *\n   * By default the scroll buttons are hidden on mobile.\n   * This behavior can be disabled with `allowScrollButtonsMobile`.\n   * @default 'auto'\n   */\n  scrollButtons?: 'auto' | true | false;\n  /**\n   * If `true` the selected tab changes on focus. Otherwise it only\n   * changes on activation.\n   */\n  selectionFollowsFocus?: boolean;\n  /**\n   * Props applied to the tab indicator element.\n   * @default  {}\n   */\n  TabIndicatorProps?: React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n  };\n  /**\n   * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.\n   * @default {}\n   */\n  TabScrollButtonProps?: Partial<TabScrollButtonProps>;\n  /**\n   * Determines the color of the `Tab`.\n   * @default 'primary'\n   */\n  textColor?: 'secondary' | 'primary' | 'inherit';\n  /**\n   * The value of the currently selected `Tab`.\n   * If you don't want any selected `Tab`, you can set this prop to `false`.\n   */\n  value?: any;\n  /**\n   *  Determines additional display behavior of the tabs:\n   *\n   *  - `scrollable` will invoke scrolling properties and allow for horizontally\n   *  scrolling (or swiping) of the tab bar.\n   *  - `fullWidth` will make the tabs grow to use all the available space,\n   *  which should be used for small views, like on mobile.\n   *  - `standard` will render the default state.\n   * @default 'standard'\n   */\n  variant?: 'standard' | 'scrollable' | 'fullWidth';\n  /**\n   * If `true`, the scrollbar is visible. It can be useful when displaying\n   * a long vertical list of tabs.\n   * @default false\n   */\n  visibleScrollbar?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TabsTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & TabsOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/material-ui/react-tabs/)\n *\n * API:\n *\n * - [Tabs API](https://mui.com/material-ui/api/tabs/)\n */\ndeclare const Tabs: OverridableComponent<TabsTypeMap>;\n\nexport interface TabsActions {\n  updateIndicator(): void;\n  updateScrollButtons(): void;\n}\n\nexport type TabsProps<\n  RootComponent extends React.ElementType = TabsTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TabsTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Tabs;\n","node_modules/@mui/material/TextField/textFieldClasses.d.ts":"export interface TextFieldClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type TextFieldClassKey = keyof TextFieldClasses;\nexport declare function getTextFieldUtilityClass(slot: string): string;\ndeclare const textFieldClasses: TextFieldClasses;\nexport default textFieldClasses;\n","node_modules/@mui/material/TextField/index.d.ts":"export { default } from './TextField';\nexport * from './TextField';\n\nexport { default as textFieldClasses } from './textFieldClasses';\nexport * from './textFieldClasses';\n","node_modules/@mui/material/TextField/TextField.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { FormControlProps } from '../FormControl';\nimport { FormHelperTextProps } from '../FormHelperText';\nimport { InputBaseProps } from '../InputBase';\nimport { InputProps as StandardInputProps } from '../Input';\nimport { FilledInputProps } from '../FilledInput';\nimport { OutlinedInputProps } from '../OutlinedInput';\nimport { InputLabelProps } from '../InputLabel';\nimport { SelectProps } from '../Select';\nimport { Theme } from '../styles';\nimport { TextFieldClasses } from './textFieldClasses';\n\nexport interface TextFieldPropsColorOverrides {}\nexport interface TextFieldPropsSizeOverrides {}\n\nexport interface BaseTextFieldProps\n  extends StandardProps<\n    FormControlProps,\n    // event handlers are declared on derived interfaces\n    'onChange' | 'onBlur' | 'onFocus' | 'defaultValue'\n  > {\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete?: string;\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   * @default false\n   */\n  autoFocus?: boolean;\n  /**\n   * @ignore\n   */\n  children?: FormControlProps['children'];\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TextFieldClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    TextFieldPropsColorOverrides\n  >;\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: unknown;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.\n   */\n  FormHelperTextProps?: Partial<FormHelperTextProps>;\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The helper text content.\n   */\n  helperText?: React.ReactNode;\n  /**\n   * The id of the `input` element.\n   * Use this prop to make `label` and `helperText` accessible for screen readers.\n   */\n  id?: string;\n  /**\n   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.\n   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.\n   */\n  InputLabelProps?: Partial<InputLabelProps>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: InputBaseProps['inputProps'];\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * The label content.\n   */\n  label?: React.ReactNode;\n  /**\n   * If `true`, a `textarea` element is rendered instead of an input.\n   * @default false\n   */\n  multiline?: boolean;\n  /**\n   * Name attribute of the `input` element.\n   */\n  name?: string;\n  onBlur?: InputBaseProps['onBlur'];\n  onFocus?: StandardInputProps['onFocus'];\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder?: string;\n  /**\n   * If `true`, the label is displayed as required and the `input` element is required.\n   * @default false\n   */\n  required?: boolean;\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows?: string | number;\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows?: string | number;\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows?: string | number;\n  /**\n   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.\n   * If this option is set you must pass the options of the select as children.\n   * @default false\n   */\n  select?: boolean;\n  /**\n   * Props applied to the [`Select`](/material-ui/api/select/) element.\n   */\n  SelectProps?: Partial<SelectProps>;\n  /**\n   * The size of the component.\n   */\n  size?: OverridableStringUnion<'small' | 'medium', TextFieldPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   */\n  type?: React.InputHTMLAttributes<unknown>['type'];\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value?: unknown;\n}\n\nexport interface StandardTextFieldProps extends BaseTextFieldProps {\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: StandardInputProps['onChange'];\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: 'standard';\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps?: Partial<StandardInputProps>;\n}\n\nexport interface FilledTextFieldProps extends BaseTextFieldProps {\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: FilledInputProps['onChange'];\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: 'filled';\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps?: Partial<FilledInputProps>;\n}\n\nexport interface OutlinedTextFieldProps extends BaseTextFieldProps {\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: OutlinedInputProps['onChange'];\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: 'outlined';\n  /**\n   * Props applied to the Input element.\n   * It will be a [`FilledInput`](/material-ui/api/filled-input/),\n   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)\n   * component depending on the `variant` prop value.\n   */\n  InputProps?: Partial<OutlinedInputProps>;\n}\n\nexport type TextFieldVariants = 'outlined' | 'standard' | 'filled';\n\nexport type TextFieldProps<Variant extends TextFieldVariants = TextFieldVariants> =\n  Variant extends 'filled'\n    ? FilledTextFieldProps\n    : Variant extends 'standard'\n      ? StandardTextFieldProps\n      : OutlinedTextFieldProps;\n\n/**\n * The `TextField` is a convenience wrapper for the most common cases (80%).\n * It cannot be all things to all people, otherwise the API would grow out of control.\n *\n * ## Advanced Configuration\n *\n * It's important to understand that the text field is a simple abstraction\n * on top of the following components:\n *\n * *   [FormControl](https://mui.com/material-ui/api/form-control/)\n * *   [InputLabel](https://mui.com/material-ui/api/input-label/)\n * *   [FilledInput](https://mui.com/material-ui/api/filled-input/)\n * *   [OutlinedInput](https://mui.com/material-ui/api/outlined-input/)\n * *   [Input](https://mui.com/material-ui/api/input/)\n * *   [FormHelperText](https://mui.com/material-ui/api/form-helper-text/)\n *\n * If you wish to alter the props applied to the `input` element, you can do so as follows:\n *\n * ```jsx\n * const inputProps = {\n *   step: 300,\n * };\n *\n * return <TextField id=\"time\" type=\"time\" inputProps={inputProps} />;\n * ```\n *\n * For advanced cases, please look at the source of TextField by clicking on the\n * \"Edit this page\" button above. Consider either:\n *\n * *   using the upper case props for passing values directly to the components\n * *   using the underlying components directly as shown in the demos\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [TextField API](https://mui.com/material-ui/api/text-field/)\n * - inherits [FormControl API](https://mui.com/material-ui/api/form-control/)\n */\nexport default function TextField<Variant extends TextFieldVariants>(\n  props: {\n    /**\n     * The variant to use.\n     * @default 'outlined'\n     */\n    variant?: Variant;\n  } & Omit<TextFieldProps, 'variant'>,\n): JSX.Element;\n","node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.d.ts":"export interface TableSortLabelClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `active={true}`. */\n    active: string;\n    /** Styles applied to the icon component. */\n    icon: string;\n    /** Styles applied to the icon component if `direction=\"desc\"`. */\n    iconDirectionDesc: string;\n    /** Styles applied to the icon component if `direction=\"asc\"`. */\n    iconDirectionAsc: string;\n}\nexport type TableSortLabelClassKey = keyof TableSortLabelClasses;\nexport declare function getTableSortLabelUtilityClass(slot: string): string;\ndeclare const tableSortLabelClasses: TableSortLabelClasses;\nexport default tableSortLabelClasses;\n","node_modules/@mui/material/TableSortLabel/index.d.ts":"export { default } from './TableSortLabel';\nexport * from './TableSortLabel';\n\nexport { default as tableSortLabelClasses } from './tableSortLabelClasses';\nexport * from './tableSortLabelClasses';\n","node_modules/@mui/material/TableSortLabel/TableSortLabel.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { TableSortLabelClasses } from './tableSortLabelClasses';\n\nexport interface TableSortLabelOwnProps {\n  /**\n   * If `true`, the label will have the active styling (should be true for the sorted column).\n   * @default false\n   */\n  active?: boolean;\n  /**\n   * Label contents, the arrow will be appended automatically.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableSortLabelClasses>;\n  /**\n   * The current sort direction.\n   * @default 'asc'\n   */\n  direction?: 'asc' | 'desc';\n  /**\n   * Hide sort icon when active is false.\n   * @default false\n   */\n  hideSortIcon?: boolean;\n  /**\n   * Sort icon to use.\n   * @default ArrowDownwardIcon\n   */\n  IconComponent?: React.JSXElementConstructor<{\n    className: string;\n  }>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type TableSortLabelTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'span',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & TableSortLabelOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n * A button based label for placing inside `TableCell` for column sorting.\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableSortLabel API](https://mui.com/material-ui/api/table-sort-label/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const TableSortLabel: ExtendButtonBase<TableSortLabelTypeMap>;\n\nexport type TableSortLabelProps<\n  RootComponent extends React.ElementType = TableSortLabelTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableSortLabelTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TableSortLabel;\n","node_modules/@mui/material/ToggleButton/toggleButtonClasses.d.ts":"export interface ToggleButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `selected={true}`. */\n    selected: string;\n    /** State class applied to the root element if `color=\"standard\"`. */\n    standard: string;\n    /** State class applied to the root element if `color=\"primary\"`. */\n    primary: string;\n    /** State class applied to the root element if `color=\"secondary\"`. */\n    secondary: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n}\nexport type ToggleButtonClassKey = keyof ToggleButtonClasses;\nexport declare function getToggleButtonUtilityClass(slot: string): string;\ndeclare const toggleButtonClasses: ToggleButtonClasses;\nexport default toggleButtonClasses;\n","node_modules/@mui/material/ToggleButton/index.d.ts":"export { default } from './ToggleButton';\nexport * from './ToggleButton';\n\nexport { default as toggleButtonClasses } from './toggleButtonClasses';\nexport * from './toggleButtonClasses';\n","node_modules/@mui/material/ToggleButton/ToggleButton.d.ts":"import { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport * as React from 'react';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { ToggleButtonClasses } from './toggleButtonClasses';\n\nexport interface ToggleButtonPropsSizeOverrides {}\n\nexport interface ToggleButtonPropsColorOverrides {}\n\nexport interface ToggleButtonOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ToggleButtonClasses>;\n  /**\n   * The color of the button when it is in an active state.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color?: OverridableStringUnion<\n    'standard' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    ToggleButtonPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * Callback fired when the state changes.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onChange?: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n  /**\n   * Callback fired when the button is clicked.\n   *\n   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.\n   * @param {any} value of the selected button.\n   */\n  onClick?: (event: React.MouseEvent<HTMLElement>, value: any) => void;\n  /**\n   * If `true`, the button is rendered in an active state.\n   */\n  selected?: boolean;\n  /**\n   * The size of the component.\n   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', ToggleButtonPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: NonNullable<unknown>;\n}\n\nexport type ToggleButtonTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & ToggleButtonOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Toggle Button](https://mui.com/material-ui/react-toggle-button/)\n *\n * API:\n *\n * - [ToggleButton API](https://mui.com/material-ui/api/toggle-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const ToggleButton: ExtendButtonBase<ToggleButtonTypeMap>;\n\nexport type ToggleButtonProps<\n  RootComponent extends React.ElementType = ToggleButtonTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ToggleButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ToggleButton;\n","node_modules/@mui/material/TableRow/tableRowClasses.d.ts":"export interface TableRowClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `selected={true}`. */\n    selected: string;\n    /** State class applied to the root element if `hover={true}`. */\n    hover: string;\n    /** Styles applied to the root element if table variant=\"head\". */\n    head: string;\n    /** Styles applied to the root element if table variant=\"footer\". */\n    footer: string;\n}\nexport type TableRowClassKey = keyof TableRowClasses;\nexport declare function getTableRowUtilityClass(slot: string): string;\ndeclare const tableRowClasses: TableRowClasses;\nexport default tableRowClasses;\n","node_modules/@mui/material/TableRow/index.d.ts":"export { default } from './TableRow';\nexport * from './TableRow';\n\nexport { default as tableRowClasses } from './tableRowClasses';\nexport * from './tableRowClasses';\n","node_modules/@mui/material/TableRow/TableRow.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableRowClasses } from './tableRowClasses';\n\nexport interface TableRowOwnProps {\n  /**\n   * Should be valid `<tr>` children such as `TableCell`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableRowClasses>;\n  /**\n   * If `true`, the table row will shade on hover.\n   * @default false\n   */\n  hover?: boolean;\n  /**\n   * If `true`, the table row will have the selected shading.\n   * @default false\n   */\n  selected?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TableRowTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'tr',\n> {\n  props: AdditionalProps & TableRowOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableRow API](https://mui.com/material-ui/api/table-row/)\n */\ndeclare const TableRow: OverridableComponent<TableRowTypeMap>;\n\nexport type TableRowProps<\n  RootComponent extends React.ElementType = TableRowTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableRowTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TableRow;\n","node_modules/@mui/material/TablePagination/tablePaginationClasses.d.ts":"export interface TablePaginationClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the Toolbar component. */\n    toolbar: string;\n    /** Styles applied to the spacer element. */\n    spacer: string;\n    /** Styles applied to the select label Typography element. */\n    selectLabel: string;\n    /** Styles applied to the Select component `root` element. */\n    selectRoot: string;\n    /** Styles applied to the Select component `select` class. */\n    select: string;\n    /** Styles applied to the Select component `icon` class. */\n    selectIcon: string;\n    /** Styles applied to the Select component `root` element. */\n    input: string;\n    /** Styles applied to the MenuItem component. */\n    menuItem: string;\n    /** Styles applied to the displayed rows Typography element. */\n    displayedRows: string;\n    /** Styles applied to the internal `TablePaginationActions` component. */\n    actions: string;\n}\nexport type TablePaginationClassKey = keyof TablePaginationClasses;\nexport declare function getTablePaginationUtilityClass(slot: string): string;\ndeclare const tablePaginationClasses: TablePaginationClasses;\nexport default tablePaginationClasses;\n","node_modules/@mui/material/TablePagination/index.d.ts":"export { default } from './TablePagination';\nexport * from './TablePagination';\n\nexport { default as tablePaginationClasses } from './tablePaginationClasses';\nexport * from './tablePaginationClasses';\n","node_modules/@mui/material/TablePagination/TablePaginationActions.d.ts":"import * as React from 'react';\nimport { IconButtonProps } from '../IconButton/IconButton';\nimport { SvgIconProps } from '../SvgIcon';\n\nexport interface TablePaginationActionsProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * This prop is an alias for `slotProps.previousButton` and will be overriden by it if both are used.\n   * @deprecated Use `slotProps.previousButton` instead.\n   */\n  backIconButtonProps?: Partial<IconButtonProps>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: {};\n  count: number;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n   * @returns {string}\n   */\n  getItemAriaLabel: (type: 'first' | 'last' | 'next' | 'previous') => string;\n  /**\n   * This prop is an alias for `slotProps.nextButton` and will be overriden by it if both are used.\n   * @deprecated Use `slotProps.nextButton` instead.\n   */\n  nextIconButtonProps?: Partial<IconButtonProps>;\n  onPageChange: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;\n  page: number;\n  rowsPerPage: number;\n  showFirstButton: boolean;\n  showLastButton: boolean;\n  slotProps?: {\n    firstButton?: Partial<IconButtonProps>;\n    lastButton?: Partial<IconButtonProps>;\n    nextButton?: Partial<IconButtonProps>;\n    previousButton?: Partial<IconButtonProps>;\n    firstButtonIcon?: Partial<SvgIconProps>;\n    lastButtonIcon?: Partial<SvgIconProps>;\n    nextButtonIcon?: Partial<SvgIconProps>;\n    previousButtonIcon?: Partial<SvgIconProps>;\n  };\n  slots?: TablePaginationActionsSlots;\n}\n\nexport interface TablePaginationActionsSlots {\n  /**\n   * The component that renders the first button.\n   * @default IconButton\n   */\n  firstButton?: React.ElementType;\n  /**\n   * The component that renders the last button.\n   * @default IconButton\n   */\n  lastButton?: React.ElementType;\n  /**\n   * The component that renders the next button.\n   * @default IconButton\n   */\n  nextButton?: React.ElementType;\n  /**\n   * The component that renders the previous button.\n   * @default IconButton\n   */\n  previousButton?: React.ElementType;\n  /**\n   * The component that renders the first button icon.\n   * @default FirstPageIcon\n   */\n  firstButtonIcon?: React.ElementType;\n  /**\n   * The component that renders the last button icon.\n   * @default LastPageIcon\n   */\n  lastButtonIcon?: React.ElementType;\n  /**\n   * The component that renders the next button icon.\n   * @default KeyboardArrowRight\n   */\n  nextButtonIcon?: React.ElementType;\n  /**\n   * The component that renders the previous button icon.\n   * @default KeyboardArrowLeft\n   */\n  previousButtonIcon?: React.ElementType;\n}\n\ndeclare const TablePaginationActions: React.JSXElementConstructor<TablePaginationActionsProps>;\n\nexport default TablePaginationActions;\n","node_modules/@mui/material/TablePagination/TablePagination.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TablePaginationActionsProps } from './TablePaginationActions';\nimport { TableCellProps } from '../TableCell';\nimport { IconButtonProps } from '../IconButton';\nimport { SelectProps } from '../Select';\nimport { TablePaginationClasses } from './tablePaginationClasses';\n\nexport interface LabelDisplayedRowsArgs {\n  from: number;\n  to: number;\n  count: number;\n  page: number;\n}\n\n/**\n * This type is kept for compatibility. Use `TablePaginationOwnProps` instead.\n */\nexport type TablePaginationBaseProps = Omit<TableCellProps, 'classes' | 'component' | 'children'>;\n\nexport interface TablePaginationOwnProps extends TablePaginationBaseProps {\n  /**\n   * The component used for displaying the actions.\n   * Either a string to use a HTML element or a component.\n   * @default TablePaginationActions\n   */\n  ActionsComponent?: React.ElementType<TablePaginationActionsProps>;\n  /**\n   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.\n   *\n   * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.\n   * @deprecated Use `slotProps.actions.previousButton` instead.\n   */\n  backIconButtonProps?: Partial<IconButtonProps>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TablePaginationClasses>;\n  /**\n   * The total number of rows.\n   *\n   * To enable server side pagination for an unknown number of items, provide -1.\n   */\n  count: number;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n   * @returns {string}\n   * @default function defaultGetAriaLabel(type) {\n   *   return `Go to ${type} page`;\n   * }\n   */\n  getItemAriaLabel?: (type: 'first' | 'last' | 'next' | 'previous') => string;\n  /**\n   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n   * object.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default function defaultLabelDisplayedRows({ from, to, count }) {\n   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n   * }\n   */\n  labelDisplayedRows?: (paginationInfo: LabelDisplayedRowsArgs) => React.ReactNode;\n  /**\n   * Customize the rows per page label.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Rows per page:'\n   */\n  labelRowsPerPage?: React.ReactNode;\n  /**\n   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.\n   *\n   * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.\n   * @deprecated Use `slotProps.actions.nextButton` instead.\n   */\n  nextIconButtonProps?: Partial<IconButtonProps>;\n  /**\n   * Callback fired when the page is changed.\n   *\n   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\n   * @param {number} page The page selected.\n   */\n  onPageChange: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;\n  /**\n   * Callback fired when the number of rows per page is changed.\n   *\n   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n   */\n  onRowsPerPageChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  /**\n   * The zero-based index of the current page.\n   */\n  page: number;\n  /**\n   * The number of rows per page.\n   *\n   * Set -1 to display all the rows.\n   */\n  rowsPerPage: number;\n  /**\n   * Customizes the options of the rows per page select field. If less than two options are\n   * available, no select field will be displayed.\n   * Use -1 for the value with a custom label to show all the rows.\n   * @default [10, 25, 50, 100]\n   */\n  rowsPerPageOptions?: ReadonlyArray<number | { value: number; label: string }>;\n  /**\n   * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.\n   *\n   * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.\n   * @deprecated Use `slotProps.select` instead.\n   *\n   * @default {}\n   */\n  SelectProps?: Partial<SelectProps>;\n  /**\n   * If `true`, show the first-page button.\n   * @default false\n   */\n  showFirstButton?: boolean;\n  /**\n   * If `true`, show the last-page button.\n   * @default false\n   */\n  showLastButton?: boolean;\n  /**\n   * The props used for each slot inside the TablePagination.\n   * @default {}\n   */\n  slotProps?: {\n    actions?: TablePaginationActionsProps['slotProps'];\n    select?: Partial<SelectProps>;\n  };\n  /**\n   * The components used for each slot inside the TablePagination.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots?: {\n    actions?: TablePaginationActionsProps['slots'];\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TablePaginationTypeMap<AdditionalProps, RootComponent extends React.ElementType> {\n  props: AdditionalProps & TablePaginationOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n * A `TableCell` based component for placing inside `TableFooter` for pagination.\n *\n * Demos:\n *\n * - [Pagination](https://mui.com/material-ui/react-pagination/)\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TablePagination API](https://mui.com/material-ui/api/table-pagination/)\n * - inherits [TableCell API](https://mui.com/material-ui/api/table-cell/)\n */\ndeclare const TablePagination: OverridableComponent<\n  TablePaginationTypeMap<{}, React.JSXElementConstructor<TablePaginationBaseProps>>\n>;\n\nexport type TablePaginationProps<\n  RootComponent extends React.ElementType = React.JSXElementConstructor<TablePaginationBaseProps>,\n  AdditionalProps = {},\n> = OverrideProps<TablePaginationTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TablePagination;\n","node_modules/@mui/material/TableHead/tableHeadClasses.d.ts":"export interface TableHeadClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type TableHeadClassKey = keyof TableHeadClasses;\nexport declare function getTableHeadUtilityClass(slot: string): string;\ndeclare const tableHeadClasses: TableHeadClasses;\nexport default tableHeadClasses;\n","node_modules/@mui/material/TableHead/index.d.ts":"export { default } from './TableHead';\nexport * from './TableHead';\n\nexport { default as tableHeadClasses } from './tableHeadClasses';\nexport * from './tableHeadClasses';\n","node_modules/@mui/material/TableHead/TableHead.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableHeadClasses } from './tableHeadClasses';\n\nexport interface TableHeadOwnProps {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableHeadClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TableHeadTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'thead',\n> {\n  props: AdditionalProps & TableHeadOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableHead API](https://mui.com/material-ui/api/table-head/)\n */\ndeclare const TableHead: OverridableComponent<TableHeadTypeMap>;\n\nexport type TableHeadProps<\n  RootComponent extends React.ElementType = TableHeadTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableHeadTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TableHead;\n","node_modules/@mui/material/TableFooter/tableFooterClasses.d.ts":"export interface TableFooterClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type TableFooterClassKey = keyof TableFooterClasses;\nexport declare function getTableFooterUtilityClass(slot: string): string;\ndeclare const tableFooterClasses: TableFooterClasses;\nexport default tableFooterClasses;\n","node_modules/@mui/material/TableFooter/index.d.ts":"export { default } from './TableFooter';\nexport * from './TableFooter';\n\nexport { default as tableFooterClasses } from './tableFooterClasses';\nexport * from './tableFooterClasses';\n","node_modules/@mui/material/TableFooter/TableFooter.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableFooterClasses } from './tableFooterClasses';\n\nexport interface TableFooterOwnProps {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableFooterClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TableFooterTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'tfoot',\n> {\n  props: AdditionalProps & TableFooterOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableFooter API](https://mui.com/material-ui/api/table-footer/)\n */\ndeclare const TableFooter: OverridableComponent<TableFooterTypeMap>;\n\nexport type TableFooterProps<\n  RootComponent extends React.ElementType = TableFooterTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableFooterTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TableFooter;\n","node_modules/@mui/material/TableCell/tableCellClasses.d.ts":"export interface TableCellClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"head\"` or `context.table.head`. */\n    head: string;\n    /** Styles applied to the root element if `variant=\"body\"` or `context.table.body`. */\n    body: string;\n    /** Styles applied to the root element if `variant=\"footer\"` or `context.table.footer`. */\n    footer: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** Styles applied to the root element if `padding=\"checkbox\"`. */\n    paddingCheckbox: string;\n    /** Styles applied to the root element if `padding=\"none\"`. */\n    paddingNone: string;\n    /** Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: string;\n    /** Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: string;\n    /** Styles applied to the root element if `align=\"right\"`. */\n    alignRight: string;\n    /** Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: string;\n    /** Styles applied to the root element if `context.table.stickyHeader={true}`. */\n    stickyHeader: string;\n}\nexport type TableCellClassKey = keyof TableCellClasses;\nexport declare function getTableCellUtilityClass(slot: string): string;\ndeclare const tableCellClasses: TableCellClasses;\nexport default tableCellClasses;\n","node_modules/@mui/material/TableCell/index.d.ts":"export { default } from './TableCell';\nexport * from './TableCell';\n\nexport { default as tableCellClasses } from './tableCellClasses';\nexport * from './tableCellClasses';\n","node_modules/@mui/material/TableCell/TableCell.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TableCellClasses } from './tableCellClasses';\n\nexport interface TableCellPropsSizeOverrides {}\nexport interface TableCellPropsVariantOverrides {}\n\n/**\n * `<TableCell>` will be rendered as an `<th>`or `<td>` depending\n * on the context it is used in. Where context literally is the\n * React `context`.\n *\n * Since it is not decided via prop, we have create loose typings\n * here.\n */\nexport interface TableCellProps extends StandardProps<TableCellBaseProps, 'align'> {\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   * @default 'inherit'\n   */\n  align?: 'inherit' | 'left' | 'center' | 'right' | 'justify';\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableCellClasses>;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType<TableCellBaseProps>;\n  /**\n   * Sets the padding applied to the cell.\n   * The prop defaults to the value (`'default'`) inherited from the parent Table component.\n   */\n  padding?: 'normal' | 'checkbox' | 'none';\n  /**\n   * Set scope attribute.\n   */\n  scope?: TableCellBaseProps['scope'];\n  /**\n   * Specify the size of the cell.\n   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.\n   */\n  size?: OverridableStringUnion<'small' | 'medium', TableCellPropsSizeOverrides>;\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection?: SortDirection;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Specify the cell type.\n   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.\n   */\n  variant?: OverridableStringUnion<'head' | 'body' | 'footer', TableCellPropsVariantOverrides>;\n}\n\nexport type TableCellBaseProps = React.ThHTMLAttributes<HTMLTableCellElement> &\n  React.TdHTMLAttributes<HTMLTableCellElement>;\n\nexport type SortDirection = 'asc' | 'desc' | false;\n\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableCell API](https://mui.com/material-ui/api/table-cell/)\n */\nexport default function TableCell(props: TableCellProps): JSX.Element;\n","node_modules/@mui/material/TableContainer/tableContainerClasses.d.ts":"export interface TableContainerClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type TableContainerClassKey = keyof TableContainerClasses;\nexport declare function getTableContainerUtilityClass(slot: string): string;\ndeclare const tableContainerClasses: TableContainerClasses;\nexport default tableContainerClasses;\n","node_modules/@mui/material/TableContainer/index.d.ts":"export { default } from './TableContainer';\nexport * from './TableContainer';\n\nexport { default as tableContainerClasses } from './tableContainerClasses';\nexport * from './tableContainerClasses';\n","node_modules/@mui/material/TableContainer/TableContainer.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableContainerClasses } from './tableContainerClasses';\n\nexport interface TableContainerOwnProps {\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableContainerClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TableContainerTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & TableContainerOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableContainer API](https://mui.com/material-ui/api/table-container/)\n */\ndeclare const TableContainer: OverridableComponent<TableContainerTypeMap>;\n\nexport type TableContainerProps<\n  RootComponent extends React.ElementType = TableContainerTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableContainerTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TableContainer;\n","node_modules/@mui/material/TableBody/tableBodyClasses.d.ts":"export interface TableBodyClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type TableBodyClassKey = keyof TableBodyClasses;\nexport declare function getTableBodyUtilityClass(slot: string): string;\ndeclare const tableBodyClasses: TableBodyClasses;\nexport default tableBodyClasses;\n","node_modules/@mui/material/TableBody/index.d.ts":"export { default } from './TableBody';\nexport * from './TableBody';\n\nexport { default as tableBodyClasses } from './tableBodyClasses';\nexport * from './tableBodyClasses';\n","node_modules/@mui/material/TableBody/TableBody.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableBodyClasses } from './tableBodyClasses';\n\nexport interface TableBodyOwnProps {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableBodyClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TableBodyTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'tbody',\n> {\n  props: AdditionalProps & TableBodyOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [TableBody API](https://mui.com/material-ui/api/table-body/)\n */\ndeclare const TableBody: OverridableComponent<TableBodyTypeMap>;\n\nexport type TableBodyProps<\n  RootComponent extends React.ElementType = TableBodyTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableBodyTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default TableBody;\n","node_modules/@mui/material/Tab/tabClasses.d.ts":"export interface TabClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if both `icon` and `label` are provided. */\n    labelIcon: string;\n    /** Styles applied to the root element if the parent [`Tabs`](/material-ui/api/tabs/) has `textColor=\"inherit\"`. */\n    textColorInherit: string;\n    /** Styles applied to the root element if the parent [`Tabs`](/material-ui/api/tabs/) has `textColor=\"primary\"`. */\n    textColorPrimary: string;\n    /** Styles applied to the root element if the parent [`Tabs`](/material-ui/api/tabs/) has `textColor=\"secondary\"`. */\n    textColorSecondary: string;\n    /** State class applied to the root element if `selected={true}` (controlled by the Tabs component). */\n    selected: string;\n    /** State class applied to the root element if `disabled={true}` (controlled by the Tabs component). */\n    disabled: string;\n    /** Styles applied to the root element if `fullWidth={true}` (controlled by the Tabs component). */\n    fullWidth: string;\n    /** Styles applied to the root element if `wrapped={true}`. */\n    wrapped: string;\n    /** Styles applied to the wrapper element of `icon` if `icon` is provided. */\n    iconWrapper: string;\n}\nexport type TabClassKey = keyof TabClasses;\nexport declare function getTabUtilityClass(slot: string): string;\ndeclare const tabClasses: TabClasses;\nexport default tabClasses;\n","node_modules/@mui/material/Tab/index.d.ts":"export { default } from './Tab';\nexport * from './Tab';\n\nexport { default as tabClasses } from './tabClasses';\nexport * from './tabClasses';\n","node_modules/@mui/material/Tab/Tab.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { TabClasses } from './tabClasses';\n\nexport interface TabOwnProps {\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children?: null;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TabClasses>;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * The icon to display.\n   */\n  icon?: string | React.ReactElement;\n  /**\n   * The position of the icon relative to the label.\n   * @default 'top'\n   */\n  iconPosition?: 'top' | 'bottom' | 'start' | 'end';\n  /**\n   * The label element.\n   */\n  label?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value?: any;\n  /**\n   * Tab labels appear in a single row.\n   * They can use a second line if needed.\n   * @default false\n   */\n  wrapped?: boolean;\n}\n\nexport type TabTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & TabOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/material-ui/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/material-ui/api/tab/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const Tab: ExtendButtonBase<TabTypeMap>;\n\nexport type TabProps<\n  RootComponent extends React.ElementType = TabTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TabTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Tab;\n","node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.d.ts":"export interface TabScrollButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n}\nexport type TabScrollButtonClassKey = keyof TabScrollButtonClasses;\nexport declare function getTabScrollButtonUtilityClass(slot: string): string;\ndeclare const tabScrollButtonClasses: TabScrollButtonClasses;\nexport default tabScrollButtonClasses;\n","node_modules/@mui/material/TabScrollButton/index.d.ts":"export { default } from './TabScrollButton';\nexport * from './TabScrollButton';\n\nexport { default as tabScrollButtonClasses } from './tabScrollButtonClasses';\nexport * from './tabScrollButtonClasses';\n","node_modules/@mui/material/TabScrollButton/TabScrollButton.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { ButtonBaseProps } from '../ButtonBase';\nimport { SvgIcon, Theme } from '..';\nimport { TabScrollButtonClasses } from './tabScrollButtonClasses';\n\nexport interface TabScrollButtonStartIconSlotPropsOverrides {}\nexport interface TabScrollButtonEndIconSlotPropsOverrides {}\n\nexport interface TabScrollButtonOwnerState extends TabScrollButtonProps {\n  isRtl: boolean;\n}\n\nexport interface TabScrollButtonProps extends ButtonBaseProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TabScrollButtonClasses>;\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots?: {\n    StartScrollButtonIcon?: React.ElementType;\n    EndScrollButtonIcon?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   * @default {}\n   */\n  slotProps?: {\n    startScrollButtonIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      TabScrollButtonStartIconSlotPropsOverrides,\n      TabScrollButtonOwnerState\n    >;\n    endScrollButtonIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      TabScrollButtonEndIconSlotPropsOverrides,\n      TabScrollButtonOwnerState\n    >;\n  };\n  /**\n   * The direction the button should indicate.\n   */\n  direction: 'left' | 'right';\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The component orientation (layout flow direction).\n   */\n  orientation: 'horizontal' | 'vertical';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/material-ui/react-tabs/)\n *\n * API:\n *\n * - [TabScrollButton API](https://mui.com/material-ui/api/tab-scroll-button/)\n */\nexport default function TabScrollButton(props: TabScrollButtonProps): JSX.Element;\n","node_modules/@mui/material/Switch/switchClasses.d.ts":"export interface SwitchClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: string;\n    /** Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: string;\n    /** Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: string;\n    /** Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** State class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: string;\n    /** State class applied to the internal SwitchBase component's disabled class. */\n    disabled: string;\n    /** Styles applied to the internal SwitchBase component's input element. */\n    input: string;\n    /** Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: string;\n    /** Styles applied to the track element. */\n    track: string;\n}\nexport type SwitchClassKey = keyof SwitchClasses;\nexport declare function getSwitchUtilityClass(slot: string): string;\ndeclare const switchClasses: SwitchClasses;\nexport default switchClasses;\n","node_modules/@mui/material/Switch/index.d.ts":"export { default } from './Switch';\nexport * from './Switch';\n\nexport { default as switchClasses } from './switchClasses';\nexport * from './switchClasses';\n","node_modules/@mui/material/Switch/Switch.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { SwitchBaseProps } from '../internal/SwitchBase';\nimport { SwitchClasses } from './switchClasses';\n\nexport interface SwitchPropsSizeOverrides {}\n\nexport interface SwitchPropsColorOverrides {}\n\nexport interface SwitchProps\n  extends StandardProps<SwitchBaseProps, 'checkedIcon' | 'color' | 'icon'> {\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SwitchClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'default',\n    SwitchPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense switch styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', SwitchPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value?: unknown;\n}\n\n/**\n *\n * Demos:\n *\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/material-ui/api/switch/)\n * - inherits [IconButton API](https://mui.com/material-ui/api/icon-button/)\n */\nexport default function Switch(props: SwitchProps): JSX.Element;\n","node_modules/@mui/material/SwipeableDrawer/index.d.ts":"export { default } from './SwipeableDrawer';\nexport * from './SwipeableDrawer';\n","node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.d.ts":"import * as React from 'react';\nimport { DrawerProps } from '../Drawer';\n\nexport interface SwipeableDrawerProps extends Omit<DrawerProps, 'onClose' | 'open'> {\n  /**\n   * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.\n   * This can be useful in scenarios where the drawer is partially visible.\n   * You can customize it further with a callback that determines which children the user can drag over to open the drawer\n   * (for example, to ignore other elements that handle touch move events, like sliders).\n   *\n   * @param {TouchEvent} event The 'touchstart' event\n   * @param {HTMLDivElement} swipeArea The swipe area element\n   * @param {HTMLDivElement} paper The drawer's paper element\n   *\n   * @default false\n   */\n  allowSwipeInChildren?:\n    | boolean\n    | ((e: TouchEvent, swipeArea: HTMLDivElement, paper: HTMLDivElement) => boolean);\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition?: boolean;\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery?: boolean;\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen?: boolean;\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis?: number;\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity?: number;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onClose: React.ReactEventHandler<{}>;\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {React.SyntheticEvent<{}>} event The event source of the callback.\n   */\n  onOpen: React.ReactEventHandler<{}>;\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open?: boolean;\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps?: object;\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth?: number;\n}\n\n/**\n *\n * Demos:\n *\n * - [Drawer](https://mui.com/material-ui/react-drawer/)\n *\n * API:\n *\n * - [SwipeableDrawer API](https://mui.com/material-ui/api/swipeable-drawer/)\n * - inherits [Drawer API](https://mui.com/material-ui/api/drawer/)\n */\ndeclare const SwipeableDrawer: React.JSXElementConstructor<SwipeableDrawerProps>;\n\nexport default SwipeableDrawer;\n","node_modules/@mui/material/SvgIcon/svgIconClasses.d.ts":"export interface SvgIconClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"action\"`. */\n    colorAction: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"disabled\"`. */\n    colorDisabled: string;\n    /** Styles applied to the root element if `fontSize=\"inherit\"`. */\n    fontSizeInherit: string;\n    /** Styles applied to the root element if `fontSize=\"small\"`. */\n    fontSizeSmall: string;\n    /** Styles applied to the root element if `fontSize=\"medium\"`. */\n    fontSizeMedium: string;\n    /** Styles applied to the root element if `fontSize=\"large\"`. */\n    fontSizeLarge: string;\n}\nexport type SvgIconClassKey = keyof SvgIconClasses;\nexport declare function getSvgIconUtilityClass(slot: string): string;\ndeclare const svgIconClasses: SvgIconClasses;\nexport default svgIconClasses;\n","node_modules/@mui/material/SvgIcon/index.d.ts":"export { default } from './SvgIcon';\nexport * from './SvgIcon';\n\nexport { default as svgIconClasses } from './svgIconClasses';\nexport * from './svgIconClasses';\n","node_modules/@mui/material/SvgIcon/SvgIcon.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { SvgIconClasses } from './svgIconClasses';\n\nexport interface SvgIconPropsSizeOverrides {}\n\nexport interface SvgIconPropsColorOverrides {}\n\nexport interface SvgIconOwnProps {\n  /**\n   * Node passed into the SVG element.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SvgIconClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.\n   * @default 'inherit'\n   */\n  color?: OverridableStringUnion<\n    | 'inherit'\n    | 'action'\n    | 'disabled'\n    | 'primary'\n    | 'secondary'\n    | 'error'\n    | 'info'\n    | 'success'\n    | 'warning',\n    SvgIconPropsColorOverrides\n  >;\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize?: OverridableStringUnion<\n    'inherit' | 'large' | 'medium' | 'small',\n    SvgIconPropsSizeOverrides\n  >;\n  /**\n   * Applies a color attribute to the SVG element.\n   */\n  htmlColor?: string;\n  /**\n   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`\n   * prop will be ignored.\n   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that\n   * `component`'s viewBox to the root node.\n   * @default false\n   */\n  inheritViewBox?: boolean;\n  /**\n   * The shape-rendering attribute. The behavior of the different options is described on the\n   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).\n   * If you are having issues with blurry icons you should investigate this prop.\n   */\n  shapeRendering?: string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Provides a human-readable title for the element that contains it.\n   * https://www.w3.org/TR/SVG-access/#Equivalent\n   */\n  titleAccess?: string;\n  /**\n   * Allows you to redefine what the coordinates without units mean inside an SVG element.\n   * For example, if the SVG element is 500 (width) by 200 (height),\n   * and you pass viewBox=\"0 0 50 20\",\n   * this means that the coordinates inside the SVG will go from the top left corner (0,0)\n   * to bottom right (50,20) and each unit will be worth 10px.\n   * @default '0 0 24 24'\n   */\n  viewBox?: string;\n}\n\nexport interface SvgIconTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'svg',\n> {\n  props: AdditionalProps & SvgIconOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Icons](https://mui.com/material-ui/icons/)\n * - [Material Icons](https://mui.com/material-ui/material-icons/)\n *\n * API:\n *\n * - [SvgIcon API](https://mui.com/material-ui/api/svg-icon/)\n */\ndeclare const SvgIcon: OverridableComponent<SvgIconTypeMap> & { muiName: string };\n\nexport type SvgIconProps<\n  RootComponent extends React.ElementType = SvgIconTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<SvgIconTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default SvgIcon;\n","node_modules/@mui/material/StepLabel/stepLabelClasses.d.ts":"export interface StepLabelClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the label element that wraps `children`. */\n    label: string;\n    /** State class applied to the label element if `active={true}`. */\n    active: string;\n    /** State class applied to the label element if `completed={true}`. */\n    completed: string;\n    /** State class applied to the root and label elements if `error={true}`. */\n    error: string;\n    /** State class applied to the root and label elements if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the `icon` container element. */\n    iconContainer: string;\n    /** State class applied to the root and icon container and label if `alternativeLabel={true}`. */\n    alternativeLabel: string;\n    /** Styles applied to the container element which wraps label and `optional`. */\n    labelContainer: string;\n}\nexport type StepLabelClassKey = keyof StepLabelClasses;\nexport declare function getStepLabelUtilityClass(slot: string): string;\ndeclare const stepLabelClasses: StepLabelClasses;\nexport default stepLabelClasses;\n","node_modules/@mui/material/StepLabel/index.d.ts":"export { default } from './StepLabel';\nexport * from './StepLabel';\n\nexport { default as stepLabelClasses } from './stepLabelClasses';\nexport * from './stepLabelClasses';\n","node_modules/@mui/material/StepLabel/StepLabel.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { StepIconProps } from '../StepIcon';\nimport { Theme } from '../styles';\nimport { StepLabelClasses } from './stepLabelClasses';\n\nexport interface StepLabelProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * In most cases will simply be a string containing a title for the label.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepLabelClasses>;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps?: {\n    /**\n     * Props applied to the label element.\n     * @default {}\n     */\n    label?: React.HTMLProps<HTMLSpanElement>;\n  };\n  /**\n   * If `true`, the step is marked as failed.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * Override the default label of the step icon.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The optional node to display.\n   */\n  optional?: React.ReactNode;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps?: {\n    /**\n     * Props applied to the label element.\n     * @default {}\n     */\n    label?: React.HTMLProps<HTMLSpanElement>;\n  };\n  /**\n   * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).\n   */\n  StepIconComponent?: React.ElementType<StepIconProps>;\n  /**\n   * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.\n   */\n  StepIconProps?: Partial<StepIconProps>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepLabelClasskey = keyof NonNullable<StepLabelProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepLabel API](https://mui.com/material-ui/api/step-label/)\n */\ndeclare const StepLabel: ((props: StepLabelProps) => JSX.Element) & { muiName: string };\n\nexport default StepLabel;\n","node_modules/@mui/material/Stepper/stepperClasses.d.ts":"export interface StepperClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the root element if `alternativeLabel={true}`. */\n    alternativeLabel: string;\n}\nexport type StepperClassKey = keyof StepperClasses;\nexport declare function getStepperUtilityClass(slot: string): string;\ndeclare const stepperClasses: StepperClasses;\nexport default stepperClasses;\n","node_modules/@mui/material/Stepper/index.d.ts":"export { default } from './Stepper';\nexport * from './Stepper';\n\nexport { default as stepperClasses } from './stepperClasses';\nexport * from './stepperClasses';\n\nexport { default as StepperContext } from './StepperContext';\nexport * from './StepperContext';\n","node_modules/@mui/material/Stepper/StepperContext.d.ts":"import * as React from 'react';\nexport interface StepperContextType {\n    activeStep: number;\n    alternativeLabel: boolean;\n    connector: React.ReactNode;\n    nonLinear: boolean;\n    orientation: 'horizontal' | 'vertical';\n}\n/**\n * Provides information about the current step in Stepper.\n */\ndeclare const StepperContext: React.Context<{} | StepperContextType>;\n/**\n * Returns the current StepperContext or an empty object if no StepperContext\n * has been defined in the component tree.\n */\nexport declare function useStepperContext(): StepperContextType | {};\nexport default StepperContext;\n","node_modules/@mui/material/Stepper/Stepper.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { PaperProps } from '../Paper';\nimport { StepperClasses } from './stepperClasses';\n\nexport type Orientation = 'horizontal' | 'vertical';\n\nexport interface StepperOwnProps extends Pick<PaperProps, 'elevation' | 'square' | 'variant'> {\n  /**\n   * Set the active step (zero based index).\n   * Set to -1 to disable all the steps.\n   * @default 0\n   */\n  activeStep?: number;\n  /**\n   * If set to 'true' and orientation is horizontal,\n   * then the step label will be positioned under the icon.\n   * @default false\n   */\n  alternativeLabel?: boolean;\n  /**\n   * Two or more `<Step />` components.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepperClasses>;\n  /**\n   * An element to be placed between each step.\n   * @default <StepConnector />\n   */\n  connector?: React.ReactElement<any, any> | null;\n  /**\n   * If set the `Stepper` will not assist in controlling steps for linear flow.\n   * @default false\n   */\n  nonLinear?: boolean;\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation?: Orientation;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface StepperTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & StepperOwnProps;\n  defaultComponent: RootComponent;\n}\n\nexport type StepperProps<\n  RootComponent extends React.ElementType = StepperTypeMap['defaultComponent'],\n  AdditionalProps = { component?: React.ElementType },\n> = OverrideProps<StepperTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport type StepperClasskey = keyof NonNullable<StepperProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [Stepper API](https://mui.com/material-ui/api/stepper/)\n */\ndeclare const Stepper: OverridableComponent<StepperTypeMap>;\n\nexport default Stepper;\n","node_modules/@mui/material/Table/tableClasses.d.ts":"export interface TableClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `stickyHeader={true}`. */\n    stickyHeader: string;\n}\nexport type TableClassKey = keyof TableClasses;\nexport declare function getTableUtilityClass(slot: string): string;\ndeclare const tableClasses: TableClasses;\nexport default tableClasses;\n","node_modules/@mui/material/Table/index.d.ts":"export { default } from './Table';\nexport * from './Table';\n\nexport { default as tableClasses } from './tableClasses';\nexport * from './tableClasses';\n","node_modules/@mui/material/Table/Tablelvl2Context.d.ts":"import * as React from 'react';\n\ninterface Tablelvl2ContextProps {\n  variant: 'head' | 'body' | 'footer';\n}\n\ndeclare const Tablelvl2Context: React.Context<Tablelvl2ContextProps | undefined>;\n\nexport default Tablelvl2Context;\n","node_modules/@mui/material/Table/TableContext.d.ts":"import * as React from 'react';\n\ninterface TableContextProps {\n  padding: 'default' | 'checkbox' | 'none';\n  size: 'default' | 'checkbox' | 'none';\n}\n\ndeclare const TableContext: React.Context<TableContextProps | undefined>;\n\nexport default TableContext;\n","node_modules/@mui/material/Table/Table.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { TableClasses } from './tableClasses';\n\nexport interface TablePropsSizeOverrides {}\n\nexport interface TableOwnProps {\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TableClasses>;\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   * @default 'normal'\n   */\n  padding?: 'normal' | 'checkbox' | 'none';\n  /**\n   * Allows TableCells to inherit size of the Table.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', TablePropsSizeOverrides>;\n  /**\n   * Set the header sticky.\n   *\n   * ⚠️ It doesn't work with IE11.\n   * @default false\n   */\n  stickyHeader?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface TableTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'table',\n> {\n  props: AdditionalProps & TableOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Table](https://mui.com/material-ui/react-table/)\n *\n * API:\n *\n * - [Table API](https://mui.com/material-ui/api/table/)\n */\ndeclare const Table: OverridableComponent<TableTypeMap>;\n\nexport type TableProps<\n  RootComponent extends React.ElementType = TableTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<TableTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Table;\n","node_modules/@mui/material/StepContent/stepContentClasses.d.ts":"export interface StepContentClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `last={true}` (controlled by `Step`). */\n    last: string;\n    /** Styles applied to the Transition component. */\n    transition: string;\n}\nexport type StepContentClassKey = keyof StepContentClasses;\nexport declare function getStepContentUtilityClass(slot: string): string;\ndeclare const stepContentClasses: StepContentClasses;\nexport default stepContentClasses;\n","node_modules/@mui/material/StepContent/index.d.ts":"export { default } from './StepContent';\nexport * from './StepContent';\n\nexport { default as stepContentClasses } from './stepContentClasses';\nexport * from './stepContentClasses';\n","node_modules/@mui/material/StepContent/StepContent.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { TransitionProps } from '../transitions/transition';\nimport { StepContentClasses } from './stepContentClasses';\n\nexport interface StepContentProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepContentClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * Adjust the duration of the content expand transition.\n   * Passed as a prop to the transition component.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\nexport type StepContentClasskey = keyof NonNullable<StepContentProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepContent API](https://mui.com/material-ui/api/step-content/)\n */\nexport default function StepContent(props: StepContentProps): JSX.Element;\n","node_modules/@mui/material/StepIcon/stepIconClasses.d.ts":"export interface StepIconClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the SVG text element. */\n    text: string;\n    /** State class applied to the root element if `active={true}`. */\n    active: string;\n    /** State class applied to the root element if `completed={true}`. */\n    completed: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n}\nexport type StepIconClassKey = keyof StepIconClasses;\nexport declare function getStepIconUtilityClass(slot: string): string;\ndeclare const stepIconClasses: StepIconClasses;\nexport default stepIconClasses;\n","node_modules/@mui/material/StepIcon/index.d.ts":"export { default } from './StepIcon';\nexport * from './StepIcon';\n\nexport { default as stepIconClasses } from './stepIconClasses';\nexport * from './stepIconClasses';\n","node_modules/@mui/material/StepIcon/StepIcon.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { StepIconClasses } from './stepIconClasses';\n\nexport interface StepIconProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  /**\n   * Whether this step is active.\n   * @default false\n   */\n  active?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepIconClasses>;\n  /**\n   * Mark the step as completed. Is passed to child components.\n   * @default false\n   */\n  completed?: boolean;\n  /**\n   * If `true`, the step is marked as failed.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * The label displayed in the step icon.\n   */\n  icon: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepIconClasskey = keyof NonNullable<StepIconProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepIcon API](https://mui.com/material-ui/api/step-icon/)\n */\nexport default function StepIcon(props: StepIconProps): JSX.Element;\n","node_modules/@mui/material/StepConnector/stepConnectorClasses.d.ts":"export interface StepConnectorClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the root element if `alternativeLabel={true}`. */\n    alternativeLabel: string;\n    /** State class applied to the root element if `active={true}`. */\n    active: string;\n    /** State class applied to the root element if `completed={true}`. */\n    completed: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the line element. */\n    line: string;\n    /** Styles applied to the root element if `orientation=\"horizontal\"`. */\n    lineHorizontal: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    lineVertical: string;\n}\nexport type StepConnectorClassKey = keyof StepConnectorClasses;\nexport declare function getStepConnectorUtilityClass(slot: string): string;\ndeclare const stepConnectorClasses: StepConnectorClasses;\nexport default stepConnectorClasses;\n","node_modules/@mui/material/StepConnector/index.d.ts":"export { default } from './StepConnector';\nexport * from './StepConnector';\n\nexport { default as stepConnectorClasses } from './stepConnectorClasses';\nexport * from './stepConnectorClasses';\n","node_modules/@mui/material/StepConnector/StepConnector.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { Theme } from '../styles';\nimport { StepConnectorClasses } from './stepConnectorClasses';\n\nexport type StepConnectorIcon = React.ReactElement | string | number;\n\nexport interface StepConnectorProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepConnectorClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepConnectorClasskey = keyof NonNullable<StepConnectorProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepConnector API](https://mui.com/material-ui/api/step-connector/)\n */\nexport default function StepConnector(props: StepConnectorProps): JSX.Element;\n","node_modules/@mui/material/StepButton/stepButtonClasses.d.ts":"export interface StepButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the `ButtonBase` touch-ripple. */\n    touchRipple: string;\n}\nexport type StepButtonClassKey = keyof StepButtonClasses;\nexport declare function getStepButtonUtilityClass(slot: string): string;\ndeclare const stepButtonClasses: StepButtonClasses;\nexport default stepButtonClasses;\n","node_modules/@mui/material/StepButton/index.d.ts":"export { default } from './StepButton';\nexport * from './StepButton';\n\nexport { default as stepButtonClasses } from './stepButtonClasses';\nexport * from './stepButtonClasses';\n","node_modules/@mui/material/StepButton/StepButton.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { ButtonBaseTypeMap, ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { StepButtonClasses } from './stepButtonClasses';\n\n/**\n * @deprecated use `StepButtonProps['icon']` instead.\n */\nexport type StepButtonIcon = React.ReactNode;\n\nexport interface StepButtonOwnProps {\n  /**\n   * Can be a `StepLabel` or a node to place inside `StepLabel` as children.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepButtonClasses>;\n  /**\n   * The icon displayed by the step label.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The optional node to display.\n   */\n  optional?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type StepButtonTypeMap<\n  AdditionalProps,\n  RootComponent extends React.ElementType,\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & StepButtonOwnProps;\n  defaultComponent: RootComponent;\n\n  ignoredProps: 'disabled';\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [StepButton API](https://mui.com/material-ui/api/step-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const StepButton: ExtendButtonBase<\n  StepButtonTypeMap<{}, ButtonBaseTypeMap['defaultComponent']>\n>;\n\nexport type StepButtonClasskey = keyof NonNullable<StepButtonProps['classes']>;\n\nexport type StepButtonProps<\n  RootComponent extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<StepButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default StepButton;\n","node_modules/@mui/material/StyledEngineProvider/index.d.ts":"/**\n * @deprecated will be removed in v5.beta, please use StyledEngineProvider from @mui/material/styles instead\n */\nexport { StyledEngineProvider as default } from '@mui/system';\n","node_modules/@mui/material/SpeedDialAction/speedDialActionClasses.d.ts":"export interface SpeedDialActionClasses {\n    /** Styles applied to the Fab component. */\n    fab: string;\n    /** Styles applied to the Fab component if `open={false}`. */\n    fabClosed: string;\n    /** Styles applied to the root element if `tooltipOpen={true}`. */\n    staticTooltip: string;\n    /** Styles applied to the root element if `tooltipOpen={true}` and `open={false}`. */\n    staticTooltipClosed: string;\n    /** Styles applied to the static tooltip label if `tooltipOpen={true}`. */\n    staticTooltipLabel: string;\n    /** Styles applied to the root element if `tooltipOpen={true}` and `tooltipPlacement=\"left\"`` */\n    tooltipPlacementLeft: string;\n    /** Styles applied to the root element if `tooltipOpen={true}` and `tooltipPlacement=\"right\"`` */\n    tooltipPlacementRight: string;\n}\nexport type SpeedDialActionClassKey = keyof SpeedDialActionClasses;\nexport declare function getSpeedDialActionUtilityClass(slot: string): string;\ndeclare const speedDialActionClasses: SpeedDialActionClasses;\nexport default speedDialActionClasses;\n","node_modules/@mui/material/SpeedDialAction/index.d.ts":"export { default } from './SpeedDialAction';\nexport * from './SpeedDialAction';\n\nexport { default as speedDialActionClasses } from './speedDialActionClasses';\nexport * from './speedDialActionClasses';\n","node_modules/@mui/material/SpeedDialAction/SpeedDialAction.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { FabProps } from '../Fab';\nimport { TooltipProps } from '../Tooltip';\nimport { SpeedDialActionClasses } from './speedDialActionClasses';\n\nexport interface SpeedDialActionProps extends StandardProps<Partial<TooltipProps>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SpeedDialActionClasses>;\n  /**\n   * Props applied to the [`Fab`](/material-ui/api/fab/) component.\n   * @default {}\n   */\n  FabProps?: Partial<FabProps>;\n  /**\n   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.\n   * @default 0\n   */\n  delay?: number;\n  /**\n   * The icon to display in the SpeedDial Fab.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * `classes` prop applied to the [`Tooltip`](/material-ui/api/tooltip/) element.\n   */\n  TooltipClasses?: TooltipProps['classes'];\n  /**\n   * Placement of the tooltip.\n   * @default 'left'\n   */\n  tooltipPlacement?: TooltipProps['placement'];\n  /**\n   * Label to display in the tooltip.\n   */\n  tooltipTitle?: React.ReactNode;\n  /**\n   * Make the tooltip always visible when the SpeedDial is open.\n   * @default false\n   */\n  tooltipOpen?: boolean;\n}\n\n/**\n *\n * Demos:\n *\n * - [Speed Dial](https://mui.com/material-ui/react-speed-dial/)\n *\n * API:\n *\n * - [SpeedDialAction API](https://mui.com/material-ui/api/speed-dial-action/)\n * - inherits [Tooltip API](https://mui.com/material-ui/api/tooltip/)\n */\nexport default function SpeedDialAction(props: SpeedDialActionProps): JSX.Element;\n","node_modules/@mui/material/SpeedDialIcon/speedDialIconClasses.d.ts":"export interface SpeedDialIconClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the icon component. */\n    icon: string;\n    /** Styles applied to the icon component if `open={true}`. */\n    iconOpen: string;\n    /** Styles applied to the icon when an `openIcon` is provided and if `open={true}`. */\n    iconWithOpenIconOpen: string;\n    /** Styles applied to the `openIcon` if provided. */\n    openIcon: string;\n    /** Styles applied to the `openIcon` if provided and if `open={true}`. */\n    openIconOpen: string;\n}\nexport type SpeedDialIconClassKey = keyof SpeedDialIconClasses;\nexport declare function getSpeedDialIconUtilityClass(slot: string): string;\ndeclare const speedDialIconClasses: SpeedDialIconClasses;\nexport default speedDialIconClasses;\n","node_modules/@mui/material/SpeedDialIcon/index.d.ts":"export { default } from './SpeedDialIcon';\nexport * from './SpeedDialIcon';\n\nexport { default as speedDialIconClasses } from './speedDialIconClasses';\nexport * from './speedDialIconClasses';\n","node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { SpeedDialIconClasses } from './speedDialIconClasses';\n\nexport interface SpeedDialIconProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SpeedDialIconClasses>;\n  /**\n   * The icon to display.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.\n   */\n  openIcon?: React.ReactNode;\n  /**\n   * @ignore\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Speed Dial](https://mui.com/material-ui/react-speed-dial/)\n *\n * API:\n *\n * - [SpeedDialIcon API](https://mui.com/material-ui/api/speed-dial-icon/)\n */\ndeclare const SpeedDialIcon: ((props: SpeedDialIconProps) => JSX.Element) & { muiName: string };\n\nexport default SpeedDialIcon;\n","node_modules/@mui/material/Stack/stackClasses.d.ts":"import { StackClasses } from '@mui/system';\nexport type { StackClassKey } from '@mui/system';\nexport type { StackClasses };\nexport declare function getStackUtilityClass(slot: string): string;\ndeclare const stackClasses: StackClasses;\nexport default stackClasses;\n","node_modules/@mui/material/Stack/index.d.ts":"export { default } from './Stack';\nexport * from './Stack';\n\nexport { default as stackClasses } from './stackClasses';\nexport * from './stackClasses';\n","node_modules/@mui/material/Stack/Stack.d.ts":"import * as React from 'react';\nimport { ResponsiveStyleValue, SxProps, SystemProps } from '@mui/system';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { Theme } from '../styles/createTheme';\n\nexport interface StackOwnProps extends SystemProps<Theme> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'column'\n   */\n  direction?: ResponsiveStyleValue<'row' | 'row-reverse' | 'column' | 'column-reverse'>;\n  /**\n   * Defines the space between immediate children.\n   * @default 0\n   */\n  spacing?: ResponsiveStyleValue<number | string>;\n  /**\n   * Add an element between each child.\n   */\n  divider?: React.ReactNode;\n  /**\n   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.\n   *\n   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),\n   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.\n   *\n   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.\n   * @default false\n   */\n  useFlexGap?: boolean;\n  /**\n   * The system prop, which allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface StackTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & StackOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Stack](https://mui.com/material-ui/react-stack/)\n *\n * API:\n *\n * - [Stack API](https://mui.com/material-ui/api/stack/)\n */\ndeclare const Stack: OverridableComponent<StackTypeMap>;\n\nexport type StackProps<\n  RootComponent extends React.ElementType = StackTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<StackTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Stack;\n","node_modules/@mui/material/SpeedDial/speedDialClasses.d.ts":"export interface SpeedDialClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the Fab component. */\n    fab: string;\n    /** Styles applied to the root element if direction=\"up\" */\n    directionUp: string;\n    /** Styles applied to the root element if direction=\"down\" */\n    directionDown: string;\n    /** Styles applied to the root element if direction=\"left\" */\n    directionLeft: string;\n    /** Styles applied to the root element if direction=\"right\" */\n    directionRight: string;\n    /** Styles applied to the actions (`children` wrapper) element. */\n    actions: string;\n    /** Styles applied to the actions (`children` wrapper) element if `open={false}`. */\n    actionsClosed: string;\n}\nexport type SpeedDialClassKey = keyof SpeedDialClasses;\nexport declare function getSpeedDialUtilityClass(slot: string): string;\ndeclare const speedDialClasses: SpeedDialClasses;\nexport default speedDialClasses;\n","node_modules/@mui/material/SpeedDial/index.d.ts":"export { default } from './SpeedDial';\nexport * from './SpeedDial';\n\nexport { default as speedDialClasses } from './speedDialClasses';\nexport * from './speedDialClasses';\n","node_modules/@mui/material/SpeedDial/SpeedDial.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { FabProps } from '../Fab';\nimport { TransitionProps } from '../transitions';\nimport { SpeedDialClasses } from './speedDialClasses';\n\nexport type CloseReason = 'toggle' | 'blur' | 'mouseLeave' | 'escapeKeyDown';\nexport type OpenReason = 'toggle' | 'focus' | 'mouseEnter';\n\nexport interface SpeedDialProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'children'> {\n  /**\n   * SpeedDialActions to display when the SpeedDial is `open`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SpeedDialClasses>;\n  /**\n   * The aria-label of the button element.\n   * Also used to provide the `id` for the `SpeedDial` element and its children.\n   */\n  ariaLabel: string;\n  /**\n   * The direction the actions open relative to the floating action button.\n   * @default 'up'\n   */\n  direction?: 'up' | 'down' | 'left' | 'right';\n  /**\n   * If `true`, the SpeedDial is hidden.\n   * @default false\n   */\n  hidden?: boolean;\n  /**\n   * Props applied to the [`Fab`](/material-ui/api/fab/) element.\n   * @default {}\n   */\n  FabProps?: Partial<FabProps>;\n  /**\n   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component\n   * provides a default Icon with animation.\n   */\n  icon?: React.ReactNode;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggle\"`, `\"blur\"`, `\"mouseLeave\"`, `\"escapeKeyDown\"`.\n   */\n  onClose?: (event: React.SyntheticEvent<{}>, reason: CloseReason) => void;\n  /**\n   * Callback fired when the component requests to be open.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggle\"`, `\"focus\"`, `\"mouseEnter\"`.\n   */\n  onOpen?: (event: React.SyntheticEvent<{}>, reason: OpenReason) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * The icon to display in the SpeedDial Fab when the SpeedDial is open.\n   */\n  openIcon?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Zoom\n   */\n  TransitionComponent?: React.JSXElementConstructor<TransitionProps>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Speed Dial](https://mui.com/material-ui/react-speed-dial/)\n *\n * API:\n *\n * - [SpeedDial API](https://mui.com/material-ui/api/speed-dial/)\n */\nexport default function SpeedDial(props: SpeedDialProps): JSX.Element;\n","node_modules/@mui/material/Step/stepClasses.d.ts":"export interface StepClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the root element if `alternativeLabel={true}`. */\n    alternativeLabel: string;\n    /** State class applied to the root element if `completed={true}`. */\n    completed: string;\n}\nexport type StepClassKey = keyof StepClasses;\nexport declare function getStepUtilityClass(slot: string): string;\ndeclare const stepClasses: StepClasses;\nexport default stepClasses;\n","node_modules/@mui/material/Step/index.d.ts":"export { default } from './Step';\nexport * from './Step';\n\nexport { default as stepClasses } from './stepClasses';\nexport * from './stepClasses';\n\nexport { default as StepContext } from './StepContext';\nexport * from './StepContext';\n","node_modules/@mui/material/Step/StepContext.d.ts":"import * as React from 'react';\nexport interface StepContextType {\n    index: number;\n    last: boolean;\n    expanded: boolean;\n    icon: React.ReactNode;\n    active: boolean;\n    completed: boolean;\n    disabled: boolean;\n}\n/**\n * Provides information about the current step in Stepper.\n */\ndeclare const StepContext: React.Context<{} | StepContextType>;\n/**\n * Returns the current StepContext or an empty object if no StepContext\n * has been defined in the component tree.\n */\nexport declare function useStepContext(): StepContextType | {};\nexport default StepContext;\n","node_modules/@mui/material/Step/Step.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { StepClasses } from './stepClasses';\n\nexport interface StepOwnProps {\n  /**\n   * Sets the step as active. Is passed to child components.\n   */\n  active?: boolean;\n  /**\n   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<StepClasses>;\n  /**\n   * Mark the step as completed. Is passed to child components.\n   */\n  completed?: boolean;\n  /**\n   * If `true`, the step is disabled, will also disable the button if\n   * `StepButton` is a child of `Step`. Is passed to child components.\n   */\n  disabled?: boolean;\n  /**\n   * Expand the step.\n   * @default false\n   */\n  expanded?: boolean;\n  /**\n   * The position of the step.\n   * The prop defaults to the value inherited from the parent Stepper component.\n   */\n  index?: number;\n  /**\n   * If `true`, the Step is displayed as rendered last.\n   * The prop defaults to the value inherited from the parent Stepper component.\n   */\n  last?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface StepTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & StepOwnProps;\n  defaultComponent: RootComponent;\n}\n\nexport type StepProps<\n  RootComponent extends React.ElementType = StepTypeMap['defaultComponent'],\n  AdditionalProps = { component?: React.ElementType },\n> = OverrideProps<StepTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport type StepClasskey = keyof NonNullable<StepProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [Step API](https://mui.com/material-ui/api/step/)\n */\ndeclare const Step: OverridableComponent<StepTypeMap>;\n\nexport default Step;\n","node_modules/@mui/material/SnackbarContent/snackbarContentClasses.d.ts":"export interface SnackbarContentClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the message wrapper element. */\n    message: string;\n    /** Styles applied to the action wrapper element if `action` is provided. */\n    action: string;\n}\nexport type SnackbarContentClassKey = keyof SnackbarContentClasses;\nexport declare function getSnackbarContentUtilityClass(slot: string): string;\ndeclare const snackbarContentClasses: SnackbarContentClasses;\nexport default snackbarContentClasses;\n","node_modules/@mui/material/SnackbarContent/index.d.ts":"export { default } from './SnackbarContent';\nexport * from './SnackbarContent';\n\nexport { default as snackbarContentClasses } from './snackbarContentClasses';\nexport * from './snackbarContentClasses';\n","node_modules/@mui/material/SnackbarContent/SnackbarContent.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { PaperProps } from '../Paper';\nimport { SnackbarContentClasses } from './snackbarContentClasses';\n\nexport interface SnackbarContentProps extends StandardProps<PaperProps, 'children'> {\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SnackbarContentClasses>;\n  /**\n   * The message to display.\n   */\n  message?: React.ReactNode;\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role?: PaperProps['role'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [SnackbarContent API](https://mui.com/material-ui/api/snackbar-content/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function SnackbarContent(props: SnackbarContentProps): JSX.Element;\n","node_modules/@mui/material/Snackbar/snackbarClasses.d.ts":"export interface SnackbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `anchorOrigin={{ 'top', 'center' }}`. */\n    anchorOriginTopCenter: string;\n    /** Styles applied to the root element if `anchorOrigin={{ 'bottom', 'center' }}`. */\n    anchorOriginBottomCenter: string;\n    /** Styles applied to the root element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: string;\n    /** Styles applied to the root element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: string;\n    /** Styles applied to the root element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: string;\n    /** Styles applied to the root element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: string;\n}\nexport type SnackbarClassKey = keyof SnackbarClasses;\nexport declare function getSnackbarUtilityClass(slot: string): string;\ndeclare const snackbarClasses: SnackbarClasses;\nexport default snackbarClasses;\n","node_modules/@mui/material/Snackbar/index.d.ts":"export { default } from './Snackbar';\nexport * from './Snackbar';\n\nexport { default as snackbarClasses } from './snackbarClasses';\nexport * from './snackbarClasses';\n","node_modules/@mui/material/Snackbar/Snackbar.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { ClickAwayListenerProps } from '@mui/base/ClickAwayListener';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { SnackbarContentProps } from '../SnackbarContent';\nimport { TransitionProps } from '../transitions/transition';\nimport { SnackbarClasses } from './snackbarClasses';\n\nexport interface SnackbarOrigin {\n  vertical: 'top' | 'bottom';\n  horizontal: 'left' | 'center' | 'right';\n}\n\nexport type SnackbarCloseReason = 'timeout' | 'clickaway' | 'escapeKeyDown';\n\nexport interface SnackbarProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action?: SnackbarContentProps['action'];\n  /**\n   * The anchor of the `Snackbar`.\n   * On smaller screens, the component grows to occupy all the available width,\n   * the horizontal alignment is ignored.\n   * @default { vertical: 'bottom', horizontal: 'left' }\n   */\n  anchorOrigin?: SnackbarOrigin;\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration?: number | null;\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children?: React.ReactElement<any, any>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SnackbarClasses>;\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps?: Partial<ClickAwayListenerProps>;\n  /**\n   * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.\n   */\n  ContentProps?: Partial<SnackbarContentProps>;\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener?: boolean;\n  /**\n   * When displaying multiple consecutive snackbars using a single parent-rendered\n   * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.\n   * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update\n   * in place, and features like `autoHideDuration` could be affected.\n   */\n  key?: any;\n  /**\n   * The message to display.\n   */\n  message?: SnackbarContentProps['message'];\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose?: (event: React.SyntheticEvent<any> | Event, reason: SnackbarCloseReason) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration?: number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/material-ui/api/snackbar/)\n */\nexport default function Snackbar(props: SnackbarProps): JSX.Element;\n","node_modules/@mui/material/Slider/sliderClasses.d.ts":"export interface SliderClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the root element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the root element if `color=\"warning\"`. */\n    colorWarning: string;\n    /** Styles applied to the root element if `marks` is provided with at least one label. */\n    marked: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** State class applied to the root and thumb element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root if a thumb is being dragged. */\n    dragging: string;\n    /** Styles applied to the rail element. */\n    rail: string;\n    /** Styles applied to the track element. */\n    track: string;\n    /** Styles applied to the root element if `track={false}`. */\n    trackFalse: string;\n    /** Styles applied to the root element if `track=\"inverted\"`. */\n    trackInverted: string;\n    /** Styles applied to the thumb element. */\n    thumb: string;\n    /** State class applied to the thumb element if it's active. */\n    active: string;\n    /** State class applied to the thumb element if keyboard focused. */\n    focusVisible: string;\n    /** Styles applied to the mark element. */\n    mark: string;\n    /** Styles applied to the mark element if active (depending on the value). */\n    markActive: string;\n    /** Styles applied to the mark label element. */\n    markLabel: string;\n    /** Styles applied to the mark label element if active (depending on the value). */\n    markLabelActive: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the thumb element if `color=\"primary\"`. */\n    thumbColorPrimary: string;\n    /** Styles applied to the thumb element if `color=\"secondary\"`. */\n    thumbColorSecondary: string;\n    /** Styles applied to the thumb element if `color=\"error\"`. */\n    thumbColorError: string;\n    /** Styles applied to the thumb element if `color=\"info\"`. */\n    thumbColorInfo: string;\n    /** Styles applied to the thumb element if `color=\"success\"`. */\n    thumbColorSuccess: string;\n    /** Styles applied to the thumb element if `color=\"warning\"`. */\n    thumbColorWarning: string;\n    /** Styles applied to the thumb element if `size=\"small\"`. */\n    thumbSizeSmall: string;\n    /** Styles applied to the thumb label element. */\n    valueLabel: string;\n    /** Styles applied to the thumb label element if it's open. */\n    valueLabelOpen: string;\n    /** Styles applied to the thumb label's circle element. */\n    valueLabelCircle: string;\n    /** Styles applied to the thumb label's label element. */\n    valueLabelLabel: string;\n}\nexport type SliderClassKey = keyof SliderClasses;\nexport declare function getSliderUtilityClass(slot: string): string;\ndeclare const sliderClasses: SliderClasses;\nexport default sliderClasses;\n","node_modules/@mui/material/Slider/index.d.ts":"export { default } from './Slider';\nexport * from './Slider';\n\nexport { default as sliderClasses } from './sliderClasses';\nexport * from './sliderClasses';\n","node_modules/@mui/material/Slider/SliderValueLabel.types.d.ts":"/// <reference types=\"react\" />\nexport interface SliderValueLabelProps {\n    children?: React.ReactElement;\n    className?: string;\n    style?: React.CSSProperties;\n    /**\n     * If `true`, the value label is visible.\n     */\n    open: boolean;\n    /**\n     * The value of the slider.\n     * For ranged sliders, provide an array with two values.\n     */\n    value: number;\n    /**\n     * Controls when the value label is displayed:\n     *\n     * - `auto` the value label will display when the thumb is hovered or focused.\n     * - `on` will display persistently.\n     * - `off` will never display.\n     * @default 'off'\n     */\n    valueLabelDisplay?: 'on' | 'auto' | 'off';\n}\n","node_modules/@mui/material/Slider/SliderValueLabel.d.ts":"import * as React from 'react';\nimport { SliderValueLabelProps } from './SliderValueLabel.types';\n/**\n * @ignore - internal component.\n */\ndeclare function SliderValueLabel(props: SliderValueLabelProps): React.ReactElement<any, string | React.JSXElementConstructor<any>> | null;\ndeclare namespace SliderValueLabel {\n    var propTypes: any;\n}\nexport default SliderValueLabel;\n","node_modules/@mui/material/Slider/Slider.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base';\nimport { Mark } from '@mui/base/useSlider';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport SliderValueLabelComponent from './SliderValueLabel';\nimport { SliderClasses } from './sliderClasses';\n\nexport interface SliderPropsColorOverrides {}\n\nexport interface SliderPropsSizeOverrides {}\n\nexport interface SliderComponentsPropsOverrides {}\n\nexport interface SliderOwnerState extends SliderProps {\n  dragging: boolean;\n  marked: boolean;\n  focusedThumbIndex: number;\n}\n\nexport interface SliderOwnProps {\n  /**\n   * The label of the slider.\n   */\n  'aria-label'?: string;\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby'?: string;\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext'?: string;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    SliderPropsColorOverrides\n  >;\n  /**\n   * The components used for each slot inside.\n   *\n   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n    Track?: React.ElementType;\n    Rail?: React.ElementType;\n    Thumb?: React.ElementType;\n    Mark?: React.ElementType;\n    MarkLabel?: React.ElementType;\n    ValueLabel?: React.ElementType;\n    Input?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    root?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    track?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    rail?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    thumb?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    mark?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    markLabel?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    valueLabel?: SlotComponentProps<\n      typeof SliderValueLabelComponent,\n      SliderComponentsPropsOverrides,\n      SliderOwnerState\n    >;\n    input?: SlotComponentProps<'input', SliderComponentsPropsOverrides, SliderOwnerState>;\n  };\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SliderClasses>;\n  /**\n   * @ignore\n   */\n  className?: string;\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: number | number[];\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n   * @default false\n   */\n  disableSwap?: boolean;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   * This is important for screen reader users.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel?: (index: number) => string;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   * This is important for screen reader users.\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText?: (value: number, index: number) => string;\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks?: boolean | Mark[];\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max?: number;\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min?: number;\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name?: string;\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {Event} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   * @param {number} activeThumb Index of the currently moved thumb.\n   */\n  onChange?: (event: Event, value: number | number[], activeThumb: number) => void;\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted?: (event: React.SyntheticEvent | Event, value: number | number[]) => void;\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @param {any} x\n   * @returns {any}\n   * @default function Identity(x) {\n   *   return x;\n   * }\n   */\n  scale?: (value: number) => number;\n  /**\n   * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.\n   * @default 10\n   */\n  shiftStep?: number;\n  /**\n   * The size of the slider.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', SliderPropsSizeOverrides>;\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  slotProps?: {\n    root?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    track?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    rail?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    thumb?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    mark?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    markLabel?: SlotComponentProps<'span', SliderComponentsPropsOverrides, SliderOwnerState>;\n    valueLabel?: SlotComponentProps<\n      typeof SliderValueLabelComponent,\n      SliderComponentsPropsOverrides,\n      SliderOwnerState\n    >;\n    input?: SlotComponentProps<'input', SliderComponentsPropsOverrides, SliderOwnerState>;\n  };\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots?: {\n    root?: React.ElementType;\n    track?: React.ElementType;\n    rail?: React.ElementType;\n    thumb?: React.ElementType;\n    mark?: React.ElementType;\n    markLabel?: React.ElementType;\n    valueLabel?: React.ElementType;\n    input?: React.ElementType;\n  };\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step?: number | null;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Tab index attribute of the hidden `input` element.\n   */\n  tabIndex?: number;\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track?: 'normal' | false | 'inverted';\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value?: number | number[];\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   * @default 'off'\n   */\n  valueLabelDisplay?: 'on' | 'auto' | 'off';\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @param {any} x\n   * @returns {any}\n   * @default function Identity(x) {\n   *   return x;\n   * }\n   */\n  valueLabelFormat?: string | ((value: number, index: number) => React.ReactNode);\n}\n\nexport interface SliderTypeMap<\n  RootComponent extends React.ElementType = 'span',\n  AdditionalProps = {},\n> {\n  props: AdditionalProps & SliderOwnProps;\n  defaultComponent: RootComponent;\n}\n\nexport interface SliderValueLabelProps extends React.HTMLAttributes<HTMLSpanElement> {\n  children: React.ReactElement;\n  index: number;\n  open: boolean;\n  value: number;\n}\n\ntype SliderRootProps = NonNullable<SliderTypeMap['props']['componentsProps']>['root'];\ntype SliderMarkProps = NonNullable<SliderTypeMap['props']['componentsProps']>['mark'];\ntype SliderMarkLabelProps = NonNullable<SliderTypeMap['props']['componentsProps']>['markLabel'];\ntype SliderRailProps = NonNullable<SliderTypeMap['props']['componentsProps']>['rail'];\ntype SliderTrackProps = NonNullable<SliderTypeMap['props']['componentsProps']>['track'];\ntype SliderThumbProps = NonNullable<SliderTypeMap['props']['componentsProps']>['thumb'];\n\nexport declare const SliderRoot: React.FC<SliderRootProps>;\nexport declare const SliderMark: React.FC<SliderMarkProps>;\nexport declare const SliderMarkLabel: React.FC<SliderMarkLabelProps>;\nexport declare const SliderRail: React.FC<SliderRailProps>;\nexport declare const SliderTrack: React.FC<SliderTrackProps>;\nexport declare const SliderThumb: React.FC<SliderThumbProps>;\nexport declare const SliderValueLabel: React.FC<SliderValueLabelProps>;\n\n/**\n *\n * Demos:\n *\n * - [Slider](https://mui.com/material-ui/react-slider/)\n *\n * API:\n *\n * - [Slider API](https://mui.com/material-ui/api/slider/)\n */\ndeclare const Slider: OverridableComponent<SliderTypeMap>;\n\nexport type SliderProps<\n  RootComponent extends React.ElementType = SliderTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<SliderTypeMap<RootComponent, AdditionalProps>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Slider;\n","node_modules/@mui/material/Skeleton/skeletonClasses.d.ts":"export interface SkeletonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"text\"`. */\n    text: string;\n    /** Styles applied to the root element if `variant=\"rectangular\"`. */\n    rectangular: string;\n    /** Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: string;\n    /** Styles applied to the root element if `variant=\"circular\"`. */\n    circular: string;\n    /** Styles applied to the root element if `animation=\"pulse\"`. */\n    pulse: string;\n    /** Styles applied to the root element if `animation=\"wave\"`. */\n    wave: string;\n    /** Styles applied when the component is passed children. */\n    withChildren: string;\n    /** Styles applied when the component is passed children and no width. */\n    fitContent: string;\n    /** Styles applied when the component is passed children and no height. */\n    heightAuto: string;\n}\nexport type SkeletonClassKey = keyof SkeletonClasses;\nexport declare function getSkeletonUtilityClass(slot: string): string;\ndeclare const skeletonClasses: SkeletonClasses;\nexport default skeletonClasses;\n","node_modules/@mui/material/Skeleton/index.d.ts":"export * from './Skeleton';\nexport { default } from './Skeleton';\n\nexport * from './skeletonClasses';\nexport { default as skeletonClasses } from './skeletonClasses';\n","node_modules/@mui/material/Skeleton/Skeleton.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { SkeletonClasses } from './skeletonClasses';\n\nexport interface SkeletonPropsVariantOverrides {}\n\nexport interface SkeletonOwnProps {\n  /**\n   * The animation.\n   * If `false` the animation effect is disabled.\n   * @default 'pulse'\n   */\n  animation?: 'pulse' | 'wave' | false;\n  /**\n   * Optional children to infer width and height from.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<SkeletonClasses>;\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height?: number | string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The type of content that will be rendered.\n   * @default 'text'\n   */\n  variant?: OverridableStringUnion<\n    'text' | 'rectangular' | 'rounded' | 'circular',\n    SkeletonPropsVariantOverrides\n  >;\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width?: number | string;\n}\n\nexport interface SkeletonTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'span',\n> {\n  props: AdditionalProps & SkeletonOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Skeleton](https://mui.com/material-ui/react-skeleton/)\n *\n * API:\n *\n * - [Skeleton API](https://mui.com/material-ui/api/skeleton/)\n */\ndeclare const Skeleton: OverridableComponent<SkeletonTypeMap>;\n\nexport type SkeletonProps<\n  RootComponent extends React.ElementType = SkeletonTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<SkeletonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Skeleton;\n","node_modules/@mui/material/Select/selectClasses.d.ts":"export interface SelectClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the select component `select` class. */\n    select: string;\n    /** Styles applied to the select component if `multiple={true}`. */\n    multiple: string;\n    /** Styles applied to the select component if `variant=\"filled\"`. */\n    filled: string;\n    /** Styles applied to the select component if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the select component if `variant=\"standard\"`. */\n    standard: string;\n    /** State class applied to the select component `disabled` class. */\n    disabled: string;\n    /** Styles applied to the icon component. */\n    icon: string;\n    /** Styles applied to the icon component if the popup is open. */\n    iconOpen: string;\n    /** Styles applied to the icon component if `variant=\"filled\"`. */\n    iconFilled: string;\n    /** Styles applied to the icon component if `variant=\"outlined\"`. */\n    iconOutlined: string;\n    /** Styles applied to the icon component if `variant=\"standard\"`. */\n    iconStandard: string;\n    /** Styles applied to the underlying native input component. */\n    nativeInput: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n}\nexport type SelectClassKey = keyof SelectClasses;\nexport declare function getSelectUtilityClasses(slot: string): string;\ndeclare const selectClasses: SelectClasses;\nexport default selectClasses;\n","node_modules/@mui/material/Select/index.d.ts":"export { default } from './Select';\nexport * from './Select';\n\nexport { default as selectClasses } from './selectClasses';\nexport * from './selectClasses';\n","node_modules/@mui/material/Select/SelectInput.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { MenuProps } from '../Menu';\n\n/**\n * The change can be caused by different kind of events.\n * The type of event depends on what caused the change.\n * For example, when the browser auto-fills the `Select` you'll receive a `React.ChangeEvent`.\n */\nexport type SelectChangeEvent<Value = string> =\n  | (Event & { target: { value: Value; name: string } })\n  | React.ChangeEvent<HTMLInputElement>;\n\nexport interface SelectInputProps<Value = unknown> {\n  autoFocus?: boolean;\n  autoWidth: boolean;\n  defaultOpen?: boolean;\n  disabled?: boolean;\n  error?: boolean;\n  IconComponent?: React.ElementType;\n  inputRef?: (\n    ref: HTMLSelectElement | { node: HTMLInputElement; value: SelectInputProps<Value>['value'] },\n  ) => void;\n  MenuProps?: Partial<MenuProps>;\n  multiple: boolean;\n  name?: string;\n  native: boolean;\n  onBlur?: React.FocusEventHandler<any>;\n  onChange?: (event: SelectChangeEvent<Value>, child: React.ReactNode) => void;\n  onClose?: (event: React.SyntheticEvent) => void;\n  onFocus?: React.FocusEventHandler<any>;\n  onOpen?: (event: React.SyntheticEvent) => void;\n  open?: boolean;\n  readOnly?: boolean;\n  renderValue?: (value: SelectInputProps<Value>['value']) => React.ReactNode;\n  SelectDisplayProps?: React.HTMLAttributes<HTMLDivElement>;\n  sx?: SxProps<Theme>;\n  tabIndex?: number;\n  value?: Value;\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\ndeclare const SelectInput: React.JSXElementConstructor<SelectInputProps>;\n\nexport default SelectInput;\n","node_modules/@mui/material/Select/Select.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputProps } from '../Input';\nimport { MenuProps } from '../Menu';\nimport { SelectChangeEvent, SelectInputProps } from './SelectInput';\nimport { SelectClasses } from './selectClasses';\nimport { OutlinedInputProps } from '../OutlinedInput';\nimport { FilledInputProps } from '../FilledInput';\n\nexport { SelectChangeEvent };\n\nexport interface BaseSelectProps<Value = unknown>\n  extends StandardProps<InputProps, 'value' | 'onChange'> {\n  /**\n   * If `true`, the width of the popover will automatically be set according to the items inside the\n   * menu, otherwise it will be at least the width of the select input.\n   * @default false\n   */\n  autoWidth?: boolean;\n  /**\n   * The option elements to populate the select with.\n   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.\n   *\n   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes?: Partial<SelectClasses>;\n  /**\n   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).\n   * You can only use it when the `native` prop is `false` (default).\n   * @default false\n   */\n  defaultOpen?: boolean;\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: Value;\n  /**\n   * If `true`, a value is displayed even if no items are selected.\n   *\n   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which\n   * returns the value to be displayed when no items are selected.\n   *\n   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.\n   * The label should either be hidden or forced to a shrunk state.\n   * @default false\n   */\n  displayEmpty?: boolean;\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent?: React.ElementType;\n  /**\n   * The `id` of the wrapper element or the `select` element when `native`.\n   */\n  id?: string;\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   */\n  input?: React.ReactElement<any, any>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * When `native` is `true`, the attributes are applied on the `select` element.\n   */\n  inputProps?: InputProps['inputProps'];\n  /**\n   * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)\n   */\n  label?: React.ReactNode;\n  /**\n   * The ID of an element that acts as an additional label. The Select will\n   * be labelled by the additional label and the selected value.\n   */\n  labelId?: string;\n  /**\n   * Props applied to the [`Menu`](/material-ui/api/menu/) element.\n   */\n  MenuProps?: Partial<MenuProps>;\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple?: boolean;\n  /**\n   * If `true`, the component uses a native `select` element.\n   * @default false\n   */\n  native?: boolean;\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {SelectChangeEvent<Value>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (any).\n   * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.\n   * @param {object} [child] The react element that was selected when `native` is `false` (default).\n   */\n  onChange?: SelectInputProps<Value>['onChange'];\n  /**\n   * Callback fired when the component requests to be closed.\n   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose?: (event: React.SyntheticEvent) => void;\n  /**\n   * Callback fired when the component requests to be opened.\n   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen?: (event: React.SyntheticEvent) => void;\n  /**\n   * If `true`, the component is shown.\n   * You can only use it when the `native` prop is `false` (default).\n   */\n  open?: boolean;\n  /**\n   * Render the selected value.\n   * You can only use it when the `native` prop is `false` (default).\n   *\n   * @param {any} value The `value` provided to the component.\n   * @returns {ReactNode}\n   */\n  renderValue?: (value: Value) => React.ReactNode;\n  /**\n   * Props applied to the clickable div element.\n   */\n  SelectDisplayProps?: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The `input` value. Providing an empty string will select no options.\n   * Set to an empty string `''` if you don't want any of the available options to be selected.\n   *\n   * If the value is an object it must have reference equality with the option in order to be selected.\n   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.\n   */\n  value?: Value | '';\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: SelectVariants;\n}\n\nexport interface FilledSelectProps extends Omit<FilledInputProps, 'value' | 'onChange'> {\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: 'filled';\n}\n\nexport interface StandardSelectProps extends Omit<InputProps, 'value' | 'onChange'> {\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant: 'standard';\n}\n\nexport interface OutlinedSelectProps extends Omit<OutlinedInputProps, 'value' | 'onChange'> {\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: 'outlined';\n}\n\nexport type SelectVariants = 'outlined' | 'standard' | 'filled';\n\nexport type SelectProps<Value = unknown> =\n  | (FilledSelectProps & BaseSelectProps<Value>)\n  | (StandardSelectProps & BaseSelectProps<Value>)\n  | (OutlinedSelectProps & BaseSelectProps<Value>);\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/material-ui/react-select/)\n *\n * API:\n *\n * - [Select API](https://mui.com/material-ui/api/select/)\n * - inherits [OutlinedInput API](https://mui.com/material-ui/api/outlined-input/)\n */\nexport default function Select<Value = unknown>(\n  props: SelectProps<Value>,\n): JSX.Element & {\n  muiName: string;\n};\n","node_modules/@mui/material/Rating/ratingClasses.d.ts":"export interface RatingClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: string;\n    /** Styles applied to the root element if `readOnly={true}`. */\n    readOnly: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if keyboard focused. */\n    focusVisible: string;\n    /** Visually hide an element. */\n    visuallyHidden: string;\n    /** Styles applied to the label elements. */\n    label: string;\n    /** Styles applied to the label of the \"no value\" input when it is active. */\n    labelEmptyValueActive: string;\n    /** Styles applied to the icon wrapping elements. */\n    icon: string;\n    /** Styles applied to the icon wrapping elements when empty. */\n    iconEmpty: string;\n    /** Styles applied to the icon wrapping elements when filled. */\n    iconFilled: string;\n    /** Styles applied to the icon wrapping elements when hover. */\n    iconHover: string;\n    /** Styles applied to the icon wrapping elements when focus. */\n    iconFocus: string;\n    /** Styles applied to the icon wrapping elements when active. */\n    iconActive: string;\n    /** Styles applied to the icon wrapping elements when decimals are necessary. */\n    decimal: string;\n}\nexport type RatingClassKey = keyof RatingClasses;\nexport declare function getRatingUtilityClass(slot: string): string;\ndeclare const ratingClasses: RatingClasses;\nexport default ratingClasses;\n","node_modules/@mui/material/Rating/index.d.ts":"export { default } from './Rating';\nexport * from './Rating';\n\nexport { default as ratingClasses } from './ratingClasses';\nexport * from './ratingClasses';\n","node_modules/@mui/material/Rating/Rating.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { RatingClasses } from './ratingClasses';\n\nexport interface IconContainerProps extends React.HTMLAttributes<HTMLSpanElement> {\n  value: number;\n}\n\nexport interface RatingPropsSizeOverrides {}\n\nexport interface RatingProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children' | 'onChange'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<RatingClasses>;\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default null\n   */\n  defaultValue?: number;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The icon to display when empty.\n   * @default <StarBorder fontSize=\"inherit\" />\n   */\n  emptyIcon?: React.ReactNode;\n  /**\n   * The label read when the rating input is empty.\n   * @default 'Empty'\n   */\n  emptyLabelText?: React.ReactNode;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {number} value The rating label's value to format.\n   * @returns {string}\n   * @default function defaultLabelText(value) {\n   *   return `${value} Star${value !== 1 ? 's' : ''}`;\n   * }\n   */\n  getLabelText?: (value: number) => string;\n  /**\n   * If `true`, only the selected icon will be highlighted.\n   * @default false\n   */\n  highlightSelectedOnly?: boolean;\n  /**\n   * The icon to display.\n   * @default <Star fontSize=\"inherit\" />\n   */\n  icon?: React.ReactNode;\n  /**\n   * The component containing the icon.\n   * @default function IconContainer(props) {\n   *   const { value, ...other } = props;\n   *   return <span {...other} />;\n   * }\n   */\n  IconContainerComponent?: React.ElementType<IconContainerProps>;\n  /**\n   * Maximum rating.\n   * @default 5\n   */\n  max?: number;\n  /**\n   * The name attribute of the radio `input` elements.\n   * This input `name` should be unique within the page.\n   * Being unique within a form is insufficient since the `name` is used to generated IDs.\n   */\n  name?: string;\n  /**\n   * Callback fired when the value changes.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {number|null} value The new value.\n   */\n  onChange?: (event: React.SyntheticEvent, value: number | null) => void;\n  /**\n   * Callback function that is fired when the hover state changes.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {number} value The new value.\n   */\n  onChangeActive?: (event: React.SyntheticEvent, value: number) => void;\n  /**\n   * The minimum increment value change allowed.\n   * @default 1\n   */\n  precision?: number;\n  /**\n   * Removes all hover effects and pointer events.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', RatingPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The rating value.\n   */\n  value?: number | null;\n}\n\n/**\n *\n * Demos:\n *\n * - [Rating](https://mui.com/material-ui/react-rating/)\n *\n * API:\n *\n * - [Rating API](https://mui.com/material-ui/api/rating/)\n */\nexport default function Rating(props: RatingProps): JSX.Element;\n","node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.d.ts":"export interface ScopedCssBaselineClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type ScopedCssBaselineClassKey = keyof ScopedCssBaselineClasses;\nexport declare function getScopedCssBaselineUtilityClass(slot: string): string;\ndeclare const scopedCssBaselineClasses: Record<\"root\", string>;\nexport default scopedCssBaselineClasses;\n","node_modules/@mui/material/ScopedCssBaseline/index.d.ts":"export { default } from './ScopedCssBaseline';\nexport * from './ScopedCssBaseline';\n\nexport { default as scopedCssBaselineClasses } from './scopedCssBaselineClasses';\nexport * from './scopedCssBaselineClasses';\n","node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ScopedCssBaselineClasses } from './scopedCssBaselineClasses';\n\nexport interface ScopedCssBaselineOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ScopedCssBaselineClasses>;\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   */\n  enableColorScheme?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ScopedCssBaselineTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & ScopedCssBaselineOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [CSS Baseline](https://mui.com/material-ui/react-css-baseline/)\n *\n * API:\n *\n * - [ScopedCssBaseline API](https://mui.com/material-ui/api/scoped-css-baseline/)\n */\ndeclare const ScopedCssBaseline: OverridableComponent<ScopedCssBaselineTypeMap>;\n\nexport type ScopedCssBaselineProps<\n  RootComponent extends React.ElementType = ScopedCssBaselineTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ScopedCssBaselineTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\n/**\n *\n * Demos:\n *\n * - [Css Baseline](https://mui.com/components/css-baseline/)\n *\n * API:\n *\n * - [ScopedCssBaseline API](https://mui.com/api/scoped-css-baseline/)\n */\nexport default ScopedCssBaseline;\n","node_modules/@mui/material/RadioGroup/useRadioGroup.d.ts":"import { RadioGroupContextValue } from './RadioGroupContext';\nexport interface RadioGroupState extends RadioGroupContextValue {\n}\nexport default function useRadioGroup(): RadioGroupState | undefined;\n","node_modules/@mui/material/RadioGroup/index.d.ts":"export { default } from './RadioGroup';\nexport * from './RadioGroup';\n\nexport { default as useRadioGroup, RadioGroupState } from './useRadioGroup';\n","node_modules/@mui/material/RadioGroup/RadioGroupContext.d.ts":"import * as React from 'react';\nexport interface RadioGroupContextValue {\n    name: string | undefined;\n    onChange: (event: React.ChangeEvent<HTMLInputElement>, value: string) => void;\n    value: any;\n}\n/**\n * @ignore - internal component.\n */\ndeclare const RadioGroupContext: React.Context<RadioGroupContextValue | undefined>;\nexport default RadioGroupContext;\n","node_modules/@mui/material/RadioGroup/RadioGroup.d.ts":"import * as React from 'react';\nimport { FormGroupProps } from '../FormGroup';\n\nexport interface RadioGroupProps extends Omit<FormGroupProps, 'onChange'> {\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: any;\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name?: string;\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>, value: string) => void;\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value?: any;\n}\n\nexport type RadioGroupClassKey = keyof NonNullable<RadioGroupProps['classes']>;\n\n/**\n *\n * Demos:\n *\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n *\n * API:\n *\n * - [RadioGroup API](https://mui.com/material-ui/api/radio-group/)\n * - inherits [FormGroup API](https://mui.com/material-ui/api/form-group/)\n */\nexport default function RadioGroup(props: RadioGroupProps): JSX.Element;\n","node_modules/@mui/material/Portal/index.d.ts":"export { Portal as default } from '@mui/base/Portal';\nexport * from '@mui/base/Portal';\n","node_modules/@mui/material/Popper/index.d.ts":"export { default } from './Popper';\nexport * from './Popper';\nexport { PopperPlacementType } from '@mui/base/Popper';\n","node_modules/@mui/material/Popper/Popper.d.ts":"import { PopperProps as BasePopperProps } from '@mui/base/Popper';\nimport { SxProps } from '@mui/system';\nimport * as React from 'react';\nimport { Theme } from '../styles';\nexport interface PopperProps extends Omit<BasePopperProps, 'direction'> {\n    /**\n     * The component used for the root node.\n     * Either a string to use a HTML element or a component.\n     */\n    component?: React.ElementType;\n    /**\n     * The components used for each slot inside the Popper.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    components?: {\n        Root?: React.ElementType;\n    };\n    /**\n     * The props used for each slot inside the Popper.\n     * @default {}\n     */\n    componentsProps?: BasePopperProps['slotProps'];\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n}\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)\n * - [Menu](https://mui.com/material-ui/react-menu/)\n * - [Popper](https://mui.com/material-ui/react-popper/)\n *\n * API:\n *\n * - [Popper API](https://mui.com/material-ui/api/popper/)\n */\ndeclare const Popper: React.ForwardRefExoticComponent<PopperProps & React.RefAttributes<HTMLDivElement>>;\nexport default Popper;\n","node_modules/@mui/material/Popover/popoverClasses.d.ts":"export interface PopoverClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the Paper component. */\n    paper: string;\n}\nexport type PopoverClassKey = keyof PopoverClasses;\nexport declare function getPopoverUtilityClass(slot: string): string;\ndeclare const popoverClasses: PopoverClasses;\nexport default popoverClasses;\n","node_modules/@mui/material/Popover/index.d.ts":"export { default } from './Popover';\nexport * from './Popover';\n\nexport { default as popoverClasses } from './popoverClasses';\nexport * from './popoverClasses';\n","node_modules/@mui/material/Popover/Popover.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { InternalStandardProps as StandardProps } from '..';\nimport Paper, { PaperProps } from '../Paper';\nimport Modal, { ModalOwnerState, ModalProps } from '../Modal';\nimport { Theme } from '../styles';\nimport { TransitionProps } from '../transitions/transition';\nimport { PopoverClasses } from './popoverClasses';\n\nexport interface PopoverOrigin {\n  vertical: 'top' | 'center' | 'bottom' | number;\n  horizontal: 'left' | 'center' | 'right' | number;\n}\n\nexport interface PopoverPosition {\n  top: number;\n  left: number;\n}\n\nexport type PopoverReference = 'anchorEl' | 'anchorPosition' | 'none';\n\ninterface PopoverVirtualElement {\n  getBoundingClientRect: () => DOMRect;\n  nodeType: Node['ELEMENT_NODE'];\n}\n\nexport interface PopoverProps\n  extends StandardProps<Omit<ModalProps, 'slots' | 'slotProps'>, 'children'> {\n  /**\n   * A ref for imperative actions.\n   * It currently only supports updatePosition() action.\n   */\n  action?: React.Ref<PopoverActions>;\n  /**\n   * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),\n   * or a function that returns either.\n   * It's used to set the position of the popover.\n   */\n  anchorEl?:\n    | null\n    | Element\n    | (() => Element)\n    | PopoverVirtualElement\n    | (() => PopoverVirtualElement);\n  /**\n   * This is the point on the anchor where the popover's\n   * `anchorEl` will attach to. This is not used when the\n   * anchorReference is 'anchorPosition'.\n   *\n   * Options:\n   * vertical: [top, center, bottom];\n   * horizontal: [left, center, right].\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'left',\n   * }\n   */\n  anchorOrigin?: PopoverOrigin;\n  /**\n   * This is the position that may be used to set the position of the popover.\n   * The coordinates are relative to the application's client area.\n   */\n  anchorPosition?: PopoverPosition;\n  /**\n   * This determines which anchor prop to refer to when setting\n   * the position of the popover.\n   * @default 'anchorEl'\n   */\n  anchorReference?: PopoverReference;\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<PopoverClasses>;\n  /**\n   * An HTML element, component instance, or function that returns either.\n   * The `container` will passed to the Modal component.\n   *\n   * By default, it uses the body of the anchorEl's top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: ModalProps['container'];\n  /**\n   * The elevation of the popover.\n   * @default 8\n   */\n  elevation?: number;\n  /**\n   * Specifies how close to the edge of the window the popover can appear.\n   * If null, the popover will not be constrained by the window.\n   * @default 16\n   */\n  marginThreshold?: number | null;\n  onClose?: ModalProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   */\n  open: boolean;\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   *\n   * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.\n   * @deprecated Use `slotProps.paper` instead.\n   *\n   * @default {}\n   */\n  PaperProps?: Partial<PaperProps<React.ElementType>>;\n  /**\n   * The components used for each slot inside.\n   *\n   * @default {}\n   */\n  slots?: {\n    root?: React.ElementType;\n    paper?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    root?: SlotComponentProps<typeof Modal, {}, ModalOwnerState>;\n    paper?: SlotComponentProps<typeof Paper, {}, {}>;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * This is the point on the popover which\n   * will attach to the anchor's origin.\n   *\n   * Options:\n   * vertical: [top, center, bottom, x(px)];\n   * horizontal: [left, center, right, x(px)].\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'left',\n   * }\n   */\n  transformOrigin?: PopoverOrigin;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n}\n\nexport interface PopoverActions {\n  updatePosition(): void;\n}\n\nexport function getOffsetTop(rect: DOMRect, vertical: number | 'center' | 'bottom' | 'top'): number;\n\nexport function getOffsetLeft(\n  rect: DOMRect,\n  horizontal: number | 'center' | 'right' | 'left',\n): number;\n\ntype PopoverRootProps = NonNullable<PopoverProps['slotProps']>['root'];\ntype PopoverPaperProps = NonNullable<PopoverProps['slotProps']>['paper'];\n\nexport declare const PopoverRoot: React.FC<PopoverRootProps>;\nexport declare const PopoverPaper: React.FC<PopoverPaperProps>;\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/material-ui/react-menu/)\n * - [Popover](https://mui.com/material-ui/react-popover/)\n *\n * API:\n *\n * - [Popover API](https://mui.com/material-ui/api/popover/)\n * - inherits [Modal API](https://mui.com/material-ui/api/modal/)\n */\nexport default function Popover(props: PopoverProps): JSX.Element;\n","node_modules/@mui/material/Slide/index.d.ts":"export { default } from './Slide';\nexport * from './Slide';\n","node_modules/@mui/material/Slide/Slide.d.ts":"import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface SlideProps extends TransitionProps {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the container the Slide is transitioning from.\n   */\n  container?: null | Element | ((element: Element) => Element);\n  /**\n   * Direction the child node will enter from.\n   * @default 'down'\n   */\n  direction?: 'left' | 'right' | 'up' | 'down';\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   * @default {\n   *   enter: theme.transitions.easing.easeOut,\n   *   exit: theme.transitions.easing.sharp,\n   * }\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: TransitionProps['in'];\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout?: TransitionProps['timeout'];\n}\n\n/**\n * The Slide transition is used by the [Drawer](https://mui.com/material-ui/react-drawer/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Slide API](https://mui.com/material-ui/api/slide/)\n * - inherits [Transition API](https://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Slide(props: SlideProps): JSX.Element;\n","node_modules/@mui/material/PaginationItem/paginationItemClasses.d.ts":"export interface PaginationItemClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `type=\"page\"`. */\n    page: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: string;\n    /** Styles applied to the root element if `variant=\"text\"`. */\n    text: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.\n     *  @deprecated Combine the [.MuiPaginationItem-text](/material-ui/api/pagination-item/#pagination-item-classes-text) and [.MuiPaginationItem-colorPrimary](/material-ui/api/pagination-item/#pagination-item-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    textPrimary: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.\n     *  @deprecated Combine the [.MuiPaginationItem-text](/material-ui/api/pagination-item/#pagination-item-classes-text) and [.MuiPaginationItem-colorSecondary](/material-ui/api/pagination-item/#pagination-item-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    textSecondary: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.\n     * @deprecated Combine the [.MuiPaginationItem-outlined](/material-ui/api/pagination-item/#pagination-item-classes-outlined) and [.MuiPaginationItem-colorPrimary](/material-ui/api/pagination-item/#pagination-item-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    outlinedPrimary: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiPaginationItem-outlined](/material-ui/api/pagination-item/#pagination-item-classes-outlined) and [.MuiPaginationItem-colorSecondary](/material-ui/api/pagination-item/#pagination-item-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    outlinedSecondary: string;\n    /** Styles applied to the root element if `rounded=\"true\"`. */\n    rounded: string;\n    /** Styles applied to the root element if `type=\"start-ellipsis\"` or `type=\"end-ellipsis\"`. */\n    ellipsis: string;\n    /** Styles applied to the root element if `type=\"first\"` or type=\"last\". */\n    firstLast: string;\n    /** Styles applied to the root element if `type=\"previous\"` or type=\"next\". */\n    previousNext: string;\n    /** State class applied to the root element if keyboard focused. */\n    focusVisible: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `selected={true}`. */\n    selected: string;\n    /** Styles applied to the icon to display. */\n    icon: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n}\nexport type PaginationItemClassKey = keyof PaginationItemClasses;\nexport declare function getPaginationItemUtilityClass(slot: string): string;\ndeclare const paginationItemClasses: PaginationItemClasses;\nexport default paginationItemClasses;\n","node_modules/@mui/material/PaginationItem/index.d.ts":"export { default } from './PaginationItem';\nexport * from './PaginationItem';\n\nexport { default as paginationItemClasses } from './paginationItemClasses';\nexport * from './paginationItemClasses';\n","node_modules/@mui/material/PaginationItem/PaginationItem.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '@mui/material/OverridableComponent';\nimport { Theme } from '../styles';\nimport { UsePaginationItem } from '../usePagination/usePagination';\nimport { PaginationItemClasses } from './paginationItemClasses';\n\nexport interface PaginationItemPropsVariantOverrides {}\n\nexport interface PaginationItemPropsSizeOverrides {}\n\nexport interface PaginationItemPropsColorOverrides {}\n\nexport interface PaginationItemOwnProps {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<PaginationItemClasses>;\n  /**\n   * The active color.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color?: OverridableStringUnion<\n    'standard' | 'primary' | 'secondary',\n    PaginationItemPropsColorOverrides\n  >;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    first?: React.ElementType;\n    last?: React.ElementType;\n    next?: React.ElementType;\n    previous?: React.ElementType;\n  };\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The current page number.\n   */\n  page?: React.ReactNode;\n  /**\n   * If `true` the pagination item is selected.\n   * @default false\n   */\n  selected?: boolean;\n  /**\n   * The shape of the pagination item.\n   * @default 'circular'\n   */\n  shape?: 'circular' | 'rounded';\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', PaginationItemPropsSizeOverrides>;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    first?: React.ElementType;\n    last?: React.ElementType;\n    next?: React.ElementType;\n    previous?: React.ElementType;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The type of pagination item.\n   * @default 'page'\n   */\n  type?: UsePaginationItem['type'];\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant?: OverridableStringUnion<'text' | 'outlined', PaginationItemPropsVariantOverrides>;\n}\n\nexport interface PaginationItemTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & PaginationItemOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Pagination](https://mui.com/material-ui/react-pagination/)\n *\n * API:\n *\n * - [PaginationItem API](https://mui.com/material-ui/api/pagination-item/)\n */\ndeclare const PaginationItem: OverridableComponent<PaginationItemTypeMap>;\n\nexport type PaginationItemProps<\n  RootComponent extends React.ElementType = PaginationItemTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<PaginationItemTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default PaginationItem;\n","node_modules/@mui/material/OutlinedInput/outlinedInputClasses.d.ts":"export interface OutlinedInputClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if the color is secondary. */\n    colorSecondary: string;\n    /** Styles applied to the root element if the component is focused. */\n    focused: string;\n    /** Styles applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: string;\n    /** Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `multiline={true}`. */\n    multiline: string;\n    /** Styles applied to the NotchedOutline element. */\n    notchedOutline: string;\n    /** Styles applied to the input element. */\n    input: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    inputSizeSmall: string;\n    /** Styles applied to the input element if `multiline={true}`. */\n    inputMultiline: string;\n    /** Styles applied to the input element if `startAdornment` is provided. */\n    inputAdornedStart: string;\n    /** Styles applied to the input element if `endAdornment` is provided. */\n    inputAdornedEnd: string;\n    /** Styles applied to the input element if `type=\"search\"`. */\n    inputTypeSearch: string;\n}\nexport type OutlinedInputClassKey = keyof OutlinedInputClasses;\nexport declare function getOutlinedInputUtilityClass(slot: string): string;\ndeclare const outlinedInputClasses: OutlinedInputClasses;\nexport default outlinedInputClasses;\n","node_modules/@mui/material/OutlinedInput/index.d.ts":"export { default } from './OutlinedInput';\nexport * from './OutlinedInput';\n\nexport { default as outlinedInputClasses } from './outlinedInputClasses';\nexport * from './outlinedInputClasses';\n","node_modules/@mui/material/OutlinedInput/OutlinedInput.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputBaseProps } from '../InputBase';\nimport { OutlinedInputClasses } from './outlinedInputClasses';\n\nexport interface OutlinedInputProps extends StandardProps<InputBaseProps> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<OutlinedInputClasses>;\n  /**\n   * The label of the `input`. It is only used for layout. The actual labelling\n   * is handled by `InputLabel`.\n   */\n  label?: React.ReactNode;\n  /**\n   * If `true`, the outline is notched to accommodate the label.\n   */\n  notched?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [OutlinedInput API](https://mui.com/material-ui/api/outlined-input/)\n * - inherits [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\ndeclare const OutlinedInput: ((props: OutlinedInputProps) => JSX.Element) & { muiName: string };\n\nexport default OutlinedInput;\n","node_modules/@mui/material/OutlinedInput/NotchedOutline.d.ts":"import * as React from 'react';\nimport { InternalStandardProps as StandardProps } from '..';\n\nexport interface NotchedOutlineProps\n  extends StandardProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>> {\n  disabled?: boolean;\n  error?: boolean;\n  focused?: boolean;\n  label?: React.ReactNode;\n  notched: boolean;\n}\n\nexport type NotchedOutlineClassKey = keyof NonNullable<NotchedOutlineProps['classes']>;\n\ndeclare const NotchedOutline: React.JSXElementConstructor<NotchedOutlineProps>;\n\nexport default NotchedOutline;\n","node_modules/@mui/material/Radio/radioClasses.d.ts":"export interface RadioClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `checked={true}`. */\n    checked: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n}\nexport type RadioClassKey = keyof RadioClasses;\nexport declare function getRadioUtilityClass(slot: string): string;\ndeclare const radioClasses: RadioClasses;\nexport default radioClasses;\n","node_modules/@mui/material/Radio/index.d.ts":"export { default } from './Radio';\nexport * from './Radio';\n\nexport { default as radioClasses } from './radioClasses';\nexport * from './radioClasses';\n","node_modules/@mui/material/Radio/Radio.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { SwitchBaseProps } from '../internal/SwitchBase';\nimport { RadioClasses } from './radioClasses';\n\nexport interface RadioPropsSizeOverrides {}\n\nexport interface RadioPropsColorOverrides {}\n\nexport interface RadioProps\n  extends StandardProps<SwitchBaseProps, 'checkedIcon' | 'color' | 'icon' | 'type'> {\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<RadioClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'default',\n    RadioPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon?: React.ReactNode;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', RadioPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n *\n * API:\n *\n * - [Radio API](https://mui.com/material-ui/api/radio/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\nexport default function Radio(props: RadioProps): JSX.Element;\n","node_modules/@mui/material/NativeSelect/nativeSelectClasses.d.ts":"export interface NativeSelectClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the select component `select` class. */\n    select: string;\n    /** Styles applied to the select component if `multiple={true}`. */\n    multiple: string;\n    /** Styles applied to the select component if `variant=\"filled\"`. */\n    filled: string;\n    /** Styles applied to the select component if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the select component if `variant=\"standard\"`. */\n    standard: string;\n    /** State class applied to the select component `disabled` class. */\n    disabled: string;\n    /** Styles applied to the icon component. */\n    icon: string;\n    /** Styles applied to the icon component if the popup is open. */\n    iconOpen: string;\n    /** Styles applied to the icon component if `variant=\"filled\"`. */\n    iconFilled: string;\n    /** Styles applied to the icon component if `variant=\"outlined\"`. */\n    iconOutlined: string;\n    /** Styles applied to the icon component if `variant=\"standard\"`. */\n    iconStandard: string;\n    /** Styles applied to the underlying native input component. */\n    nativeInput: string;\n    /** State class applied to the select component `error` class. */\n    error: string;\n}\nexport type NativeSelectClassKey = keyof NativeSelectClasses;\nexport declare function getNativeSelectUtilityClasses(slot: string): string;\ndeclare const nativeSelectClasses: NativeSelectClasses;\nexport default nativeSelectClasses;\n","node_modules/@mui/material/NativeSelect/index.d.ts":"export { default } from './NativeSelect';\nexport * from './NativeSelect';\n\nexport { default as nativeSelectClasses } from './nativeSelectClasses';\nexport * from './nativeSelectClasses';\n","node_modules/@mui/material/NativeSelect/NativeSelectInput.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\n\nexport interface NativeSelectInputProps extends React.SelectHTMLAttributes<HTMLSelectElement> {\n  disabled?: boolean;\n  IconComponent: React.ElementType;\n  inputRef?: React.Ref<HTMLSelectElement>;\n  variant?: 'standard' | 'outlined' | 'filled';\n  error?: boolean;\n  sx?: SxProps<Theme>;\n}\n\ndeclare const NativeSelectInput: React.JSXElementConstructor<NativeSelectInputProps>;\n\nexport default NativeSelectInput;\n","node_modules/@mui/material/NativeSelect/NativeSelect.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputProps } from '../Input';\nimport { NativeSelectInputProps } from './NativeSelectInput';\nimport { NativeSelectClasses } from './nativeSelectClasses';\n\nexport interface NativeSelectProps\n  extends StandardProps<InputProps, 'inputProps' | 'value' | 'onChange'> {\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes?: Partial<NativeSelectClasses>;\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent?: React.ElementType;\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input?: React.ReactElement<any, any>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.\n   */\n  inputProps?: Partial<NativeSelectInputProps>;\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: NativeSelectInputProps['onChange'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value?: unknown;\n  /**\n   * The variant to use.\n   */\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n *\n * Demos:\n *\n * - [Select](https://mui.com/material-ui/react-select/)\n *\n * API:\n *\n * - [NativeSelect API](https://mui.com/material-ui/api/native-select/)\n * - inherits [Input API](https://mui.com/material-ui/api/input/)\n */\ndeclare const NativeSelect: ((props: NativeSelectProps) => JSX.Element) & { muiName: string };\n\nexport default NativeSelect;\n","node_modules/@mui/material/Paper/paperClasses.d.ts":"export interface PaperClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `square={true}`. */\n    rounded: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"elevation\"`. */\n    elevation: string;\n    /** Styles applied to the root element if `elevation={0}`. */\n    elevation0: string;\n    /** Styles applied to the root element if `elevation={1}`. */\n    elevation1: string;\n    /** Styles applied to the root element if `elevation={2}`. */\n    elevation2: string;\n    /** Styles applied to the root element if `elevation={3}`. */\n    elevation3: string;\n    /** Styles applied to the root element if `elevation={4}`. */\n    elevation4: string;\n    /** Styles applied to the root element if `elevation={5}`. */\n    elevation5: string;\n    /** Styles applied to the root element if `elevation={6}`. */\n    elevation6: string;\n    /** Styles applied to the root element if `elevation={7}`. */\n    elevation7: string;\n    /** Styles applied to the root element if `elevation={8}`. */\n    elevation8: string;\n    /** Styles applied to the root element if `elevation={9}`. */\n    elevation9: string;\n    /** Styles applied to the root element if `elevation={10}`. */\n    elevation10: string;\n    /** Styles applied to the root element if `elevation={11}`. */\n    elevation11: string;\n    /** Styles applied to the root element if `elevation={12}`. */\n    elevation12: string;\n    /** Styles applied to the root element if `elevation={13}`. */\n    elevation13: string;\n    /** Styles applied to the root element if `elevation={14}`. */\n    elevation14: string;\n    /** Styles applied to the root element if `elevation={15}`. */\n    elevation15: string;\n    /** Styles applied to the root element if `elevation={16}`. */\n    elevation16: string;\n    /** Styles applied to the root element if `elevation={17}`. */\n    elevation17: string;\n    /** Styles applied to the root element if `elevation={18}`. */\n    elevation18: string;\n    /** Styles applied to the root element if `elevation={19}`. */\n    elevation19: string;\n    /** Styles applied to the root element if `elevation={20}`. */\n    elevation20: string;\n    /** Styles applied to the root element if `elevation={21}`. */\n    elevation21: string;\n    /** Styles applied to the root element if `elevation={22}`. */\n    elevation22: string;\n    /** Styles applied to the root element if `elevation={23}`. */\n    elevation23: string;\n    /** Styles applied to the root element if `elevation={24}`. */\n    elevation24: string;\n}\nexport type PaperClassKey = keyof PaperClasses;\nexport declare function getPaperUtilityClass(slot: string): string;\ndeclare const paperClasses: PaperClasses;\nexport default paperClasses;\n","node_modules/@mui/material/Paper/index.d.ts":"export { default } from './Paper';\nexport type { PaperProps, PaperOwnProps, PaperPropsVariantOverrides, PaperTypeMap } from './Paper';\n\nexport { default as paperClasses } from './paperClasses';\nexport * from './paperClasses';\n","node_modules/@mui/material/Paper/Paper.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverrideProps, OverridableComponent, OverridableTypeMap } from '../OverridableComponent';\nimport { PaperClasses } from './paperClasses';\n\nexport interface PaperPropsVariantOverrides {}\n\nexport interface PaperOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<PaperClasses>;\n  /**\n   * Shadow depth, corresponds to `dp` in the spec.\n   * It accepts values between 0 and 24 inclusive.\n   * @default 1\n   */\n  elevation?: number;\n  /**\n   * If `true`, rounded corners are disabled.\n   * @default false\n   */\n  square?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'elevation'\n   */\n  variant?: OverridableStringUnion<'elevation' | 'outlined', PaperPropsVariantOverrides>;\n}\n\nexport interface PaperTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & PaperOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n * - [Paper](https://mui.com/material-ui/react-paper/)\n *\n * API:\n *\n * - [Paper API](https://mui.com/material-ui/api/paper/)\n */\ndeclare const Paper: OverridableComponent<PaperTypeMap>;\n\nexport interface ExtendPaperTypeMap<TypeMap extends OverridableTypeMap, Keys extends string = ''> {\n  props: TypeMap['props'] & Omit<PaperTypeMap['props'], Keys>;\n  defaultComponent: TypeMap['defaultComponent'];\n}\n\nexport type PaperProps<\n  RootComponent extends React.ElementType = PaperTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<PaperTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Paper;\n","node_modules/@mui/material/Pagination/paginationClasses.d.ts":"export interface PaginationClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the ul element. */\n    ul: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"text\"`. */\n    text: string;\n}\nexport type PaginationClassKey = keyof PaginationClasses;\nexport declare function getPaginationUtilityClass(slot: string): string;\ndeclare const paginationClasses: PaginationClasses;\nexport default paginationClasses;\n","node_modules/@mui/material/Pagination/index.d.ts":"export { default } from './Pagination';\nexport * from './Pagination';\n\nexport { default as paginationClasses } from './paginationClasses';\nexport * from './paginationClasses';\n","node_modules/@mui/material/Pagination/Pagination.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '@mui/material';\nimport { Theme } from '../styles';\nimport { UsePaginationItem, UsePaginationProps } from '../usePagination/usePagination';\nimport { PaginationClasses } from './paginationClasses';\n\nexport interface PaginationRenderItemParams extends UsePaginationItem {\n  color: PaginationProps['color'];\n  shape: PaginationProps['shape'];\n  size: PaginationProps['size'];\n  variant: PaginationProps['variant'];\n}\n\nexport interface PaginationPropsVariantOverrides {}\n\nexport interface PaginationPropsSizeOverrides {}\n\nexport interface PaginationPropsColorOverrides {}\n\nexport interface PaginationProps\n  extends UsePaginationProps,\n    StandardProps<React.HTMLAttributes<HTMLElement>, 'children' | 'onChange'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<PaginationClasses>;\n  /**\n   * The active color.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'standard'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'standard',\n    PaginationPropsColorOverrides\n  >;\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n   * This is important for screen reader users.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.\n   * @param {number} page The page number to format.\n   * @param {bool} selected If true, the current page is selected.\n   * @returns {string}\n   */\n  getItemAriaLabel?: (type: UsePaginationItem['type'], page: number, selected: boolean) => string;\n\n  /**\n   * Render the item.\n   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.\n   * @returns {ReactNode}\n   * @default (item) => <PaginationItem {...item} />\n   */\n  renderItem?: (params: PaginationRenderItemParams) => React.ReactNode;\n  /**\n   * The shape of the pagination items.\n   * @default 'circular'\n   */\n  shape?: 'circular' | 'rounded';\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', PaginationPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant?: OverridableStringUnion<'text' | 'outlined', PaginationPropsVariantOverrides>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Pagination](https://mui.com/material-ui/react-pagination/)\n *\n * API:\n *\n * - [Pagination API](https://mui.com/material-ui/api/pagination/)\n */\nexport default function Pagination(props: PaginationProps): JSX.Element;\n","node_modules/@mui/material/MenuList/index.d.ts":"export { default } from './MenuList';\nexport * from './MenuList';\n","node_modules/@mui/material/MenuList/MenuList.d.ts":"import * as React from 'react';\nimport { ExtendList, ExtendListTypeMap } from '../List';\nimport { OverrideProps } from '../OverridableComponent';\n\nexport interface MenuListOwnProps {\n  /**\n   * If `true`, will focus the `[role=\"menu\"]` container and move into tab order.\n   * @default false\n   */\n  autoFocus?: boolean;\n  /**\n   * If `true`, will focus the first menuitem if `variant=\"menu\"` or selected item\n   * if `variant=\"selectedMenu\"`.\n   * @default false\n   */\n  autoFocusItem?: boolean;\n  /**\n   * MenuList contents, normally `MenuItem`s.\n   */\n  children?: React.ReactNode;\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable?: boolean;\n  /**\n   * If `true`, the menu items will not wrap focus.\n   * @default false\n   */\n  disableListWrap?: boolean;\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus\n   * and the vertical alignment relative to the anchor element.\n   * @default 'selectedMenu'\n   */\n  variant?: 'menu' | 'selectedMenu';\n}\n\nexport type MenuListTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'ul',\n> = ExtendListTypeMap<{\n  props: AdditionalProps & MenuListOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\nexport type MenuListClassKey = keyof NonNullable<MenuListTypeMap['props']['classes']>;\n\n/**\n * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.\n * It's exposed to help customization of the [`Menu`](https://mui.com/material-ui/api/menu/) component if you\n * use it separately you need to move focus into the component manually. Once\n * the focus is placed inside the component it is fully keyboard accessible.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [MenuList API](https://mui.com/material-ui/api/menu-list/)\n * - inherits [List API](https://mui.com/material-ui/api/list/)\n */\ndeclare const MenuList: ExtendList<MenuListTypeMap>;\n\nexport type MenuListProps<\n  RootComponent extends React.ElementType = MenuListTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<MenuListTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default MenuList;\n","node_modules/@mui/material/NoSsr/index.d.ts":"export { NoSsr as default } from '@mui/base/NoSsr';\nexport * from '@mui/base/NoSsr';\n","node_modules/@mui/material/MobileStepper/mobileStepperClasses.d.ts":"export interface MobileStepperClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `position=\"bottom\"`. */\n    positionBottom: string;\n    /** Styles applied to the root element if `position=\"top\"`. */\n    positionTop: string;\n    /** Styles applied to the root element if `position=\"static\"`. */\n    positionStatic: string;\n    /** Styles applied to the dots container if `variant=\"dots\"`. */\n    dots: string;\n    /** Styles applied to each dot if `variant=\"dots\"`. */\n    dot: string;\n    /** Styles applied to a dot if `variant=\"dots\"` and this is the active step. */\n    dotActive: string;\n    /** Styles applied to the Linear Progress component if `variant=\"progress\"`. */\n    progress: string;\n}\nexport type MobileStepperClassKey = keyof MobileStepperClasses;\nexport declare function getMobileStepperUtilityClass(slot: string): string;\ndeclare const mobileStepperClasses: MobileStepperClasses;\nexport default mobileStepperClasses;\n","node_modules/@mui/material/MobileStepper/index.d.ts":"export { default } from './MobileStepper';\nexport * from './MobileStepper';\n\nexport { default as mobileStepperClasses } from './mobileStepperClasses';\nexport * from './mobileStepperClasses';\n","node_modules/@mui/material/MobileStepper/MobileStepper.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { LinearProgressProps } from '../LinearProgress';\nimport { MobileStepperClasses } from './mobileStepperClasses';\n\nexport interface MobileStepperProps extends StandardProps<PaperProps, 'children' | 'variant'> {\n  /**\n   * Set the active step (zero based index).\n   * Defines which dot is highlighted when the variant is 'dots'.\n   * @default 0\n   */\n  activeStep?: number;\n  /**\n   * A back button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  backButton: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<MobileStepperClasses>;\n  /**\n   * Props applied to the `LinearProgress` element.\n   */\n  LinearProgressProps?: Partial<LinearProgressProps>;\n  /**\n   * A next button element. For instance, it can be a `Button` or an `IconButton`.\n   */\n  nextButton: React.ReactNode;\n  /**\n   * Set the positioning type.\n   * @default 'bottom'\n   */\n  position?: 'bottom' | 'top' | 'static';\n  /**\n   * The total steps.\n   */\n  steps: number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'dots'\n   */\n  variant?: 'text' | 'dots' | 'progress';\n}\n\n/**\n *\n * Demos:\n *\n * - [Stepper](https://mui.com/material-ui/react-stepper/)\n *\n * API:\n *\n * - [MobileStepper API](https://mui.com/material-ui/api/mobile-stepper/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function MobileStepper(props: MobileStepperProps): JSX.Element;\n","node_modules/@mui/material/Modal/modalClasses.d.ts":"export interface ModalClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if the `Modal` has exited. */\n    hidden: string;\n    /** Class name applied to the backdrop element. */\n    backdrop: string;\n}\nexport type ModalClassKey = keyof ModalClasses;\nexport declare function getModalUtilityClass(slot: string): string;\ndeclare const modalClasses: ModalClasses;\nexport default modalClasses;\n","node_modules/@mui/material/Modal/index.d.ts":"export { ModalManager } from '@mui/base/unstable_useModal'; // exporting ModalManager\n\nexport { default } from './Modal';\nexport * from './Modal';\n\nexport { default as modalClasses } from './modalClasses';\nexport * from './modalClasses';\n","node_modules/@mui/material/Modal/Modal.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverrideProps } from '@mui/types';\nimport { SlotComponentProps } from '@mui/base';\nimport { PortalProps } from '../Portal';\nimport { Theme } from '../styles';\nimport Backdrop, { BackdropProps } from '../Backdrop';\nimport { OverridableComponent } from '../OverridableComponent';\nimport { ModalClasses } from './modalClasses';\n\nexport interface ModalComponentsPropsOverrides {}\n\nexport interface ModalOwnerState extends ModalProps {\n  exited: boolean;\n}\n\nexport interface ModalSlots {\n  /**\n   * The component that renders the root.\n   * @default 'div'\n   */\n  root?: React.ElementType;\n  /**\n   * The component that renders the backdrop.\n   */\n  backdrop?: React.ElementType;\n}\n\nexport interface ModalOwnProps {\n  /**\n   * A backdrop component. This prop enables custom backdrop rendering.\n   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.\n   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.\n   * @default styled(Backdrop, {\n   *   name: 'MuiModal',\n   *   slot: 'Backdrop',\n   *   overridesResolver: (props, styles) => {\n   *     return styles.backdrop;\n   *   },\n   * })({\n   *   zIndex: -1,\n   * })\n   */\n  BackdropComponent?: React.ElementType<BackdropProps>;\n  /**\n   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.\n   * @deprecated Use `slotProps.backdrop` instead.\n   */\n  BackdropProps?: Partial<BackdropProps>;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ModalClasses>;\n  /**\n   * @ignore\n   */\n  className?: string;\n  /**\n   * When set to true the Modal waits until a nested Transition is completed before closing.\n   * @default false\n   */\n  closeAfterTransition?: boolean;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n    Backdrop?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    root?: SlotComponentProps<'div', ModalComponentsPropsOverrides, ModalOwnerState>;\n    backdrop?: SlotComponentProps<typeof Backdrop, ModalComponentsPropsOverrides, ModalOwnerState>;\n  };\n  /**\n   * An HTML element or function that returns one.\n   * The `container` will have the portal children appended to it.\n   *\n   * You can also provide a callback, which is called in a React layout effect.\n   * This lets you set the container from a ref, and also makes server-side rendering possible.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container?: PortalProps['container'];\n  /**\n   * If `true`, the modal will not automatically shift focus to itself when it opens, and\n   * replace it to the last focused element when it closes.\n   * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableAutoFocus?: boolean;\n  /**\n   * If `true`, the modal will not prevent focus from leaving the modal while open.\n   *\n   * Generally this should never be set to `true` as it makes the modal less\n   * accessible to assistive technologies, like screen readers.\n   * @default false\n   */\n  disableEnforceFocus?: boolean;\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown?: boolean;\n  /**\n   * The `children` will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal?: PortalProps['disablePortal'];\n  /**\n   * If `true`, the modal will not restore focus to previously focused element once\n   * modal is hidden or unmounted.\n   * @default false\n   */\n  disableRestoreFocus?: boolean;\n  /**\n   * Disable the scroll lock behavior.\n   * @default false\n   */\n  disableScrollLock?: boolean;\n  /**\n   * If `true`, the backdrop is not rendered.\n   * @default false\n   */\n  hideBackdrop?: boolean;\n  /**\n   * Always keep the children in the DOM.\n   * This prop can be useful in SEO situation or\n   * when you want to maximize the responsiveness of the Modal.\n   * @default false\n   */\n  keepMounted?: boolean;\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick?: React.ReactEventHandler<{}>;\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose?: {\n    bivarianceHack(event: {}, reason: 'backdropClick' | 'escapeKeyDown'): void;\n  }['bivarianceHack'];\n  /**\n   * A function called when a transition enters.\n   */\n  onTransitionEnter?: () => void;\n  /**\n   * A function called when a transition has exited.\n   */\n  onTransitionExited?: () => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open: boolean;\n  /**\n   * The components used for each slot inside the Modal.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots?: ModalSlots;\n  /**\n   * The props used for each slot inside the Modal.\n   * @default {}\n   */\n  slotProps?: {\n    root?: SlotComponentProps<'div', ModalComponentsPropsOverrides, ModalOwnerState>;\n    backdrop?: SlotComponentProps<typeof Backdrop, ModalComponentsPropsOverrides, ModalOwnerState>;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ModalTypeMap<\n  RootComponent extends React.ElementType = 'div',\n  AdditionalProps = {},\n> {\n  props: AdditionalProps & ModalOwnProps;\n  defaultComponent: RootComponent;\n}\n\ntype ModalRootProps = NonNullable<ModalTypeMap['props']['slotProps']>['root'];\n\nexport declare const ModalRoot: React.FC<ModalRootProps>;\n\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * *   [Dialog](https://mui.com/material-ui/api/dialog/)\n * *   [Drawer](https://mui.com/material-ui/api/drawer/)\n * *   [Menu](https://mui.com/material-ui/api/menu/)\n * *   [Popover](https://mui.com/material-ui/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n *\n * Demos:\n *\n * - [Modal](https://mui.com/material-ui/react-modal/)\n *\n * API:\n *\n * - [Modal API](https://mui.com/material-ui/api/modal/)\n */\ndeclare const Modal: OverridableComponent<ModalTypeMap>;\n\nexport type ModalProps<\n  RootComponent extends React.ElementType = ModalTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ModalTypeMap<RootComponent, AdditionalProps>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Modal;\n","node_modules/@mui/material/MenuItem/menuItemClasses.d.ts":"export interface MenuItemClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if keyboard focused. */\n    focusVisible: string;\n    /** Styles applied to the root element if dense. */\n    dense: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `divider={true}`. */\n    divider: string;\n    /** Styles applied to the inner `component` element unless `disableGutters={true}`. */\n    gutters: string;\n    /** State class applied to the root element if `selected={true}`. */\n    selected: string;\n}\nexport type MenuItemClassKey = keyof MenuItemClasses;\nexport declare function getMenuItemUtilityClass(slot: string): string;\ndeclare const menuItemClasses: MenuItemClasses;\nexport default menuItemClasses;\n","node_modules/@mui/material/MenuItem/index.d.ts":"export { default } from './MenuItem';\nexport * from './MenuItem';\n\nexport * from './menuItemClasses';\nexport { default as menuItemClasses } from './menuItemClasses';\n","node_modules/@mui/material/MenuItem/MenuItem.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { MenuItemClasses } from './menuItemClasses';\n\nexport interface MenuItemOwnProps {\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<MenuItemClasses>;\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent Menu component.\n   * @default false\n   */\n  dense?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, a 1px light border is added to the bottom of the menu item.\n   * @default false\n   */\n  divider?: boolean;\n  /**\n   * If `true`, the component is selected.\n   * @default false\n   */\n  selected?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type MenuItemTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'li',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & MenuItemOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/material-ui/api/menu-item/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const MenuItem: ExtendButtonBase<MenuItemTypeMap>;\n\nexport type MenuItemProps<\n  RootComponent extends React.ElementType = MenuItemTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<MenuItemTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default MenuItem;\n","node_modules/@mui/material/ListSubheader/listSubheaderClasses.d.ts":"export interface ListSubheaderClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: string;\n    /** Styles applied to the inner `component` element unless `disableGutters={true}`. */\n    gutters: string;\n    /** Styles applied to the root element if `inset={true}`. */\n    inset: string;\n    /** Styles applied to the root element unless `disableSticky={true}`. */\n    sticky: string;\n}\nexport type ListSubheaderClassKey = keyof ListSubheaderClasses;\nexport declare function getListSubheaderUtilityClass(slot: string): string;\ndeclare const listSubheaderClasses: ListSubheaderClasses;\nexport default listSubheaderClasses;\n","node_modules/@mui/material/ListSubheader/index.d.ts":"export { default } from './ListSubheader';\nexport * from './ListSubheader';\n\nexport { default as listSubheaderClasses } from './listSubheaderClasses';\nexport * from './listSubheaderClasses';\n","node_modules/@mui/material/ListSubheader/ListSubheader.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ListSubheaderClasses } from './listSubheaderClasses';\n\nexport interface ListSubheaderOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListSubheaderClasses>;\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color?: 'default' | 'primary' | 'inherit';\n  /**\n   * If `true`, the List Subheader will not have gutters.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, the List Subheader will not stick to the top during scroll.\n   * @default false\n   */\n  disableSticky?: boolean;\n  /**\n   * If `true`, the List Subheader is indented.\n   * @default false\n   */\n  inset?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ListSubheaderTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'li',\n> {\n  props: AdditionalProps & ListSubheaderOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListSubheader API](https://mui.com/material-ui/api/list-subheader/)\n */\ndeclare const ListSubheader: OverridableComponent<ListSubheaderTypeMap>;\n\nexport type ListSubheaderProps<\n  RootComponent extends React.ElementType = ListSubheaderTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ListSubheaderTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ListSubheader;\n","node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.d.ts":"export interface ListItemSecondaryActionClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element when the parent `ListItem` has `disableGutters={true}`. */\n    disableGutters: string;\n}\nexport type ListItemSecondaryActionClassKey = keyof ListItemSecondaryActionClasses;\nexport declare function getListItemSecondaryActionClassesUtilityClass(slot: string): string;\ndeclare const listItemSecondaryActionClasses: ListItemSecondaryActionClasses;\nexport default listItemSecondaryActionClasses;\n","node_modules/@mui/material/ListItemSecondaryAction/index.d.ts":"export { default } from './ListItemSecondaryAction';\nexport * from './ListItemSecondaryAction';\n\nexport { default as listItemSecondaryActionClasses } from './listItemSecondaryActionClasses';\nexport * from './listItemSecondaryActionClasses';\n","node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ListItemSecondaryActionClasses } from './listItemSecondaryActionClasses';\n\nexport interface ListItemSecondaryActionProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component, normally an `IconButton` or selection control.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemSecondaryActionClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * Must be used as the last child of ListItem to function properly.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemSecondaryAction API](https://mui.com/material-ui/api/list-item-secondary-action/)\n */\ndeclare const ListItemSecondaryAction: ((props: ListItemSecondaryActionProps) => JSX.Element) & {\n  muiName: string;\n};\n\nexport default ListItemSecondaryAction;\n","node_modules/@mui/material/ListItemText/listItemTextClasses.d.ts":"export interface ListItemTextClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the Typography component if primary and secondary are set. */\n    multiline: string;\n    /** Styles applied to the Typography component if dense. */\n    dense: string;\n    /** Styles applied to the root element if `inset={true}`. */\n    inset: string;\n    /** Styles applied to the primary `Typography` component. */\n    primary: string;\n    /** Styles applied to the secondary `Typography` component. */\n    secondary: string;\n}\nexport type ListItemTextClassKey = keyof ListItemTextClasses;\nexport declare function getListItemTextUtilityClass(slot: string): string;\ndeclare const listItemTextClasses: ListItemTextClasses;\nexport default listItemTextClasses;\n","node_modules/@mui/material/ListItemText/index.d.ts":"export { default } from './ListItemText';\nexport * from './ListItemText';\n\nexport { default as listItemTextClasses } from './listItemTextClasses';\nexport * from './listItemTextClasses';\n","node_modules/@mui/material/ListItemText/ListItemText.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TypographyProps } from '../Typography';\nimport { ListItemTextClasses } from './listItemTextClasses';\n\nexport interface ListItemTextProps<\n  PrimaryTypographyComponent extends React.ElementType = 'span',\n  SecondaryTypographyComponent extends React.ElementType = 'p',\n> extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * Alias for the `primary` prop.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemTextClasses>;\n  /**\n   * If `true`, the children won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `children` (or `primary`) text, and optional `secondary` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography?: boolean;\n  /**\n   * If `true`, the children are indented.\n   * This should be used if there is no left avatar or left icon.\n   * @default false\n   */\n  inset?: boolean;\n  /**\n   * The main content element.\n   */\n  primary?: React.ReactNode;\n  /**\n   * These props will be forwarded to the primary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  primaryTypographyProps?: TypographyProps<\n    PrimaryTypographyComponent,\n    { component?: PrimaryTypographyComponent }\n  >;\n  /**\n   * The secondary content element.\n   */\n  secondary?: React.ReactNode;\n  /**\n   * These props will be forwarded to the secondary typography component\n   * (as long as disableTypography is not `true`).\n   */\n  secondaryTypographyProps?: TypographyProps<\n    SecondaryTypographyComponent,\n    { component?: SecondaryTypographyComponent }\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemText API](https://mui.com/material-ui/api/list-item-text/)\n */\nexport default function ListItemText<\n  PrimaryTypographyComponent extends React.ElementType = 'span',\n  SecondaryTypographyComponent extends React.ElementType = 'p',\n>(props: ListItemTextProps<PrimaryTypographyComponent, SecondaryTypographyComponent>): JSX.Element;\n","node_modules/@mui/material/ListItemIcon/listItemIconClasses.d.ts":"export interface ListItemIconClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: string;\n}\nexport type ListItemIconClassKey = keyof ListItemIconClasses;\nexport declare function getListItemIconUtilityClass(slot: string): string;\ndeclare const listItemIconClasses: ListItemIconClasses;\nexport default listItemIconClasses;\n","node_modules/@mui/material/ListItemIcon/index.d.ts":"export { default } from './ListItemIcon';\nexport * from './ListItemIcon';\n\nexport { default as listItemIconClasses } from './listItemIconClasses';\nexport * from './listItemIconClasses';\n","node_modules/@mui/material/ListItemIcon/ListItemIcon.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ListItemIconClasses } from './listItemIconClasses';\n\nexport interface ListItemIconProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component, normally `Icon`, `SvgIcon`,\n   * or a `@mui/icons-material` SVG icon element.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemIconClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * A simple wrapper to apply `List` styles to an `Icon` or `SvgIcon`.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemIcon API](https://mui.com/material-ui/api/list-item-icon/)\n */\nexport default function ListItemIcon(props: ListItemIconProps): JSX.Element;\n","node_modules/@mui/material/Menu/menuClasses.d.ts":"export interface MenuClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the Paper component. */\n    paper: string;\n    /** Styles applied to the List component via `MenuList`. */\n    list: string;\n}\nexport type MenuClassKey = keyof MenuClasses;\nexport declare function getMenuUtilityClass(slot: string): string;\ndeclare const menuClasses: MenuClasses;\nexport default menuClasses;\n","node_modules/@mui/material/Menu/index.d.ts":"export { default } from './Menu';\nexport * from './Menu';\n\nexport { default as menuClasses } from './menuClasses';\nexport * from './menuClasses';\n","node_modules/@mui/material/Menu/Menu.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { PaperProps } from '../Paper';\nimport { PopoverProps } from '../Popover';\nimport { MenuListProps } from '../MenuList';\nimport { Theme } from '../styles';\nimport { TransitionProps } from '../transitions/transition';\nimport { MenuClasses } from './menuClasses';\n\nexport interface MenuProps extends StandardProps<PopoverProps> {\n  /**\n   * An HTML element, or a function that returns one.\n   * It's used to set the position of the menu.\n   */\n  anchorEl?: PopoverProps['anchorEl'];\n  /**\n   * If `true` (Default) will focus the `[role=\"menu\"]` if no focusable child is found. Disabled\n   * children are not focusable. If you set this prop to `false` focus will be placed\n   * on the parent modal container. This has severe accessibility implications\n   * and should only be considered if you manage focus otherwise.\n   * @default true\n   */\n  autoFocus?: boolean;\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<MenuClasses>;\n  /**\n   * When opening the menu will not focus the active item but the `[role=\"menu\"]`\n   * unless `autoFocus` is also set to `false`. Not using the default means not\n   * following WAI-ARIA authoring practices. Please be considerate about possible\n   * accessibility implications.\n   * @default false\n   */\n  disableAutoFocusItem?: boolean;\n  /**\n   * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.\n   * @default {}\n   */\n  MenuListProps?: Partial<MenuListProps>;\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`.\n   */\n  onClose?: PopoverProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   */\n  open: boolean;\n  /**\n   * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.\n   */\n  PopoverClasses?: PopoverProps['classes'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   * @default 'auto'\n   */\n  transitionDuration?: TransitionProps['timeout'] | 'auto';\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps?: TransitionProps;\n  /**\n   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.\n   * @default 'selectedMenu'\n   */\n  variant?: 'menu' | 'selectedMenu';\n}\n\nexport declare const MenuPaper: React.FC<PaperProps>;\n\n/**\n *\n * Demos:\n *\n * - [App Bar](https://mui.com/material-ui/react-app-bar/)\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [Menu API](https://mui.com/material-ui/api/menu/)\n * - inherits [Popover API](https://mui.com/material-ui/api/popover/)\n */\nexport default function Menu(props: MenuProps): JSX.Element;\n","node_modules/@mui/material/ListItemButton/listItemButtonClasses.d.ts":"export interface ListItemButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the `component`'s `focusVisibleClassName` prop. */\n    focusVisible: string;\n    /** Styles applied to the component element if dense. */\n    dense: string;\n    /** Styles applied to the component element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: string;\n    /** State class applied to the inner `component` element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the inner `component` element if `divider={true}`. */\n    divider: string;\n    /** Styles applied to the inner `component` element unless `disableGutters={true}`. */\n    gutters: string;\n    /** State class applied to the root element if `selected={true}`. */\n    selected: string;\n}\nexport type ListItemButtonClassKey = keyof ListItemButtonClasses;\nexport declare function getListItemButtonUtilityClass(slot: string): string;\ndeclare const listItemButtonClasses: ListItemButtonClasses;\nexport default listItemButtonClasses;\n","node_modules/@mui/material/ListItemButton/index.d.ts":"export { default } from './ListItemButton';\nexport * from './ListItemButton';\n\nexport { default as listItemButtonClasses } from './listItemButtonClasses';\nexport * from './listItemButtonClasses';\n","node_modules/@mui/material/ListItemButton/ListItemButton.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { ListItemButtonClasses } from './listItemButtonClasses';\n\n/**\n * This interface is kept for backward compatibility. To extend `LitItemButton`\n * props through module augmentation, use `ListItemButtonOwnProps`.\n */\nexport interface ListItemButtonBaseProps {\n  /**\n   * Defines the `align-items` style property.\n   * @default 'center'\n   */\n  alignItems?: 'flex-start' | 'center';\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   */\n  autoFocus?: boolean;\n  /**\n   * The content of the component if a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemButtonClasses>;\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent List component.\n   * @default false\n   */\n  dense?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   * @default false\n   */\n  divider?: boolean;\n  /**\n   * Use to apply selected styling.\n   * @default false\n   */\n  selected?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ListItemButtonOwnProps extends ListItemButtonBaseProps {}\n\nexport type ListItemButtonTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & ListItemButtonOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemButton API](https://mui.com/material-ui/api/list-item-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const ListItemButton: ExtendButtonBase<ListItemButtonTypeMap>;\n\nexport type ListItemButtonProps<\n  RootComponent extends React.ElementType = ListItemButtonTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ListItemButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ListItemButton;\n","node_modules/@mui/material/List/listClasses.d.ts":"export interface ListClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `disablePadding={true}`. */\n    padding: string;\n    /** Styles applied to the root element if dense. */\n    dense: string;\n    /** Styles applied to the root element if a `subheader` is provided. */\n    subheader: string;\n}\nexport type ListClassKey = keyof ListClasses;\nexport declare function getListUtilityClass(slot: string): string;\ndeclare const listClasses: ListClasses;\nexport default listClasses;\n","node_modules/@mui/material/List/index.d.ts":"export { default } from './List';\nexport * from './List';\n\nexport { default as listClasses } from './listClasses';\nexport * from './listClasses';\n","node_modules/@mui/material/List/ListContext.d.ts":"import * as React from 'react';\n\ndeclare const ListContext: React.Context<{ dense?: boolean }>;\nexport default ListContext;\n","node_modules/@mui/material/List/List.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverridableTypeMap, OverrideProps } from '../OverridableComponent';\nimport { ListClasses } from './listClasses';\n\nexport interface ListOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListClasses>;\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used for\n   * the list and list items.\n   * The prop is available to descendant components as the `dense` context.\n   * @default false\n   */\n  dense?: boolean;\n  /**\n   * If `true`, vertical padding is removed from the list.\n   * @default false\n   */\n  disablePadding?: boolean;\n  /**\n   * The content of the subheader, normally `ListSubheader`.\n   */\n  subheader?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ListTypeMap<AdditionalProps = {}, RootComponent extends React.ElementType = 'ul'> {\n  props: AdditionalProps & ListOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n * utility to create component types that inherit props from List.\n */\nexport interface ExtendListTypeMap<TypeMap extends OverridableTypeMap> {\n  props: TypeMap['props'] & ListTypeMap['props'];\n  defaultComponent: TypeMap['defaultComponent'];\n}\n\nexport type ExtendList<TypeMap extends OverridableTypeMap> = OverridableComponent<\n  ExtendListTypeMap<TypeMap>\n>;\n\n/**\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [List API](https://mui.com/material-ui/api/list/)\n */\ndeclare const List: ExtendList<ListTypeMap>;\n\nexport type ListProps<\n  RootComponent extends React.ElementType = ListTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ListTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default List;\n","node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.d.ts":"export interface ListItemAvatarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element when the parent `ListItem` uses `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: string;\n}\nexport type ListItemAvatarClassKey = keyof ListItemAvatarClasses;\nexport declare function getListItemAvatarUtilityClass(slot: string): string;\ndeclare const listItemAvatarClasses: ListItemAvatarClasses;\nexport default listItemAvatarClasses;\n","node_modules/@mui/material/ListItemAvatar/index.d.ts":"export { default } from './ListItemAvatar';\nexport * from './ListItemAvatar';\n\nexport { default as listItemAvatarClasses } from './listItemAvatarClasses';\nexport * from './listItemAvatarClasses';\n","node_modules/@mui/material/ListItemAvatar/ListItemAvatar.d.ts":"import { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ListItemAvatarClasses } from './listItemAvatarClasses';\n\nexport interface ListItemAvatarProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component, normally an `Avatar`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemAvatarClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * A simple wrapper to apply `List` styles to an `Avatar`.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [ListItemAvatar API](https://mui.com/material-ui/api/list-item-avatar/)\n */\nexport default function ListItemAvatar(props: ListItemAvatarProps): JSX.Element;\n","node_modules/@mui/material/ListItem/listItemClasses.d.ts":"export interface ListItemClasses {\n    /** Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */\n    root: string;\n    /** Styles applied to the container element if `children` includes `ListItemSecondaryAction`. */\n    container: string;\n    /** State class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */\n    focusVisible: string;\n    /** Styles applied to the component element if dense. */\n    dense: string;\n    /** Styles applied to the component element if `alignItems=\"flex-start\"`. */\n    alignItemsFlexStart: string;\n    /** State class applied to the inner `component` element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the inner `component` element if `divider={true}`. */\n    divider: string;\n    /** Styles applied to the inner `component` element unless `disableGutters={true}`. */\n    gutters: string;\n    /** Styles applied to the root element unless `disablePadding={true}`. */\n    padding: string;\n    /** Styles applied to the inner `component` element if `button={true}`. */\n    button: string;\n    /** Styles applied to the component element if `children` includes `ListItemSecondaryAction`. */\n    secondaryAction: string;\n    /** State class applied to the root element if `selected={true}`. */\n    selected: string;\n}\nexport type ListItemClassKey = keyof ListItemClasses;\nexport declare function getListItemUtilityClass(slot: string): string;\ndeclare const listItemClasses: ListItemClasses;\nexport default listItemClasses;\n","node_modules/@mui/material/ListItem/index.d.ts":"export { default } from './ListItem';\nexport * from './ListItem';\n\nexport { default as listItemClasses } from './listItemClasses';\nexport * from './listItemClasses';\n","node_modules/@mui/material/ListItem/ListItem.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase } from '../ButtonBase';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ListItemClasses } from './listItemClasses';\n\nexport interface ListItemComponentsPropsOverrides {}\n\n/**\n * This type is kept for compatibility. Use `ListItemOwnProps` instead.\n */\nexport interface ListItemBaseProps {\n  /**\n   * Defines the `align-items` style property.\n   * @default 'center'\n   */\n  alignItems?: 'flex-start' | 'center';\n  /**\n   * If `true`, the list item is focused during the first mount.\n   * Focus will also be triggered if the value changes from false to true.\n   * @default false\n   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n   */\n  autoFocus?: boolean;\n  /**\n   * The content of the component if a `ListItemSecondaryAction` is used it must\n   * be the last child.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ListItemClasses>;\n  /**\n   * The container component used when a `ListItemSecondaryAction` is the last child.\n   * @default 'li'\n   * @deprecated\n   */\n  ContainerComponent?: React.ElementType<React.HTMLAttributes<HTMLDivElement>>;\n  /**\n   * Props applied to the container component if used.\n   * @default {}\n   * @deprecated\n   */\n  ContainerProps?: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input is used.\n   * The prop defaults to the value inherited from the parent List component.\n   * @default false\n   */\n  dense?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * If `true`, all padding is removed.\n   * @default false\n   */\n  disablePadding?: boolean;\n  /**\n   * If `true`, a 1px light border is added to the bottom of the list item.\n   * @default false\n   */\n  divider?: boolean;\n  /**\n   * The element to display at the end of ListItem.\n   */\n  secondaryAction?: React.ReactNode;\n  /**\n   * Use to apply selected styling.\n   * @default false\n   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n   */\n  selected?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ListItemOwnProps extends ListItemBaseProps {\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & ListItemComponentsPropsOverrides;\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    root?: React.ElementType;\n  };\n}\n\nexport interface ListItemTypeMap<AdditionalProps, RootComponent extends React.ElementType> {\n  props: AdditionalProps & ListItemOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n * Uses an additional container component if `ListItemSecondaryAction` is the last child.\n *\n * Demos:\n *\n * - [Lists](https://mui.com/material-ui/react-list/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [ListItem API](https://mui.com/material-ui/api/list-item/)\n */\ndeclare const ListItem: ExtendButtonBase<\n  ListItemTypeMap<\n    {\n      /**\n       * If `true`, the list item is a button (using `ButtonBase`). Props intended\n       * for `ButtonBase` can then be applied to `ListItem`.\n       * @default false\n       * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n       *\n       */\n      button: true;\n    },\n    'div'\n  >\n> &\n  OverridableComponent<\n    ListItemTypeMap<\n      {\n        /**\n         * If `true`, the list item is a button (using `ButtonBase`). Props intended\n         * for `ButtonBase` can then be applied to `ListItem`.\n         * @default false\n         * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead\n         */\n        button?: false;\n      },\n      'li'\n    >\n  >;\n\nexport type ListItemProps<\n  RootComponent extends React.ElementType = 'li',\n  AdditionalProps = {},\n> = OverrideProps<ListItemTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ListItem;\n","node_modules/@mui/material/LinearProgress/linearProgressClasses.d.ts":"export interface LinearProgressClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root and bar2 element if `color=\"primary\"`; bar2 if `variant=\"buffer\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root and bar2 elements if `color=\"secondary\"`; bar2 if `variant=\"buffer\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `variant=\"determinate\"`. */\n    determinate: string;\n    /** Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: string;\n    /** Styles applied to the root element if `variant=\"buffer\"`. */\n    buffer: string;\n    /** Styles applied to the root element if `variant=\"query\"`. */\n    query: string;\n    /** Styles applied to the additional bar element if `variant=\"buffer\"`. */\n    dashed: string;\n    /** Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"primary\"`. */\n    dashedColorPrimary: string;\n    /** Styles applied to the additional bar element if `variant=\"buffer\"` and `color=\"secondary\"`. */\n    dashedColorSecondary: string;\n    /** Styles applied to the layered bar1 and bar2 elements. */\n    bar: string;\n    /** Styles applied to the bar elements if `color=\"primary\"`; bar2 if `variant` not \"buffer\". */\n    barColorPrimary: string;\n    /** Styles applied to the bar elements if `color=\"secondary\"`; bar2 if `variant` not \"buffer\". */\n    barColorSecondary: string;\n    /** Styles applied to the bar1 element if `variant=\"indeterminate or query\"`. */\n    bar1Indeterminate: string;\n    /** Styles applied to the bar1 element if `variant=\"determinate\"`. */\n    bar1Determinate: string;\n    /** Styles applied to the bar1 element if `variant=\"buffer\"`. */\n    bar1Buffer: string;\n    /** Styles applied to the bar2 element if `variant=\"indeterminate or query\"`. */\n    bar2Indeterminate: string;\n    /** Styles applied to the bar2 element if `variant=\"buffer\"`. */\n    bar2Buffer: string;\n}\nexport type LinearProgressClassKey = keyof LinearProgressClasses;\nexport declare function getLinearProgressUtilityClass(slot: string): string;\ndeclare const linearProgressClasses: LinearProgressClasses;\nexport default linearProgressClasses;\n","node_modules/@mui/material/LinearProgress/index.d.ts":"export { default } from './LinearProgress';\nexport * from './LinearProgress';\n\nexport { default as linearProgressClasses } from './linearProgressClasses';\nexport * from './linearProgressClasses';\n","node_modules/@mui/material/LinearProgress/LinearProgress.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { LinearProgressClasses } from './linearProgressClasses';\n\nexport interface LinearProgressPropsColorOverrides {}\n\nexport interface LinearProgressProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<LinearProgressClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'inherit',\n    LinearProgressPropsColorOverrides\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the progress indicator for the determinate and buffer variants.\n   * Value between 0 and 100.\n   */\n  value?: number;\n  /**\n   * The value for the buffer variant.\n   * Value between 0 and 100.\n   */\n  valueBuffer?: number;\n  /**\n   * The variant to use.\n   * Use indeterminate or query when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant?: 'determinate' | 'indeterminate' | 'buffer' | 'query';\n}\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n *\n * Demos:\n *\n * - [Progress](https://mui.com/material-ui/react-progress/)\n *\n * API:\n *\n * - [LinearProgress API](https://mui.com/material-ui/api/linear-progress/)\n */\nexport default function LinearProgress(props: LinearProgressProps): JSX.Element;\n","node_modules/@mui/material/InputAdornment/inputAdornmentClasses.d.ts":"export interface InputAdornmentClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"filled\"`. */\n    filled: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"standard\"`. */\n    standard: string;\n    /** Styles applied to the root element if `position=\"start\"`. */\n    positionStart: string;\n    /** Styles applied to the root element if `position=\"end\"`. */\n    positionEnd: string;\n    /** Styles applied to the root element if `disablePointerEvents={true}`. */\n    disablePointerEvents: string;\n    /** Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n    hiddenLabel: string;\n    /** Styles applied if the adornment is used inside <FormControl size=\"small\" />. */\n    sizeSmall: string;\n}\nexport type InputAdornmentClassKey = keyof InputAdornmentClasses;\nexport declare function getInputAdornmentUtilityClass(slot: string): string;\ndeclare const inputAdornmentClasses: InputAdornmentClasses;\nexport default inputAdornmentClasses;\n","node_modules/@mui/material/InputAdornment/index.d.ts":"export * from './InputAdornment';\nexport { default } from './InputAdornment';\n\nexport { default as inputAdornmentClasses } from './inputAdornmentClasses';\nexport * from './inputAdornmentClasses';\n","node_modules/@mui/material/InputAdornment/InputAdornment.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { InputAdornmentClasses } from './inputAdornmentClasses';\n\nexport interface InputAdornmentOwnProps {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<InputAdornmentClasses>;\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children?: React.ReactNode;\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the `input` on click.\n   * @default false\n   */\n  disablePointerEvents?: boolean;\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   * @default false\n   */\n  disableTypography?: boolean;\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: 'start' | 'end';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\nexport interface InputAdornmentTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & InputAdornmentOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [InputAdornment API](https://mui.com/material-ui/api/input-adornment/)\n */\ndeclare const InputAdornment: OverridableComponent<InputAdornmentTypeMap>;\n\nexport type InputAdornmentProps<\n  RootComponent extends React.ElementType = InputAdornmentTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<InputAdornmentTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default InputAdornment;\n","node_modules/@mui/material/InputBase/inputBaseClasses.d.ts":"export interface InputBaseClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: string;\n    /** Styles applied to the root element if the component is focused. */\n    focused: string;\n    /** Styles applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: string;\n    /** Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `multiline={true}`. */\n    multiline: string;\n    /** Styles applied to the root element if the color is secondary. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n    /** Styles applied to the root element if `hiddenLabel={true}`. */\n    hiddenLabel: string;\n    /** State class applied to the root element if `readOnly={true}`. */\n    readOnly: string;\n    /** Styles applied to the input element. */\n    input: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    inputSizeSmall: string;\n    /** Styles applied to the input element if `multiline={true}`. */\n    inputMultiline: string;\n    /** Styles applied to the input element if `type=\"search\"`. */\n    inputTypeSearch: string;\n    /** Styles applied to the input element if `startAdornment` is provided. */\n    inputAdornedStart: string;\n    /** Styles applied to the input element if `endAdornment` is provided. */\n    inputAdornedEnd: string;\n    /** Styles applied to the input element if `hiddenLabel={true}`. */\n    inputHiddenLabel: string;\n}\nexport type InputBaseClassKey = keyof InputBaseClasses;\nexport declare function getInputBaseUtilityClass(slot: string): string;\ndeclare const inputBaseClasses: InputBaseClasses;\nexport default inputBaseClasses;\n","node_modules/@mui/material/InputBase/index.d.ts":"export { default } from './InputBase';\nexport * from './InputBase';\n\nexport { default as inputBaseClasses } from './inputBaseClasses';\nexport * from './inputBaseClasses';\n","node_modules/@mui/material/InputBase/InputBase.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { InputBaseClasses } from './inputBaseClasses';\n\nexport interface InputBasePropsSizeOverrides {}\n\nexport interface InputBasePropsColorOverrides {}\n\nexport interface InputBaseComponentsPropsOverrides {}\n\nexport interface InputBaseProps\n  extends StandardProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    /*\n     * `onBlur`, `onChange`, `onFocus`, `onInvalid`, `onKeyDown`, `onKeyUp` are applied to the inner `InputComponent`,\n     * which by default is an input or textarea. Since these handlers differ from the\n     * ones inherited by `React.HTMLAttributes<HTMLDivElement>` we need to omit them.\n     */\n    | 'children'\n    | 'defaultValue'\n    | 'onBlur'\n    | 'onChange'\n    | 'onFocus'\n    | 'onInvalid'\n    | 'onKeyDown'\n    | 'onKeyUp'\n  > {\n  'aria-describedby'?: string;\n  /**\n   * This prop helps users to fill forms faster, especially on mobile devices.\n   * The name can be confusing, as it's more like an autofill.\n   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n   */\n  autoComplete?: string;\n  /**\n   * If `true`, the `input` element is focused during the first mount.\n   */\n  autoFocus?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<InputBaseClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    InputBasePropsColorOverrides\n  >;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n    Input?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & InputBaseComponentsPropsOverrides;\n    input?: React.InputHTMLAttributes<HTMLInputElement> & InputBaseComponentsPropsOverrides;\n  };\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue?: unknown;\n  /**\n   * If `true`, the component is disabled.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.\n   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.\n   * @default false\n   */\n  disableInjectingGlobalStyles?: boolean;\n  /**\n   * End `InputAdornment` for this component.\n   */\n  endAdornment?: React.ReactNode;\n  /**\n   * If `true`, the `input` will indicate an error.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  error?: boolean;\n  /**\n   * If `true`, the `input` will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The id of the `input` element.\n   */\n  id?: string;\n  /**\n   * The component used for the `input` element.\n   * Either a string to use a HTML element or a component.\n   * @default 'input'\n   */\n  inputComponent?: React.ElementType<InputBaseComponentProps>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * @default {}\n   */\n  inputProps?: InputBaseComponentProps;\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.\n   */\n  margin?: 'dense' | 'none';\n  /**\n   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.\n   * @default false\n   */\n  multiline?: boolean;\n  /**\n   * Name attribute of the `input` element.\n   */\n  name?: string;\n  /**\n   * Callback fired when the `input` is blurred.\n   *\n   * Notice that the first argument (event) might be undefined.\n   */\n  onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  /**\n   * Callback fired when the value is changed.\n   *\n   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onFocus?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  onKeyDown?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  onKeyUp?: React.KeyboardEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n  /**\n   * Callback fired when the `input` doesn't satisfy its constraints.\n   */\n  onInvalid?: React.FormEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n  /**\n   * The short hint displayed in the `input` before the user enters a value.\n   */\n  placeholder?: string;\n  /**\n   * It prevents the user from changing the value of the field\n   * (not from interacting with the field).\n   */\n  readOnly?: boolean;\n  /**\n   * If `true`, the `input` element is required.\n   * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n   */\n  required?: boolean;\n  renderSuffix?: (state: {\n    disabled?: boolean;\n    error?: boolean;\n    filled?: boolean;\n    focused?: boolean;\n    margin?: 'dense' | 'none' | 'normal';\n    required?: boolean;\n    startAdornment?: React.ReactNode;\n  }) => React.ReactNode;\n  /**\n   * Number of rows to display when multiline option is set to true.\n   */\n  rows?: string | number;\n  /**\n   * Maximum number of rows to display when multiline option is set to true.\n   */\n  maxRows?: string | number;\n  /**\n   * Minimum number of rows to display when multiline option is set to true.\n   */\n  minRows?: string | number;\n  /**\n   * The size of the component.\n   */\n  size?: OverridableStringUnion<'small' | 'medium', InputBasePropsSizeOverrides>;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> &\n      InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme> };\n    input?: React.InputHTMLAttributes<HTMLInputElement> &\n      InputBaseComponentsPropsOverrides & { sx?: SxProps<Theme> };\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    root?: React.ElementType;\n    input?: React.ElementType;\n  };\n  /**\n   * Start `InputAdornment` for this component.\n   */\n  startAdornment?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n   * @default 'text'\n   */\n  type?: string;\n  /**\n   * The value of the `input` element, required for a controlled component.\n   */\n  value?: unknown;\n}\n\nexport interface InputBaseComponentProps\n  extends React.HTMLAttributes<HTMLInputElement | HTMLTextAreaElement> {\n  // Accommodate arbitrary additional props coming from the `inputProps` prop\n  [arbitrary: string]: any;\n}\n\n/**\n * `InputBase` contains as few styles as possible.\n * It aims to be a simple building block for creating an input.\n * It contains a load of style reset and some state logic.\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\nexport default function InputBase(props: InputBaseProps): JSX.Element;\n","node_modules/@mui/material/Link/linkClasses.d.ts":"export interface LinkClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `underline=\"none\"`. */\n    underlineNone: string;\n    /** Styles applied to the root element if `underline=\"hover\"`. */\n    underlineHover: string;\n    /** Styles applied to the root element if `underline=\"always\"`. */\n    underlineAlways: string;\n    /** Styles applied to the root element if `component=\"button\"`. */\n    button: string;\n    /** State class applied to the root element if the link is keyboard focused. */\n    focusVisible: string;\n}\nexport type LinkClassKey = keyof LinkClasses;\nexport declare function getLinkUtilityClass(slot: string): string;\ndeclare const linkClasses: LinkClasses;\nexport default linkClasses;\n","node_modules/@mui/material/Link/index.d.ts":"export { default } from './Link';\nexport * from './Link';\n\nexport { default as linkClasses } from './linkClasses';\nexport * from './linkClasses';\n","node_modules/@mui/material/Link/getTextDecoration.d.ts":"import type { Theme } from '../styles';\nexport declare const colorTransformations: {\n    primary: string;\n    textPrimary: string;\n    secondary: string;\n    textSecondary: string;\n    error: string;\n};\ndeclare const getTextDecoration: <T extends Theme>({ theme, ownerState, }: {\n    theme: T;\n    ownerState: {\n        color: string;\n    };\n}) => string;\nexport default getTextDecoration;\n","node_modules/@mui/material/Link/Link.d.ts":"import * as React from 'react';\nimport { DistributiveOmit } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { TypographyOwnProps } from '../Typography';\nimport { LinkClasses } from './linkClasses';\n\nexport interface LinkOwnProps extends DistributiveOmit<LinkBaseProps, 'classes'> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<LinkClasses>;\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color?: TypographyOwnProps['color'];\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.\n   */\n  TypographyClasses?: TypographyOwnProps['classes'];\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline?: 'none' | 'hover' | 'always';\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant?: TypographyOwnProps['variant'];\n}\n\nexport interface LinkTypeMap<AdditionalProps = {}, RootComponent extends React.ElementType = 'a'> {\n  props: AdditionalProps & LinkOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n * - [Links](https://mui.com/material-ui/react-link/)\n *\n * API:\n *\n * - [Link API](https://mui.com/material-ui/api/link/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const Link: OverridableComponent<LinkTypeMap>;\n\nexport type LinkBaseProps = DistributiveOmit<\n  TypographyOwnProps,\n  'children' | 'color' | 'variant' | 'classes'\n>;\n\nexport type LinkProps<\n  RootComponent extends React.ElementType = LinkTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<LinkTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Link;\n","node_modules/@mui/material/ImageListItemBar/index.d.ts":"export { default } from './ImageListItemBar';\nexport * from './ImageListItemBar';\n\nexport * from './imageListItemBarClasses';\nexport { default as imageListItemBarClasses } from './imageListItemBarClasses';\n","node_modules/@mui/material/ImageListItemBar/imageListItemBarClasses.d.ts":"export interface ImageListItemBarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `position=\"bottom\"`. */\n    positionBottom: string;\n    /** Styles applied to the root element if `position=\"top\"`. */\n    positionTop: string;\n    /** Styles applied to the root element if `position=\"below\"`. */\n    positionBelow: string;\n    /** Styles applied to the title and subtitle container element. */\n    titleWrap: string;\n    /** Styles applied to the title and subtitle container element if `position=\"below\"`. */\n    titleWrapBelow: string;\n    /** Styles applied to the container element if `actionPosition=\"left\"`. */\n    titleWrapActionPosLeft: string;\n    /** Styles applied to the container element if `actionPosition=\"right\"`. */\n    titleWrapActionPosRight: string;\n    /** Styles applied to the title container element. */\n    title: string;\n    /** Styles applied to the subtitle container element. */\n    subtitle: string;\n    /** Styles applied to the actionIcon if supplied. */\n    actionIcon: string;\n    /** Styles applied to the actionIcon if `actionPosition=\"left\"`. */\n    actionIconActionPosLeft: string;\n}\nexport type ImageListItemBarClassKey = keyof ImageListItemBarClasses;\nexport declare function getImageListItemBarUtilityClass(slot: string): string;\ndeclare const imageListItemBarClasses: ImageListItemBarClasses;\nexport default imageListItemBarClasses;\n","node_modules/@mui/material/ImageListItemBar/ImageListItemBar.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ImageListItemBarClasses } from './imageListItemBarClasses';\n\nexport interface ImageListItemBarProps\n  extends StandardProps<React.HTMLAttributes<HTMLDivElement>, 'title'> {\n  /**\n   * An IconButton element to be used as secondary action target\n   * (primary action target is the item itself).\n   */\n  actionIcon?: React.ReactNode;\n  /**\n   * Position of secondary action IconButton.\n   * @default 'right'\n   */\n  actionPosition?: 'left' | 'right';\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ImageListItemBarClasses>;\n  /**\n   * Position of the title bar.\n   * @default 'bottom'\n   */\n  position?: 'below' | 'top' | 'bottom';\n  /**\n   * String or element serving as subtitle (support text).\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Title to be displayed.\n   */\n  title?: React.ReactNode;\n}\n\n/**\n *\n * Demos:\n *\n * - [Image List](https://mui.com/material-ui/react-image-list/)\n *\n * API:\n *\n * - [ImageListItemBar API](https://mui.com/material-ui/api/image-list-item-bar/)\n */\nexport default function ImageListItemBar(props: ImageListItemBarProps): JSX.Element;\n","node_modules/@mui/material/Input/inputClasses.d.ts":"export interface InputClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: string;\n    /** Styles applied to the root element if the component is focused. */\n    focused: string;\n    /** Styles applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if color secondary. */\n    colorSecondary: string;\n    /** Styles applied to the root element unless `disableUnderline={true}`. */\n    underline: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `multiline={true}`. */\n    multiline: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n    /** Styles applied to the input element. */\n    input: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    inputSizeSmall: string;\n    /** Styles applied to the input element if `multiline={true}`. */\n    inputMultiline: string;\n    /** Styles applied to the input element if `startAdornment` is provided. */\n    inputAdornedStart: string;\n    /** Styles applied to the input element if `endAdornment` is provided. */\n    inputAdornedEnd: string;\n    /** Styles applied to the input element if `type=\"search\"`. */\n    inputTypeSearch: string;\n}\nexport type InputClassKey = keyof InputClasses;\nexport declare function getInputUtilityClass(slot: string): string;\ndeclare const inputClasses: InputClasses;\nexport default inputClasses;\n","node_modules/@mui/material/Input/index.d.ts":"export { default } from './Input';\nexport * from './Input';\nexport { default as inputClasses } from './inputClasses';\nexport * from './inputClasses';\n","node_modules/@mui/material/Input/Input.d.ts":"import { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputBaseProps } from '../InputBase';\nimport { InputClasses } from './inputClasses';\n\nexport interface InputProps extends StandardProps<InputBaseProps> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<InputClasses>;\n  /**\n   * If `true`, the `input` will not have an underline.\n   */\n  disableUnderline?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [Input API](https://mui.com/material-ui/api/input/)\n * - inherits [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\ndeclare const Input: ((props: InputProps) => JSX.Element) & { muiName: string };\n\nexport default Input;\n","node_modules/@mui/material/InputLabel/inputLabelClasses.d.ts":"export interface InputLabelClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `focused={true}`. */\n    focused: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** State class applied to the root element if `required={true}`. */\n    required: string;\n    /** State class applied to the asterisk element. */\n    asterisk: string;\n    /** Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the input element if `shrink={true}`. */\n    shrink: string;\n    /** Styles applied to the input element unless `disableAnimation={true}`. */\n    animated: string;\n    /** Styles applied to the root element if `variant=\"filled\"`. */\n    filled: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"standard\"`. */\n    standard: string;\n}\nexport type InputLabelClassKey = keyof InputLabelClasses;\nexport declare function getInputLabelUtilityClasses(slot: string): string;\ndeclare const inputLabelClasses: InputLabelClasses;\nexport default inputLabelClasses;\n","node_modules/@mui/material/InputLabel/index.d.ts":"export { default } from './InputLabel';\nexport * from './InputLabel';\n\nexport { default as inputLabelClasses } from './inputLabelClasses';\nexport * from './inputLabelClasses';\n","node_modules/@mui/material/InputLabel/InputLabel.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { FormLabelProps, ExtendFormLabelTypeMap } from '../FormLabel';\nimport { Theme } from '../styles';\nimport { InputLabelClasses } from './inputLabelClasses';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\n\nexport interface InputLabelPropsSizeOverrides {}\n\nexport interface InputLabelOwnProps extends Pick<FormLabelProps, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<InputLabelClasses>;\n  color?: FormLabelProps['color'];\n  /**\n   * If `true`, the transition animation is disabled.\n   * @default false\n   */\n  disableAnimation?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is displayed in an error state.\n   */\n  error?: boolean;\n  /**\n   * If `true`, the `input` of this label is focused.\n   */\n  focused?: boolean;\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin?: 'dense';\n  /**\n   * if `true`, the label will indicate that the `input` is required.\n   */\n  required?: boolean;\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink?: boolean;\n  /**\n   * The size of the component.\n   * @default 'normal'\n   */\n  size?: OverridableStringUnion<'small' | 'normal', InputLabelPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   */\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\nexport type InputLabelTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'label',\n> = ExtendFormLabelTypeMap<{\n  props: AdditionalProps & InputLabelOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [InputLabel API](https://mui.com/material-ui/api/input-label/)\n * - inherits [FormLabel API](https://mui.com/material-ui/api/form-label/)\n */\ndeclare const InputLabel: OverridableComponent<InputLabelTypeMap>;\n\nexport type InputLabelProps<\n  RootComponent extends React.ElementType = InputLabelTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<InputLabelTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default InputLabel;\n","node_modules/@mui/material/ImageListItem/index.d.ts":"export * from './ImageListItem';\nexport { default } from './ImageListItem';\n\nexport * from './imageListItemClasses';\nexport { default as imageListItemClasses } from './imageListItemClasses';\n","node_modules/@mui/material/ImageListItem/imageListItemClasses.d.ts":"export interface ImageListItemClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to an `img` element to ensure it covers the item. */\n    img: string;\n    /** Styles applied to the root element if `variant=\"standard\"`. */\n    standard: string;\n    /** Styles applied to the root element if `variant=\"woven\"`. */\n    woven: string;\n    /** Styles applied to the root element if `variant=\"masonry\"`. */\n    masonry: string;\n    /** Styles applied to the root element if `variant=\"quilted\"`. */\n    quilted: string;\n}\nexport type ImageListItemClassKey = keyof ImageListItemClasses;\nexport declare function getImageListItemUtilityClass(slot: string): string;\ndeclare const imageListItemClasses: ImageListItemClasses;\nexport default imageListItemClasses;\n","node_modules/@mui/material/ImageListItem/ImageListItem.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ImageListItemClasses } from './imageListItemClasses';\n\nexport interface ImageListItemOwnProps {\n  /**\n   * The content of the component, normally an `<img>`.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ImageListItemClasses>;\n  /**\n   * Width of the item in number of grid columns.\n   * @default 1\n   */\n  cols?: number;\n  /**\n   * Height of the item in number of grid rows.\n   * @default 1\n   */\n  rows?: number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ImageListItemTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'li',\n> {\n  props: AdditionalProps & ImageListItemOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Image List](https://mui.com/material-ui/react-image-list/)\n *\n * API:\n *\n * - [ImageListItem API](https://mui.com/material-ui/api/image-list-item/)\n */\ndeclare const ImageListItem: OverridableComponent<ImageListItemTypeMap>;\n\nexport type ImageListItemProps<\n  RootComponent extends React.ElementType = ImageListItemTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ImageListItemTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ImageListItem;\n","node_modules/@mui/material/ImageList/index.d.ts":"export * from './ImageList';\nexport { default } from './ImageList';\n\nexport * from './imageListClasses';\nexport { default as imageListClasses } from './imageListClasses';\n","node_modules/@mui/material/ImageList/imageListClasses.d.ts":"export interface ImageListClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"masonry\"`. */\n    masonry: string;\n    /** Styles applied to the root element if `variant=\"quilted\"`. */\n    quilted: string;\n    /** Styles applied to the root element if `variant=\"standard\"`. */\n    standard: string;\n    /** Styles applied to the root element if `variant=\"woven\"`. */\n    woven: string;\n}\nexport type ImageListClassKey = keyof ImageListClasses;\nexport declare function getImageListUtilityClass(slot: string): string;\ndeclare const imageListClasses: ImageListClasses;\nexport default imageListClasses;\n","node_modules/@mui/material/ImageList/ImageList.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ImageListClasses } from './imageListClasses';\n\nexport interface ImageListPropsVariantOverrides {}\n\nexport interface ImageListOwnProps {\n  /**\n   * The content of the component, normally `ImageListItem`s.\n   */\n  children: NonNullable<React.ReactNode>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ImageListClasses>;\n  /**\n   * Number of columns.\n   * @default 2\n   */\n  cols?: number;\n  /**\n   * The gap between items in px.\n   * @default 4\n   */\n  gap?: number;\n  /**\n   * The height of one row in px.\n   * @default 'auto'\n   */\n  rowHeight?: number | 'auto';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant?: OverridableStringUnion<\n    'masonry' | 'quilted' | 'standard' | 'woven',\n    ImageListPropsVariantOverrides\n  >;\n}\n\nexport interface ImageListTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'ul',\n> {\n  props: AdditionalProps & ImageListOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Image List](https://mui.com/material-ui/react-image-list/)\n *\n * API:\n *\n * - [ImageList API](https://mui.com/material-ui/api/image-list/)\n */\ndeclare const ImageList: OverridableComponent<ImageListTypeMap>;\n\nexport type ImageListProps<\n  RootComponent extends React.ElementType = ImageListTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ImageListTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ImageList;\n","node_modules/@mui/material/Hidden/withWidth.d.ts":"import { Breakpoint } from '@mui/system';\nimport { PropInjector } from '@mui/types';\n\nexport interface WithWidthOptions {\n  withTheme?: boolean;\n  noSSR?: boolean;\n  initialWidth?: Breakpoint;\n  resizeInterval?: number;\n}\n\nexport interface WithWidth {\n  width: Breakpoint;\n}\n\nexport interface WithWidthProps extends Partial<WithWidth> {\n  innerRef?: React.Ref<any>;\n}\n\nexport function isWidthDown(\n  breakpoint: Breakpoint,\n  screenWidth: Breakpoint,\n  inclusive?: boolean,\n): boolean;\n\nexport function isWidthUp(\n  breakpoint: Breakpoint,\n  screenWidth: Breakpoint,\n  inclusive?: boolean,\n): boolean;\n\nexport default function withWidth(\n  options?: WithWidthOptions,\n): PropInjector<WithWidth, WithWidthProps>;\n","node_modules/@mui/material/Hidden/index.d.ts":"export { default } from './Hidden';\nexport * from './Hidden';\n","node_modules/@mui/material/Hidden/HiddenJs.d.ts":"import * as React from 'react';\nimport { Breakpoint } from '@mui/system';\n\nexport interface HiddenJsProps {\n  width?: Breakpoint;\n  lgDown?: boolean;\n  lgUp?: boolean;\n  mdDown?: boolean;\n  mdUp?: boolean;\n  only?: Breakpoint | Breakpoint[];\n  smDown?: boolean;\n  smUp?: boolean;\n  xlDown?: boolean;\n  xlUp?: boolean;\n  xsDown?: boolean;\n  xsUp?: boolean;\n}\n\ndeclare const HiddenJs: React.JSXElementConstructor<HiddenJsProps>;\n\nexport default HiddenJs;\n","node_modules/@mui/material/Hidden/HiddenCss.d.ts":"import * as React from 'react';\nimport { Breakpoint } from '@mui/system';\n\nexport interface HiddenCssProps {\n  lgDown?: boolean;\n  lgUp?: boolean;\n  mdDown?: boolean;\n  mdUp?: boolean;\n  only?: Breakpoint | Breakpoint[];\n  smDown?: boolean;\n  smUp?: boolean;\n  xlDown?: boolean;\n  xlUp?: boolean;\n  xsDown?: boolean;\n  xsUp?: boolean;\n}\n\ndeclare const HiddenCss: React.JSXElementConstructor<HiddenCssProps>;\n\nexport default HiddenCss;\n","node_modules/@mui/material/Hidden/Hidden.d.ts":"import * as React from 'react';\nimport { Breakpoint } from '@mui/system';\n\nexport interface HiddenProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Specify which implementation to use.  'js' is the default, 'css' works better for\n   * server-side rendering.\n   * @default 'js'\n   */\n  implementation?: 'js' | 'css';\n  /**\n   * You can use this prop when choosing the `js` implementation with server-side rendering.\n   *\n   * As `window.innerWidth` is unavailable on the server,\n   * we default to rendering an empty component during the first mount.\n   * You might want to use a heuristic to approximate\n   * the screen width of the client browser screen width.\n   *\n   * For instance, you could be using the user-agent or the client-hints.\n   * https://caniuse.com/#search=client%20hint\n   */\n  initialWidth?: Breakpoint;\n  /**\n   * If `true`, component is hidden on screens below (but not including) this size.\n   * @default false\n   */\n  lgDown?: boolean;\n  /**\n   * If `true`, component is hidden on screens this size and above.\n   * @default false\n   */\n  lgUp?: boolean;\n  /**\n   * If `true`, component is hidden on screens below (but not including) this size.\n   * @default false\n   */\n  mdDown?: boolean;\n  /**\n   * If `true`, component is hidden on screens this size and above.\n   * @default false\n   */\n  mdUp?: boolean;\n  /**\n   * Hide the given breakpoint(s).\n   */\n  only?: Breakpoint | Breakpoint[];\n  /**\n   * If `true`, component is hidden on screens below (but not including) this size.\n   * @default false\n   */\n  smDown?: boolean;\n  /**\n   * If `true`, component is hidden on screens this size and above.\n   * @default false\n   */\n  smUp?: boolean;\n  /**\n   * If `true`, component is hidden on screens below (but not including) this size.\n   * @default false\n   */\n  xlDown?: boolean;\n  /**\n   * If `true`, component is hidden on screens this size and above.\n   * @default false\n   */\n  xlUp?: boolean;\n  /**\n   * If `true`, component is hidden on screens below (but not including) this size.\n   * @default false\n   */\n  xsDown?: boolean;\n  /**\n   * If `true`, component is hidden on screens this size and above.\n   * @default false\n   */\n  xsUp?: boolean;\n}\n\n/**\n * Responsively hides children based on the selected implementation.\n *\n * Demos:\n *\n * - [Hidden](https://mui.com/material-ui/react-hidden/)\n *\n * API:\n *\n * - [Hidden API](https://mui.com/material-ui/api/hidden/)\n */\ndeclare const Hidden: React.JSXElementConstructor<HiddenProps>;\n\nexport default Hidden;\n","node_modules/@mui/material/Grow/index.d.ts":"export { default } from './Grow';\nexport * from './Grow';\n","node_modules/@mui/material/Grow/Grow.d.ts":"import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface GrowProps extends Omit<TransitionProps, 'timeout'> {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default 'auto'\n   */\n  timeout?: TransitionProps['timeout'] | 'auto';\n}\n\n/**\n * The Grow transition is used by the [Tooltip](https://mui.com/material-ui/react-tooltip/) and\n * [Popover](https://mui.com/material-ui/react-popover/) components.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Popover](https://mui.com/material-ui/react-popover/)\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Grow API](https://mui.com/material-ui/api/grow/)\n * - inherits [Transition API](https://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Grow(props: GrowProps): JSX.Element;\n","node_modules/@mui/material/Icon/index.d.ts":"export { default } from './Icon';\nexport * from './Icon';\n\nexport { default as iconClasses } from './iconClasses';\nexport * from './iconClasses';\n","node_modules/@mui/material/Icon/iconClasses.d.ts":"export interface IconClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"action\"`. */\n    colorAction: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"disabled\"`. */\n    colorDisabled: string;\n    /** Styles applied to the root element if `fontSize=\"inherit\"`. */\n    fontSizeInherit: string;\n    /** Styles applied to the root element if `fontSize=\"small\"`. */\n    fontSizeSmall: string;\n    /** Styles applied to the root element if `fontSize=\"large\"`. */\n    fontSizeLarge: string;\n}\nexport type IconClassKey = keyof IconClasses;\nexport declare function getIconUtilityClass(slot: string): string;\ndeclare const iconClasses: IconClasses;\nexport default iconClasses;\n","node_modules/@mui/material/Icon/Icon.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { IconClasses } from './iconClasses';\n\nexport interface IconPropsSizeOverrides {}\n\nexport interface IconPropsColorOverrides {}\n\nexport interface IconOwnProps {\n  /**\n   * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any\n   * other base class that suits the icon font you're using (for example material-icons-rounded, fas, etc).\n   * @default 'material-icons'\n   */\n  baseClassName?: string;\n  /**\n   * The name of the icon font ligature.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<IconClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'inherit'\n   */\n  color?: OverridableStringUnion<\n    | 'inherit'\n    | 'action'\n    | 'disabled'\n    | 'primary'\n    | 'secondary'\n    | 'error'\n    | 'info'\n    | 'success'\n    | 'warning',\n    IconPropsColorOverrides\n  >;\n  /**\n   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.\n   * @default 'medium'\n   */\n  fontSize?: OverridableStringUnion<\n    'inherit' | 'large' | 'medium' | 'small',\n    IconPropsSizeOverrides\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface IconTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'span',\n> {\n  props: AdditionalProps & IconOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Icons](https://mui.com/material-ui/icons/)\n * - [Material Icons](https://mui.com/material-ui/material-icons/)\n *\n * API:\n *\n * - [Icon API](https://mui.com/material-ui/api/icon/)\n */\ndeclare const Icon: OverridableComponent<IconTypeMap> & { muiName: string };\n\nexport type IconProps<\n  RootComponent extends React.ElementType = IconTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<IconTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Icon;\n","node_modules/@mui/material/IconButton/index.d.ts":"export { default } from './IconButton';\nexport * from './IconButton';\n\nexport { default as iconButtonClasses } from './iconButtonClasses';\nexport * from './iconButtonClasses';\n","node_modules/@mui/material/IconButton/iconButtonClasses.d.ts":"export interface IconButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: string;\n    /** Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: string;\n    /** Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the root element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the root element if `color=\"warning\"`. */\n    colorWarning: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: string;\n}\nexport type IconButtonClassKey = keyof IconButtonClasses;\nexport declare function getIconButtonUtilityClass(slot: string): string;\ndeclare const iconButtonClasses: IconButtonClasses;\nexport default iconButtonClasses;\n","node_modules/@mui/material/IconButton/IconButton.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { IconButtonClasses } from './iconButtonClasses';\n\nexport interface IconButtonPropsColorOverrides {}\n\nexport interface IconButtonPropsSizeOverrides {}\n\nexport interface IconButtonOwnProps {\n  /**\n   * The icon to display.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<IconButtonClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color?: OverridableStringUnion<\n    'inherit' | 'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    IconButtonPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge?: 'start' | 'end' | false;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', IconButtonPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type IconButtonTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & IconButtonOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n * Refer to the [Icons](https://mui.com/material-ui/icons/) section of the documentation\n * regarding the available icon options.\n *\n * Demos:\n *\n * - [Button](https://mui.com/material-ui/react-button/)\n *\n * API:\n *\n * - [IconButton API](https://mui.com/material-ui/api/icon-button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const IconButton: ExtendButtonBase<IconButtonTypeMap>;\n\nexport type IconButtonProps<\n  RootComponent extends React.ElementType = IconButtonTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<IconButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default IconButton;\n","node_modules/@mui/material/Grid/index.d.ts":"export { default } from './Grid';\nexport * from './Grid';\n\nexport { default as gridClasses } from './gridClasses';\nexport * from './gridClasses';\n","node_modules/@mui/material/Grid/gridClasses.d.ts":"export interface GridClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `container={true}`. */\n    container: string;\n    /** Styles applied to the root element if `item={true}`. */\n    item: string;\n    /** Styles applied to the root element if `zeroMinWidth={true}`. */\n    zeroMinWidth: string;\n    /** Styles applied to the root element if `direction=\"column\"`. */\n    'direction-xs-column': string;\n    /** Styles applied to the root element if `direction=\"column-reverse\"`. */\n    'direction-xs-column-reverse': string;\n    /** Styles applied to the root element if `direction=\"row-reverse\"`. */\n    'direction-xs-row-reverse': string;\n    /** Styles applied to the root element if `wrap=\"nowrap\"`. */\n    'wrap-xs-nowrap': string;\n    /** Styles applied to the root element if `wrap=\"reverse\"`. */\n    'wrap-xs-wrap-reverse': string;\n    'spacing-xs-1': string;\n    'spacing-xs-2': string;\n    'spacing-xs-3': string;\n    'spacing-xs-4': string;\n    'spacing-xs-5': string;\n    'spacing-xs-6': string;\n    'spacing-xs-7': string;\n    'spacing-xs-8': string;\n    'spacing-xs-9': string;\n    'spacing-xs-10': string;\n    'grid-xs-auto': string;\n    'grid-xs-true': string;\n    'grid-xs-1': string;\n    'grid-xs-2': string;\n    'grid-xs-3': string;\n    'grid-xs-4': string;\n    'grid-xs-5': string;\n    'grid-xs-6': string;\n    'grid-xs-7': string;\n    'grid-xs-8': string;\n    'grid-xs-9': string;\n    'grid-xs-10': string;\n    'grid-xs-11': string;\n    'grid-xs-12': string;\n}\nexport type GridClassKey = keyof GridClasses;\nexport declare function getGridUtilityClass(slot: string): string;\ndeclare const gridClasses: GridClasses;\nexport default gridClasses;\n","node_modules/@mui/material/Grid/Grid.d.ts":"import * as React from 'react';\nimport {\n  ResponsiveStyleValue,\n  SxProps,\n  SystemProps,\n  Breakpoint,\n  BreakpointOverrides,\n} from '@mui/system';\nimport { IfEquals } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { GridClasses } from './gridClasses';\n\nexport type GridDirection = 'row' | 'row-reverse' | 'column' | 'column-reverse';\n\nexport type GridSpacing = number | string;\n\nexport type GridWrap = 'nowrap' | 'wrap' | 'wrap-reverse';\n\nexport type GridSize = 'auto' | number;\n\nexport interface RegularBreakpoints {\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl?: boolean | GridSize;\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs?: boolean | GridSize;\n}\n\ntype CustomBreakpoints = Partial<Record<Breakpoint, boolean | GridSize>>;\n\ninterface BreakpointOverridesEmpty {}\n\ntype Breakpoints = IfEquals<\n  BreakpointOverrides,\n  BreakpointOverridesEmpty,\n  RegularBreakpoints,\n  CustomBreakpoints\n>;\n\nexport interface GridOwnProps extends SystemProps<Theme>, Breakpoints {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<GridClasses>;\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns?: ResponsiveStyleValue<number>;\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing?: ResponsiveStyleValue<GridSpacing>;\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container?: boolean;\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction?: ResponsiveStyleValue<GridDirection>;\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item?: boolean;\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing?: ResponsiveStyleValue<GridSpacing>;\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing?: ResponsiveStyleValue<GridSpacing>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap?: GridWrap;\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth?: boolean;\n}\n\nexport interface GridTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & GridOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Grid](https://mui.com/material-ui/react-grid/)\n *\n * API:\n *\n * - [Grid API](https://mui.com/material-ui/api/grid/)\n */\ndeclare const Grid: OverridableComponent<GridTypeMap>;\n\nexport type GridProps<\n  RootComponent extends React.ElementType = GridTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<GridTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Grid;\n","node_modules/@mui/material/FormGroup/index.d.ts":"export { default } from './FormGroup';\nexport * from './FormGroup';\nexport { default as formGroupClasses } from './formGroupClasses';\nexport * from './formGroupClasses';\n","node_modules/@mui/material/FormGroup/formGroupClasses.d.ts":"export interface FormGroupClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `row={true}`. */\n    row: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n}\nexport type FormGroupClassKey = keyof FormGroupClasses;\nexport declare function getFormGroupUtilityClass(slot: string): string;\ndeclare const formGroupClasses: FormGroupClasses;\nexport default formGroupClasses;\n","node_modules/@mui/material/FormGroup/FormGroup.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { FormGroupClasses } from './formGroupClasses';\n\nexport interface FormGroupProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormGroupClasses>;\n  /**\n   * Display group of elements in a compact row.\n   * @default false\n   */\n  row?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * `FormGroup` wraps controls such as `Checkbox` and `Switch`.\n * It provides compact row layout.\n * For the `Radio`, you should be using the `RadioGroup` component instead of this one.\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n *\n * API:\n *\n * - [FormGroup API](https://mui.com/material-ui/api/form-group/)\n */\nexport default function FormGroup(props: FormGroupProps): JSX.Element;\n","node_modules/@mui/material/FormHelperText/index.d.ts":"export { default } from './FormHelperText';\nexport * from './FormHelperText';\n\nexport { default as formHelperTextClasses } from './formHelperTextClasses';\nexport * from './formHelperTextClasses';\n","node_modules/@mui/material/FormHelperText/formHelperTextClasses.d.ts":"export interface FormHelperTextClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `variant=\"filled\"` or `variant=\"outlined\"`. */\n    contained: string;\n    /** State class applied to the root element if `focused={true}`. */\n    focused: string;\n    /** State class applied to the root element if `filled={true}`. */\n    filled: string;\n    /** State class applied to the root element if `required={true}`. */\n    required: string;\n}\nexport type FormHelperTextClassKey = keyof FormHelperTextClasses;\nexport declare function getFormHelperTextUtilityClasses(slot: string): string;\ndeclare const formHelperTextClasses: FormHelperTextClasses;\nexport default formHelperTextClasses;\n","node_modules/@mui/material/FormHelperText/FormHelperText.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { FormHelperTextClasses } from './formHelperTextClasses';\n\nexport interface FormHelperTextPropsVariantOverrides {}\n\nexport interface FormHelperTextOwnProps {\n  /**\n   * The content of the component.\n   *\n   * If `' '` is provided, the component reserves one line height for displaying a future message.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormHelperTextClasses>;\n  /**\n   * If `true`, the helper text should be displayed in a disabled state.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, helper text should be displayed in an error state.\n   */\n  error?: boolean;\n  /**\n   * If `true`, the helper text should use filled classes key.\n   */\n  filled?: boolean;\n  /**\n   * If `true`, the helper text should use focused classes key.\n   */\n  focused?: boolean;\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin?: 'dense';\n  /**\n   * If `true`, the helper text should use required classes key.\n   */\n  required?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   */\n  variant?: OverridableStringUnion<\n    'standard' | 'outlined' | 'filled',\n    FormHelperTextPropsVariantOverrides\n  >;\n}\n\nexport interface FormHelperTextTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'p',\n> {\n  props: AdditionalProps & FormHelperTextOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormHelperText API](https://mui.com/material-ui/api/form-helper-text/)\n */\ndeclare const FormHelperText: OverridableComponent<FormHelperTextTypeMap>;\n\nexport type FormHelperTextProps<\n  RootComponent extends React.ElementType = FormHelperTextTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<FormHelperTextTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default FormHelperText;\n","node_modules/@mui/material/FormLabel/index.d.ts":"export { default } from './FormLabel';\nexport * from './FormLabel';\n\nexport { default as formLabelClasses } from './formLabelClasses';\nexport * from './formLabelClasses';\n","node_modules/@mui/material/FormLabel/formLabelClasses.d.ts":"export interface FormLabelClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if the color is secondary. */\n    colorSecondary: string;\n    /** State class applied to the root element if `focused={true}`. */\n    focused: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** State class applied to the root element if `filled={true}`. */\n    filled: string;\n    /** State class applied to the root element if `required={true}`. */\n    required: string;\n    /** Styles applied to the asterisk element. */\n    asterisk: string;\n}\nexport type FormLabelClassKey = keyof FormLabelClasses;\nexport declare function getFormLabelUtilityClasses(slot: string): string;\ndeclare const formLabelClasses: FormLabelClasses;\nexport default formLabelClasses;\n","node_modules/@mui/material/FormLabel/FormLabel.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps, OverridableTypeMap } from '../OverridableComponent';\nimport { FormLabelClasses } from './formLabelClasses';\n\nexport interface FormLabelPropsColorOverrides {}\n\n/**\n * This type is kept for compatibility. Use `FormLabelOwnProps` instead.\n */\nexport type FormLabelBaseProps = React.LabelHTMLAttributes<HTMLLabelElement>;\n\nexport interface FormLabelOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.LabelHTMLAttributes<HTMLLabelElement>['children'];\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormLabelClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    FormLabelPropsColorOverrides\n  >;\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is displayed in an error state.\n   */\n  error?: boolean;\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled?: boolean;\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused?: boolean;\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface FormLabelTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'label',\n> {\n  props: AdditionalProps & FormLabelBaseProps & FormLabelOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n *\n * API:\n *\n * - [FormLabel API](https://mui.com/material-ui/api/form-label/)\n */\ndeclare const FormLabel: OverridableComponent<FormLabelTypeMap>;\n\nexport interface ExtendFormLabelTypeMap<TypeMap extends OverridableTypeMap> {\n  props: TypeMap['props'] & Pick<FormLabelOwnProps, 'filled' | 'color'>;\n  defaultComponent: TypeMap['defaultComponent'];\n}\n\nexport type FormLabelProps<\n  RootComponent extends React.ElementType = FormLabelTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<FormLabelTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default FormLabel;\n","node_modules/@mui/material/FormControlLabel/index.d.ts":"export { default } from './FormControlLabel';\nexport * from './FormControlLabel';\n\nexport { default as formControlLabelClasses } from './formControlLabelClasses';\nexport * from './formControlLabelClasses';\n","node_modules/@mui/material/FormControlLabel/formControlLabelClasses.d.ts":"export interface FormControlLabelClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `labelPlacement=\"start\"`. */\n    labelPlacementStart: string;\n    /** Styles applied to the root element if `labelPlacement=\"top\"`. */\n    labelPlacementTop: string;\n    /** Styles applied to the root element if `labelPlacement=\"bottom\"`. */\n    labelPlacementBottom: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the label's Typography component. */\n    label: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** State class applied to the root element if `required={true}`. */\n    required: string;\n    /** Styles applied to the asterisk element. */\n    asterisk: string;\n}\nexport type FormControlLabelClassKey = keyof FormControlLabelClasses;\nexport declare function getFormControlLabelUtilityClasses(slot: string): string;\ndeclare const formControlLabelClasses: FormControlLabelClasses;\nexport default formControlLabelClasses;\n","node_modules/@mui/material/FormControlLabel/FormControlLabel.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme, InternalStandardProps as StandardProps } from '..';\nimport { TypographyProps } from '../Typography';\nimport { FormControlLabelClasses } from './formControlLabelClasses';\n\nexport interface FormControlLabelProps\n  extends StandardProps<React.LabelHTMLAttributes<HTMLLabelElement>, 'children' | 'onChange'> {\n  /**\n   * If `true`, the component appears selected.\n   */\n  checked?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormControlLabelClasses>;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps?: {\n    /**\n     * Props applied to the Typography wrapper of the passed label.\n     * This is unused if disableTypography is true.\n     * @default {}\n     */\n    typography?: TypographyProps;\n  };\n  /**\n   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.\n   */\n  control: React.ReactElement<any, any>;\n  /**\n   * If `true`, the control is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is rendered as it is passed without an additional typography node.\n   */\n  disableTypography?: boolean;\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<any>;\n  /**\n   * A text or an element to be used in an enclosing label element.\n   */\n  label: React.ReactNode;\n  /**\n   * The position of the label.\n   * @default 'end'\n   */\n  labelPlacement?: 'end' | 'start' | 'top' | 'bottom';\n  name?: string;\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange?: (event: React.SyntheticEvent, checked: boolean) => void;\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required?: boolean;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps?: {\n    /**\n     * Props applied to the Typography wrapper of the passed label.\n     * This is unused if disableTypography is true.\n     * @default {}\n     */\n    typography?: TypographyProps;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the component.\n   */\n  value?: unknown;\n}\n\n/**\n * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.\n * Use this component if you want to display an extra label.\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n *\n * API:\n *\n * - [FormControlLabel API](https://mui.com/material-ui/api/form-control-label/)\n */\nexport default function FormControlLabel(props: FormControlLabelProps): JSX.Element;\n","node_modules/@mui/material/Fade/index.d.ts":"export { default } from './Fade';\nexport * from './Fade';\n","node_modules/@mui/material/Fade/Fade.d.ts":"import * as React from 'react';\nimport { TransitionProps } from '../transitions/transition';\n\nexport interface FadeProps extends Omit<TransitionProps, 'children'> {\n  /**\n   * Perform the enter transition when it first mounts if `in` is also `true`.\n   * Set this to `false` to disable this behavior.\n   * @default true\n   */\n  appear?: boolean;\n  /**\n   * A single child content element.\n   */\n  children: React.ReactElement<any, any>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  ref?: React.Ref<unknown>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  timeout?: TransitionProps['timeout'];\n}\n\n/**\n * The Fade transition is used by the [Modal](https://mui.com/material-ui/react-modal/) component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Fade API](https://mui.com/material-ui/api/fade/)\n * - inherits [Transition API](https://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\nexport default function Fade(props: FadeProps): JSX.Element;\n","node_modules/@mui/material/Fab/index.d.ts":"export { default } from './Fab';\nexport * from './Fab';\n\nexport { default as fabClasses } from './fabClasses';\nexport * from './fabClasses';\n","node_modules/@mui/material/Fab/fabClasses.d.ts":"export interface FabClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    primary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    secondary: string;\n    /** Styles applied to the root element if `variant=\"extended\"`. */\n    extended: string;\n    /** Styles applied to the root element if `variant=\"circular\"`. */\n    circular: string;\n    /** State class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: string;\n    /** Styles applied to the root element if `size=\"small\"``. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"``. */\n    sizeMedium: string;\n}\nexport type FabClassKey = keyof FabClasses;\nexport declare function getFabUtilityClass(slot: string): string;\ndeclare const fabClasses: FabClasses;\nexport default fabClasses;\n","node_modules/@mui/material/Fab/Fab.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { PropTypes, Theme } from '..';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { FabClasses } from './fabClasses';\n\nexport interface FabPropsVariantOverrides {}\n\nexport interface FabPropsSizeOverrides {}\n\nexport interface FabPropsColorOverrides {}\n\nexport interface FabOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FabClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color?: OverridableStringUnion<\n    PropTypes.Color | 'success' | 'error' | 'info' | 'warning',\n    FabPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * If `true`, the ripple effect is disabled.\n   */\n  disableRipple?: boolean;\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href?: string;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'large'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', FabPropsSizeOverrides>;\n  /**\n   * The variant to use.\n   * @default 'circular'\n   */\n  variant?: OverridableStringUnion<'circular' | 'extended', FabPropsVariantOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type FabTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & FabOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Floating Action Button](https://mui.com/material-ui/react-floating-action-button/)\n *\n * API:\n *\n * - [Fab API](https://mui.com/material-ui/api/fab/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const Fab: ExtendButtonBase<FabTypeMap>;\n\nexport type FabProps<\n  RootComponent extends React.ElementType = FabTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<FabTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Fab;\n","node_modules/@mui/material/Drawer/index.d.ts":"export { default } from './Drawer';\nexport * from './Drawer';\n\nexport { default as drawerClasses } from './drawerClasses';\nexport * from './drawerClasses';\n","node_modules/@mui/material/Drawer/drawerClasses.d.ts":"export interface DrawerClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"permanent or persistent\"`. */\n    docked: string;\n    /** Styles applied to the Paper component. */\n    paper: string;\n    /** Styles applied to the Paper component if `anchor=\"left\"`. */\n    paperAnchorLeft: string;\n    /** Styles applied to the Paper component if `anchor=\"right\"`. */\n    paperAnchorRight: string;\n    /** Styles applied to the Paper component if `anchor=\"top\"`. */\n    paperAnchorTop: string;\n    /** Styles applied to the Paper component if `anchor=\"bottom\"`. */\n    paperAnchorBottom: string;\n    /** Styles applied to the Paper component if `anchor=\"left\"` and `variant` is not \"temporary\". */\n    paperAnchorDockedLeft: string;\n    /** Styles applied to the Paper component if `anchor=\"top\"` and `variant` is not \"temporary\". */\n    paperAnchorDockedTop: string;\n    /** Styles applied to the Paper component if `anchor=\"right\"` and `variant` is not \"temporary\". */\n    paperAnchorDockedRight: string;\n    /** Styles applied to the Paper component if `anchor=\"bottom\"` and `variant` is not \"temporary\". */\n    paperAnchorDockedBottom: string;\n    /** Styles applied to the Modal component. */\n    modal: string;\n}\nexport type DrawerClassKey = keyof DrawerClasses;\nexport declare function getDrawerUtilityClass(slot: string): string;\ndeclare const drawerClasses: DrawerClasses;\nexport default drawerClasses;\n","node_modules/@mui/material/Drawer/Drawer.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { ModalProps } from '../Modal';\nimport { SlideProps } from '../Slide';\nimport { PaperProps } from '../Paper';\nimport { TransitionProps } from '../transitions/transition';\nimport { DrawerClasses } from './drawerClasses';\n\nexport interface DrawerProps extends StandardProps<ModalProps, 'open' | 'children'> {\n  /**\n   * Side from which the drawer will appear.\n   * @default 'left'\n   */\n  anchor?: 'left' | 'top' | 'right' | 'bottom';\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DrawerClasses>;\n  /**\n   * The elevation of the drawer.\n   * @default 16\n   */\n  elevation?: number;\n  /**\n   * Props applied to the [`Modal`](/material-ui/api/modal/) element.\n   * @default {}\n   */\n  ModalProps?: Partial<ModalProps>;\n  /**\n   * Callback fired when the component requests to be closed.\n   * The `reason` parameter can optionally be used to control the response to `onClose`.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose?: ModalProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   * @default false\n   */\n  open?: boolean;\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   * @default {}\n   */\n  PaperProps?: Partial<PaperProps<React.ElementType>>;\n  /**\n   * Props applied to the [`Slide`](/material-ui/api/slide/) element.\n   */\n  SlideProps?: Partial<SlideProps>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * The variant to use.\n   * @default 'temporary'\n   */\n  variant?: 'permanent' | 'persistent' | 'temporary';\n}\n\n/**\n * The props of the [Modal](https://mui.com/material-ui/api/modal/) component are available\n * when `variant=\"temporary\"` is set.\n *\n * Demos:\n *\n * - [Drawer](https://mui.com/material-ui/react-drawer/)\n *\n * API:\n *\n * - [Drawer API](https://mui.com/material-ui/api/drawer/)\n */\nexport default function Drawer(props: DrawerProps): JSX.Element;\n","node_modules/@mui/material/GlobalStyles/index.d.ts":"export { default } from './GlobalStyles';\nexport * from './GlobalStyles';\n","node_modules/@mui/material/GlobalStyles/GlobalStyles.d.ts":"import { GlobalStylesProps as StyledGlobalStylesProps } from '@mui/system';\nimport { Theme } from '../styles';\n\nexport interface GlobalStylesProps {\n  /**\n   * The styles you want to apply globally.\n   */\n  styles: StyledGlobalStylesProps<Theme>['styles'];\n}\n\n/**\n *\n * Demos:\n *\n * - [How to customize](https://mui.com/material-ui/customization/how-to-customize/)\n *\n * API:\n *\n * - [GlobalStyles API](https://mui.com/material-ui/api/global-styles/)\n */\nexport default function GlobalStyles(props: GlobalStylesProps): React.ReactElement;\n","node_modules/@mui/material/FilledInput/index.d.ts":"export { default } from './FilledInput';\nexport * from './FilledInput';\n\nexport { default as filledInputClasses } from './filledInputClasses';\nexport * from './filledInputClasses';\n","node_modules/@mui/material/FilledInput/filledInputClasses.d.ts":"export interface FilledInputClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if color secondary. */\n    colorSecondary: string;\n    /** Styles applied to the root element unless `disableUnderline={true}`. */\n    underline: string;\n    /** State class applied to the root element if the component is focused. */\n    focused: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `startAdornment` is provided. */\n    adornedStart: string;\n    /** Styles applied to the root element if `endAdornment` is provided. */\n    adornedEnd: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `multiline={true}`. */\n    multiline: string;\n    /** Styles applied to the root element if `hiddenLabel={true}`. */\n    hiddenLabel: string;\n    /** Styles applied to the input element. */\n    input: string;\n    /** Styles applied to the input element if `size=\"small\"`. */\n    inputSizeSmall: string;\n    /** Styles applied to the `input` if in `<FormControl hiddenLabel />`. */\n    inputHiddenLabel: string;\n    /** Styles applied to the input element if `multiline={true}`. */\n    inputMultiline: string;\n    /** Styles applied to the input element if `startAdornment` is provided. */\n    inputAdornedStart: string;\n    /** Styles applied to the input element if `endAdornment` is provided. */\n    inputAdornedEnd: string;\n    /** Styles applied to the input element if `type=\"search\"`. */\n    inputTypeSearch: string;\n}\nexport type FilledInputClassKey = keyof FilledInputClasses;\nexport declare function getFilledInputUtilityClass(slot: string): string;\ndeclare const filledInputClasses: FilledInputClasses;\nexport default filledInputClasses;\n","node_modules/@mui/material/FilledInput/FilledInput.d.ts":"import { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { InputBaseProps } from '../InputBase';\nimport { FilledInputClasses } from './filledInputClasses';\n\nexport interface FilledInputProps extends StandardProps<InputBaseProps> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FilledInputClasses>;\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel?: boolean;\n  /**\n   * If `true`, the input will not have an underline.\n   */\n  disableUnderline?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FilledInput API](https://mui.com/material-ui/api/filled-input/)\n * - inherits [InputBase API](https://mui.com/material-ui/api/input-base/)\n */\ndeclare const FilledInput: ((props: FilledInputProps) => JSX.Element) & { muiName: string };\n\nexport default FilledInput;\n","node_modules/@mui/material/FormControl/useFormControl.d.ts":"import { FormControlState } from './FormControlContext';\nexport default function useFormControl(): FormControlState | undefined;\n","node_modules/@mui/material/FormControl/index.d.ts":"export { default } from './FormControl';\nexport * from './FormControl';\n\nexport { default as useFormControl } from './useFormControl';\n\nexport { FormControlState } from './FormControlContext';\n\nexport { default as formControlClasses } from './formControlClasses';\nexport * from './formControlClasses';\n","node_modules/@mui/material/FormControl/formControlClasses.d.ts":"export interface FormControlClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `margin=\"normal\"`. */\n    marginNormal: string;\n    /** Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n}\nexport type FormControlClassKey = keyof FormControlClasses;\nexport declare function getFormControlUtilityClasses(slot: string): string;\ndeclare const formControlClasses: FormControlClasses;\nexport default formControlClasses;\n","node_modules/@mui/material/FormControl/FormControlContext.d.ts":"import * as React from 'react';\nimport type { FormControlProps } from './FormControl';\ntype ContextFromPropsKey = 'color' | 'disabled' | 'error' | 'fullWidth' | 'hiddenLabel' | 'margin' | 'onBlur' | 'onFocus' | 'required' | 'size' | 'variant';\nexport interface FormControlState extends Pick<FormControlProps, ContextFromPropsKey> {\n    adornedStart: boolean;\n    filled: boolean;\n    focused: boolean;\n    onEmpty: () => void;\n    onFilled: () => void;\n    registerEffect: () => void;\n    setAdornedStart: React.Dispatch<React.SetStateAction<boolean>>;\n}\n/**\n * @ignore - internal component.\n */\ndeclare const FormControlContext: React.Context<FormControlState | undefined>;\nexport default FormControlContext;\n","node_modules/@mui/material/FormControl/FormControl.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { FormControlClasses } from './formControlClasses';\n\nexport interface FormControlPropsSizeOverrides {}\nexport interface FormControlPropsColorOverrides {}\n\nexport interface FormControlOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.HTMLAttributes<HTMLDivElement>['children'];\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<FormControlClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    FormControlPropsColorOverrides\n  >;\n  /**\n   * If `true`, the label, input and helper text should be displayed in a disabled state.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the label is displayed in an error state.\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * If `true`, the component will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * If `true`, the component is displayed in focused state.\n   */\n  focused?: boolean;\n  /**\n   * If `true`, the label is hidden.\n   * This is used to increase density for a `FilledInput`.\n   * Be sure to add `aria-label` to the `input` element.\n   * @default false\n   */\n  hiddenLabel?: boolean;\n  /**\n   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.\n   * @default 'none'\n   */\n  margin?: 'dense' | 'normal' | 'none';\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   * @default false\n   */\n  required?: boolean;\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', FormControlPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: 'standard' | 'outlined' | 'filled';\n}\n\nexport interface FormControlTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & FormControlOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `InputBase` can be used within a FormControl because it creates visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormControl API](https://mui.com/material-ui/api/form-control/)\n */\ndeclare const FormControl: OverridableComponent<FormControlTypeMap>;\n\nexport type FormControlProps<\n  RootComponent extends React.ElementType = FormControlTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<FormControlTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default FormControl;\n","node_modules/@mui/material/DialogTitle/index.d.ts":"export { default } from './DialogTitle';\nexport * from './DialogTitle';\n\nexport { default as dialogTitleClasses } from './dialogTitleClasses';\nexport * from './dialogTitleClasses';\n","node_modules/@mui/material/DialogTitle/dialogTitleClasses.d.ts":"export interface DialogTitleClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type DialogTitleClassKey = keyof DialogTitleClasses;\nexport declare function getDialogTitleUtilityClass(slot: string): string;\ndeclare const dialogTitleClasses: DialogTitleClasses;\nexport default dialogTitleClasses;\n","node_modules/@mui/material/DialogTitle/DialogTitle.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { TypographyTypeMap } from '../Typography';\nimport { DialogTitleClasses } from './dialogTitleClasses';\n\nexport interface DialogTitleOwnProps extends Omit<TypographyTypeMap['props'], 'classes'> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogTitleClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface DialogTitleTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = TypographyTypeMap['defaultComponent'],\n> {\n  props: AdditionalProps & DialogTitleOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogTitle API](https://mui.com/material-ui/api/dialog-title/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const DialogTitle: OverridableComponent<DialogTitleTypeMap>;\n\nexport type DialogTitleProps<\n  RootComponent extends React.ElementType = DialogTitleTypeMap['defaultComponent'],\n  AdditionalProps = { component?: React.ElementType },\n> = OverrideProps<DialogTitleTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default DialogTitle;\n","node_modules/@mui/material/DialogContentText/index.d.ts":"export { default } from './DialogContentText';\nexport * from './DialogContentText';\n\nexport { default as dialogContentTextClasses } from './dialogContentTextClasses';\nexport * from './dialogContentTextClasses';\n","node_modules/@mui/material/DialogContentText/dialogContentTextClasses.d.ts":"export interface DialogContentTextClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type DialogContentTextClassKey = keyof DialogContentTextClasses;\nexport declare function getDialogContentTextUtilityClass(slot: string): string;\ndeclare const dialogContentTextClasses: DialogContentTextClasses;\nexport default dialogContentTextClasses;\n","node_modules/@mui/material/DialogContentText/DialogContentText.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { TypographyTypeMap } from '../Typography';\nimport { OverrideProps, OverridableComponent } from '../OverridableComponent';\nimport { Theme } from '../styles';\nimport { DialogContentTextClasses } from './dialogContentTextClasses';\n\nexport interface DialogContentTextOwnProps extends Omit<TypographyTypeMap['props'], 'classes'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogContentTextClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface DialogContentTextTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = TypographyTypeMap['defaultComponent'],\n> {\n  props: AdditionalProps & DialogContentTextOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogContentText API](https://mui.com/material-ui/api/dialog-content-text/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const DialogContentText: OverridableComponent<DialogContentTextTypeMap>;\n\nexport type DialogContentTextProps<\n  RootComponent extends React.ElementType = DialogContentTextTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<DialogContentTextTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default DialogContentText;\n","node_modules/@mui/material/DialogActions/index.d.ts":"export { default } from './DialogActions';\nexport * from './DialogActions';\n\nexport { default as dialogActionsClasses } from './dialogActionsClasses';\nexport * from './dialogActionsClasses';\n","node_modules/@mui/material/DialogActions/dialogActionsClasses.d.ts":"export interface DialogActionsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `disableSpacing={true}`. */\n    spacing: string;\n}\nexport type DialogActionsClassKey = keyof DialogActionsClasses;\nexport declare function getDialogActionsUtilityClass(slot: string): string;\ndeclare const dialogActionsClasses: DialogActionsClasses;\nexport default dialogActionsClasses;\n","node_modules/@mui/material/DialogActions/DialogActions.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { DialogActionsClasses } from './dialogActionsClasses';\n\nexport interface DialogActionsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogActionsClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing?: boolean;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogActions API](https://mui.com/material-ui/api/dialog-actions/)\n */\nexport default function DialogActions(props: DialogActionsProps): JSX.Element;\n","node_modules/@mui/material/Dialog/index.d.ts":"export { default } from './Dialog';\nexport * from './Dialog';\n\nexport { default as dialogClasses } from './dialogClasses';\nexport * from './dialogClasses';\n","node_modules/@mui/material/Dialog/dialogClasses.d.ts":"export interface DialogClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the container element if `scroll=\"paper\"`. */\n    scrollPaper: string;\n    /** Styles applied to the container element if `scroll=\"body\"`. */\n    scrollBody: string;\n    /** Styles applied to the container element. */\n    container: string;\n    /** Styles applied to the Paper component. */\n    paper: string;\n    /** Styles applied to the Paper component if `scroll=\"paper\"`. */\n    paperScrollPaper: string;\n    /** Styles applied to the Paper component if `scroll=\"body\"`. */\n    paperScrollBody: string;\n    /** Styles applied to the Paper component if `maxWidth=false`. */\n    paperWidthFalse: string;\n    /** Styles applied to the Paper component if `maxWidth=\"xs\"`. */\n    paperWidthXs: string;\n    /** Styles applied to the Paper component if `maxWidth=\"sm\"`. */\n    paperWidthSm: string;\n    /** Styles applied to the Paper component if `maxWidth=\"md\"`. */\n    paperWidthMd: string;\n    /** Styles applied to the Paper component if `maxWidth=\"lg\"`. */\n    paperWidthLg: string;\n    /** Styles applied to the Paper component if `maxWidth=\"xl\"`. */\n    paperWidthXl: string;\n    /** Styles applied to the Paper component if `fullWidth={true}`. */\n    paperFullWidth: string;\n    /** Styles applied to the Paper component if `fullScreen={true}`. */\n    paperFullScreen: string;\n}\nexport type DialogClassKey = keyof DialogClasses;\nexport declare function getDialogUtilityClass(slot: string): string;\ndeclare const dialogClasses: DialogClasses;\nexport default dialogClasses;\n","node_modules/@mui/material/Dialog/DialogContext.d.ts":"import * as React from 'react';\ninterface DialogContextValue {\n    titleId?: string;\n}\ndeclare const DialogContext: React.Context<DialogContextValue>;\nexport default DialogContext;\n","node_modules/@mui/material/Dialog/Dialog.d.ts":"import * as React from 'react';\nimport { SxProps, Breakpoint } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { ModalProps } from '../Modal';\nimport { TransitionProps } from '../transitions/transition';\nimport { DialogClasses } from './dialogClasses';\n\nexport interface DialogProps extends StandardProps<ModalProps, 'children'> {\n  /**\n   * The id(s) of the element(s) that describe the dialog.\n   */\n  'aria-describedby'?: string;\n  /**\n   * The id(s) of the element(s) that label the dialog.\n   */\n  'aria-labelledby'?: string;\n  /**\n   * Dialog children, usually the included sub-components.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogClasses>;\n  /**\n   * If `true`, hitting escape will not fire the `onClose` callback.\n   * @default false\n   */\n  disableEscapeKeyDown?: boolean;\n  /**\n   * If `true`, the dialog is full-screen.\n   * @default false\n   */\n  fullScreen?: boolean;\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.\n   *\n   * Notice that the dialog width grow is limited by the default margin.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * Determine the max-width of the dialog.\n   * The dialog width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'sm'\n   */\n  maxWidth?: Breakpoint | false;\n  /**\n   * Callback fired when the backdrop is clicked.\n   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n   */\n  onBackdropClick?: ModalProps['onBackdropClick'];\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n   */\n  onClose?: ModalProps['onClose'];\n  /**\n   * If `true`, the component is shown.\n   */\n  open: ModalProps['open'];\n  /**\n   * The component used to render the body of the dialog.\n   * @default Paper\n   */\n  PaperComponent?: React.JSXElementConstructor<PaperProps>;\n  /**\n   * Props applied to the [`Paper`](/material-ui/api/paper/) element.\n   * @default {}\n   */\n  PaperProps?: Partial<PaperProps<React.ElementType>>;\n  /**\n   * Determine the container for scrolling the dialog.\n   * @default 'paper'\n   */\n  scroll?: 'body' | 'paper';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Fade\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & { children: React.ReactElement<any, any> }\n  >;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps?: TransitionProps;\n}\n\n/**\n * Dialogs are overlaid modal paper based components with a backdrop.\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [Dialog API](https://mui.com/material-ui/api/dialog/)\n * - inherits [Modal API](https://mui.com/material-ui/api/modal/)\n */\nexport default function Dialog(props: DialogProps): JSX.Element;\n","node_modules/@mui/material/DialogContent/index.d.ts":"export { default } from './DialogContent';\nexport * from './DialogContent';\n\nexport { default as dialogContentClasses } from './dialogContentClasses';\nexport * from './dialogContentClasses';\n","node_modules/@mui/material/DialogContent/dialogContentClasses.d.ts":"export interface DialogContentClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `dividers={true}`. */\n    dividers: string;\n}\nexport type DialogContentClassKey = keyof DialogContentClasses;\nexport declare function getDialogContentUtilityClass(slot: string): string;\ndeclare const dialogContentClasses: DialogContentClasses;\nexport default dialogContentClasses;\n","node_modules/@mui/material/DialogContent/DialogContent.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { DialogContentClasses } from './dialogContentClasses';\n\nexport interface DialogContentProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DialogContentClasses>;\n  /**\n   * Display the top and bottom dividers.\n   * @default false\n   */\n  dividers?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Dialog](https://mui.com/material-ui/react-dialog/)\n *\n * API:\n *\n * - [DialogContent API](https://mui.com/material-ui/api/dialog-content/)\n */\nexport default function DialogContent(props: DialogContentProps): JSX.Element;\n","node_modules/@mui/material/CssBaseline/index.d.ts":"export { default } from './CssBaseline';\nexport * from './CssBaseline';\n","node_modules/@mui/material/CssBaseline/CssBaseline.d.ts":"import * as React from 'react';\nimport { StyledComponentProps } from '../styles';\n\nexport interface CssBaselineProps extends StyledComponentProps<never> {\n  /**\n   * You can wrap a node.\n   */\n  children?: React.ReactNode;\n  /**\n   * Enable `color-scheme` CSS property to use `theme.palette.mode`.\n   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme\n   * For browser support, check out https://caniuse.com/?search=color-scheme\n   * @default false\n   */\n  enableColorScheme?: boolean;\n}\n\n/**\n * Kickstart an elegant, consistent, and simple baseline to build upon.\n *\n * Demos:\n *\n * - [CSS Baseline](https://mui.com/material-ui/react-css-baseline/)\n *\n * API:\n *\n * - [CssBaseline API](https://mui.com/material-ui/api/css-baseline/)\n */\nexport default function CssBaseline(props: CssBaselineProps): JSX.Element;\n","node_modules/@mui/material/Container/index.d.ts":"export { default } from './Container';\nexport * from './Container';\n\nexport { default as containerClasses } from './containerClasses';\nexport * from './containerClasses';\n","node_modules/@mui/material/Container/containerClasses.d.ts":"import { ContainerClasses } from '@mui/system';\nexport type { ContainerClassKey } from '@mui/system';\nexport type { ContainerClasses };\nexport declare function getContainerUtilityClass(slot: string): string;\ndeclare const containerClasses: ContainerClasses;\nexport default containerClasses;\n","node_modules/@mui/material/Container/Container.d.ts":"import * as React from 'react';\nimport { SxProps, Breakpoint } from '@mui/system';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ContainerClasses } from './containerClasses';\n\nexport interface ContainerOwnProps {\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ContainerClasses>;\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters?: boolean;\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed?: boolean;\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth?: Breakpoint | false;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ContainerTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & ContainerOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Container](https://mui.com/material-ui/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/material-ui/api/container/)\n */\ndeclare const Container: OverridableComponent<ContainerTypeMap>;\n\nexport type ContainerProps<\n  RootComponent extends React.ElementType = ContainerTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ContainerTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Container;\n","node_modules/@mui/material/CircularProgress/index.d.ts":"export { default } from './CircularProgress';\nexport * from './CircularProgress';\n\nexport { default as circularProgressClasses } from './circularProgressClasses';\nexport * from './circularProgressClasses';\n","node_modules/@mui/material/CircularProgress/circularProgressClasses.d.ts":"export interface CircularProgressClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"determinate\"`. */\n    determinate: string;\n    /** Styles applied to the root element if `variant=\"indeterminate\"`. */\n    indeterminate: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the svg element. */\n    svg: string;\n    /** Styles applied to the `circle` svg path. */\n    circle: string;\n    /** Styles applied to the `circle` svg path if `variant=\"determinate\"`. */\n    circleDeterminate: string;\n    /** Styles applied to the `circle` svg path if `variant=\"indeterminate\"`. */\n    circleIndeterminate: string;\n    /** Styles applied to the `circle` svg path if `disableShrink={true}`. */\n    circleDisableShrink: string;\n}\nexport type CircularProgressClassKey = keyof CircularProgressClasses;\nexport declare function getCircularProgressUtilityClass(slot: string): string;\ndeclare const circularProgressClasses: CircularProgressClasses;\nexport default circularProgressClasses;\n","node_modules/@mui/material/CircularProgress/CircularProgress.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { CircularProgressClasses } from './circularProgressClasses';\n\nexport interface CircularProgressPropsColorOverrides {}\n\nexport interface CircularProgressProps\n  extends StandardProps<React.HTMLAttributes<HTMLSpanElement>, 'children'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CircularProgressClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'inherit',\n    CircularProgressPropsColorOverrides\n  >;\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink?: boolean;\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, for example '3rem'.\n   * @default 40\n   */\n  size?: number | string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness?: number;\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value?: number;\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant?: 'determinate' | 'indeterminate';\n}\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n *\n * Demos:\n *\n * - [Progress](https://mui.com/material-ui/react-progress/)\n *\n * API:\n *\n * - [CircularProgress API](https://mui.com/material-ui/api/circular-progress/)\n */\nexport default function CircularProgress(props: CircularProgressProps): JSX.Element;\n","node_modules/@mui/material/Divider/index.d.ts":"export { default } from './Divider';\nexport * from './Divider';\n\nexport { default as dividerClasses } from './dividerClasses';\nexport * from './dividerClasses';\n","node_modules/@mui/material/Divider/dividerClasses.d.ts":"export interface DividerClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `absolute={true}`. */\n    absolute: string;\n    /** Styles applied to the root element if `variant=\"inset\"`. */\n    inset: string;\n    /** Styles applied to the root element if `variant=\"fullWidth\"`. */\n    fullWidth: string;\n    /** Styles applied to the root element if `light={true}`.\n     * @deprecated\n     */\n    light: string;\n    /** Styles applied to the root element if `variant=\"middle\"`. */\n    middle: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the root element if `flexItem={true}`. */\n    flexItem: string;\n    /** Styles applied to the root element if divider have text. */\n    withChildren: string;\n    /** Styles applied to the root element if divider have text and `orientation=\"vertical\"`.\n     * @deprecated Combine the [.MuiDivider-withChildren](/material-ui/api/divider/#divider-classes-withChildren) and [.MuiDivider-vertical](/material-ui/api/divider/#divider-classes-vertical) classes instead.\n     */\n    withChildrenVertical: string;\n    /** Styles applied to the root element if `textAlign=\"right\" orientation=\"horizontal\"`. */\n    textAlignRight: string;\n    /** Styles applied to the root element if `textAlign=\"left\" orientation=\"horizontal\"`. */\n    textAlignLeft: string;\n    /** Styles applied to the span children element if `orientation=\"horizontal\"`. */\n    wrapper: string;\n    /** Styles applied to the span children element if `orientation=\"vertical\"`. */\n    wrapperVertical: string;\n}\nexport type DividerClassKey = keyof DividerClasses;\nexport declare function getDividerUtilityClass(slot: string): string;\ndeclare const dividerClasses: DividerClasses;\nexport default dividerClasses;\n","node_modules/@mui/material/Divider/Divider.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { DividerClasses } from './dividerClasses';\n\nexport interface DividerPropsVariantOverrides {}\n\nexport interface DividerOwnProps {\n  /**\n   * Absolutely position the element.\n   * @default false\n   */\n  absolute?: boolean;\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<DividerClasses>;\n  /**\n   * If `true`, a vertical divider will have the correct height when used in flex container.\n   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)\n   * @default false\n   */\n  flexItem?: boolean;\n  /**\n   * If `true`, the divider will have a lighter color.\n   * @default false\n   * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n   */\n  light?: boolean;\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The text alignment.\n   * @default 'center'\n   */\n  textAlign?: 'center' | 'right' | 'left';\n  /**\n   * The variant to use.\n   * @default 'fullWidth'\n   */\n  variant?: OverridableStringUnion<'fullWidth' | 'inset' | 'middle', DividerPropsVariantOverrides>;\n}\n\nexport interface DividerTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'hr',\n> {\n  props: AdditionalProps & DividerOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Divider](https://mui.com/material-ui/react-divider/)\n * - [Lists](https://mui.com/material-ui/react-list/)\n *\n * API:\n *\n * - [Divider API](https://mui.com/material-ui/api/divider/)\n */\ndeclare const Divider: OverridableComponent<DividerTypeMap>;\n\nexport type DividerProps<\n  RootComponent extends React.ElementType = DividerTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<DividerTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Divider;\n","node_modules/@mui/material/Collapse/index.d.ts":"export { default } from './Collapse';\nexport * from './Collapse';\n\nexport { default as collapseClasses } from './collapseClasses';\nexport * from './collapseClasses';\n","node_modules/@mui/material/Collapse/collapseClasses.d.ts":"export interface CollapseClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `orientation=\"horizontal\"`. */\n    horizontal: string;\n    /** Styles applied to the root element when the transition has entered. */\n    entered: string;\n    /** Styles applied to the root element when the transition has exited and `collapsedSize` = 0px. */\n    hidden: string;\n    /** Styles applied to the outer wrapper element. */\n    wrapper: string;\n    /** Styles applied to the inner wrapper element. */\n    wrapperInner: string;\n}\nexport type CollapseClassKey = keyof CollapseClasses;\nexport declare function getCollapseUtilityClass(slot: string): string;\ndeclare const collapseClasses: CollapseClasses;\nexport default collapseClasses;\n","node_modules/@mui/material/Collapse/Collapse.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { TransitionProps } from '../transitions/transition';\nimport { CollapseClasses } from './collapseClasses';\n\nexport interface CollapseProps extends StandardProps<TransitionProps, 'timeout'> {\n  /**\n   * The content node to be collapsed.\n   */\n  children?: React.ReactNode;\n  className?: string;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CollapseClasses>;\n  /**\n   * The width (horizontal) or height (vertical) of the container when collapsed.\n   * @default '0px'\n   */\n  collapsedSize?: string | number;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType<TransitionProps>;\n  /**\n   * The transition timing function.\n   * You may specify a single easing or a object containing enter and exit values.\n   */\n  easing?: TransitionProps['easing'];\n  /**\n   * If `true`, the component will transition in.\n   */\n  in?: boolean;\n  /**\n   * The transition orientation.\n   * @default 'vertical'\n   */\n  orientation?: 'horizontal' | 'vertical';\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   *\n   * Set to 'auto' to automatically calculate transition time based on height.\n   * @default duration.standard\n   */\n  timeout?: TransitionProps['timeout'] | 'auto';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n * The Collapse transition is used by the\n * [Vertical Stepper](https://mui.com/material-ui/react-stepper/#vertical-stepper) StepContent component.\n * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n * - [Lists](https://mui.com/material-ui/react-list/)\n * - [Transitions](https://mui.com/material-ui/transitions/)\n *\n * API:\n *\n * - [Collapse API](https://mui.com/material-ui/api/collapse/)\n * - inherits [Transition API](https://reactcommunity.org/react-transition-group/transition/#Transition-props)\n */\n\nexport default function Collapse(props: CollapseProps): JSX.Element;\n","node_modules/@mui/material/Chip/index.d.ts":"export { default } from './Chip';\nexport * from './Chip';\n\nexport { default as chipClasses } from './chipClasses';\nexport * from './chipClasses';\n","node_modules/@mui/material/Chip/chipClasses.d.ts":"export interface ChipClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the root element if `color=\"warning\"`. */\n    colorWarning: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `onClick` is defined or `clickable={true}`. */\n    clickable: string;\n    /** Styles applied to the root element if `onClick` and `color=\"primary\"` is defined or `clickable={true}`.\n     * @deprecated Combine the [.MuiChip-clickable](/material-ui/api/chip/#chip-classes-clickable) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    clickableColorPrimary: string;\n    /** Styles applied to the root element if `onClick` and `color=\"secondary\"` is defined or `clickable={true}`.\n     * @deprecated Combine the [.MuiChip-clickable](/material-ui/api/chip/#chip-classes-clickable) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    clickableColorSecondary: string;\n    /** Styles applied to the root element if `onDelete` is defined. */\n    deletable: string;\n    /** Styles applied to the root element if `onDelete` and `color=\"primary\"` is defined.\n     * @deprecated Combine the [.MuiChip-deletable](/material-ui/api/chip/#chip-classes-deletable) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deletableColorPrimary: string;\n    /** Styles applied to the root element if `onDelete` and `color=\"secondary\"` is defined.\n     * @deprecated Combine the [.MuiChip-deletable](/material-ui/api/chip/#chip-classes-deletable) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deletableColorSecondary: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"filled\"`. */\n    filled: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.\n     * @deprecated Combine the [.MuiChip-outlined](/material-ui/api/chip/#chip-classes-outlined) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedPrimary: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiChip-outlined](/material-ui/api/chip/#chip-classes-outlined) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedSecondary: string;\n    /** Styles applied to the root element if `variant=\"filled\"` and `color=\"primary\"`.\n     * @deprecated Combine the [.MuiChip-filled](/material-ui/api/chip/#chip-classes-filled) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    filledPrimary: string;\n    /** Styles applied to the root element if `variant=\"filled\"` and `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiChip-filled](/material-ui/api/chip/#chip-classes-filled) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    filledSecondary: string;\n    /** Styles applied to the avatar element. */\n    avatar: string;\n    /** Styles applied to the avatar element if `size=\"small\"`.\n     * @deprecated Combine the [.MuiChip-avatar](/material-ui/api/chip/#chip-classes-avatar) and [.MuiChip-sizeSmall](/material-ui/api/chip/#chip-classes-sizeSmall) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    avatarSmall: string;\n    /** Styles applied to the avatar element if `size=\"medium\"`.\n     * @deprecated Combine the [.MuiChip-avatar](/material-ui/api/chip/#chip-classes-avatar) and [.MuiChip-sizeMedium](/material-ui/api/chip/#chip-classes-sizeMedium) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    avatarMedium: string;\n    /** Styles applied to the avatar element if `color=\"primary\"`.\n     * @deprecated Combine the [.MuiChip-avatar](/material-ui/api/chip/#chip-classes-avatar) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    avatarColorPrimary: string;\n    /** Styles applied to the avatar element if `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiChip-avatar](/material-ui/api/chip/#chip-classes-avatar) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    avatarColorSecondary: string;\n    /** Styles applied to the icon element. */\n    icon: string;\n    /** Styles applied to the icon element if `size=\"small\"`.\n     * @deprecated Combine the [.MuiChip-icon](/material-ui/api/chip/#chip-classes-icon) and [.MuiChip-sizeSmall](/material-ui/api/chip/#chip-classes-sizeSmall) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconSmall: string;\n    /** Styles applied to the icon element if `size=\"medium\"`.\n     * @deprecated Combine the [.MuiChip-icon](/material-ui/api/chip/#chip-classes-icon) and [.MuiChip-sizeMedium](/material-ui/api/chip/#chip-classes-sizeMedium) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconMedium: string;\n    /** Styles applied to the icon element if `color=\"primary\"`.\n     * @deprecated Combine the [.MuiChip-icon](/material-ui/api/chip/#chip-classes-icon) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconColorPrimary: string;\n    /** Styles applied to the icon element if `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiChip-icon](/material-ui/api/chip/#chip-classes-icon) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconColorSecondary: string;\n    /** Styles applied to the label `span` element. */\n    label: string;\n    /** Styles applied to the label `span` element if `size=\"small\"`.\n     * @deprecated Combine the [.MuiChip-label](/material-ui/api/chip/#chip-classes-label) and [.MuiChip-sizeSmall](/material-ui/api/chip/#chip-classes-sizeSmall) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    labelSmall: string;\n    /** Styles applied to the label `span` element if `size=\"medium\"`.\n     * @deprecated Combine the [.MuiChip-label](/material-ui/api/chip/#chip-classes-label) and [.MuiChip-sizeMedium](/material-ui/api/chip/#chip-classes-sizeMedium) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    labelMedium: string;\n    /** Styles applied to the deleteIcon element. */\n    deleteIcon: string;\n    /** Styles applied to the deleteIcon element if `size=\"small\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) and [.MuiChip-sizeSmall](/material-ui/api/chip/#chip-classes-sizeSmall) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconSmall: string;\n    /** Styles applied to the deleteIcon element if `size=\"medium\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) and [.MuiChip-sizeMedium](/material-ui/api/chip/#chip-classes-sizeMedium) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconMedium: string;\n    /** Styles applied to the deleteIcon element if `color=\"primary\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconColorPrimary: string;\n    /** Styles applied to the deleteIcon element if `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconColorSecondary: string;\n    /** Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"outlined\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) , [.MuiChip-outlined](/material-ui/api/chip/#chip-classes-outlined) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconOutlinedColorPrimary: string;\n    /** Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"outlined\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) , [.MuiChip-outlined](/material-ui/api/chip/#chip-classes-outlined) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconOutlinedColorSecondary: string;\n    /** Styles applied to the deleteIcon element if `color=\"primary\"` and `variant=\"filled\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) , [.MuiChip-filled](/material-ui/api/chip/#chip-classes-filled) and [.MuiChip-colorPrimary](/material-ui/api/chip/#chip-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconFilledColorPrimary: string;\n    /** Styles applied to the deleteIcon element if `color=\"secondary\"` and `variant=\"filled\"`.\n     * @deprecated Combine the [.MuiChip-deleteIcon](/material-ui/api/chip/#chip-classes-deleteIcon) , [.MuiChip-filled](/material-ui/api/chip/#chip-classes-filled) and [.MuiChip-colorSecondary](/material-ui/api/chip/#chip-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    deleteIconFilledColorSecondary: string;\n    /** State class applied to the root element if keyboard focused. */\n    focusVisible: string;\n}\nexport type ChipClassKey = keyof ChipClasses;\nexport declare function getChipUtilityClass(slot: string): string;\ndeclare const chipClasses: ChipClasses;\nexport default chipClasses;\n","node_modules/@mui/material/Chip/Chip.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ChipClasses } from './chipClasses';\n\nexport interface ChipPropsVariantOverrides {}\n\nexport interface ChipPropsSizeOverrides {}\n\nexport interface ChipPropsColorOverrides {}\n\nexport interface ChipOwnProps {\n  /**\n   * The Avatar element to display.\n   */\n  avatar?: React.ReactElement;\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children?: null;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ChipClasses>;\n  /**\n   * If `true`, the chip will appear clickable, and will raise when pressed,\n   * even if the onClick prop is not defined.\n   * If `false`, the chip will not appear clickable, even if onClick prop is defined.\n   * This can be used, for example,\n   * along with the component prop to indicate an anchor Chip is clickable.\n   * Note: this controls the UI and does not affect the onClick event.\n   */\n  clickable?: boolean;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color?: OverridableStringUnion<\n    'default' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    ChipPropsColorOverrides\n  >;\n  /**\n   * Override the default delete icon element. Shown only if `onDelete` is set.\n   */\n  deleteIcon?: React.ReactElement;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Icon element.\n   */\n  icon?: React.ReactElement;\n  /**\n   * The content of the component.\n   */\n  label?: React.ReactNode;\n  /**\n   * Callback fired when the delete icon is clicked.\n   * If set, the delete icon will be shown.\n   */\n  onDelete?: React.EventHandler<any>;\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', ChipPropsSizeOverrides>;\n  /**\n   * If `true`, allows the disabled chip to escape focus.\n   * If `false`, allows the disabled chip to receive focus.\n   * @default false\n   */\n  skipFocusWhenDisabled?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   *  @ignore\n   */\n  tabIndex?: number;\n  /**\n   * The variant to use.\n   * @default 'filled'\n   */\n  variant?: OverridableStringUnion<'filled' | 'outlined', ChipPropsVariantOverrides>;\n}\n\nexport interface ChipTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & ChipOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n * Chips represent complex entities in small blocks, such as a contact.\n *\n * Demos:\n *\n * - [Chip](https://mui.com/material-ui/react-chip/)\n *\n * API:\n *\n * - [Chip API](https://mui.com/material-ui/api/chip/)\n */\ndeclare const Chip: OverridableComponent<ChipTypeMap>;\n\nexport type ChipProps<\n  RootComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ChipTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Chip;\n","node_modules/@mui/material/Checkbox/index.d.ts":"export { default } from './Checkbox';\nexport * from './Checkbox';\n\nexport { default as checkboxClasses } from './checkboxClasses';\nexport * from './checkboxClasses';\n","node_modules/@mui/material/Checkbox/checkboxClasses.d.ts":"export interface CheckboxClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `checked={true}`. */\n    checked: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `indeterminate={true}`. */\n    indeterminate: string;\n    /** State class applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** State class applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** State class applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** State class applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n}\nexport type CheckboxClassKey = keyof CheckboxClasses;\nexport declare function getCheckboxUtilityClass(slot: string): string;\ndeclare const checkboxClasses: CheckboxClasses;\nexport default checkboxClasses;\n","node_modules/@mui/material/Checkbox/Checkbox.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { SwitchBaseProps } from '../internal/SwitchBase';\nimport { CheckboxClasses } from './checkboxClasses';\n\nexport interface CheckboxPropsSizeOverrides {}\n\nexport interface CheckboxPropsColorOverrides {}\n\nexport interface CheckboxProps\n  extends StandardProps<SwitchBaseProps, 'checkedIcon' | 'color' | 'icon' | 'type'> {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked?: SwitchBaseProps['checked'];\n  /**\n   * The icon to display when the component is checked.\n   * @default <CheckBoxIcon />\n   */\n  checkedIcon?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CheckboxClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning' | 'default',\n    CheckboxPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: SwitchBaseProps['disabled'];\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple?: SwitchBaseProps['disableRipple'];\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <CheckBoxOutlineBlankIcon />\n   */\n  icon?: React.ReactNode;\n  /**\n   * The id of the `input` element.\n   */\n  id?: SwitchBaseProps['id'];\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the `input`.\n   * @default false\n   */\n  indeterminate?: boolean;\n  /**\n   * The icon to display when the component is indeterminate.\n   * @default <IndeterminateCheckBoxIcon />\n   */\n  indeterminateIcon?: React.ReactNode;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: SwitchBaseProps['inputProps'];\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange?: SwitchBaseProps['onChange'];\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required?: SwitchBaseProps['required'];\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense checkbox styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', CheckboxPropsSizeOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   * The browser uses \"on\" as the default value.\n   */\n  value?: SwitchBaseProps['value'];\n}\n\n/**\n *\n * Demos:\n *\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Transfer List](https://mui.com/material-ui/react-transfer-list/)\n *\n * API:\n *\n * - [Checkbox API](https://mui.com/material-ui/api/checkbox/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\nexport default function Checkbox(props: CheckboxProps): JSX.Element;\n","node_modules/@mui/material/CardHeader/index.d.ts":"export { default } from './CardHeader';\nexport * from './CardHeader';\n\nexport { default as cardHeaderClasses } from './cardHeaderClasses';\nexport * from './cardHeaderClasses';\n","node_modules/@mui/material/CardHeader/cardHeaderClasses.d.ts":"export interface CardHeaderClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the avatar element. */\n    avatar: string;\n    /** Styles applied to the action element. */\n    action: string;\n    /** Styles applied to the content wrapper element. */\n    content: string;\n    /** Styles applied to the title Typography element. */\n    title: string;\n    /** Styles applied to the subheader Typography element. */\n    subheader: string;\n}\nexport type CardHeaderClassKey = keyof CardHeaderClasses;\nexport declare function getCardHeaderUtilityClass(slot: string): string;\ndeclare const cardHeaderClasses: CardHeaderClasses;\nexport default cardHeaderClasses;\n","node_modules/@mui/material/CardHeader/CardHeader.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { TypographyProps } from '../Typography';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { CardHeaderClasses } from './cardHeaderClasses';\n\nexport interface CardHeaderOwnProps<\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> {\n  /**\n   * The action to display in the card header.\n   */\n  action?: React.ReactNode;\n  /**\n   * The Avatar element to display.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardHeaderClasses>;\n  /**\n   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.\n   * This can be useful to render an alternative Typography variant by wrapping\n   * the `title` text, and optional `subheader` text\n   * with the Typography component.\n   * @default false\n   */\n  disableTypography?: boolean;\n  /**\n   * The content of the component.\n   */\n  subheader?: React.ReactNode;\n  /**\n   * These props will be forwarded to the subheader\n   * (as long as disableTypography is not `true`).\n   */\n  subheaderTypographyProps?: TypographyProps<\n    SubheaderTypographyComponent,\n    {\n      component?: SubheaderTypographyComponent;\n    }\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The content of the component.\n   */\n  title?: React.ReactNode;\n  /**\n   * These props will be forwarded to the title\n   * (as long as disableTypography is not `true`).\n   */\n  titleTypographyProps?: TypographyProps<\n    TitleTypographyComponent,\n    {\n      component?: TitleTypographyComponent;\n    }\n  >;\n}\n\nexport interface CardHeaderTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> {\n  props: AdditionalProps &\n    CardHeaderOwnProps<TitleTypographyComponent, SubheaderTypographyComponent>;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardHeader API](https://mui.com/material-ui/api/card-header/)\n */\ndeclare const CardHeader: OverridableCardHeader;\n\nexport interface OverridableCardHeader extends OverridableComponent<CardHeaderTypeMap> {\n  <\n    RootComponent extends React.ElementType = CardHeaderTypeMap['defaultComponent'],\n    AdditionalProps = {},\n    TitleTypographyComponent extends React.ElementType = 'span',\n    SubheaderTypographyComponent extends React.ElementType = 'span',\n  >(\n    props: CardHeaderPropsWithComponent<\n      RootComponent,\n      AdditionalProps,\n      TitleTypographyComponent,\n      SubheaderTypographyComponent\n    >,\n  ): JSX.Element;\n}\n\nexport type CardHeaderProps<\n  RootComponent extends React.ElementType = CardHeaderTypeMap['defaultComponent'],\n  AdditionalProps = {},\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> = OverrideProps<\n  CardHeaderTypeMap<\n    AdditionalProps,\n    RootComponent,\n    TitleTypographyComponent,\n    SubheaderTypographyComponent\n  >,\n  RootComponent\n>;\n\nexport type CardHeaderPropsWithComponent<\n  RootComponent extends React.ElementType = CardHeaderTypeMap['defaultComponent'],\n  AdditionalProps = {},\n  TitleTypographyComponent extends React.ElementType = 'span',\n  SubheaderTypographyComponent extends React.ElementType = 'span',\n> = {\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: RootComponent;\n} & CardHeaderProps<\n  RootComponent,\n  AdditionalProps,\n  TitleTypographyComponent,\n  SubheaderTypographyComponent\n>;\n\nexport default CardHeader;\n","node_modules/@mui/material/CardMedia/index.d.ts":"export { default } from './CardMedia';\nexport * from './CardMedia';\n\nexport { default as cardMediaClasses } from './cardMediaClasses';\nexport * from './cardMediaClasses';\n","node_modules/@mui/material/CardMedia/cardMediaClasses.d.ts":"export interface CardMediaClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `component=\"video, audio, picture, iframe, or img\"`. */\n    media: string;\n    /** Styles applied to the root element if `component=\"picture or img\"`. */\n    img: string;\n}\nexport type CardMediaClassKey = keyof CardMediaClasses;\nexport declare function getCardMediaUtilityClass(slot: string): string;\ndeclare const cardMediaClasses: CardMediaClasses;\nexport default cardMediaClasses;\n","node_modules/@mui/material/CardMedia/CardMedia.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { CardMediaClasses } from './cardMediaClasses';\n\nexport interface CardMediaOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardMediaClasses>;\n  /**\n   * Image to be displayed as a background image.\n   * Either `image` or `src` prop must be specified.\n   * Note that caller must specify height otherwise the image will not be visible.\n   */\n  image?: string;\n  /**\n   * An alias for `image` property.\n   * Available only with media components.\n   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.\n   */\n  src?: string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface CardMediaTypeMap<AdditionalProps, RootComponent extends React.ElementType> {\n  props: AdditionalProps & CardMediaOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardMedia API](https://mui.com/material-ui/api/card-media/)\n */\ndeclare const CardMedia: OverridableComponent<CardMediaTypeMap<{}, 'div'>>;\n\nexport type CardMediaProps<\n  RootComponent extends React.ElementType = 'div',\n  AdditionalProps = {},\n> = OverrideProps<CardMediaTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default CardMedia;\n","node_modules/@mui/material/CardContent/index.d.ts":"export { default } from './CardContent';\nexport * from './CardContent';\n\nexport { default as cardContentClasses } from './cardContentClasses';\nexport * from './cardContentClasses';\n","node_modules/@mui/material/CardContent/cardContentClasses.d.ts":"export interface CardContentClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type CardContentClassKey = keyof CardContentClasses;\nexport declare function getCardContentUtilityClass(slot: string): string;\ndeclare const cardContentClasses: CardContentClasses;\nexport default cardContentClasses;\n","node_modules/@mui/material/CardContent/CardContent.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { CardContentClasses } from './cardContentClasses';\n\nexport interface CardContentOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardContentClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface CardContentTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & CardContentOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardContent API](https://mui.com/material-ui/api/card-content/)\n */\ndeclare const CardContent: OverridableComponent<CardContentTypeMap>;\n\nexport type CardContentProps<\n  RootComponent extends React.ElementType = CardContentTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<CardContentTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default CardContent;\n","node_modules/@mui/material/CardActions/index.d.ts":"export { default } from './CardActions';\nexport * from './CardActions';\n\nexport { default as cardActionsClasses } from './cardActionsClasses';\nexport * from './cardActionsClasses';\n","node_modules/@mui/material/CardActions/cardActionsClasses.d.ts":"export interface CardActionsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `disableSpacing={true}`. */\n    spacing: string;\n}\nexport type CardActionsClassKey = keyof CardActionsClasses;\nexport declare function getCardActionsUtilityClass(slot: string): string;\ndeclare const cardActionsClasses: CardActionsClasses;\nexport default cardActionsClasses;\n","node_modules/@mui/material/CardActions/CardActions.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { CardActionsClasses } from './cardActionsClasses';\n\nexport interface CardActionsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardActionsClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing?: boolean;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardActions API](https://mui.com/material-ui/api/card-actions/)\n */\nexport default function CardActions(props: CardActionsProps): JSX.Element;\n","node_modules/@mui/material/Card/index.d.ts":"export { default } from './Card';\nexport * from './Card';\n\nexport { default as cardClasses } from './cardClasses';\nexport * from './cardClasses';\n","node_modules/@mui/material/Card/cardClasses.d.ts":"export interface CardClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type CardClassKey = keyof CardClasses;\nexport declare function getCardUtilityClass(slot: string): string;\ndeclare const cardClasses: CardClasses;\nexport default cardClasses;\n","node_modules/@mui/material/Card/Card.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { DistributiveOmit } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '@mui/material/OverridableComponent';\nimport { Theme } from '..';\nimport { PaperOwnProps } from '../Paper';\nimport { CardClasses } from './cardClasses';\n\n// TODO: v6 remove this interface, it is not used\nexport interface CardPropsColorOverrides {}\n\nexport interface CardOwnProps extends DistributiveOmit<PaperOwnProps, 'classes'> {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardClasses>;\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface CardTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & CardOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [Card API](https://mui.com/material-ui/api/card/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\n\ndeclare const Card: OverridableComponent<CardTypeMap>;\n\nexport type CardProps<\n  RootComponent extends React.ElementType = CardTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<CardTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Card;\n","node_modules/@mui/material/ClickAwayListener/index.d.ts":"export { ClickAwayListener as default } from '@mui/base/ClickAwayListener';\nexport type { ClickAwayListenerProps } from '@mui/base/ClickAwayListener';\n","node_modules/@mui/material/ButtonGroup/index.d.ts":"export { default } from './ButtonGroup';\nexport * from './ButtonGroup';\nexport { default as buttonGroupClasses } from './buttonGroupClasses';\nexport * from './buttonGroupClasses';\nexport { default as ButtonGroupContext } from './ButtonGroupContext';\nexport { default as ButtonGroupButtonContext } from './ButtonGroupButtonContext';\n","node_modules/@mui/material/ButtonGroup/buttonGroupClasses.d.ts":"export interface ButtonGroupClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"contained\"`. */\n    contained: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"text\"`. */\n    text: string;\n    /** Styles applied to the root element if `disableElevation={true}`. */\n    disableElevation: string;\n    /** State class applied to the child elements if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the first button in the button group. */\n    firstButton: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n    /** Styles applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** Styles applied to the children. */\n    grouped: string;\n    /** Styles applied to the children if `orientation=\"horizontal\"`. */\n    groupedHorizontal: string;\n    /** Styles applied to the children if `orientation=\"vertical\"`. */\n    groupedVertical: string;\n    /** Styles applied to the children if `variant=\"text\"`. */\n    groupedText: string;\n    /** Styles applied to the children if `variant=\"text\"` and `orientation=\"horizontal\"`. */\n    groupedTextHorizontal: string;\n    /** Styles applied to the children if `variant=\"text\"` and `orientation=\"vertical\"`. */\n    groupedTextVertical: string;\n    /** Styles applied to the children if `variant=\"text\"` and `color=\"primary\"`. */\n    groupedTextPrimary: string;\n    /** Styles applied to the children if `variant=\"text\"` and `color=\"secondary\"`. */\n    groupedTextSecondary: string;\n    /** Styles applied to the children if `variant=\"outlined\"`. */\n    groupedOutlined: string;\n    /** Styles applied to the children if `variant=\"outlined\"` and `orientation=\"horizontal\"`. */\n    groupedOutlinedHorizontal: string;\n    /** Styles applied to the children if `variant=\"outlined\"` and `orientation=\"vertical\"`. */\n    groupedOutlinedVertical: string;\n    /** Styles applied to the children if `variant=\"outlined\"` and `color=\"primary\"`. */\n    groupedOutlinedPrimary: string;\n    /** Styles applied to the children if `variant=\"outlined\"` and `color=\"secondary\"`. */\n    groupedOutlinedSecondary: string;\n    /** Styles applied to the children if `variant=\"contained\"`. */\n    groupedContained: string;\n    /** Styles applied to the children if `variant=\"contained\"` and `orientation=\"horizontal\"`. */\n    groupedContainedHorizontal: string;\n    /** Styles applied to the children if `variant=\"contained\"` and `orientation=\"vertical\"`. */\n    groupedContainedVertical: string;\n    /** Styles applied to the children if `variant=\"contained\"` and `color=\"primary\"`. */\n    groupedContainedPrimary: string;\n    /** Styles applied to the children if `variant=\"contained\"` and `color=\"secondary\"`. */\n    groupedContainedSecondary: string;\n    /** Styles applied to the last button in the button group. */\n    lastButton: string;\n    /** Styles applied to buttons in the middle of the button group. */\n    middleButton: string;\n}\nexport type ButtonGroupClassKey = keyof ButtonGroupClasses;\nexport declare function getButtonGroupUtilityClass(slot: string): string;\ndeclare const buttonGroupClasses: ButtonGroupClasses;\nexport default buttonGroupClasses;\n","node_modules/@mui/material/ButtonGroup/ButtonGroupContext.d.ts":"import * as React from 'react';\nimport type { ButtonGroupProps } from './ButtonGroup';\ninterface ButtonGroupContextType {\n    className?: string;\n    color?: ButtonGroupProps['color'];\n    disabled?: boolean;\n    disableElevation?: boolean;\n    disableFocusRipple?: boolean;\n    disableRipple?: boolean;\n    fullWidth?: boolean;\n    size?: ButtonGroupProps['size'];\n    variant?: ButtonGroupProps['variant'];\n}\n/**\n * @ignore - internal component.\n */\ndeclare const ButtonGroupContext: React.Context<ButtonGroupContextType>;\nexport default ButtonGroupContext;\n","node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.d.ts":"import * as React from 'react';\n/**\n * @ignore - internal component.\n */\ndeclare const ButtonGroupButtonContext: React.Context<string | undefined>;\nexport default ButtonGroupButtonContext;\n","node_modules/@mui/material/ButtonGroup/ButtonGroup.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { ButtonGroupClasses } from './buttonGroupClasses';\n\nexport interface ButtonGroupPropsColorOverrides {}\nexport interface ButtonGroupPropsVariantOverrides {}\nexport interface ButtonGroupPropsSizeOverrides {}\n\nexport interface ButtonGroupOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ButtonGroupClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'inherit' | 'primary' | 'secondary' | 'error' | 'info' | 'success' | 'warning',\n    ButtonGroupPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, no elevation is used.\n   * @default false\n   */\n  disableElevation?: boolean;\n  /**\n   * If `true`, the button keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * If `true`, the button ripple effect is disabled.\n   * @default false\n   */\n  disableRipple?: boolean;\n  /**\n   * If `true`, the buttons will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation?: 'vertical' | 'horizontal';\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', ButtonGroupPropsSizeOverrides>;\n  /**\n   * The variant to use.\n   * @default 'outlined'\n   */\n  variant?: OverridableStringUnion<\n    'text' | 'outlined' | 'contained',\n    ButtonGroupPropsVariantOverrides\n  >;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface ButtonGroupTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & ButtonGroupOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Button Group](https://mui.com/material-ui/react-button-group/)\n *\n * API:\n *\n * - [ButtonGroup API](https://mui.com/material-ui/api/button-group/)\n */\ndeclare const ButtonGroup: OverridableComponent<ButtonGroupTypeMap>;\n\nexport type ButtonGroupProps<\n  RootComponent extends React.ElementType = ButtonGroupTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ButtonGroupTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default ButtonGroup;\n","node_modules/@mui/material/CardActionArea/index.d.ts":"export { default } from './CardActionArea';\nexport * from './CardActionArea';\n\nexport { default as cardActionAreaClasses } from './cardActionAreaClasses';\nexport * from './cardActionAreaClasses';\n","node_modules/@mui/material/CardActionArea/cardActionAreaClasses.d.ts":"export interface CardActionAreaClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the ButtonBase root element if the action area is keyboard focused. */\n    focusVisible: string;\n    /** Styles applied to the overlay that covers the action area when it is keyboard focused. */\n    focusHighlight: string;\n}\nexport type CardActionAreaClassKey = keyof CardActionAreaClasses;\nexport declare function getCardActionAreaUtilityClass(slot: string): string;\ndeclare const cardActionAreaClasses: CardActionAreaClasses;\nexport default cardActionAreaClasses;\n","node_modules/@mui/material/CardActionArea/CardActionArea.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ButtonBaseTypeMap, ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { CardActionAreaClasses } from './cardActionAreaClasses';\n\nexport interface CardActionAreaOwnProps {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<CardActionAreaClasses>;\n  focusVisibleClassName?: string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type CardActionAreaTypeMap<\n  AdditionalProps,\n  RootComponent extends React.ElementType,\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & CardActionAreaOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Card](https://mui.com/material-ui/react-card/)\n *\n * API:\n *\n * - [CardActionArea API](https://mui.com/material-ui/api/card-action-area/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const CardActionArea: ExtendButtonBase<\n  CardActionAreaTypeMap<{}, ButtonBaseTypeMap['defaultComponent']>\n>;\n\nexport type CardActionAreaProps<\n  RootComponent extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<CardActionAreaTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default CardActionArea;\n","node_modules/@mui/material/ButtonBase/touchRippleClasses.d.ts":"export interface TouchRippleClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the internal `Ripple` components `ripple` class. */\n    ripple: string;\n    /** Styles applied to the internal `Ripple` components `rippleVisible` class. */\n    rippleVisible: string;\n    /** Styles applied to the internal `Ripple` components `ripplePulsate` class. */\n    ripplePulsate: string;\n    /** Styles applied to the internal `Ripple` components `child` class. */\n    child: string;\n    /** Styles applied to the internal `Ripple` components `childLeaving` class. */\n    childLeaving: string;\n    /** Styles applied to the internal `Ripple` components `childPulsate` class. */\n    childPulsate: string;\n}\nexport type TouchRippleClassKey = keyof TouchRippleClasses;\nexport declare function getTouchRippleUtilityClass(slot: string): string;\ndeclare const touchRippleClasses: TouchRippleClasses;\nexport default touchRippleClasses;\n","node_modules/@mui/material/ButtonBase/index.d.ts":"export { default } from './ButtonBase';\nexport * from './ButtonBase';\n\nexport { default as buttonBaseClasses } from './buttonBaseClasses';\nexport * from './buttonBaseClasses';\n\nexport { default as touchRippleClasses } from './touchRippleClasses';\nexport * from './touchRippleClasses';\n","node_modules/@mui/material/ButtonBase/buttonBaseClasses.d.ts":"export interface ButtonBaseClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if keyboard focused. */\n    focusVisible: string;\n}\nexport type ButtonBaseClassKey = keyof ButtonBaseClasses;\nexport declare function getButtonBaseUtilityClass(slot: string): string;\ndeclare const buttonBaseClasses: ButtonBaseClasses;\nexport default buttonBaseClasses;\n","node_modules/@mui/material/ButtonBase/TouchRipple.d.ts":"import * as React from 'react';\nimport { InternalStandardProps as StandardProps } from '..';\nimport { TouchRippleClasses, TouchRippleClassKey } from './touchRippleClasses';\n\nexport { TouchRippleClassKey };\n\nexport interface StartActionOptions {\n  pulsate?: boolean;\n  center?: boolean;\n}\n\nexport interface TouchRippleActions {\n  start: (\n    event?: React.SyntheticEvent,\n    options?: StartActionOptions,\n    callback?: () => void,\n  ) => void;\n  pulsate: (event?: React.SyntheticEvent) => void;\n  stop: (event?: React.SyntheticEvent, callback?: () => void) => void;\n}\n\nexport type TouchRippleProps = StandardProps<React.HTMLAttributes<HTMLElement>> & {\n  center?: boolean;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<TouchRippleClasses>;\n};\n\ndeclare const TouchRipple: React.ForwardRefRenderFunction<TouchRippleActions, TouchRippleProps>;\n\nexport default TouchRipple;\n","node_modules/@mui/material/ButtonBase/ButtonBase.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { TouchRippleActions, TouchRippleProps } from './TouchRipple';\nimport { OverrideProps, OverridableComponent, OverridableTypeMap } from '../OverridableComponent';\nimport { ButtonBaseClasses } from './buttonBaseClasses';\n\nexport interface ButtonBaseOwnProps {\n  /**\n   * A ref for imperative actions.\n   * It currently only supports `focusVisible()` action.\n   */\n  action?: React.Ref<ButtonBaseActions>;\n  /**\n   * If `true`, the ripples are centered.\n   * They won't start at the cursor interaction position.\n   * @default false\n   */\n  centerRipple?: boolean;\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ButtonBaseClasses>;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.\n   * @default false\n   */\n  disableRipple?: boolean;\n  /**\n   * If `true`, the touch ripple effect is disabled.\n   * @default false\n   */\n  disableTouchRipple?: boolean;\n  /**\n   * If `true`, the base button will have a keyboard focus ripple.\n   * @default false\n   */\n  focusRipple?: boolean;\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName?: string;\n  /**\n   * The component used to render a link when the `href` prop is provided.\n   * @default 'a'\n   */\n  LinkComponent?: React.ElementType;\n  /**\n   * Callback fired when the component is focused with a keyboard.\n   * We trigger a `onFocus` callback too.\n   */\n  onFocusVisible?: React.FocusEventHandler<any>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * @default 0\n   */\n  tabIndex?: NonNullable<React.HTMLAttributes<any>['tabIndex']>;\n  /**\n   * Props applied to the `TouchRipple` element.\n   */\n  TouchRippleProps?: Partial<TouchRippleProps>;\n  /**\n   * A ref that points to the `TouchRipple` element.\n   */\n  touchRippleRef?: React.Ref<TouchRippleActions>;\n}\n\nexport interface ButtonBaseTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'button',\n> {\n  props: AdditionalProps & ButtonBaseOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n * utility to create component types that inherit props from ButtonBase.\n * This component has an additional overload if the `href` prop is set which\n * can make extension quite tricky\n */\nexport interface ExtendButtonBaseTypeMap<TypeMap extends OverridableTypeMap> {\n  props: TypeMap['props'] & Omit<ButtonBaseTypeMap['props'], 'classes'>;\n  defaultComponent: TypeMap['defaultComponent'];\n}\n\nexport type ExtendButtonBase<TypeMap extends OverridableTypeMap> = ((\n  props: { href: string } & OverrideProps<ExtendButtonBaseTypeMap<TypeMap>, 'a'>,\n) => JSX.Element) &\n  OverridableComponent<ExtendButtonBaseTypeMap<TypeMap>>;\n\n/**\n * `ButtonBase` contains as few styles as possible.\n * It aims to be a simple building block for creating a button.\n * It contains a load of style reset and some focus/ripple logic.\n *\n * Demos:\n *\n * - [Button](https://mui.com/material-ui/react-button/)\n *\n * API:\n *\n * - [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const ButtonBase: ExtendButtonBase<ButtonBaseTypeMap>;\n\nexport type ButtonBaseProps<\n  RootComponent extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ButtonBaseTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport interface ButtonBaseActions {\n  focusVisible(): void;\n}\n\nexport default ButtonBase;\n","node_modules/@mui/material/Breadcrumbs/index.d.ts":"export { default } from './Breadcrumbs';\nexport * from './Breadcrumbs';\n\nexport { default as breadcrumbsClasses } from './breadcrumbsClasses';\nexport * from './breadcrumbsClasses';\n","node_modules/@mui/material/Breadcrumbs/breadcrumbsClasses.d.ts":"export interface BreadcrumbsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the ol element. */\n    ol: string;\n    /** Styles applied to the li element. */\n    li: string;\n    /** Styles applied to the separator element. */\n    separator: string;\n}\nexport type BreadcrumbsClassKey = keyof BreadcrumbsClasses;\nexport declare function getBreadcrumbsUtilityClass(slot: string): string;\ndeclare const breadcrumbsClasses: BreadcrumbsClasses;\nexport default breadcrumbsClasses;\n","node_modules/@mui/material/Breadcrumbs/Breadcrumbs.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { BreadcrumbsClasses } from './breadcrumbsClasses';\nimport SvgIcon from '../SvgIcon';\n\nexport interface BreadcrumbsCollapsedIconSlotPropsOverrides {}\n\nexport interface BreadcrumbsOwnerState extends BreadcrumbsProps {\n  expanded: boolean;\n}\n\nexport interface BreadcrumbsOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<BreadcrumbsClasses>;\n  /**\n   * The components used for each slot inside the Breadcumb.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots?: {\n    CollapsedIcon?: React.ElementType;\n  };\n  /**\n   * The props used for each slot inside the Breadcumb.\n   * @default {}\n   */\n  slotProps?: {\n    /**\n     * Props applied to the CollapsedIcon slot.\n     * @default {}\n     */\n    collapsedIcon?: SlotComponentProps<\n      typeof SvgIcon,\n      BreadcrumbsCollapsedIconSlotPropsOverrides,\n      BreadcrumbsOwnerState\n    >;\n  };\n  /**\n   * Override the default label for the expand button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Show path'\n   */\n  expandText?: string;\n  /**\n   * If max items is exceeded, the number of items to show after the ellipsis.\n   * @default 1\n   */\n  itemsAfterCollapse?: number;\n  /**\n   * If max items is exceeded, the number of items to show before the ellipsis.\n   * @default 1\n   */\n  itemsBeforeCollapse?: number;\n  /**\n   * Specifies the maximum number of breadcrumbs to display. When there are more\n   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`\n   * will be shown, with an ellipsis in between.\n   * @default 8\n   */\n  maxItems?: number;\n  /**\n   * Custom separator node.\n   * @default '/'\n   */\n  separator?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface BreadcrumbsTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'nav',\n> {\n  props: AdditionalProps & BreadcrumbsOwnProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Breadcrumbs](https://mui.com/material-ui/react-breadcrumbs/)\n *\n * API:\n *\n * - [Breadcrumbs API](https://mui.com/material-ui/api/breadcrumbs/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\ndeclare const Breadcrumbs: OverridableComponent<BreadcrumbsTypeMap>;\n\nexport type BreadcrumbsProps<\n  RootComponent extends React.ElementType = BreadcrumbsTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BreadcrumbsTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Breadcrumbs;\n","node_modules/@mui/material/Button/index.d.ts":"export { default } from './Button';\nexport * from './Button';\n\nexport { default as buttonClasses } from './buttonClasses';\nexport * from './buttonClasses';\n","node_modules/@mui/material/Button/buttonClasses.d.ts":"export interface ButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"text\"`. */\n    text: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"inherit\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorInherit](/material-ui/api/button/#button-classes-colorInherit) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textInherit: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"primary\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorPrimary](/material-ui/api/button/#button-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textPrimary: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorSecondary](/material-ui/api/button/#button-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textSecondary: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"success\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorSuccess](/material-ui/api/button/#button-classes-colorSuccess) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textSuccess: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"error\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorError](/material-ui/api/button/#button-classes-colorError) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textError: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"info\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorInfo](/material-ui/api/button/#button-classes-colorInfo) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textInfo: string;\n    /** Styles applied to the root element if `variant=\"text\"` and `color=\"warning\"`.\n     * @deprecated Combine the [.MuiButton-text](/material-ui/api/button/#button-classes-text) and [.MuiButton-colorWarning](/material-ui/api/button/#button-classes-colorWarning) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textWarning: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"inherit\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorInherit](/material-ui/api/button/#button-classes-colorInherit) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedInherit: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"primary\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorPrimary](/material-ui/api/button/#button-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedPrimary: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorSecondary](/material-ui/api/button/#button-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedSecondary: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorSuccess](/material-ui/api/button/#button-classes-colorSuccess) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedSuccess: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorError](/material-ui/api/button/#button-classes-colorError) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedError: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorInfo](/material-ui/api/button/#button-classes-colorInfo) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedInfo: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`.\n     * @deprecated Combine the [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) and [.MuiButton-colorWarning](/material-ui/api/button/#button-classes-colorWarning) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedWarning: string;\n    /** Styles applied to the root element if `variant=\"contained\"`. */\n    contained: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"inherit\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorInherit](/material-ui/api/button/#button-classes-colorInherit) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedInherit: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"primary\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorPrimary](/material-ui/api/button/#button-classes-colorPrimary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedPrimary: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"secondary\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorSecondary](/material-ui/api/button/#button-classes-colorSecondary) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedSecondary: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"success\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorSuccess](/material-ui/api/button/#button-classes-colorSuccess) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedSuccess: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"info\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorInfo](/material-ui/api/button/#button-classes-colorInfo) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedInfo: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"error\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorError](/material-ui/api/button/#button-classes-colorError) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedError: string;\n    /** Styles applied to the root element if `variant=\"contained\"` and `color=\"warning\"`.\n     * @deprecated Combine the [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) and [.MuiButton-colorWarning](/material-ui/api/button/#button-classes-colorWarning) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedWarning: string;\n    /** Styles applied to the root element if `disableElevation={true}`. */\n    disableElevation: string;\n    /** State class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: string;\n    /** Styles applied to the root element if `size=\"small\"` and `variant=\"text\"`.\n     * @deprecated Combine the [.MuiButton-sizeSmall](/material-ui/api/button/#button-classes-sizeSmall) and [.MuiButton-text](/material-ui/api/button/#button-classes-text) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textSizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"` and `variant=\"text\"`.\n     * @deprecated Combine the [.MuiButton-sizeMedium](/material-ui/api/button/#button-classes-sizeMedium) and [.MuiButton-text](/material-ui/api/button/#button-classes-text) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textSizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"` and `variant=\"text\"`.\n     * @deprecated Combine the [.MuiButton-sizeLarge](/material-ui/api/button/#button-classes-sizeLarge) and [.MuiButton-text](/material-ui/api/button/#button-classes-text) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    textSizeLarge: string;\n    /** Styles applied to the root element if `size=\"small\"` and `variant=\"outlined\"`.\n     * @deprecated Combine the [.MuiButton-sizeSmall](/material-ui/api/button/#button-classes-sizeSmall) and [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedSizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"` and `variant=\"outlined\"`.\n     * @deprecated Combine the [.MuiButton-sizeMedium](/material-ui/api/button/#button-classes-sizeMedium) and [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedSizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"` and `variant=\"outlined\"`.\n     * @deprecated Combine the [.MuiButton-sizeLarge](/material-ui/api/button/#button-classes-sizeLarge) and [.MuiButton-outlined](/material-ui/api/button/#button-classes-outlined) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    outlinedSizeLarge: string;\n    /** Styles applied to the root element if `size=\"small\"` and `variant=\"contained\"`.\n     * @deprecated Combine the [.MuiButton-sizeSmall](/material-ui/api/button/#button-classes-sizeSmall) and [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedSizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"` and `variant=\"contained\"`.\n     * @deprecated Combine the [.MuiButton-sizeMedium](/material-ui/api/button/#button-classes-sizeMedium) and [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedSizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"` and `variant=\"contained\"`.\n     * @deprecated Combine the [.MuiButton-sizeLarge](/material-ui/api/button/#button-classes-sizeLarge) and [.MuiButton-contained](/material-ui/api/button/#button-classes-contained) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    containedSizeLarge: string;\n    /** Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: string;\n    /** Styles applied to the root element if `size=\"medium\"`. */\n    sizeMedium: string;\n    /** Styles applied to the root element if `size=\"large\"`. */\n    sizeLarge: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n    /** Styles applied to the icon element if supplied */\n    icon: string;\n    /** Styles applied to the startIcon element if supplied. */\n    startIcon: string;\n    /** Styles applied to the endIcon element if supplied. */\n    endIcon: string;\n    /** Styles applied to the icon element if supplied and `size=\"small\"`.\n     * @deprecated Combine the [.MuiButton-icon](/material-ui/api/button/#button-classes-icon) and [.MuiButtonSizeSmall](/material-ui/api/button/#button-classes-sizeSmall) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconSizeSmall: string;\n    /** Styles applied to the icon element if supplied and `size=\"medium\"`.\n     * @deprecated Combine the [.MuiButton-icon](/material-ui/api/button/#button-classes-icon) and [.MuiButtonSizeMedium](/material-ui/api/button/#button-classes-sizeMedium) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconSizeMedium: string;\n    /** Styles applied to the icon element if supplied and `size=\"large\"`.\n     * @deprecated Combine the [.MuiButton-icon](/material-ui/api/button/#button-classes-icon) and [.MuiButtonSizeLarge](/material-ui/api/button/#button-classes-sizeLarge) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)\n     */\n    iconSizeLarge: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the root element if `color=\"warning\"`. */\n    colorWarning: string;\n}\nexport type ButtonClassKey = keyof ButtonClasses;\nexport declare function getButtonUtilityClass(slot: string): string;\ndeclare const buttonClasses: ButtonClasses;\nexport default buttonClasses;\n","node_modules/@mui/material/Button/Button.d.ts":"import * as React from 'react';\nimport { DistributiveOmit, OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '../styles';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps, OverridableComponent, OverridableTypeMap } from '../OverridableComponent';\nimport { ButtonClasses } from './buttonClasses';\n\nexport interface ButtonPropsVariantOverrides {}\n\nexport interface ButtonPropsColorOverrides {}\n\nexport interface ButtonPropsSizeOverrides {}\n\nexport interface ButtonOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<ButtonClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    'inherit' | 'primary' | 'secondary' | 'success' | 'error' | 'info' | 'warning',\n    ButtonPropsColorOverrides\n  >;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, no elevation is used.\n   * @default false\n   */\n  disableElevation?: boolean;\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple?: boolean;\n  /**\n   * Element placed after the children.\n   */\n  endIcon?: React.ReactNode;\n  /**\n   * If `true`, the button will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The URL to link to when the button is clicked.\n   * If defined, an `a` element will be used as the root node.\n   */\n  href?: string;\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium' | 'large', ButtonPropsSizeOverrides>;\n  /**\n   * Element placed before the children.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'text'\n   */\n  variant?: OverridableStringUnion<'text' | 'outlined' | 'contained', ButtonPropsVariantOverrides>;\n}\n\nexport type ButtonTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'button',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & ButtonOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n * utility to create component types that inherit props from ButtonBase.\n * This component has an additional overload if the `href` prop is set which\n * can make extension quite tricky\n */\nexport interface ExtendButtonTypeMap<TypeMap extends OverridableTypeMap> {\n  props: TypeMap['props'] &\n    (TypeMap['props'] extends { classes?: Record<string, string> }\n      ? DistributiveOmit<ButtonTypeMap['props'], 'classes'>\n      : ButtonTypeMap['props']);\n  defaultComponent: TypeMap['defaultComponent'];\n}\n\nexport type ExtendButton<TypeMap extends OverridableTypeMap> = ((\n  props: { href: string } & OverrideProps<ExtendButtonBaseTypeMap<TypeMap>, 'a'>,\n) => JSX.Element) &\n  OverridableComponent<ExtendButtonBaseTypeMap<TypeMap>>;\n\n/**\n *\n * Demos:\n *\n * - [Button Group](https://mui.com/material-ui/react-button-group/)\n * - [Button](https://mui.com/material-ui/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/material-ui/api/button/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const Button: ExtendButtonBase<ButtonTypeMap>;\n\nexport type ButtonProps<\n  RootComponent extends React.ElementType = ButtonTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<ButtonTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Button;\n","node_modules/@mui/material/BottomNavigationAction/index.d.ts":"export { default } from './BottomNavigationAction';\nexport * from './BottomNavigationAction';\n\nexport { default as bottomNavigationActionClasses } from './bottomNavigationActionClasses';\nexport * from './bottomNavigationActionClasses';\n","node_modules/@mui/material/BottomNavigationAction/bottomNavigationActionClasses.d.ts":"export interface BottomNavigationActionClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element if selected. */\n    selected: string;\n    /** State class applied to the root element if `showLabel={false}` and not selected. */\n    iconOnly: string;\n    /** Styles applied to the label's span element. */\n    label: string;\n}\nexport type BottomNavigationActionClassKey = keyof BottomNavigationActionClasses;\nexport declare function getBottomNavigationActionUtilityClass(slot: string): string;\ndeclare const bottomNavigationActionClasses: BottomNavigationActionClasses;\nexport default bottomNavigationActionClasses;\n","node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { ButtonBaseTypeMap, ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { BottomNavigationActionClasses } from './bottomNavigationActionClasses';\n\nexport interface BottomNavigationActionOwnProps {\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<BottomNavigationActionClasses>;\n  /**\n   * The icon to display.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The label element.\n   */\n  label?: React.ReactNode;\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   *\n   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.\n   */\n  showLabel?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value?: any;\n}\n\nexport type BottomNavigationActionTypeMap<\n  AdditionalProps,\n  RootComponent extends React.ElementType,\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & BottomNavigationActionOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Bottom Navigation](https://mui.com/material-ui/react-bottom-navigation/)\n *\n * API:\n *\n * - [BottomNavigationAction API](https://mui.com/material-ui/api/bottom-navigation-action/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const BottomNavigationAction: ExtendButtonBase<\n  BottomNavigationActionTypeMap<{}, ButtonBaseTypeMap['defaultComponent']>\n>;\n\nexport type BottomNavigationActionProps<\n  RootComponent extends React.ElementType = ButtonBaseTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BottomNavigationActionTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default BottomNavigationAction;\n","node_modules/@mui/material/Box/index.d.ts":"export { default } from './Box';\nexport * from './Box';\n\nexport { default as boxClasses } from './boxClasses';\nexport * from './boxClasses';\n","node_modules/@mui/material/Box/boxClasses.d.ts":"export interface BoxClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type BoxClassKey = keyof BoxClasses;\ndeclare const boxClasses: BoxClasses;\nexport default boxClasses;\n","node_modules/@mui/material/Box/Box.d.ts":"import { BoxTypeMap } from '@mui/system';\nimport { OverridableComponent } from '@mui/types';\nimport { OverrideProps } from '../OverridableComponent';\nimport { Theme as MaterialTheme } from '../styles';\n\n/**\n *\n * Demos:\n *\n * - [Box](https://mui.com/material-ui/react-box/)\n *\n * API:\n *\n * - [Box API](https://mui.com/material-ui/api/box/)\n */\ndeclare const Box: OverridableComponent<BoxTypeMap<{}, 'div', MaterialTheme>>;\n\nexport type BoxProps<\n  RootComponent extends React.ElementType = BoxTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BoxTypeMap<AdditionalProps, RootComponent, MaterialTheme>, RootComponent>;\n\nexport default Box;\n","node_modules/@mui/material/Backdrop/index.d.ts":"export { default } from './Backdrop';\nexport * from './Backdrop';\n\nexport { default as backdropClasses } from './backdropClasses';\nexport * from './backdropClasses';\n","node_modules/@mui/material/Backdrop/backdropClasses.d.ts":"export interface BackdropClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `invisible={true}`. */\n    invisible: string;\n}\nexport type BackdropClassKey = keyof BackdropClasses;\nexport declare function getBackdropUtilityClass(slot: string): string;\ndeclare const backdropClasses: BackdropClasses;\nexport default backdropClasses;\n","node_modules/@mui/material/Backdrop/Backdrop.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { FadeProps } from '../Fade';\nimport { TransitionProps } from '../transitions/transition';\nimport { Theme } from '../styles';\nimport { BackdropClasses } from './backdropClasses';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\n\nexport interface BackdropComponentsPropsOverrides {}\n\nexport interface BackdropOwnProps extends Partial<Omit<FadeProps, 'children'>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides;\n  };\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<BackdropClasses>;\n  /**\n   * If `true`, the backdrop is invisible.\n   * It can be used when rendering a popover or a custom select component.\n   * @default false\n   */\n  invisible?: boolean;\n  /**\n   * If `true`, the component is shown.\n   */\n  open: boolean;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    root?: React.HTMLAttributes<HTMLDivElement> & BackdropComponentsPropsOverrides;\n  };\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `components` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slots?: {\n    root?: React.ElementType;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   */\n  transitionDuration?: TransitionProps['timeout'];\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Fade\n   */\n  TransitionComponent?: React.JSXElementConstructor<\n    TransitionProps & {\n      children: React.ReactElement<any, any>;\n    }\n  >;\n}\n\nexport interface BackdropTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & BackdropOwnProps;\n  defaultComponent: RootComponent;\n}\n\ntype BackdropRootProps = NonNullable<BackdropTypeMap['props']['componentsProps']>['root'];\n\nexport declare const BackdropRoot: React.FC<BackdropRootProps>;\n\n/**\n *\n * Demos:\n *\n * - [Backdrop](https://mui.com/material-ui/react-backdrop/)\n *\n * API:\n *\n * - [Backdrop API](https://mui.com/material-ui/api/backdrop/)\n * - inherits [Fade API](https://mui.com/material-ui/api/fade/)\n */\ndeclare const Backdrop: OverridableComponent<BackdropTypeMap>;\n\nexport type BackdropProps<\n  RootComponent extends React.ElementType = BackdropTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BackdropTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Backdrop;\n","node_modules/@mui/material/AvatarGroup/index.d.ts":"export { default } from './AvatarGroup';\nexport * from './AvatarGroup';\nexport { default as avatarGroupClasses } from './avatarGroupClasses';\nexport * from './avatarGroupClasses';\n","node_modules/@mui/material/AvatarGroup/avatarGroupClasses.d.ts":"export interface AvatarGroupClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the avatar elements. */\n    avatar: string;\n}\nexport type AvatarGroupClassKey = keyof AvatarGroupClasses;\nexport declare function getAvatarGroupUtilityClass(slot: string): string;\ndeclare const avatarGroupClasses: AvatarGroupClasses;\nexport default avatarGroupClasses;\n","node_modules/@mui/material/AvatarGroup/AvatarGroup.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '@mui/material';\nimport { AvatarGroupClasses } from './avatarGroupClasses';\nimport Avatar from '../Avatar';\n\nexport interface AvatarGroupPropsVariantOverrides {}\n\nexport interface AvatarGroupComponentsPropsOverrides {}\nexport interface AvatarGroupProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The avatars to stack.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AvatarGroupClasses>;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    additionalAvatar?: React.ComponentPropsWithRef<typeof Avatar> &\n      AvatarGroupComponentsPropsOverrides;\n  };\n  /**\n   * Max avatars to show before +x.\n   * @default 5\n   */\n  max?: number;\n  /**\n   * custom renderer of extraAvatars\n   * @param {number} surplus number of extra avatars\n   * @returns {React.ReactNode} custom element to display\n   */\n  renderSurplus?: (surplus: number) => React.ReactNode;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.\n   *\n   * @default {}\n   */\n  slotProps?: {\n    additionalAvatar?: React.ComponentPropsWithRef<typeof Avatar> &\n      AvatarGroupComponentsPropsOverrides;\n  };\n  /**\n   * Spacing between avatars.\n   * @default 'medium'\n   */\n  spacing?: 'small' | 'medium' | number;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The total number of avatars. Used for calculating the number of extra avatars.\n   * @default children.length\n   */\n  total?: number;\n  /**\n   * The variant to use.\n   * @default 'circular'\n   */\n  variant?: OverridableStringUnion<\n    'circular' | 'rounded' | 'square',\n    AvatarGroupPropsVariantOverrides\n  >;\n}\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/material-ui/react-avatar/)\n *\n * API:\n *\n * - [AvatarGroup API](https://mui.com/material-ui/api/avatar-group/)\n */\nexport default function AvatarGroup(props: AvatarGroupProps): JSX.Element;\n","node_modules/@mui/material/Avatar/index.d.ts":"export { default } from './Avatar';\nexport * from './Avatar';\n\nexport { default as avatarClasses } from './avatarClasses';\nexport * from './avatarClasses';\n","node_modules/@mui/material/Avatar/avatarClasses.d.ts":"export interface AvatarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if not `src` or `srcSet`. */\n    colorDefault: string;\n    /** Styles applied to the root element if `variant=\"circular\"`. */\n    circular: string;\n    /** Styles applied to the root element if `variant=\"rounded\"`. */\n    rounded: string;\n    /** Styles applied to the root element if `variant=\"square\"`. */\n    square: string;\n    /** Styles applied to the img element if either `src` or `srcSet` is defined. */\n    img: string;\n    /** Styles applied to the fallback icon */\n    fallback: string;\n}\nexport type AvatarClassKey = keyof AvatarClasses;\nexport declare function getAvatarUtilityClass(slot: string): string;\ndeclare const avatarClasses: AvatarClasses;\nexport default avatarClasses;\n","node_modules/@mui/material/Avatar/Avatar.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { AvatarClasses } from './avatarClasses';\nimport { CreateSlotsAndSlotProps, SlotProps } from '../utils/types';\n\nexport interface AvatarSlots {\n  /**\n   * The component that renders the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  img?: React.JSXElementConstructor<React.ImgHTMLAttributes<HTMLImageElement>>;\n}\n\nexport interface AvatarPropsVariantOverrides {}\n\nexport type AvatarSlotsAndSlotProps = CreateSlotsAndSlotProps<\n  AvatarSlots,\n  {\n    img: SlotProps<\n      React.ElementType<React.ImgHTMLAttributes<HTMLImageElement>>,\n      {},\n      AvatarOwnProps\n    >;\n  }\n>;\n\nexport interface AvatarOwnProps {\n  /**\n   * Used in combination with `src` or `srcSet` to\n   * provide an alt attribute for the rendered `img` element.\n   */\n  alt?: string;\n  /**\n   * Used to render icon or text elements inside the Avatar if `src` is not set.\n   * This can be an element, or just a string.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AvatarClasses>;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.\n   * It can be used to listen for the loading error event.\n   * @deprecated Use `slotProps.img` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   */\n  imgProps?: React.ImgHTMLAttributes<HTMLImageElement> & {\n    sx?: SxProps<Theme>;\n  };\n  /**\n   * The `sizes` attribute for the `img` element.\n   */\n  sizes?: string;\n  /**\n   * The `src` attribute for the `img` element.\n   */\n  src?: string;\n  /**\n   * The `srcSet` attribute for the `img` element.\n   * Use this attribute for responsive image display.\n   */\n  srcSet?: string;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The shape of the avatar.\n   * @default 'circular'\n   */\n  variant?: OverridableStringUnion<'circular' | 'rounded' | 'square', AvatarPropsVariantOverrides>;\n}\n\nexport interface AvatarTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & AvatarOwnProps & AvatarSlotsAndSlotProps;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/material-ui/react-avatar/)\n *\n * API:\n *\n * - [Avatar API](https://mui.com/material-ui/api/avatar/)\n */\ndeclare const Avatar: OverridableComponent<AvatarTypeMap>;\n\nexport type AvatarProps<\n  RootComponent extends React.ElementType = AvatarTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<AvatarTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Avatar;\n","node_modules/@mui/material/AppBar/index.d.ts":"export { default } from './AppBar';\nexport * from './AppBar';\n\nexport { default as appBarClasses } from './appBarClasses';\nexport * from './appBarClasses';\n","node_modules/@mui/material/AppBar/appBarClasses.d.ts":"export interface AppBarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `position=\"fixed\"`. */\n    positionFixed: string;\n    /** Styles applied to the root element if `position=\"absolute\"`. */\n    positionAbsolute: string;\n    /** Styles applied to the root element if `position=\"sticky\"`. */\n    positionSticky: string;\n    /** Styles applied to the root element if `position=\"static\"`. */\n    positionStatic: string;\n    /** Styles applied to the root element if `position=\"relative\"`. */\n    positionRelative: string;\n    /** Styles applied to the root element if `color=\"default\"`. */\n    colorDefault: string;\n    /** Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: string;\n    /** Styles applied to the root element if `color=\"transparent\"`. */\n    colorTransparent: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the root element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the root element if `color=\"warning\"`. */\n    colorWarning: string;\n}\nexport type AppBarClassKey = keyof AppBarClasses;\nexport declare function getAppBarUtilityClass(slot: string): string;\ndeclare const appBarClasses: AppBarClasses;\nexport default appBarClasses;\n","node_modules/@mui/material/AppBar/AppBar.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport { OverridableComponent, OverrideProps } from '@mui/material/OverridableComponent';\nimport { PropTypes, Theme } from '..';\nimport { AppBarClasses } from './appBarClasses';\nimport { ExtendPaperTypeMap } from '../Paper/Paper';\n\nexport interface AppBarPropsColorOverrides {}\n\nexport interface AppBarOwnProps {\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AppBarClasses>;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color?: OverridableStringUnion<\n    PropTypes.Color | 'transparent' | 'error' | 'info' | 'success' | 'warning',\n    AppBarPropsColorOverrides\n  >;\n  /**\n   * If true, the `color` prop is applied in dark mode.\n   * @default false\n   */\n  enableColorOnDark?: boolean;\n  /**\n   * The positioning type. The behavior of the different options is described\n   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).\n   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.\n   * @default 'fixed'\n   */\n  position?: 'fixed' | 'absolute' | 'sticky' | 'static' | 'relative';\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type AppBarTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'header',\n> = ExtendPaperTypeMap<\n  {\n    props: AdditionalProps & AppBarOwnProps;\n    defaultComponent: RootComponent;\n  },\n  'position' | 'color' | 'classes'\n>;\n\n/**\n *\n * Demos:\n *\n * - [App Bar](https://mui.com/material-ui/react-app-bar/)\n *\n * API:\n *\n * - [AppBar API](https://mui.com/material-ui/api/app-bar/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\n\ndeclare const AppBar: OverridableComponent<AppBarTypeMap>;\n\nexport type AppBarProps<\n  RootComponent extends React.ElementType = AppBarTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<AppBarTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default AppBar;\n","node_modules/@mui/material/Autocomplete/index.d.ts":"export { default } from './Autocomplete';\nexport * from './Autocomplete';\n\nexport { default as autocompleteClasses } from './autocompleteClasses';\nexport * from './autocompleteClasses';\n","node_modules/@mui/material/Autocomplete/autocompleteClasses.d.ts":"export interface AutocompleteClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `fullWidth={true}`. */\n    fullWidth: string;\n    /** State class applied to the root element if the listbox is displayed. */\n    expanded: string;\n    /** State class applied to the root element if focused. */\n    focused: string;\n    /** Styles applied to the option elements if they are keyboard focused. */\n    focusVisible: string;\n    /** Styles applied to the tag elements, for example the chips. */\n    tag: string;\n    /** Styles applied to the tag elements, for example the chips if `size=\"small\"`. */\n    tagSizeSmall: string;\n    /** Styles applied to the tag elements, for example the chips if `size=\"medium\"`. */\n    tagSizeMedium: string;\n    /** Styles applied when the popup icon is rendered. */\n    hasPopupIcon: string;\n    /** Styles applied when the clear icon is rendered. */\n    hasClearIcon: string;\n    /** Styles applied to the Input element. */\n    inputRoot: string;\n    /** Styles applied to the input element. */\n    input: string;\n    /** Styles applied to the input element if the input is focused. */\n    inputFocused: string;\n    /** Styles applied to the endAdornment element. */\n    endAdornment: string;\n    /** Styles applied to the clear indicator. */\n    clearIndicator: string;\n    /** Styles applied to the popup indicator. */\n    popupIndicator: string;\n    /** Styles applied to the popup indicator if the popup is open. */\n    popupIndicatorOpen: string;\n    /** Styles applied to the popper element. */\n    popper: string;\n    /** Styles applied to the popper element if `disablePortal={true}`. */\n    popperDisablePortal: string;\n    /** Styles applied to the Paper component. */\n    paper: string;\n    /** Styles applied to the listbox component. */\n    listbox: string;\n    /** Styles applied to the loading wrapper. */\n    loading: string;\n    /** Styles applied to the no option wrapper. */\n    noOptions: string;\n    /** Styles applied to the option elements. */\n    option: string;\n    /** Styles applied to the group's label elements. */\n    groupLabel: string;\n    /** Styles applied to the group's ul elements. */\n    groupUl: string;\n}\nexport type AutocompleteClassKey = keyof AutocompleteClasses;\nexport declare function getAutocompleteUtilityClass(slot: string): string;\ndeclare const autocompleteClasses: AutocompleteClasses;\nexport default autocompleteClasses;\n","node_modules/@mui/material/Autocomplete/Autocomplete.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion } from '@mui/types';\nimport {\n  useAutocomplete,\n  AutocompleteChangeDetails,\n  AutocompleteChangeReason,\n  AutocompleteCloseReason,\n  AutocompleteInputChangeReason,\n  AutocompleteValue,\n  createFilterOptions,\n  UseAutocompleteProps,\n  AutocompleteFreeSoloValueMapping,\n} from '@mui/base';\nimport { IconButtonProps, InternalStandardProps as StandardProps, Theme } from '@mui/material';\nimport { ChipProps, ChipTypeMap } from '@mui/material/Chip';\nimport { PaperProps } from '@mui/material/Paper';\nimport { PopperProps } from '@mui/material/Popper';\nimport { AutocompleteClasses } from './autocompleteClasses';\n\nexport {\n  AutocompleteChangeDetails,\n  AutocompleteChangeReason,\n  AutocompleteCloseReason,\n  AutocompleteInputChangeReason,\n  AutocompleteValue,\n  createFilterOptions,\n};\n\nexport type AutocompleteOwnerState<\n  Value,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n> = AutocompleteProps<Value, Multiple, DisableClearable, FreeSolo, ChipComponent> & {\n  disablePortal: boolean;\n  expanded: boolean;\n  focused: boolean;\n  fullWidth: boolean;\n  getOptionLabel: (option: Value | AutocompleteFreeSoloValueMapping<FreeSolo>) => string;\n  hasClearIcon: boolean;\n  hasPopupIcon: boolean;\n  inputFocused: boolean;\n  popupOpen: boolean;\n  size: OverridableStringUnion<'small' | 'medium', AutocompletePropsSizeOverrides>;\n};\n\nexport type AutocompleteRenderGetTagProps = ({ index }: { index: number }) => {\n  key: number;\n  className: string;\n  disabled: boolean;\n  'data-tag-index': number;\n  tabIndex: -1;\n  onDelete: (event: any) => void;\n};\n\nexport interface AutocompleteRenderOptionState {\n  inputValue: string;\n  index: number;\n  selected: boolean;\n}\n\nexport interface AutocompleteRenderGroupParams {\n  key: string;\n  group: string;\n  children?: React.ReactNode;\n}\n\nexport interface AutocompleteRenderInputParams {\n  id: string;\n  disabled: boolean;\n  fullWidth: boolean;\n  size: 'small' | undefined;\n  InputLabelProps: ReturnType<ReturnType<typeof useAutocomplete>['getInputLabelProps']>;\n  InputProps: {\n    ref: React.Ref<any>;\n    className: string;\n    startAdornment: React.ReactNode;\n    endAdornment: React.ReactNode;\n  };\n  inputProps: ReturnType<ReturnType<typeof useAutocomplete>['getInputProps']>;\n}\n\nexport interface AutocompletePropsSizeOverrides {}\n\nexport interface AutocompleteProps<\n  Value,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n> extends UseAutocompleteProps<Value, Multiple, DisableClearable, FreeSolo>,\n    StandardProps<React.HTMLAttributes<HTMLDivElement>, 'defaultValue' | 'onChange' | 'children'> {\n  /**\n   * Props applied to the [`Chip`](/material-ui/api/chip/) element.\n   */\n  ChipProps?: ChipProps<ChipComponent>;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AutocompleteClasses>;\n  /**\n   * The icon to display in place of the default clear icon.\n   * @default <ClearIcon fontSize=\"small\" />\n   */\n  clearIcon?: React.ReactNode;\n  /**\n   * Override the default text for the *clear* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Clear'\n   */\n  clearText?: string;\n  /**\n   * Override the default text for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText?: string;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  componentsProps?: {\n    clearIndicator?: Partial<IconButtonProps>;\n    paper?: PaperProps;\n    popper?: Partial<PopperProps>;\n    popupIndicator?: Partial<IconButtonProps>;\n  };\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.\n   * @default false\n   */\n  disablePortal?: boolean;\n  /**\n   * Force the visibility display of the popup icon.\n   * @default 'auto'\n   */\n  forcePopupIcon?: true | false | 'auto';\n  /**\n   * If `true`, the input will take up the full width of its container.\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * The label to display when the tags are truncated (`limitTags`).\n   *\n   * @param {number} more The number of truncated tags.\n   * @returns {ReactNode}\n   * @default (more) => `+${more}`\n   */\n  getLimitTagsText?: (more: number) => React.ReactNode;\n  /**\n   * The component used to render the listbox.\n   * @default 'ul'\n   */\n  ListboxComponent?: React.JSXElementConstructor<React.HTMLAttributes<HTMLElement>>;\n  /**\n   * Props applied to the Listbox element.\n   */\n  ListboxProps?: ReturnType<ReturnType<typeof useAutocomplete>['getListboxProps']> & {\n    sx?: SxProps<Theme>;\n    ref?: React.Ref<Element>;\n  };\n  /**\n   * If `true`, the component is in a loading state.\n   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).\n   * @default false\n   */\n  loading?: boolean;\n  /**\n   * Text to display when in a loading state.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Loading…'\n   */\n  loadingText?: React.ReactNode;\n  /**\n   * The maximum number of tags that will be visible when not focused.\n   * Set `-1` to disable the limit.\n   * @default -1\n   */\n  limitTags?: number;\n  /**\n   * Text to display when there are no options.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'No options'\n   */\n  noOptionsText?: React.ReactNode;\n  onKeyDown?: (\n    event: React.KeyboardEvent<HTMLDivElement> & { defaultMuiPrevented?: boolean },\n  ) => void;\n  /**\n   * Override the default text for the *open popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Open'\n   */\n  openText?: string;\n  /**\n   * The component used to render the body of the popup.\n   * @default Paper\n   */\n  PaperComponent?: React.JSXElementConstructor<React.HTMLAttributes<HTMLElement>>;\n  /**\n   * The component used to position the popup.\n   * @default Popper\n   */\n  PopperComponent?: React.JSXElementConstructor<PopperProps>;\n  /**\n   * The icon to display in place of the default popup icon.\n   * @default <ArrowDropDownIcon />\n   */\n  popupIcon?: React.ReactNode;\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * Render the group.\n   *\n   * @param {AutocompleteRenderGroupParams} params The group to render.\n   * @returns {ReactNode}\n   */\n  renderGroup?: (params: AutocompleteRenderGroupParams) => React.ReactNode;\n  /**\n   * Render the input.\n   *\n   * @param {object} params\n   * @returns {ReactNode}\n   */\n  renderInput: (params: AutocompleteRenderInputParams) => React.ReactNode;\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {object} props The props to apply on the li element.\n   * @param {Value} option The option to render.\n   * @param {object} state The state of each option.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderOption?: (\n    props: React.HTMLAttributes<HTMLLIElement>,\n    option: Value,\n    state: AutocompleteRenderOptionState,\n    ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n  ) => React.ReactNode;\n  /**\n   * Render the selected value.\n   *\n   * @param {Value[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @param {object} ownerState The state of the Autocomplete component.\n   * @returns {ReactNode}\n   */\n  renderTags?: (\n    value: Value[],\n    getTagProps: AutocompleteRenderGetTagProps,\n    ownerState: AutocompleteOwnerState<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n  ) => React.ReactNode;\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size?: OverridableStringUnion<'small' | 'medium', AutocompletePropsSizeOverrides>;\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps?: {\n    clearIndicator?: Partial<IconButtonProps>;\n    paper?: PaperProps;\n    popper?: Partial<PopperProps>;\n    popupIndicator?: Partial<IconButtonProps>;\n  };\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)\n *\n * API:\n *\n * - [Autocomplete API](https://mui.com/material-ui/api/autocomplete/)\n */\nexport default function Autocomplete<\n  Value,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n  ChipComponent extends React.ElementType = ChipTypeMap['defaultComponent'],\n>(\n  props: AutocompleteProps<Value, Multiple, DisableClearable, FreeSolo, ChipComponent>,\n): JSX.Element;\n","node_modules/@mui/material/AlertTitle/index.d.ts":"export { default } from './AlertTitle';\nexport * from './AlertTitle';\n\nexport { default as alertTitleClasses } from './alertTitleClasses';\nexport * from './alertTitleClasses';\n","node_modules/@mui/material/AlertTitle/alertTitleClasses.d.ts":"export interface AlertTitleClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type AlertTitleClassKey = keyof AlertTitleClasses;\nexport declare function getAlertTitleUtilityClass(slot: string): string;\ndeclare const alertTitleClasses: AlertTitleClasses;\nexport default alertTitleClasses;\n","node_modules/@mui/material/AlertTitle/AlertTitle.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { AlertTitleClasses } from './alertTitleClasses';\n\nexport interface AlertTitleProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AlertTitleClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Alert](https://mui.com/material-ui/react-alert/)\n *\n * API:\n *\n * - [AlertTitle API](https://mui.com/material-ui/api/alert-title/)\n * - inherits [Typography API](https://mui.com/material-ui/api/typography/)\n */\nexport default function AlertTitle(props: AlertTitleProps): JSX.Element;\n","node_modules/@mui/material/BottomNavigation/index.d.ts":"export { default } from './BottomNavigation';\nexport * from './BottomNavigation';\n\nexport { default as bottomNavigationClasses } from './bottomNavigationClasses';\nexport * from './bottomNavigationClasses';\n","node_modules/@mui/material/BottomNavigation/bottomNavigationClasses.d.ts":"export interface BottomNavigationClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type BottomNavigationClassKey = keyof BottomNavigationClasses;\nexport declare function getBottomNavigationUtilityClass(slot: string): string;\ndeclare const bottomNavigationClasses: BottomNavigationClasses;\nexport default bottomNavigationClasses;\n","node_modules/@mui/material/BottomNavigation/BottomNavigation.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { BottomNavigationClasses } from './bottomNavigationClasses';\n\nexport interface BottomNavigationOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<BottomNavigationClasses>;\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {any} value We default to the index of the child.\n   */\n  onChange?: (event: React.SyntheticEvent, value: any) => void;\n  /**\n   * If `true`, all `BottomNavigationAction`s will show their labels.\n   * By default, only the selected `BottomNavigationAction` will show its label.\n   * @default false\n   */\n  showLabels?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The value of the currently selected `BottomNavigationAction`.\n   */\n  value?: any;\n}\n\nexport interface BottomNavigationTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> {\n  props: AdditionalProps & BottomNavigationOwnProps;\n  defaultComponent: RootComponent;\n}\n/**\n *\n * Demos:\n *\n * - [Bottom Navigation](https://mui.com/material-ui/react-bottom-navigation/)\n *\n * API:\n *\n * - [BottomNavigation API](https://mui.com/material-ui/api/bottom-navigation/)\n */\ndeclare const BottomNavigation: OverridableComponent<BottomNavigationTypeMap>;\n\nexport type BottomNavigationProps<\n  RootComponent extends React.ElementType = BottomNavigationTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BottomNavigationTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default BottomNavigation;\n","node_modules/@mui/material/Badge/index.d.ts":"export { default } from './Badge';\nexport * from './Badge';\n\nexport { default as badgeClasses } from './badgeClasses';\nexport * from './badgeClasses';\n","node_modules/@mui/material/Badge/badgeClasses.d.ts":"export interface BadgeClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the badge `span` element. */\n    badge: string;\n    /** Styles applied to the badge `span` element if `variant=\"dot\"`. */\n    dot: string;\n    /** Styles applied to the badge `span` element if `variant=\"standard\"`. */\n    standard: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'top', 'right' }}`. */\n    anchorOriginTopRight: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'bottom', 'right' }}`. */\n    anchorOriginBottomRight: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'top', 'left' }}`. */\n    anchorOriginTopLeft: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'bottom', 'left' }}`. */\n    anchorOriginBottomLeft: string;\n    /** State class applied to the badge `span` element if `invisible={true}`. */\n    invisible: string;\n    /** Styles applied to the badge `span` element if `color=\"primary\"`. */\n    colorPrimary: string;\n    /** Styles applied to the badge `span` element if `color=\"secondary\"`. */\n    colorSecondary: string;\n    /** Styles applied to the badge `span` element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the badge `span` element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the badge `span` element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the badge `span` element if `color=\"warning\"`. */\n    colorWarning: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'top', 'right' }} overlap=\"rectangular\"`. */\n    anchorOriginTopRightRectangular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"rectangular\"`. */\n    anchorOriginBottomRightRectangular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'top', 'left' }} overlap=\"rectangular\"`. */\n    anchorOriginTopLeftRectangular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"rectangular\"`. */\n    anchorOriginBottomLeftRectangular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'top', 'right' }} overlap=\"circular\"`. */\n    anchorOriginTopRightCircular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'bottom', 'right' }} overlap=\"circular\"`. */\n    anchorOriginBottomRightCircular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'top', 'left' }} overlap=\"circular\"`. */\n    anchorOriginTopLeftCircular: string;\n    /** Styles applied to the badge `span` element if `anchorOrigin={{ 'bottom', 'left' }} overlap=\"circular\"`. */\n    anchorOriginBottomLeftCircular: string;\n    /** Styles applied to the badge `span` element if `overlap=\"rectangular\"`. */\n    overlapRectangular: string;\n    /** Styles applied to the badge `span` element if `overlap=\"circular\"`. */\n    overlapCircular: string;\n}\nexport type BadgeClassKey = keyof BadgeClasses;\nexport declare function getBadgeUtilityClass(slot: string): string;\ndeclare const badgeClasses: BadgeClasses;\nexport default badgeClasses;\n","node_modules/@mui/material/Badge/Badge.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { OverridableStringUnion, Simplify } from '@mui/types';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { Theme } from '../styles';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { BadgeClasses } from './badgeClasses';\n\nexport interface BadgePropsVariantOverrides {}\nexport interface BadgePropsColorOverrides {}\nexport interface BadgeRootSlotPropsOverrides {}\nexport interface BadgeBadgeSlotPropsOverrides {}\n\nexport type BadgeOwnerState = Simplify<\n  BadgeOwnProps & {\n    badgeContent: React.ReactNode;\n    invisible: boolean;\n    max: number;\n    displayValue: React.ReactNode;\n    showZero: boolean;\n    anchorOrigin: BadgeOrigin;\n    color: OverridableStringUnion<\n      'primary' | 'secondary' | 'default' | 'error' | 'info' | 'success' | 'warning',\n      BadgePropsColorOverrides\n    >;\n    overlap: 'rectangular' | 'circular';\n    variant: OverridableStringUnion<'standard' | 'dot', BadgePropsVariantOverrides>;\n  }\n>;\n\nexport interface BadgeOrigin {\n  vertical: 'top' | 'bottom';\n  horizontal: 'left' | 'right';\n}\n\nexport interface BadgeOwnProps {\n  /**\n   * The anchor of the badge.\n   * @default {\n   *   vertical: 'top',\n   *   horizontal: 'right',\n   * }\n   */\n  anchorOrigin?: BadgeOrigin;\n  /**\n   * The content rendered within the badge.\n   */\n  badgeContent?: React.ReactNode;\n  /**\n   * The badge will be added relative to this node.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<BadgeClasses>;\n  /**\n   * @ignore\n   */\n  className?: string;\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'default'\n   */\n  color?: OverridableStringUnion<\n    'primary' | 'secondary' | 'default' | 'error' | 'info' | 'success' | 'warning',\n    BadgePropsColorOverrides\n  >;\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * This prop is an alias for the `slotProps` prop.\n   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.\n   *\n   * @default {}\n   */\n  componentsProps?: BadgeOwnProps['slotProps'];\n  /**\n   * The components used for each slot inside.\n   *\n   * This prop is an alias for the `slots` prop.\n   * It's recommended to use the `slots` prop instead.\n   *\n   * @default {}\n   */\n  components?: {\n    Root?: React.ElementType;\n    Badge?: React.ElementType;\n  };\n  /**\n   * If `true`, the badge is invisible.\n   * @default false\n   */\n  invisible?: boolean;\n  /**\n   * Max count to show.\n   * @default 99\n   */\n  max?: number;\n  /**\n   * Wrapped shape the badge should overlap.\n   * @default 'rectangular'\n   */\n  overlap?: 'rectangular' | 'circular';\n  /**\n   * The props used for each slot inside the Badge.\n   * @default {}\n   */\n  slotProps?: {\n    root?: SlotComponentProps<'span', BadgeRootSlotPropsOverrides, BadgeOwnerState>;\n    badge?: SlotComponentProps<'span', BadgeBadgeSlotPropsOverrides, BadgeOwnerState>;\n  };\n  /**\n   * The components used for each slot inside the Badge.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  slots?: {\n    /**\n     * The component that renders the root.\n     * @default 'span'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the badge.\n     * @default 'span'\n     */\n    badge?: React.ElementType;\n  };\n  /**\n   * Controls whether the badge is hidden when `badgeContent` is zero.\n   * @default false\n   */\n  showZero?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant?: OverridableStringUnion<'standard' | 'dot', BadgePropsVariantOverrides>;\n}\n\nexport interface BadgeTypeMap<\n  RootComponent extends React.ElementType = 'span',\n  AdditionalProps = {},\n> {\n  props: AdditionalProps & BadgeOwnProps;\n  defaultComponent: RootComponent;\n}\n\ntype BadgeRootProps = NonNullable<BadgeTypeMap['props']['slotProps']>['root'];\ntype BadgeBadgeProps = NonNullable<BadgeTypeMap['props']['slotProps']>['badge'];\n\nexport declare const BadgeRoot: React.FC<BadgeRootProps>;\nexport declare const BadgeMark: React.FC<BadgeBadgeProps>;\n\n/**\n *\n * Demos:\n *\n * - [Avatar](https://mui.com/material-ui/react-avatar/)\n * - [Badge](https://mui.com/material-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/material-ui/api/badge/)\n */\ndeclare const Badge: OverridableComponent<BadgeTypeMap>;\n\nexport type BadgeProps<\n  RootComponent extends React.ElementType = BadgeTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BadgeTypeMap<RootComponent, AdditionalProps>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Badge;\n","node_modules/@mui/material/Alert/index.d.ts":"export { default } from './Alert';\nexport * from './Alert';\n\nexport { default as alertClasses } from './alertClasses';\nexport * from './alertClasses';\n","node_modules/@mui/material/Alert/alertClasses.d.ts":"export interface AlertClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `variant=\"filled\"`. */\n    filled: string;\n    /** Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: string;\n    /** Styles applied to the root element if `variant=\"standard\"`. */\n    standard: string;\n    /** Styles applied to the root element if `color=\"success\"`. */\n    colorSuccess: string;\n    /** Styles applied to the root element if `color=\"info\"`. */\n    colorInfo: string;\n    /** Styles applied to the root element if `color=\"warning\"`. */\n    colorWarning: string;\n    /** Styles applied to the root element if `color=\"error\"`. */\n    colorError: string;\n    /** Styles applied to the root element if `variant=\"standard\"` and `color=\"success\"`.\n     * @deprecated Combine the [.MuiAlert-standard](/material-ui/api/alert/#alert-classes-standard)\n     * and [.MuiAlert-colorSuccess](/material-ui/api/alert/#alert-classes-colorSuccess) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    standardSuccess: string;\n    /** Styles applied to the root element if `variant=\"standard\"` and `color=\"info\"`.\n     * @deprecated Combine the [.MuiAlert-standard](/material-ui/api/alert/#alert-classes-standard)\n     * and [.MuiAlert-colorInfo](/material-ui/api/alert/#alert-classes-colorInfo) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    standardInfo: string;\n    /** Styles applied to the root element if `variant=\"standard\"` and `color=\"warning\"`.\n     * @deprecated Combine the [.MuiAlert-standard](/material-ui/api/alert/#alert-classes-standard)\n     * and [.MuiAlert-colorWarning](/material-ui/api/alert/#alert-classes-colorWarning) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    standardWarning: string;\n    /** Styles applied to the root element if `variant=\"standard\"` and `color=\"error\"`.\n     * @deprecated Combine the [.MuiAlert-standard](/material-ui/api/alert/#alert-classes-standard)\n     * and [.MuiAlert-colorError](/material-ui/api/alert/#alert-classes-colorError) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    standardError: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"success\"`.\n     * @deprecated Combine the [.MuiAlert-outlined](/material-ui/api/alert/#alert-classes-outlined)\n     * and [.MuiAlert-colorSuccess](/material-ui/api/alert/#alert-classes-colorSuccess) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    outlinedSuccess: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"info\"`.\n     * @deprecated Combine the [.MuiAlert-outlined](/material-ui/api/alert/#alert-classes-outlined)\n     * and [.MuiAlert-colorInfo](/material-ui/api/alert/#alert-classes-colorInfo) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    outlinedInfo: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"warning\"`.\n     * @deprecated Combine the [.MuiAlert-outlined](/material-ui/api/alert/#alert-classes-outlined)\n     * and [.MuiAlert-colorWarning](/material-ui/api/alert/#alert-classes-colorWarning) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    outlinedWarning: string;\n    /** Styles applied to the root element if `variant=\"outlined\"` and `color=\"error\"`.\n     * @deprecated Combine the [.MuiAlert-outlined](/material-ui/api/alert/#alert-classes-outlined)\n     * and [.MuiAlert-colorError](/material-ui/api/alert/#alert-classes-colorError) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    outlinedError: string;\n    /** Styles applied to the root element if `variant=\"filled\"` and `color=\"success\"`.\n     * @deprecated Combine the [.MuiAlert-filled](/material-ui/api/alert/#alert-classes-filled)\n     * and [.MuiAlert-colorSuccess](/material-ui/api/alert/#alert-classes-colorSuccess) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    filledSuccess: string;\n    /** Styles applied to the root element if `variant=\"filled\"` and `color=\"info\"`.\n     * @deprecated Combine the [.MuiAlert-filled](/material-ui/api/alert/#alert-classes-filled)\n     * and [.MuiAlert-colorInfo](/material-ui/api/alert/#alert-classes-colorInfo) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    filledInfo: string;\n    /** Styles applied to the root element if `variant=\"filled\"` and `color=\"warning\"`\n     * @deprecated Combine the [.MuiAlert-filled](/material-ui/api/alert/#alert-classes-filled)\n     * and [.MuiAlert-colorWarning](/material-ui/api/alert/#alert-classes-colorWarning) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    filledWarning: string;\n    /** Styles applied to the root element if `variant=\"filled\"` and `color=\"error\"`.\n     * @deprecated Combine the [.MuiAlert-filled](/material-ui/api/alert/#alert-classes-filled)\n     * and [.MuiAlert-colorError](/material-ui/api/alert/#alert-classes-colorError) classes instead.\n     * [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    filledError: string;\n    /** Styles applied to the icon wrapper element. */\n    icon: string;\n    /** Styles applied to the message wrapper element. */\n    message: string;\n    /** Styles applied to the action wrapper element if `action` is provided. */\n    action: string;\n}\nexport type AlertClassKey = keyof AlertClasses;\nexport declare function getAlertUtilityClass(slot: string): string;\ndeclare const alertClasses: AlertClasses;\nexport default alertClasses;\n","node_modules/@mui/material/Alert/Alert.d.ts":"import * as React from 'react';\nimport { OverridableStringUnion } from '@mui/types';\nimport { SxProps } from '@mui/system';\nimport { IconButtonProps, InternalStandardProps as StandardProps, SvgIconProps, Theme } from '..';\nimport { PaperProps } from '../Paper';\nimport { AlertClasses } from './alertClasses';\nimport { CreateSlotsAndSlotProps, SlotProps } from '../utils/types';\n\nexport type AlertColor = 'success' | 'info' | 'warning' | 'error';\n\nexport interface AlertPropsVariantOverrides {}\n\nexport interface AlertPropsColorOverrides {}\n\nexport interface AlertSlots {\n  /**\n   * The component that renders the close button.\n   * @default IconButton\n   */\n  closeButton?: React.ElementType;\n  /**\n   * The component that renders the close icon.\n   * @default svg\n   */\n  closeIcon?: React.ElementType;\n}\n\nexport type AlertSlotsAndSlotProps = CreateSlotsAndSlotProps<\n  AlertSlots,\n  {\n    closeButton: SlotProps<React.ElementType<IconButtonProps>, {}, AlertOwnerState>;\n    closeIcon: SlotProps<React.ElementType<SvgIconProps>, {}, AlertOwnerState>;\n  }\n>;\n\nexport interface AlertProps extends StandardProps<PaperProps, 'variant'>, AlertSlotsAndSlotProps {\n  /**\n   * The action to display. It renders after the message, at the end of the alert.\n   */\n  action?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AlertClasses>;\n  /**\n   * Override the default label for the *close popup* icon button.\n   *\n   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n   * @default 'Close'\n   */\n  closeText?: string;\n  /**\n   * The color of the component. Unless provided, the value is taken from the `severity` prop.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   */\n  color?: OverridableStringUnion<AlertColor, AlertPropsColorOverrides>;\n  /**\n   * The components used for each slot inside.\n   *\n   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  components?: {\n    CloseButton?: React.ElementType;\n    CloseIcon?: React.ElementType;\n  };\n  /**\n   * The extra props for the slot components.\n   * You can override the existing props or add new ones.\n   *\n   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n   *\n   * @default {}\n   */\n  componentsProps?: {\n    closeButton?: IconButtonProps;\n    closeIcon?: SvgIconProps;\n  };\n  /**\n   * The severity of the alert. This defines the color and icon used.\n   * @default 'success'\n   */\n  severity?: OverridableStringUnion<AlertColor, AlertPropsColorOverrides>;\n  /**\n   * Override the icon displayed before the children.\n   * Unless provided, the icon is mapped to the value of the `severity` prop.\n   * Set to `false` to remove the `icon`.\n   */\n  icon?: React.ReactNode;\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role?: string;\n  /**\n   * The component maps the `severity` prop to a range of different icons,\n   * for instance success to `<SuccessOutlined>`.\n   * If you wish to change this mapping, you can provide your own.\n   * Alternatively, you can use the `icon` prop to override the icon displayed.\n   */\n  iconMapping?: Partial<\n    Record<OverridableStringUnion<AlertColor, AlertPropsColorOverrides>, React.ReactNode>\n  >;\n  /**\n   * Callback fired when the component requests to be closed.\n   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onClose?: (event: React.SyntheticEvent) => void;\n  /**\n   * The variant to use.\n   * @default 'standard'\n   */\n  variant?: OverridableStringUnion<'standard' | 'filled' | 'outlined', AlertPropsVariantOverrides>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface AlertOwnerState extends AlertProps {}\n\n/**\n *\n * Demos:\n *\n * - [Alert](https://mui.com/material-ui/react-alert/)\n *\n * API:\n *\n * - [Alert API](https://mui.com/material-ui/api/alert/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\nexport default function Alert(props: AlertProps): JSX.Element;\n","node_modules/@mui/material/AccordionSummary/index.d.ts":"export { default } from './AccordionSummary';\nexport * from './AccordionSummary';\n\nexport { default as accordionSummaryClasses } from './accordionSummaryClasses';\nexport * from './accordionSummaryClasses';\n","node_modules/@mui/material/AccordionSummary/accordionSummaryClasses.d.ts":"export interface AccordionSummaryClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** State class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */\n    expanded: string;\n    /** State class applied to the ButtonBase root element if the button is keyboard focused. */\n    focusVisible: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element unless `disableGutters={true}`. */\n    gutters: string;\n    /**\n     * Styles applied to the children wrapper element unless `disableGutters={true}`.\n     * @deprecated Combine the [.MuiAccordionSummary-gutters](/material-ui/api/accordion-summary/#AccordionSummary-classes-gutters) and [.MuiAccordionSummary-content](/material-ui/api/accordion-summary/#AccordionSummary-classes-content) classes instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n     */\n    contentGutters: string;\n    /** Styles applied to the children wrapper element. */\n    content: string;\n    /** Styles applied to the `expandIcon`'s wrapper element. */\n    expandIconWrapper: string;\n}\nexport type AccordionSummaryClassKey = keyof AccordionSummaryClasses;\nexport declare function getAccordionSummaryUtilityClass(slot: string): string;\ndeclare const accordionSummaryClasses: AccordionSummaryClasses;\nexport default accordionSummaryClasses;\n","node_modules/@mui/material/AccordionSummary/AccordionSummary.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { ExtendButtonBase, ExtendButtonBaseTypeMap } from '../ButtonBase';\nimport { OverrideProps } from '../OverridableComponent';\nimport { Theme } from '..';\nimport { AccordionSummaryClasses } from './accordionSummaryClasses';\n\nexport interface AccordionSummaryOwnProps {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AccordionSummaryClasses>;\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon?: React.ReactNode;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport type AccordionSummaryTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> = ExtendButtonBaseTypeMap<{\n  props: AdditionalProps & AccordionSummaryOwnProps;\n  defaultComponent: RootComponent;\n}>;\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [AccordionSummary API](https://mui.com/material-ui/api/accordion-summary/)\n * - inherits [ButtonBase API](https://mui.com/material-ui/api/button-base/)\n */\ndeclare const AccordionSummary: ExtendButtonBase<AccordionSummaryTypeMap>;\n\nexport type AccordionSummaryProps<\n  RootComponent extends React.ElementType = AccordionSummaryTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<AccordionSummaryTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default AccordionSummary;\n","node_modules/@mui/material/AccordionActions/index.d.ts":"export { default } from './AccordionActions';\nexport * from './AccordionActions';\n\nexport { default as accordionActionsClasses } from './accordionActionsClasses';\nexport * from './accordionActionsClasses';\n","node_modules/@mui/material/AccordionActions/accordionActionsClasses.d.ts":"export interface AccordionActionsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `disableSpacing={true}`. */\n    spacing: string;\n}\nexport type AccordionActionsClassKey = keyof AccordionActionsClasses;\nexport declare function getAccordionActionsUtilityClass(slot: string): string;\ndeclare const accordionActionsClasses: AccordionActionsClasses;\nexport default accordionActionsClasses;\n","node_modules/@mui/material/AccordionActions/AccordionActions.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { AccordionActionsClasses } from './accordionActionsClasses';\n\nexport interface AccordionActionsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AccordionActionsClasses>;\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing?: boolean;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [AccordionActions API](https://mui.com/material-ui/api/accordion-actions/)\n */\nexport default function AccordionActions(props: AccordionActionsProps): JSX.Element;\n","node_modules/@mui/material/AccordionDetails/index.d.ts":"export { default } from './AccordionDetails';\nexport * from './AccordionDetails';\n\nexport { default as accordionDetailsClasses } from './accordionDetailsClasses';\nexport * from './accordionDetailsClasses';\n","node_modules/@mui/material/AccordionDetails/accordionDetailsClasses.d.ts":"export interface AccordionDetailsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type AccordionDetailsClassKey = keyof AccordionDetailsClasses;\nexport declare function getAccordionDetailsUtilityClass(slot: string): string;\ndeclare const accordionDetailsClasses: AccordionDetailsClasses;\nexport default accordionDetailsClasses;\n","node_modules/@mui/material/AccordionDetails/AccordionDetails.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { InternalStandardProps as StandardProps, Theme } from '..';\nimport { AccordionDetailsClasses } from './accordionDetailsClasses';\n\nexport interface AccordionDetailsProps extends StandardProps<React.HTMLAttributes<HTMLDivElement>> {\n  /**\n   * The content of the component.\n   */\n  children?: React.ReactNode;\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes?: Partial<AccordionDetailsClasses>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [AccordionDetails API](https://mui.com/material-ui/api/accordion-details/)\n */\nexport default function AccordionDetails(props: AccordionDetailsProps): JSX.Element;\n","node_modules/@mui/material/Accordion/index.d.ts":"export { default } from './Accordion';\nexport * from './Accordion';\n\nexport { default as accordionClasses } from './accordionClasses';\nexport * from './accordionClasses';\n","node_modules/@mui/material/Accordion/accordionClasses.d.ts":"export interface AccordionClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element unless `square={true}`. */\n    rounded: string;\n    /** State class applied to the root element if `expanded={true}`. */\n    expanded: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** Styles applied to the root element unless `disableGutters={true}`. */\n    gutters: string;\n    /** Styles applied to the region element, the container of the children. */\n    region: string;\n}\nexport type AccordionClassKey = keyof AccordionClasses;\nexport declare function getAccordionUtilityClass(slot: string): string;\ndeclare const accordionClasses: AccordionClasses;\nexport default accordionClasses;\n","node_modules/@mui/material/Accordion/Accordion.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '..';\nimport { TransitionProps } from '../transitions/transition';\nimport { AccordionClasses } from './accordionClasses';\nimport { OverridableComponent, OverrideProps } from '../OverridableComponent';\nimport { ExtendPaperTypeMap } from '../Paper/Paper';\nimport { CreateSlotsAndSlotProps, SlotProps } from '../utils/types';\n\nexport interface AccordionSlots {\n  /**\n   * The component that renders the transition.\n   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  transition?: React.JSXElementConstructor<\n    TransitionProps & { children?: React.ReactElement<any, any> }\n  >;\n}\n\nexport interface AccordionTransitionSlotPropsOverrides {}\n\nexport type AccordionSlotsAndSlotProps = CreateSlotsAndSlotProps<\n  AccordionSlots,\n  {\n    transition: SlotProps<\n      React.ElementType<TransitionProps>,\n      AccordionTransitionSlotPropsOverrides,\n      AccordionOwnerState\n    >;\n  }\n>;\n\nexport type AccordionTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n> = ExtendPaperTypeMap<\n  {\n    props: AdditionalProps & {\n      /**\n       * The content of the component.\n       */\n      children: NonNullable<React.ReactNode>;\n      /**\n       * Override or extend the styles applied to the component.\n       */\n      classes?: Partial<AccordionClasses>;\n      /**\n       * If `true`, expands the accordion by default.\n       * @default false\n       */\n      defaultExpanded?: boolean;\n      /**\n       * If `true`, the component is disabled.\n       * @default false\n       */\n      disabled?: boolean;\n      /**\n       * If `true`, it removes the margin between two expanded accordion items and the increase of height.\n       * @default false\n       */\n      disableGutters?: boolean;\n      /**\n       * If `true`, expands the accordion, otherwise collapse it.\n       * Setting this prop enables control over the accordion.\n       */\n      expanded?: boolean;\n      /**\n       * Callback fired when the expand/collapse state is changed.\n       *\n       * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.\n       * @param {boolean} expanded The `expanded` state of the accordion.\n       */\n      onChange?: (event: React.SyntheticEvent, expanded: boolean) => void;\n      /**\n       * The system prop that allows defining system overrides as well as additional CSS styles.\n       */\n      sx?: SxProps<Theme>;\n      /**\n       * The component used for the transition.\n       * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n       * @deprecated Use `slots.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n       */\n      TransitionComponent?: React.JSXElementConstructor<\n        TransitionProps & { children?: React.ReactElement<any, any> }\n      >;\n      /**\n       * Props applied to the transition element.\n       * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n       * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).\n       */\n      TransitionProps?: TransitionProps;\n    } & AccordionSlotsAndSlotProps;\n    defaultComponent: RootComponent;\n  },\n  'onChange' | 'classes'\n>;\n\n/**\n *\n * Demos:\n *\n * - [Accordion](https://mui.com/material-ui/react-accordion/)\n *\n * API:\n *\n * - [Accordion API](https://mui.com/material-ui/api/accordion/)\n * - inherits [Paper API](https://mui.com/material-ui/api/paper/)\n */\ndeclare const Accordion: OverridableComponent<AccordionTypeMap>;\n\nexport type AccordionProps<\n  RootComponent extends React.ElementType = AccordionTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<AccordionTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport interface AccordionOwnerState extends AccordionProps {}\n\nexport default Accordion;\n","node_modules/@toolpad/studio-runtime/package.json":"{\n  \"name\": \"@toolpad/studio-runtime\",\n  \"version\": \"0.1.53\",\n  \"description\": \"Build MUI apps quickly\",\n  \"author\": \"MUI Toolpad team\",\n  \"homepage\": \"https://github.com/mui/mui-toolpad#readme\",\n  \"license\": \"MIT\",\n  \"module\": \"./dist/index.js\",\n  \"types\": \"./dist/index.d.ts\",\n  \"type\": \"module\",\n  \"exports\": {\n    \"./package.json\": \"./package.json\",\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"default\": \"./dist/index.js\"\n    },\n    \"./*\": {\n      \"types\": \"./dist/*.d.ts\",\n      \"default\": \"./dist/*.js\"\n    },\n    \"./server\": {\n      \"types\": \"./dist/server.d.ts\",\n      \"default\": \"./dist/server.js\"\n    }\n  },\n  \"files\": [\n    \"dist\",\n    \"public\",\n    \"server\",\n    \"browser\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/mui/mui-toolpad.git\"\n  },\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"dev\": \"tsup --watch\",\n    \"check-types\": \"tsup && tsc --noEmit\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/mui-toolpad/issues\"\n  },\n  \"dependencies\": {\n    \"@auth/core\": \"0.25.1\",\n    \"@mui/material\": \"5.15.14\",\n    \"@tanstack/react-query\": \"5.18.1\",\n    \"@toolpad/utils\": \"workspace:*\",\n    \"@types/json-schema\": \"7.0.15\",\n    \"@webcontainer/env\": \"1.1.0\",\n    \"cookie\": \"0.6.0\",\n    \"fractional-indexing\": \"3.2.0\",\n    \"invariant\": \"2.2.4\",\n    \"nanoid\": \"5.0.5\",\n    \"quickjs-emscripten\": \"0.27.0\",\n    \"react-error-boundary\": \"4.0.12\",\n    \"react-is\": \"18.2.0\"\n  },\n  \"devDependencies\": {\n    \"@types/cookie\": \"0.6.0\",\n    \"@types/express\": \"4.17.21\",\n    \"@types/invariant\": \"2.2.37\",\n    \"@types/react\": \"18.2.66\",\n    \"@types/react-is\": \"18.2.4\",\n    \"concurrently\": \"8.2.2\"\n  },\n  \"peerDependencies\": {\n    \"react\": \"^18.0.0\",\n    \"vm-browserify\": \"^1.1.2\"\n  },\n  \"peerDependenciesMeta\": {\n    \"vm-browserify\": {\n      \"optional\": true\n    }\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  }\n}\n","node_modules/@toolpad/studio-runtime/typings/@auth.d.ts":"export declare module '@auth/core/types' {\n  interface User {\n    roles: string[];\n  }\n}\nexport declare module '@auth/core/jwt' {\n  interface JWT {\n    roles: string[];\n  }\n}\n","node_modules/@toolpad/studio-runtime/public/serverModules.d.ts":"declare module '*.txt' {\n  const value: string;\n  export default value;\n}\n\ndeclare module '*.sql' {\n  const value: string;\n  export default value;\n}\n","node_modules/@toolpad/studio-runtime/dist/useUrlQueryState.d.ts":"import * as React from 'react';\nexport default function useUrlQueryState(param: string, defaultValue?: string): [string, React.Dispatch<React.SetStateAction<string>>];\n","node_modules/@toolpad/studio-runtime/dist/types.d.ts":"import type * as React from 'react';\nimport type { Branded } from '@toolpad/utils/types';\nimport type { SerializedError } from '@toolpad/utils/errors';\nimport type { JSONSchema7 } from 'json-schema';\nimport type { TOOLPAD_COMPONENT } from './constants';\nexport type NodeId = Branded<string, 'NodeId'>;\nexport interface NodeReference {\n    $ref: NodeId;\n}\nexport interface JsExpressionAttrValue {\n    $$jsExpression: string;\n}\nexport interface EnvAttrValue {\n    $$env: string;\n}\nexport interface SecretAttrValue<V> {\n    $$secret: V;\n}\nexport interface JsExpressionAction {\n    $$jsExpressionAction: string;\n}\nexport interface NavigationAction<P = any> {\n    $$navigationAction: {\n        page: string;\n        parameters?: BindableAttrValues<P>;\n    };\n}\nexport type BindableAction = JsExpressionAction | NavigationAction;\nexport type BindableAttrValue<V> = V | SecretAttrValue<V> | JsExpressionAttrValue | EnvAttrValue | BindableAction;\nexport type NestedBindableAttrs = BindableAttrValue<any> | BindableAttrValues<any> | [string, BindableAttrValue<any>][];\nexport type BindableAttrValues<P = Record<string, unknown>> = {\n    readonly [K in keyof P]?: BindableAttrValue<P[K]>;\n};\nexport type BindableAttrEntries = [string, BindableAttrValue<any>][];\nexport type PropBindableAttrValue<V> = V | JsExpressionAttrValue | EnvAttrValue;\nexport type SlotType = 'single' | 'multiple' | 'layout';\nexport interface ValueTypeBase {\n    /**\n     * Specifies the type of the value.\n     */\n    type?: 'string' | 'boolean' | 'number' | 'object' | 'array' | 'element' | 'template' | 'event';\n    /**\n     * A default value for the property.\n     */\n    default?: unknown;\n    /**\n     * A short explanatory text that'll be shown in the editor UI when this property is referenced.\n     * May contain Markdown.\n     */\n    helperText?: string;\n}\nexport interface AnyValueType extends ValueTypeBase {\n    type?: undefined;\n    default?: any;\n}\nexport interface StringValueType extends ValueTypeBase {\n    /**\n     * the property is a string.\n     */\n    type: 'string';\n    /**\n     * The different possible values for the property.\n     */\n    enum?: string[];\n    enumLabels?: Record<string, string>;\n    default?: string;\n}\nexport interface NumberValueType extends ValueTypeBase {\n    /**\n     * the property is a number.\n     */\n    type: 'number';\n    /**\n     * A minimum value for the property.\n     */\n    minimum?: number;\n    /**\n     * A maximum value for the property.\n     */\n    maximum?: number;\n    default?: number;\n}\nexport interface BooleanValueType extends ValueTypeBase {\n    /**\n     * the property is a boolean.\n     */\n    type: 'boolean';\n    default?: boolean;\n}\nexport interface ObjectValueType extends ValueTypeBase {\n    /**\n     * the property is an object.\n     */\n    type: 'object';\n    /**\n     * A JSON schema describing the object.\n     */\n    schema?: JSONSchema7;\n    default?: any;\n}\nexport interface ArrayValueType extends ValueTypeBase {\n    /**\n     * the property is an array.\n     */\n    type: 'array';\n    /**\n     * A JSON schema describing the array.\n     */\n    schema?: JSONSchema7;\n    default?: any[];\n}\nexport interface ElementValueType extends ValueTypeBase {\n    /**\n     * the property is a React.ReactNode.\n     */\n    type: 'element';\n}\nexport interface TemplateValueType extends ValueTypeBase {\n    /**\n     * the property is a render function.\n     */\n    type: 'template';\n}\nexport interface EventValueType extends ValueTypeBase {\n    /**\n     * the property is an event handler.\n     */\n    type: 'event';\n    /**\n     * Description of the handler's arguments.\n     */\n    arguments?: {\n        /**\n         * The argument's name.\n         */\n        name: string;\n        /**\n         * The argument's type.\n         */\n        tsType: string;\n    }[];\n}\nexport interface ArgControlSpec {\n    type: 'boolean' | 'number' | 'range' | 'object' | 'radio' | 'buttons' | 'select' | 'string' | 'color' | 'slot' | 'slots' | 'layoutSlot' | 'multiSelect' | 'date' | 'json' | 'markdown' | 'GridColumns' | 'SelectOptions' | 'ChartData' | 'HorizontalAlign' | 'VerticalAlign' | 'event' | 'NumberFormat' | 'ColorScale' | 'ToggleButtons' | 'RowIdFieldSelect' | 'DataProviderSelector';\n    bindable?: boolean;\n    hideLabel?: boolean;\n}\nexport type PrimitiveValueType = StringValueType | NumberValueType | BooleanValueType | ObjectValueType | ArrayValueType;\nexport type PropValueType = AnyValueType | PrimitiveValueType | ElementValueType | TemplateValueType | EventValueType;\nexport interface ParameterTypeLookup {\n    number: number;\n    string: string;\n    boolean: boolean;\n    array: unknown[];\n    object: Record<string, unknown>;\n    element: React.ReactNode;\n    template: () => React.ReactNode;\n    event: (...args: any[]) => void;\n}\nexport type JsonSchemaToTs<T extends JSONSchema7> = T extends {\n    type: 'object';\n    properties?: Record<string, JSONSchema7>;\n} ? {\n    [K in keyof T['properties']]?: JsonSchemaToTs<NonNullable<T['properties']>[K]>;\n} : T extends {\n    type: 'array';\n    items?: JSONSchema7;\n} ? T['items'] extends undefined ? unknown[] : JsonSchemaToTs<NonNullable<T['items']>>[] : T extends {\n    type: 'string';\n} ? string : T extends {\n    type: 'number' | 'integer';\n} ? number : T extends {\n    type: 'boolean';\n} ? boolean : T extends {\n    type: 'null';\n} ? null : unknown;\nexport type InferParameterType<T extends PropValueType> = T extends {\n    type: 'object' | 'array';\n    schema: JSONSchema7;\n} ? JsonSchemaToTs<T['schema']> : ParameterTypeLookup[NonNullable<T['type']>];\nexport type PropValueTypes<K extends string = string> = Partial<{\n    [key in K]?: PropValueType;\n}>;\nexport type ArgTypeDefinition<P extends object = {}, K extends keyof P = keyof P> = PropValueType & {\n    /**\n     * To be used instead of the property name for UI purposes in the editor.\n     */\n    label?: string;\n    /**\n     * The control to be used to manipulate values for this property from the editor.\n     */\n    control?: ArgControlSpec;\n    /**\n     * A description of the property, to be used to supply extra information to the user.\n     */\n    description?: string;\n    /**\n     * A default value for the property.\n     * @deprecated Use `default` instead.\n     */\n    defaultValue?: P[K];\n    /**\n     * The property that will supply the default value.\n     */\n    defaultValueProp?: keyof P & string;\n    /**\n     * The property that is used to control this property.\n     */\n    onChangeProp?: keyof P & string;\n    /**\n     * Provides a way to manipulate the value from the onChange event before it is assigned to state.\n     * @param {...any} params params for the function assigned to [onChangeProp]\n     * @returns {any} a value for the controlled prop\n     */\n    onChangeHandler?: (...params: any[]) => P[K];\n    /**\n     * For compound components, this property is used to control the visibility of this property based on the selected value of another property.\n     * If this property is not defined, the property will be visible at all times.\n     * @param {P} props all the prop bindings of the component\n     * @returns {boolean} a boolean value indicating whether the property should be visible or not\n     */\n    visible?: ((props: P) => boolean) | boolean;\n    /**\n     * Name of category that this property belongs to.\n     */\n    category?: string;\n    tsType?: string;\n};\nexport type ArgTypeDefinitions<P extends object = {}> = {\n    [K in keyof P & string]?: ArgTypeDefinition<P, K>;\n};\nexport interface ComponentDefinition<P extends object = {}> {\n    argTypes?: ArgTypeDefinitions<P>;\n}\nexport interface LiveBindingError {\n    message: string;\n    stack?: string;\n}\n/**\n * Represents the actual state of an evaluated binding.\n */\nexport type BindingEvaluationResult<T = unknown> = {\n    /**\n     * The actual value.\n     */\n    value?: T;\n    /**\n     * The evaluation of the value resulted in error.\n     */\n    error?: Error;\n    /**\n     * The parts that this value depends on are still loading.\n     */\n    loading?: boolean;\n};\nexport type LiveBinding = BindingEvaluationResult;\nexport interface ScopeMetaPropField {\n    tsType?: string;\n}\nexport type ScopeMetaField = {\n    description?: string;\n    deprecated?: boolean | string;\n    tsType?: string;\n} & ({\n    kind?: undefined;\n} | {\n    kind: 'element';\n    componentId: string;\n    props?: Record<string, ScopeMetaPropField>;\n} | {\n    kind: 'query' | 'action' | 'local';\n});\nexport type ScopeMeta = Partial<Record<string, ScopeMetaField>>;\nexport type RuntimeEvents = {\n    propUpdated: {\n        nodeId: string;\n        prop: string;\n        value: React.SetStateAction<unknown>;\n    };\n    editorNodeDataUpdated: {\n        nodeId: NodeId;\n        prop: string;\n        value: any;\n    };\n    pageStateUpdated: {\n        pageState: Record<string, unknown>;\n        globalScopeMeta: ScopeMeta;\n    };\n    pageBindingsUpdated: {\n        bindings: LiveBindings;\n    };\n    screenUpdate: {};\n    ready: {};\n    pageNavigationRequest: {\n        pageName: string;\n    };\n    vmUpdated: {\n        vm: ApplicationVm;\n    };\n};\nexport type RuntimeEvent = {\n    [K in keyof RuntimeEvents]: {\n        type: K;\n    } & RuntimeEvents[K];\n}[keyof RuntimeEvents];\nexport interface ComponentConfig<P extends object = Record<string, unknown>> {\n    /**\n     * A short explanatory text that'll be shown in the editor UI when this component is referenced.\n     * May contain Markdown.\n     */\n    helperText?: string;\n    /**\n     * Configures which properties result in propagating error state to `errorProp`.\n     */\n    errorPropSource?: (keyof P & string)[];\n    /**\n     * Designates a property as the error property. If Toolpad Studio detects an error\n     * on any of the inputs, it will forward it to this property.\n     */\n    errorProp?: keyof P & string;\n    /**\n     * Configures which properties result in propagating loading state to `loadingProp`.\n     */\n    loadingPropSource?: (keyof P & string)[];\n    /**\n     * Designates a property as the loading property. If Toolpad Studio detects any of the\n     * inputs is still loading it will set this property to `true`.\n     */\n    loadingProp?: keyof P & string;\n    /**\n     * Enables controlling the aligment of the component container box.\n     */\n    layoutDirection?: 'vertical' | 'horizontal' | 'both';\n    /**\n     * Initial height of the component container box.\n     */\n    defaultLayoutHeight?: number;\n    /**\n     * Minimum height that the component container box can be resized to.\n     */\n    minimumLayoutHeight?: number;\n    /**\n     * Describes the individual properties for this component.\n     */\n    argTypes?: ArgTypeDefinitions<P>;\n}\nexport type ToolpadComponent<P extends object = {}> = React.ComponentType<P> & {\n    [TOOLPAD_COMPONENT]: ComponentConfig<P>;\n};\nexport type ToolpadComponents = Partial<Record<string, ToolpadComponent<any>>>;\nexport type LiveBindings = Partial<Record<string, LiveBinding>>;\nexport interface RuntimeError {\n    message: string;\n    stack?: string;\n}\nexport type FlowDirection = 'row' | 'column' | 'row-reverse' | 'column-reverse';\nexport type ExecFetchResult<T = any> = {\n    data?: T;\n    error?: SerializedError;\n};\nexport type Serializable = string | number | boolean | null | undefined | Serializable[] | {\n    [key: string]: Serializable;\n} | ((...args: Serializable[]) => Serializable);\nexport interface JsRuntime {\n    getEnv(): Record<string, string | undefined>;\n    evaluateExpression(code: string, globalScope: Record<string, unknown>): BindingEvaluationResult;\n}\nexport type TemplateRenderer = (scopeKey: string, params: Record<string, unknown>) => React.ReactNode;\nexport interface RuntimeScope {\n    id: string;\n    parentScope?: RuntimeScope;\n    bindings: Record<string, BindingEvaluationResult<unknown>>;\n    values: Record<string, unknown>;\n    meta: ScopeMeta;\n}\nexport interface ApplicationVm {\n    scopes: {\n        [id in string]?: RuntimeScope;\n    };\n    bindingScopes: {\n        [id in string]?: string;\n    };\n}\nexport interface IndexPaginationModel {\n    start: number;\n    pageSize: number;\n}\nexport interface CursorPaginationModel {\n    cursor: string | null;\n    pageSize: number;\n}\nexport interface FilterModelItem {\n    field: string;\n    operator: string;\n    value: unknown;\n}\nexport type LogicOperator = 'and' | 'or';\nexport interface FilterModel {\n    items: FilterModelItem[];\n    logicOperator: LogicOperator;\n}\nexport type SortDirection = 'asc' | 'desc';\nexport interface SortItem {\n    field: string;\n    sort: SortDirection;\n}\nexport type SortModel = SortItem[];\nexport type PaginationMode = 'index' | 'cursor';\nexport type PaginationModel<M extends PaginationMode = PaginationMode> = M extends 'cursor' ? CursorPaginationModel : IndexPaginationModel;\nexport interface GetRecordsParams<R, P extends PaginationMode> {\n    paginationModel: PaginationModel<P>;\n    filterModel: FilterModel;\n    sortModel: SortModel;\n}\nexport interface GetRecordsResult<R, P extends PaginationMode> {\n    records: R[];\n    hasNextPage?: boolean;\n    totalCount?: number;\n    cursor?: P extends 'cursor' ? string | null : undefined;\n}\nexport interface ToolpadDataProviderBase<R extends Record<string, unknown> = {}, P extends PaginationMode = 'index'> {\n    paginationMode?: P;\n    getRecords: (params: GetRecordsParams<R, P>) => Promise<GetRecordsResult<R, P>>;\n    deleteRecord?: (id: string | number) => Promise<void>;\n    updateRecord?: (id: string | number, record: Partial<R>) => Promise<R | void>;\n    createRecord?: (record: R) => Promise<R>;\n}\nexport type NodeHashes = Record<NodeId, number | undefined>;\n","node_modules/@toolpad/studio-runtime/dist/serverRuntime.d.ts":"/// <reference types=\"node\" />\nimport { IncomingMessage, ServerResponse } from 'node:http';\ninterface ServerContextSessionUser {\n    name?: string | null;\n    email?: string | null;\n    avatar?: string | null;\n    roles?: string[];\n}\nexport interface ServerContext {\n    /**\n     * A dictionary mapping cookie name to cookie value.\n     */\n    cookies: Record<string, string>;\n    /**\n     * Use to set a cookie `name` with `value`.\n     */\n    setCookie: (name: string, value: string) => void;\n    /**\n     * Data about current authenticated session.\n     */\n    session: {\n        user: ServerContextSessionUser;\n    } | null;\n}\nexport declare function getServerContext(): ServerContext | undefined;\nexport declare function createServerContext(req: IncomingMessage, res: ServerResponse): Promise<ServerContext>;\nexport declare function withContext<R = void>(ctx: ServerContext, doWork: () => Promise<R>): Promise<R>;\nexport {};\n","node_modules/@toolpad/studio-runtime/dist/server.d.ts":"/// <reference path=\"../public/serverModules.d.ts\" />\nimport { TOOLPAD_FUNCTION } from './constants';\nimport { InferParameterType, PaginationMode, PrimitiveValueType, ToolpadDataProviderBase } from './types';\nimport { ServerContext } from './serverRuntime';\n/**\n * The runtime configuration for a Toolpad Studio function. Describes the parameters it accepts and their\n * corresponding types.\n */\nexport interface CreateFunctionConfig<C> {\n    parameters: {\n        [K in keyof C]: PrimitiveValueType;\n    };\n}\ntype CreateFunctionConfigParameters<C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>> = FunctionResolverParams<C>['parameters'];\nexport interface FunctionResolverParams<C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>> {\n    parameters: {\n        [K in keyof C['parameters']]: InferParameterType<C['parameters'][K]>;\n    };\n}\nexport interface FunctionResolver<C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>, R> {\n    (params: FunctionResolverParams<C>): Promise<R>;\n}\nexport interface ToolpadFunction<C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>, R> extends FunctionResolver<C, R> {\n    [TOOLPAD_FUNCTION]: C;\n}\n/**\n * @deprecated Directly export a function instead. This will be removed in a future release.\n * See: https://mui.com/toolpad/studio/reference/api/create-function/\n * Use this to define a function that will load the data for a Toolpad query.\n * You can define parameters for the function in the configuration object.\n * These parameters will be available in the Toolpad Studio editor when creating a query and can be bound to page state.\n * The return value of this function will appear as state on the page and can be bound to.\n * @param resolver The function that will load the data for the query.\n * @param config The configuration for the function.\n * override: Config\n */\nexport declare function createFunction<C extends CreateFunctionConfig<CreateFunctionConfigParameters<C>>, R>(resolver: FunctionResolver<C, R>, config?: C): FunctionResolver<C, R> & {\n    [TOOLPAD_FUNCTION]: C | {\n        parameters: {};\n    };\n};\n/**\n * @deprecated\n * createQuery is deprecated. Use createFunction instead.\n */\nexport declare const createQuery: typeof createFunction;\nexport type { ServerContext };\n/**\n * Interact with the server context of a Toolpad Studio application.\n * This function is only callable from within a Toolpad Studio function.\n *\n * Demos:\n *\n * - [Custom Functions](https://mui.com/toolpad/studio/concepts/custom-functions/#request-context/)\n *\n * API:\n *\n * - [`getContext` API](https://mui.com/toolpad/studio/reference/api/get-context)\n *\n */\nexport declare function getContext(): ServerContext;\nexport declare const TOOLPAD_DATA_PROVIDER_MARKER: unique symbol;\nexport interface ToolpadDataProvider<R extends Record<string, unknown>, P extends PaginationMode = 'index'> extends ToolpadDataProviderBase<R, P> {\n    [TOOLPAD_DATA_PROVIDER_MARKER]: true;\n}\n/**\n * Create a Toolpad Studio data provider. Data providers act as a bridge between Toolpad Studio and your data.\n *\n * Demos:\n *\n * - [Data providers](https://mui.com/toolpad/studio/concepts/data-providers/)\n *\n * API:\n *\n * - [`createDataProvider` API](https://mui.com/toolpad/studio/reference/api/create-data-provider/)\n *\n */\nexport declare function createDataProvider<R extends Record<string, unknown>, P extends PaginationMode = 'index'>(input: ToolpadDataProviderBase<R, P>): ToolpadDataProvider<R, P>;\n","node_modules/@toolpad/studio-runtime/dist/runtime.d.ts":"import * as React from 'react';\nimport { Emitter } from '@toolpad/utils/events';\nimport { RuntimeEvents, ToolpadComponents, ToolpadComponent, ArgTypeDefinition } from './types';\nimport type { RuntimeEvent, RuntimeError, PaginationMode, ToolpadDataProviderBase, NodeId } from './types';\nexport declare const ResetNodeErrorsKeyProvider: React.Provider<number>;\nexport type Components = ToolpadComponents;\nexport declare const ComponentsContext: React.Context<Partial<Record<string, ToolpadComponent<any>>> | null>;\ndeclare global {\n    interface Window {\n        __TOOLPAD_RUNTIME_EVENT__?: RuntimeEvent[] | ((event: RuntimeEvent) => void);\n    }\n}\nexport declare const NodeRuntimeContext: React.Context<{\n    nodeId: NodeId | null;\n    nodeName: string | null;\n}>;\nexport declare const CanvasEventsContext: React.Context<Emitter<RuntimeEvents> | null>;\nexport interface NodeErrorProps {\n    error: RuntimeError;\n}\nexport interface NodeRuntimeWrapperProps {\n    children: React.ReactElement;\n    nodeId: NodeId;\n    nodeName: string;\n    NodeError: React.ComponentType<NodeErrorProps>;\n}\nexport declare function NodeRuntimeWrapper({ nodeId, nodeName, children, NodeError, }: NodeRuntimeWrapperProps): React.JSX.Element;\nexport interface NodeRuntime<P> {\n    nodeId: string | null;\n    nodeName: string | null;\n    updateAppDomConstProp: <K extends keyof P & string>(key: K, value: React.SetStateAction<P[K]>) => void;\n    updateEditorNodeData: (key: string, value: any) => void;\n}\nexport declare function useNode<P = {}>(): NodeRuntime<P> | null;\nexport interface PlaceholderProps {\n    prop: string;\n    children?: React.ReactNode;\n}\nexport declare function Placeholder({ prop, children }: PlaceholderProps): React.JSX.Element;\nexport interface SlotsProps {\n    prop: string;\n    children?: React.ReactNode;\n    hasLayout?: boolean;\n}\nexport declare function Slots({ prop, children, hasLayout }: SlotsProps): React.JSX.Element;\nexport declare function isToolpadComponent(maybeComponent: unknown): maybeComponent is ToolpadComponent<any>;\nexport declare function getArgTypeDefaultValue<P extends object, K extends keyof P>(argType: ArgTypeDefinition<P, K>): P[K] | undefined;\nexport declare function createToolpadComponentThatThrows(error: Error): ToolpadComponent<object>;\ndeclare const useComponents: () => Partial<Record<string, ToolpadComponent<any>>>, ComponentsContextProvider: React.ComponentType<React.ProviderProps<Partial<Record<string, ToolpadComponent<any>>>>>;\nexport { useComponents, ComponentsContextProvider };\nexport declare function useComponent(id: string): ToolpadComponent<any> | ToolpadComponent<object>;\nexport interface ToolpadDataProviderIntrospection {\n    paginationMode: PaginationMode;\n    hasDeleteRecord: boolean;\n    hasUpdateRecord: boolean;\n    hasCreateRecord: boolean;\n}\nexport interface UseDataProviderHookResult<R extends Record<string, unknown>, P extends PaginationMode> {\n    isLoading: boolean;\n    error?: unknown;\n    dataProvider: ToolpadDataProviderBase<R, P> | null;\n}\nexport interface UseDataProviderHook {\n    <R extends Record<string, unknown>, P extends PaginationMode>(id: string | null): UseDataProviderHookResult<R, P>;\n}\nexport declare const UseDataProviderContext: React.Context<UseDataProviderHook | null>;\n","node_modules/@toolpad/studio-runtime/dist/numberFormat.d.ts":"import * as React from 'react';\nimport type { JSONSchema7 } from 'json-schema';\nimport { SxProps } from '@mui/material';\nexport declare const CURRENCY_CODES_LIST_HELP_URL = \"https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes\";\nexport type NumberFormat = {\n    kind: 'preset';\n    preset: string;\n} | {\n    kind: 'currency';\n    currency?: string;\n} | {\n    kind: 'custom';\n    custom: Intl.NumberFormatOptions;\n};\nexport declare const NUMBER_FORMAT_SCHEMA: JSONSchema7;\nexport interface NumberFormatPreset {\n    label?: string;\n    options?: Intl.NumberFormatOptions;\n}\nexport declare const NUMBER_FORMAT_PRESETS: Map<string, NumberFormatPreset>;\ninterface NumberFormatterParams {\n    value: unknown;\n}\nexport interface NumberFormatter {\n    (params: NumberFormatterParams): string;\n}\nexport type PrettyNumberFormat = React.ComponentType<NumberFormatterParams>;\nexport declare function createFormat(numberFormat?: NumberFormat): Intl.NumberFormat;\nexport interface FormattedNumberProps {\n    format?: Intl.NumberFormat;\n    children: number | string;\n}\nexport declare function FormattedNumber({ children, format }: FormattedNumberProps): React.JSX.Element;\nexport interface NumberFormatEditorProps {\n    value?: NumberFormat;\n    onChange: (newValue?: NumberFormat) => void;\n    disabled?: boolean;\n    sx?: SxProps;\n    label?: string;\n}\nexport declare function NumberFormatEditor({ label, disabled, value, onChange, sx, }: NumberFormatEditorProps): React.JSX.Element;\nexport {};\n","node_modules/@toolpad/studio-runtime/dist/jsServerRuntime.d.ts":"import { JsRuntime } from './types';\nexport declare function createServerJsRuntime(env?: Record<string, string | undefined>): JsRuntime;\nexport declare function useServerJsRuntime(): JsRuntime;\n","node_modules/@toolpad/studio-runtime/dist/jsRuntime.d.ts":"import { BindableAttrValue, BindingEvaluationResult, JsRuntime } from './types';\nexport declare const TOOLPAD_LOADING_MARKER = \"__TOOLPAD_LOADING_MARKER__\";\nexport declare function evaluateBindable<V>(ctx: JsRuntime, bindable: BindableAttrValue<V> | null, globalScope: Record<string, unknown>): BindingEvaluationResult;\n","node_modules/@toolpad/studio-runtime/dist/jsBrowserRuntime.d.ts":"import { JsRuntime } from './types';\nexport declare function getBrowserRuntime(): JsRuntime;\nexport declare function useBrowserJsRuntime(): JsRuntime;\n","node_modules/@toolpad/studio-runtime/dist/index.d.ts":"export type { PlaceholderProps, SlotsProps, NodeRuntime, NodeErrorProps, Components, } from './runtime';\nexport { Placeholder, Slots, useNode, ComponentsContext, isToolpadComponent, getArgTypeDefaultValue, createToolpadComponentThatThrows, useComponents, ComponentsContextProvider, useComponent, UseDataProviderContext, } from './runtime';\nexport type FlowDirection = 'row' | 'column' | 'row-reverse' | 'column-reverse';\nexport { default as useUrlQueryState } from './useUrlQueryState';\nexport * from './constants';\nexport * from './browser';\nexport * from './types';\n","node_modules/@toolpad/studio-runtime/dist/dateFormat.d.ts":"import { SxProps } from '@mui/material';\nimport * as React from 'react';\nexport interface DateFormatPreset {\n    label?: string;\n}\nexport type DateStyle = Intl.DateTimeFormatOptions['dateStyle'];\nexport type TimeStyle = Intl.DateTimeFormatOptions['timeStyle'];\nexport declare const DATE_STYLES: Map<\"full\" | \"long\" | \"medium\" | \"short\" | undefined, DateFormatPreset>;\nexport declare const TIME_STYLES: Map<\"full\" | \"long\" | \"medium\" | \"short\" | undefined, DateFormatPreset>;\nexport interface DateFormat {\n    kind: 'shorthand';\n    dateStyle?: DateStyle;\n    timeStyle?: TimeStyle;\n}\nexport declare function createFormat(dateFormat?: DateFormat): Intl.DateTimeFormat;\nexport interface FormattedDateProps {\n    format?: Intl.DateTimeFormat;\n    children: Date | number;\n}\nexport declare function FormattedDate({ children, format }: FormattedDateProps): React.JSX.Element;\nexport interface DateFormatEditorProps {\n    value?: DateFormat;\n    onChange: (newValue?: DateFormat) => void;\n    disabled?: boolean;\n    sx?: SxProps;\n    label?: string;\n    disableTimeFormat?: boolean;\n}\nexport declare function DateFormatEditor({ label, disabled, value, onChange, sx, disableTimeFormat, }: DateFormatEditorProps): React.JSX.Element;\n","node_modules/@toolpad/studio-runtime/dist/constants.d.ts":"export declare const TOOLPAD_COMPONENT: unique symbol;\nexport declare const TOOLPAD_FUNCTION: unique symbol;\nexport declare const TOOLPAD_COMPONENT_MODE_PROPERTY = \"ToolpadComponentMode\";\nexport declare const IMAGE_EXTENSIONS: string[];\n","node_modules/@toolpad/studio-runtime/dist/componentsContext.d.ts":"import * as React from 'react';\ndeclare const useComponents: () => Partial<Record<string, import(\"./types\").ToolpadComponent<any>>>, ComponentsContextProvider: React.ComponentType<React.ProviderProps<Partial<Record<string, import(\"./types\").ToolpadComponent<any>>>>>;\nexport { useComponents, ComponentsContextProvider };\nexport declare function useComponent(id: string): import(\"./types\").ToolpadComponent<any> | import(\"./types\").ToolpadComponent<object>;\n","node_modules/@toolpad/studio-runtime/dist/browser.d.ts":"/// <reference types=\"react\" />\nimport { ComponentConfig, ToolpadComponent } from './types';\n/**\n * Marks the wrapped React component as a Toolpad Studio compatible component.\n * This makes it available in the Toolpad Studio editor.\n * Optionally, you can pass a configuration object to specify the component's argument types.\n * Argument types define the properties that can be set in the Toolpad Studio editor for this component.\n * Additionally, you'll be able to bind page state to these properties.\n * @param Component The React component to wrap.\n * @param config The configuration for the component.\n */\nexport declare function createComponent<P extends object>(Component: React.ComponentType<P>, config?: ComponentConfig<P>): ToolpadComponent<P>;\n","node_modules/@toolpad/studio-runtime/dist/auth.d.ts":"import type express from 'express';\nimport { JWT } from '@auth/core/jwt';\nexport declare function getUserToken(req: express.Request): Promise<JWT | null>;\n","node_modules/@toolpad/studio-runtime/dist/appDom.d.ts":"import type { BoxProps, ThemeOptions as MuiThemeOptions } from '@mui/material';\nimport { Maybe } from '@toolpad/utils/types';\nimport type { NodeId, NodeReference, BindableAttrValue, BindableAttrValues, SecretAttrValue, BindableAttrEntries } from './types';\nexport declare const CURRENT_APPDOM_VERSION = 7;\nexport declare const RESERVED_NODE_PROPERTIES: readonly [\"id\", \"type\", \"parentId\", \"parentProp\", \"parentIndex\"];\nexport type ReservedNodeProperty = (typeof RESERVED_NODE_PROPERTIES)[number];\nexport declare function createFractionalIndex(index1: string | null, index2: string | null): string;\nexport declare function compareFractionalIndex(index1: string, index2: string): number;\ntype ToolpadPlan = 'free' | 'pro' | undefined;\nexport type AuthProvider = 'github' | 'google' | 'azure-ad' | 'credentials';\nexport interface AuthProviderConfig {\n    readonly provider: AuthProvider;\n    readonly roles?: {\n        source: string[];\n        target: string;\n    }[];\n}\nexport interface ConnectionStatus {\n    timestamp: number;\n    error?: string;\n}\ntype AppDomNodeType = 'app' | 'connection' | 'theme' | 'page' | 'element' | 'query' | 'mutation';\nexport interface AppDomNodeBase {\n    readonly id: NodeId;\n    readonly type: AppDomNodeType;\n    readonly name: string;\n    readonly parentId: NodeId | null;\n    readonly parentProp: string | null;\n    readonly parentIndex: string | null;\n    readonly attributes: {};\n}\nexport interface AppNode extends AppDomNodeBase {\n    readonly type: 'app';\n    readonly parentId: null;\n    readonly attributes: {\n        readonly plan?: ToolpadPlan;\n        readonly authentication?: {\n            readonly providers?: AuthProviderConfig[];\n            readonly restrictedDomains?: string[];\n        };\n        readonly authorization?: {\n            readonly roles?: {\n                readonly name: string;\n                readonly description?: string;\n            }[];\n        };\n    };\n}\nexport interface ThemeNode extends AppDomNodeBase {\n    readonly type: 'theme';\n    readonly theme?: MuiThemeOptions;\n}\nexport interface ConnectionNode<P = unknown> extends AppDomNodeBase {\n    readonly type: 'connection';\n    readonly attributes: {\n        readonly dataSource: string;\n        readonly params: SecretAttrValue<P | null>;\n        readonly status: ConnectionStatus | null;\n    };\n}\nexport type PageDisplayMode = 'standalone' | 'shell';\nexport interface PageNode extends AppDomNodeBase {\n    readonly type: 'page';\n    readonly attributes: {\n        readonly title?: string;\n        readonly alias?: string[];\n        readonly parameters?: [string, string][];\n        readonly module?: string;\n        readonly display?: PageDisplayMode;\n        readonly codeFile?: boolean;\n        readonly displayName?: string;\n        readonly authorization?: {\n            readonly allowAll?: boolean;\n            readonly allowedRoles?: string[];\n        };\n    };\n}\nexport interface ElementNode<P = any> extends AppDomNodeBase {\n    readonly type: 'element';\n    readonly attributes: {\n        readonly component: string;\n    };\n    readonly props?: BindableAttrValues<P>;\n    readonly layout?: {\n        readonly horizontalAlign?: BoxProps['justifyContent'];\n        readonly verticalAlign?: BoxProps['alignItems'];\n        readonly columnSize?: number;\n        readonly height?: number;\n    };\n}\nexport type FetchMode = 'query' | 'mutation';\n/**\n * A DOM query is defined primarily by a server defined part \"attributes.query\"\n * and a clientside defined part \"params\". \"params\" are constructed in the runtime\n * from bound expressions. The resolved object will be sent to the server and combined\n * with the query will be used to collect the data from the backend.\n */\nexport interface QueryNode<Q = any> extends AppDomNodeBase {\n    readonly type: 'query';\n    readonly params?: BindableAttrEntries;\n    readonly attributes: {\n        readonly mode?: FetchMode;\n        readonly dataSource?: string;\n        readonly connectionId: NodeReference | null;\n        readonly query: Q;\n        readonly transform?: string;\n        readonly transformEnabled?: boolean;\n        /** @deprecated Not necessary to be user-facing, we will expose staleTime instead if necessary */\n        readonly refetchOnWindowFocus?: boolean;\n        /** @deprecated Not necessary to be user-facing, we will expose staleTime instead if necessary */\n        readonly refetchOnReconnect?: boolean;\n        readonly refetchInterval?: number;\n        readonly cacheTime?: number;\n        readonly enabled?: BindableAttrValue<boolean>;\n    };\n}\n/**\n * @deprecated QueryNode can act as a mutation by switching the `mode` attribute to 'mutation'\n */\nexport interface MutationNode<Q = any> extends AppDomNodeBase {\n    readonly type: 'mutation';\n    readonly params?: BindableAttrValues;\n    readonly attributes: {\n        readonly dataSource?: string;\n        readonly connectionId: NodeReference | null;\n        readonly query: Q;\n    };\n}\ntype AppDomNodeOfType<K extends AppDomNodeType> = {\n    app: AppNode;\n    connection: ConnectionNode;\n    theme: ThemeNode;\n    page: PageNode;\n    element: ElementNode;\n    query: QueryNode;\n    mutation: MutationNode;\n}[K];\ntype AllowedChildren = {\n    app: {\n        pages: 'page';\n        connections: 'connection';\n        themes: 'theme';\n    };\n    theme: {};\n    connection: {};\n    page: {\n        children: 'element';\n        queries: 'query';\n        mutations: 'mutation';\n    };\n    element: {\n        [prop: string]: 'element';\n    };\n    query: {};\n    mutation: {};\n};\nexport type AppDomNode = AppDomNodeOfType<AppDomNodeType>;\ntype TypeOf<N extends AppDomNode> = N['type'];\ntype AllowedChildTypesOfType<T extends AppDomNodeType> = AllowedChildren[T];\ntype AllowedChildTypesOf<N extends AppDomNode> = AllowedChildTypesOfType<TypeOf<N>>;\nexport type ChildNodesOf<N extends AppDomNode> = {\n    [K in keyof AllowedChildTypesOf<N>]: AllowedChildTypesOf<N>[K] extends AppDomNodeType ? AppDomNodeOfType<AllowedChildTypesOf<N>[K]>[] : never;\n};\ntype CombinedChildrenOfType<T extends AppDomNodeType> = AllowedChildren[T][keyof AllowedChildren[T]];\ntype CombinedAllowedChildren = {\n    [K in AppDomNodeType]: CombinedChildrenOfType<K>;\n};\ntype ParentTypeOfType<T extends AppDomNodeType> = {\n    [K in AppDomNodeType]: T extends CombinedAllowedChildren[K] ? K : never;\n}[AppDomNodeType];\nexport type ParentOf<N extends AppDomNode> = AppDomNodeOfType<ParentTypeOfType<TypeOf<N>>> | null;\nexport type ParentProp<Parent extends AppDomNode> = keyof AllowedChildTypesOfType<TypeOf<Parent>>;\nexport type ParentPropOf<Child extends AppDomNode, Parent extends AppDomNode> = {\n    [K in keyof AllowedChildren[TypeOf<Parent>]]: TypeOf<Child> extends AllowedChildren[TypeOf<Parent>][K] ? K & string : never;\n}[keyof AllowedChildren[TypeOf<Parent>]];\nexport type AppDomNodes = Record<NodeId, AppDomNode>;\nexport interface AppDom {\n    nodes: AppDomNodes;\n    root: NodeId;\n    version?: number;\n}\nexport declare function createId(): NodeId;\nexport declare function createSecret<V>(value: V): SecretAttrValue<V>;\nexport declare function getMaybeNode<T extends AppDomNodeType>(dom: AppDom, nodeId: NodeId, type: T): AppDomNodeOfType<T> | null;\nexport declare function getMaybeNode<T extends AppDomNodeType>(dom: AppDom, nodeId: NodeId, type?: T): AppDomNode | null;\nexport declare function getNode<T extends AppDomNodeType>(dom: AppDom, nodeId: NodeId, type: T): AppDomNodeOfType<T>;\nexport declare function getNode<T extends AppDomNodeType>(dom: AppDom, nodeId: NodeId, type?: T): AppDomNode;\nexport declare function isApp(node: AppDomNode): node is AppNode;\nexport declare function assertIsApp(node: AppDomNode): asserts node is AppNode;\nexport declare function isPage(node: AppDomNode): node is PageNode;\nexport declare function assertIsPage(node: AppDomNode): asserts node is PageNode;\nexport declare function isConnection<P>(node: AppDomNode): node is ConnectionNode<P>;\nexport declare function assertIsConnection<P>(node: AppDomNode): asserts node is ConnectionNode<P>;\nexport declare function isTheme(node: AppDomNode): node is ThemeNode;\nexport declare function assertIsTheme(node: AppDomNode): asserts node is ThemeNode;\nexport declare function isElement<P>(node: AppDomNode): node is ElementNode<P>;\nexport declare function assertIsElement<P>(node: AppDomNode): asserts node is ElementNode<P>;\nexport declare function isQuery<P>(node: AppDomNode): node is QueryNode<P>;\nexport declare function assertIsQuery<P>(node: AppDomNode): asserts node is QueryNode<P>;\nexport declare function isMutation<P>(node: AppDomNode): node is MutationNode<P>;\nexport declare function assertIsMutation<P>(node: AppDomNode): asserts node is MutationNode<P>;\nexport declare function getRoot(dom: AppDom): AppDomNode;\nexport declare function getApp(dom: AppDom): AppNode;\nexport type NodeChildren<N extends AppDomNode = any> = ChildNodesOf<N>;\nexport declare function getChildNodes<N extends AppDomNode>(dom: AppDom, parent: N): NodeChildren<N>;\nexport declare function getParent<N extends AppDomNode>(dom: AppDom, child: N): ParentOf<N>;\ntype AppDomNodeInitOfType<T extends AppDomNodeType> = Omit<AppDomNodeOfType<T>, ReservedNodeProperty | 'name'> & {\n    name?: string;\n};\nexport declare function validateNodeName(name: string, disallowedNames: Set<string>, kind: string): string | null;\nexport declare function createNode<T extends AppDomNodeType>(dom: AppDom, type: T, init: AppDomNodeInitOfType<T>): AppDomNodeOfType<T>;\nexport declare function createFragment<T extends AppDomNodeType>(type: T, init: AppDomNodeInitOfType<T> & {\n    name: string;\n}): AppDom;\nexport declare function createDom(): AppDom;\n/**\n * Creates a new DOM node representing a React Element\n */\nexport declare function createElement<P>(dom: AppDom, component: string, props?: Partial<BindableAttrValues<P>>, layout?: Partial<BindableAttrValues<P>>, name?: string): ElementNode;\n/**\n * Get all descendants of a `node`, flattens childNodes objects into one single array\n */\nexport declare function getDescendants(dom: AppDom, node: AppDomNode): readonly AppDomNode[];\n/**\n * Get all siblings of a `node`\n */\nexport declare function getSiblings(dom: AppDom, node: AppDomNode): readonly AppDomNode[];\nexport declare function getAncestors(dom: AppDom, node: AppDomNode): readonly AppDomNode[];\n/**\n * Get all the ancestors of the `node` up until the first PageNode node is encountered\n */\nexport declare function getPageAncestors(dom: AppDom, node: AppDomNode): readonly (ElementNode | PageNode)[];\n/**\n * Get the first PageNode node up in the DOM tree starting from `node`\n */\nexport declare function getPageAncestor(dom: AppDom, node: AppDomNode): PageNode | null;\n/**\n * Returns all nodes with a given component type\n */\nexport declare function getComponentTypeNodes(dom: AppDom, componentId: string): readonly AppDomNode[];\n/**\n * Returns the set of names for which the given node must have a different name\n */\nexport declare function getExistingNamesForNode(dom: AppDom, node: AppDomNode): Set<string>;\nexport declare function getExistingNamesForChildren<Parent extends AppDomNode>(dom: AppDom, parent: Parent, parentProp?: ParentProp<Parent>): Set<string>;\nexport declare function proposeName(candidate: string, disallowedNames?: Set<string>): string;\nexport declare function setNodeName(dom: AppDom, node: AppDomNode, name: string): AppDom;\nexport type PropNamespaces<N extends AppDomNode> = {\n    [K in keyof N]: N[K] extends BindableAttrValues<any> | undefined ? K : never;\n}[keyof N & string];\nexport type BindableProps<T> = {\n    [K in keyof T]: T[K] extends BindableAttrValue<any> ? K : never;\n}[keyof T & string];\nexport declare function setNodeProp<Node extends AppDomNode, Prop extends BindableProps<Node>>(dom: AppDom, node: Node, prop: Prop, value: Node[Prop] | null): AppDom;\nexport declare function setNamespacedProp<Node extends AppDomNode, Namespace extends PropNamespaces<Node>, Prop extends keyof Node[Namespace] & string>(node: Node, namespace: Namespace, prop: Prop, value: Node[Namespace][Prop] | null): Node;\nexport declare function setQueryProp<Q, K extends keyof Q>(node: QueryNode<Q>, prop: K, value: Q[K]): QueryNode<Q>;\nexport declare function setNodeNamespacedProp<Node extends AppDomNode, Namespace extends PropNamespaces<Node>, Prop extends keyof NonNullable<Node[Namespace]> & string>(dom: AppDom, node: Node, namespace: Namespace, prop: Prop, value: NonNullable<Node[Namespace]>[Prop]): AppDom;\nexport declare function addNode<Parent extends AppDomNode, Child extends AppDomNode>(dom: AppDom, newNode: Child, parent: Parent, parentProp: ParentPropOf<Child, Parent>, parentIndex?: string): AppDom;\nexport declare function moveNode<Parent extends AppDomNode, Child extends AppDomNode>(dom: AppDom, node: Child, parent: Parent, parentProp: ParentPropOf<Child, Parent>, parentIndex?: string): AppDom;\nexport declare function spreadNode<Child extends AppDomNode>(dom: AppDom, node: Child): AppDom;\nexport declare function nodeExists(dom: AppDom, nodeId: NodeId): boolean;\nexport declare function saveNode(dom: AppDom, node: AppDomNode): AppDom;\nexport declare function removeNode(dom: AppDom, nodeId: NodeId): AppDom;\nexport declare function removeMaybeNode(dom: AppDom, nodeId: NodeId): AppDom;\nexport declare function fromConstPropValue(prop: undefined): undefined;\nexport declare function fromConstPropValue<T>(prop: BindableAttrValue<T>): T;\nexport declare function fromConstPropValue<T>(prop?: BindableAttrValue<T | undefined>): T | undefined;\nexport declare function fromConstPropValues<P>(props: BindableAttrValues<P>): Partial<P>;\nexport declare function getNodeFirstChild(dom: AppDom, node: ElementNode | PageNode, parentProp: string): ElementNode<any> | null;\nexport declare function getNodeLastChild(dom: AppDom, node: ElementNode | PageNode, parentProp: string): ElementNode<any> | null;\nexport declare function getSiblingBeforeNode(dom: AppDom, node: ElementNode | PageNode, parentProp: string): ElementNode<any> | null;\nexport declare function getSiblingAfterNode(dom: AppDom, node: ElementNode | PageNode, parentProp: string): ElementNode<any> | null;\nexport declare function getNewFirstParentIndexInNode(dom: AppDom, node: ElementNode | PageNode, parentProp: string): string;\nexport declare function getNewLastParentIndexInNode(dom: AppDom, node: ElementNode | PageNode, parentProp: string): string;\nexport declare function getNewParentIndexBeforeNode(dom: AppDom, node: ElementNode | PageNode, parentProp: string): string;\nexport declare function getNewParentIndexAfterNode(dom: AppDom, node: ElementNode | PageNode, parentProp: string): string;\nexport declare function addFragment(dom: AppDom, fragment: AppDom, parentId: NodeId, parentProp: string, parentIndex?: string | undefined): AppDom;\n/**\n * Make a copy of a subtree (a fragment) of the dom. The structure of a fragment is\n * the same as a dom where the root is the node we create the fragment for\n */\nexport declare function cloneFragment(dom: AppDom, nodeId: NodeId): AppDom;\nexport declare function duplicateNode(dom: AppDom, node: AppDomNode, parent?: AppDomNode | null, parentProp?: string | null): AppDom;\ndeclare const RENDERTREE_NODES: readonly [\"app\", \"page\", \"element\", \"query\", \"mutation\", \"theme\"];\nexport type RenderTreeNodeType = (typeof RENDERTREE_NODES)[number];\nexport type RenderTreeNode = {\n    [K in RenderTreeNodeType]: AppDomNodeOfType<K>;\n}[RenderTreeNodeType];\nexport type RenderTreeNodes = Record<NodeId, RenderTreeNode>;\nexport interface RenderTree {\n    root: NodeId;\n    nodes: RenderTreeNodes;\n    version?: number;\n}\n/**\n * We need to make sure no secrets end up in the frontend html, so let's only send the\n * nodes that we need to build frontend, and that we know don't contain secrets.\n * TODO: Would it make sense to create a separate datastructure that represents the render tree?\n */\nexport declare function createRenderTree(dom: AppDom): RenderTree;\nexport declare function ref(nodeId: NodeId): NodeReference;\nexport declare function ref(nodeId: null | undefined): null;\nexport declare function ref(nodeId: Maybe<NodeId>): NodeReference | null;\nexport declare function deref(nodeRef: NodeReference): NodeId;\nexport declare function deref(nodeRef: null | undefined): null;\nexport declare function deref(nodeRef: Maybe<NodeReference>): NodeId | null;\nexport declare function createDefaultDom(): AppDom;\nexport declare function getPageByName(dom: AppDom, name: string): PageNode | null;\nexport declare function getQueryByName(dom: AppDom, page: PageNode, name: string): QueryNode | null;\n/**\n * Represents the changes between two doms in terms of added/deleted nodes.\n */\nexport interface DomDiff {\n    set: AppDomNode[];\n    unset: NodeId[];\n}\n/**\n * Compare two doms and return a diff of the changes.\n */\nexport declare function createDiff(from: AppDom, to: AppDom): DomDiff;\n/**\n * Apply a diff to a dom and return the new dom.\n */\nexport declare function applyDiff(dom: AppDom, diff: DomDiff): AppDom;\nexport declare function getPageDisplayName(node: PageNode): string;\nexport declare function getPageTitle(node: PageNode): string;\nexport declare function isCodePage(node: PageNode): boolean;\nexport declare function getPlan(dom: AppDom): ToolpadPlan;\nexport declare function getPageForAlias(dom: AppDom, alias: string): string | null;\nexport {};\n","node_modules/@mui/x-date-pickers/package.json":"{\n  \"name\": \"@mui/x-date-pickers\",\n  \"version\": \"6.19.8\",\n  \"description\": \"The community edition of the date picker components (MUI X).\",\n  \"author\": \"MUI Team\",\n  \"main\": \"./node/index.js\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/mui-x/issues\"\n  },\n  \"homepage\": \"https://mui.com/x/react-date-pickers/\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mui\"\n  },\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"material-ui\",\n    \"material design\",\n    \"datepicker\",\n    \"timepicker\",\n    \"datetimepicker\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/mui-x.git\",\n    \"directory\": \"packages/x-date-pickers\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.2\",\n    \"@mui/base\": \"^5.0.0-beta.22\",\n    \"@mui/utils\": \"^5.14.16\",\n    \"@types/react-transition-group\": \"^4.4.8\",\n    \"clsx\": \"^2.0.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"react-transition-group\": \"^4.4.5\"\n  },\n  \"peerDependencies\": {\n    \"@emotion/react\": \"^11.9.0\",\n    \"@emotion/styled\": \"^11.8.1\",\n    \"@mui/material\": \"^5.8.6\",\n    \"@mui/system\": \"^5.8.0\",\n    \"date-fns\": \"^2.25.0 || ^3.2.0\",\n    \"date-fns-jalali\": \"^2.13.0-0\",\n    \"dayjs\": \"^1.10.7\",\n    \"luxon\": \"^3.0.2\",\n    \"moment\": \"^2.29.4\",\n    \"moment-hijri\": \"^2.1.2\",\n    \"moment-jalaali\": \"^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0\",\n    \"react\": \"^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@emotion/react\": {\n      \"optional\": true\n    },\n    \"@emotion/styled\": {\n      \"optional\": true\n    },\n    \"date-fns\": {\n      \"optional\": true\n    },\n    \"date-fns-jalali\": {\n      \"optional\": true\n    },\n    \"dayjs\": {\n      \"optional\": true\n    },\n    \"luxon\": {\n      \"optional\": true\n    },\n    \"moment\": {\n      \"optional\": true\n    },\n    \"moment-hijri\": {\n      \"optional\": true\n    },\n    \"moment-jalaali\": {\n      \"optional\": true\n    }\n  },\n  \"setupFiles\": [\n    \"<rootDir>/src/setupTests.js\"\n  ],\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"private\": false,\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/x-date-pickers/index.d.ts":"export * from './TimeClock';\nexport * from './DigitalClock';\nexport * from './MultiSectionDigitalClock';\nexport * from './LocalizationProvider';\nexport * from './PickersDay';\nexport * from './locales';\nexport * from './DateField';\nexport * from './TimeField';\nexport * from './DateTimeField';\nexport * from './DateCalendar';\nexport * from './MonthCalendar';\nexport * from './YearCalendar';\nexport * from './DayCalendarSkeleton';\nexport * from './DatePicker';\nexport * from './DesktopDatePicker';\nexport * from './MobileDatePicker';\nexport * from './StaticDatePicker';\nexport * from './TimePicker';\nexport * from './DesktopTimePicker';\nexport * from './MobileTimePicker';\nexport * from './StaticTimePicker';\nexport * from './DateTimePicker';\nexport * from './DesktopDateTimePicker';\nexport * from './MobileDateTimePicker';\nexport * from './StaticDateTimePicker';\nexport * from './dateViewRenderers';\nexport * from './timeViewRenderers';\nexport * from './PickersLayout';\nexport * from './PickersActionBar';\nexport * from './PickersShortcuts';\nexport { DEFAULT_DESKTOP_MODE_MEDIA_QUERY } from './internals/utils/utils';\nexport * from './models';\nexport * from './icons';\nexport * from './hooks';\n","node_modules/@mui/x-date-pickers/timeViewRenderers/timeViewRenderers.d.ts":"import * as React from 'react';\nimport { TimeClockProps } from '../TimeClock';\nimport { TimeView } from '../models';\nimport { DigitalClockProps } from '../DigitalClock';\nimport { BaseClockProps } from '../internals/models/props/clock';\nimport { MultiSectionDigitalClockProps } from '../MultiSectionDigitalClock';\nimport { TimeViewWithMeridiem } from '../internals/models';\nimport type { TimePickerProps } from '../TimePicker/TimePicker.types';\nexport type TimeViewRendererProps<TView extends TimeViewWithMeridiem, TComponentProps extends BaseClockProps<any, any>> = Omit<TComponentProps, 'views' | 'openTo' | 'view' | 'onViewChange'> & {\n    view: TView;\n    onViewChange?: (view: TView) => void;\n    views: readonly TView[];\n};\nexport declare const renderTimeViewClock: <TDate extends unknown>({ view, onViewChange, focusedView, onFocusedViewChange, views, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, shouldDisableClock, minutesStep, ampm, ampmInClock, components, componentsProps, slots, slotProps, readOnly, disabled, sx, autoFocus, showViewSwitcher, disableIgnoringDatePartForTimeValidation, timezone, }: TimeViewRendererProps<TimeView, TimeClockProps<TDate, TimeView>>) => React.JSX.Element;\nexport declare const renderDigitalClockTimeView: <TDate extends unknown>({ view, onViewChange, focusedView, onFocusedViewChange, views, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, shouldDisableClock, minutesStep, ampm, components, componentsProps, slots, slotProps, readOnly, disabled, sx, autoFocus, disableIgnoringDatePartForTimeValidation, timeSteps, skipDisabled, timezone, }: TimeViewRendererProps<\"hours\", Omit<DigitalClockProps<TDate>, \"timeStep\"> & Pick<TimePickerProps<TDate>, \"timeSteps\">>) => React.JSX.Element;\nexport declare const renderMultiSectionDigitalClockTimeView: <TDate extends unknown>({ view, onViewChange, focusedView, onFocusedViewChange, views, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minTime, maxTime, shouldDisableTime, shouldDisableClock, minutesStep, ampm, components, componentsProps, slots, slotProps, readOnly, disabled, sx, autoFocus, disableIgnoringDatePartForTimeValidation, timeSteps, skipDisabled, timezone, }: TimeViewRendererProps<TimeViewWithMeridiem, MultiSectionDigitalClockProps<TDate>>) => React.JSX.Element;\n","node_modules/@mui/x-date-pickers/timeViewRenderers/index.d.ts":"export { renderTimeViewClock, renderDigitalClockTimeView, renderMultiSectionDigitalClockTimeView, } from './timeViewRenderers';\nexport type { TimeViewRendererProps } from './timeViewRenderers';\n","node_modules/@mui/x-date-pickers/themeAugmentation/props.d.ts":"import {\n  DateCalendarProps,\n  ExportedSlideTransitionProps,\n  PickersFadeTransitionGroupProps,\n} from '../DateCalendar';\nimport { DayCalendarSkeletonProps } from '../DayCalendarSkeleton';\nimport { ClockNumberProps, TimeClockProps, ClockPointerProps, ClockProps } from '../TimeClock';\nimport { ExportedPickersMonthProps, MonthCalendarProps } from '../MonthCalendar';\nimport { PickersDayProps } from '../PickersDay';\nimport { ExportedPickersYearProps, YearCalendarProps } from '../YearCalendar';\nimport { DateFieldProps } from '../DateField';\nimport { LocalizationProviderProps } from '../LocalizationProvider';\nimport { PickersLayoutProps } from '../PickersLayout';\nimport {\n  DayCalendarProps,\n  ExportedPickersArrowSwitcherProps,\n  PickerPopperProps,\n  PickersToolbarButtonProps,\n  PickersToolbarProps,\n  ExportedPickersToolbarTextProps,\n} from '../internals';\nimport { DateOrTimeView } from '../models';\n\nimport { DatePickerProps, DatePickerToolbarProps } from '../DatePicker';\nimport { DesktopDatePickerProps } from '../DesktopDatePicker';\nimport { MobileDatePickerProps } from '../MobileDatePicker';\nimport { StaticDatePickerProps } from '../StaticDatePicker';\n\nimport {\n  DateTimePickerProps,\n  DateTimePickerTabsProps,\n  DateTimePickerToolbarProps,\n} from '../DateTimePicker';\nimport { DesktopDateTimePickerProps } from '../DesktopDateTimePicker';\nimport { MobileDateTimePickerProps } from '../MobileDateTimePicker';\nimport { StaticDateTimePickerProps } from '../StaticDateTimePicker';\nimport { DateTimeFieldProps } from '../DateTimeField';\n\nimport { TimePickerProps, TimePickerToolbarProps } from '../TimePicker';\nimport { DesktopTimePickerProps } from '../DesktopTimePicker';\nimport { MobileTimePickerProps } from '../MobileTimePicker';\nimport { StaticTimePickerProps } from '../StaticTimePicker';\nimport { ExportedDigitalClockProps } from '../DigitalClock';\nimport { TimeFieldProps } from '../TimeField';\nimport {\n  ExportedMultiSectionDigitalClockSectionProps,\n  MultiSectionDigitalClockProps,\n} from '../MultiSectionDigitalClock';\nimport { ExportedPickersCalendarHeaderProps } from '../PickersCalendarHeader';\n\nexport interface PickersComponentsPropsList {\n  MuiClock: ClockProps<unknown>;\n  MuiClockNumber: ClockNumberProps;\n  MuiClockPointer: ClockPointerProps;\n  MuiDateCalendar: DateCalendarProps<unknown>;\n  MuiDateField: DateFieldProps<unknown>;\n  MuiDatePickerToolbar: DatePickerToolbarProps<unknown>;\n  MuiDateTimeField: DateTimeFieldProps<unknown>;\n  MuiDateTimePickerTabs: DateTimePickerTabsProps;\n  MuiDateTimePickerToolbar: DateTimePickerToolbarProps<unknown>;\n  MuiDayCalendar: DayCalendarProps<unknown>;\n  MuiDayCalendarSkeleton: DayCalendarSkeletonProps;\n  MuiDigitalClock: ExportedDigitalClockProps<unknown>;\n  MuiLocalizationProvider: LocalizationProviderProps<unknown, unknown>;\n  MuiMonthCalendar: MonthCalendarProps<unknown>;\n  MuiMultiSectionDigitalClock: MultiSectionDigitalClockProps<unknown>;\n  MuiMultiSectionDigitalClockSection: ExportedMultiSectionDigitalClockSectionProps;\n  MuiPickersArrowSwitcher: ExportedPickersArrowSwitcherProps;\n  MuiPickersCalendarHeader: ExportedPickersCalendarHeaderProps<unknown>;\n  MuiPickersDay: PickersDayProps<unknown>;\n  MuiPickersFadeTransitionGroup: PickersFadeTransitionGroupProps;\n  MuiPickersMonth: ExportedPickersMonthProps;\n  MuiPickersPopper: PickerPopperProps;\n  MuiPickersSlideTransition: ExportedSlideTransitionProps;\n  MuiPickersToolbar: PickersToolbarProps<unknown, DateOrTimeView>;\n  MuiPickersToolbarButton: PickersToolbarButtonProps;\n  MuiPickersToolbarText: ExportedPickersToolbarTextProps;\n  MuiPickersLayout: PickersLayoutProps<unknown, unknown, DateOrTimeView>;\n  MuiPickersYear: ExportedPickersYearProps;\n  MuiTimeClock: TimeClockProps<unknown>;\n  MuiTimeField: TimeFieldProps<unknown>;\n  MuiTimePickerToolbar: TimePickerToolbarProps<unknown>;\n  MuiYearCalendar: YearCalendarProps<unknown>;\n\n  // Date Pickers\n  MuiDatePicker: DatePickerProps<unknown>;\n  MuiDesktopDatePicker: DesktopDatePickerProps<unknown>;\n  MuiMobileDatePicker: MobileDatePickerProps<unknown>;\n  MuiStaticDatePicker: StaticDatePickerProps<unknown>;\n\n  // Time Pickers\n  MuiTimePicker: TimePickerProps<unknown>;\n  MuiDesktopTimePicker: DesktopTimePickerProps<unknown>;\n  MuiMobileTimePicker: MobileTimePickerProps<unknown>;\n  MuiStaticTimePicker: StaticTimePickerProps<unknown>;\n\n  // Date Time Pickers\n  MuiDateTimePicker: DateTimePickerProps<unknown>;\n  MuiDesktopDateTimePicker: DesktopDateTimePickerProps<unknown>;\n  MuiMobileDateTimePicker: MobileDateTimePickerProps<unknown>;\n  MuiStaticDateTimePicker: StaticDateTimePickerProps<unknown>;\n}\n\ndeclare module '@mui/material/styles' {\n  interface ComponentsPropsList extends PickersComponentsPropsList {}\n}\n\n// disable automatic export\nexport {};\n","node_modules/@mui/x-date-pickers/themeAugmentation/overrides.d.ts":"import {\n  DateCalendarClassKey,\n  DayCalendarClassKey,\n  PickersCalendarHeaderClassKey,\n  PickersFadeTransitionGroupClassKey,\n  PickersSlideTransitionClassKey,\n} from '../DateCalendar';\nimport { DayCalendarSkeletonClassKey } from '../DayCalendarSkeleton';\nimport {\n  ClockClassKey,\n  ClockNumberClassKey,\n  TimeClockClassKey,\n  ClockPointerClassKey,\n} from '../TimeClock';\nimport { MonthCalendarClassKey, PickersMonthClassKey } from '../MonthCalendar';\nimport { PickersDayClassKey } from '../PickersDay';\nimport { PickersYearClassKey, YearCalendarClassKey } from '../YearCalendar';\nimport { PickersLayoutClassKey } from '../PickersLayout';\nimport { DatePickerToolbarClassKey } from '../DatePicker';\nimport { TimePickerToolbarClassKey } from '../TimePicker';\nimport { DateTimePickerToolbarClassKey, DateTimePickerTabsClassKey } from '../DateTimePicker';\nimport {\n  PickersArrowSwitcherClassKey,\n  PickersPopperClassKey,\n  PickersToolbarButtonClassKey,\n  PickersToolbarClassKey,\n  PickersToolbarTextClassKey,\n} from '../internals';\nimport { DigitalClockClassKey } from '../DigitalClock';\nimport {\n  MultiSectionDigitalClockClassKey,\n  MultiSectionDigitalClockSectionClassKey,\n} from '../MultiSectionDigitalClock';\n\n// prettier-ignore\nexport interface PickersComponentNameToClassKey {\n  MuiClock: ClockClassKey;\n  MuiClockNumber: ClockNumberClassKey;\n  MuiClockPointer: ClockPointerClassKey;\n  MuiDateCalendar: DateCalendarClassKey;\n  MuiDatePickerToolbar: DatePickerToolbarClassKey;\n  MuiDateTimePickerTabs: DateTimePickerTabsClassKey;\n  MuiDateTimePickerToolbar: DateTimePickerToolbarClassKey;\n  MuiDayCalendar: DayCalendarClassKey;\n  MuiDayCalendarSkeleton: DayCalendarSkeletonClassKey;\n  MuiDigitalClock: DigitalClockClassKey;\n  MuiMonthCalendar: MonthCalendarClassKey;\n  MuiMultiSectionDigitalClock: MultiSectionDigitalClockClassKey;\n  MuiMultiSectionDigitalClockSection: MultiSectionDigitalClockSectionClassKey;\n  MuiPickersArrowSwitcher: PickersArrowSwitcherClassKey;\n  MuiPickersCalendarHeader: PickersCalendarHeaderClassKey;\n  MuiPickersDay: PickersDayClassKey;\n  MuiPickersFadeTransitionGroup: PickersFadeTransitionGroupClassKey;\n  MuiPickersMonth: PickersMonthClassKey;\n  MuiPickersPopper: PickersPopperClassKey;\n  MuiPickersSlideTransition: PickersSlideTransitionClassKey;\n  MuiPickersToolbar: PickersToolbarClassKey;\n  MuiPickersToolbarButton: PickersToolbarButtonClassKey;\n  MuiPickersToolbarText: PickersToolbarTextClassKey;\n  MuiPickersLayout: PickersLayoutClassKey;\n  MuiPickersYear: PickersYearClassKey;\n  MuiTimeClock: TimeClockClassKey;\n  MuiTimePickerToolbar: TimePickerToolbarClassKey;\n  MuiYearCalendar: YearCalendarClassKey;\n}\n\ndeclare module '@mui/material/styles' {\n  interface ComponentNameToClassKey extends PickersComponentNameToClassKey {}\n}\n\n// disable automatic export\nexport {};\n","node_modules/@mui/x-date-pickers/themeAugmentation/index.d.ts":"export * from './overrides';\nexport * from './props';\nexport * from './components';\n","node_modules/@mui/x-date-pickers/themeAugmentation/components.d.ts":"import { ComponentsProps, ComponentsOverrides } from '@mui/material/styles';\n\nexport interface PickerComponents<Theme = unknown> {\n  MuiClock?: {\n    defaultProps?: ComponentsProps['MuiClock'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiClock'];\n  };\n  MuiClockNumber?: {\n    defaultProps?: ComponentsProps['MuiClockNumber'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiClockNumber'];\n  };\n  MuiClockPointer?: {\n    defaultProps?: ComponentsProps['MuiClockPointer'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiClockPointer'];\n  };\n  MuiDateCalendar?: {\n    defaultProps?: ComponentsProps['MuiDateCalendar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDateCalendar'];\n  };\n  MuiDateField?: {\n    defaultProps?: ComponentsProps['MuiDateField'];\n  };\n  MuiDatePickerToolbar?: {\n    defaultProps?: ComponentsProps['MuiDatePickerToolbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDatePickerToolbar'];\n  };\n  MuiDateTimeField?: {\n    defaultProps?: ComponentsProps['MuiDateTimeField'];\n  };\n  MuiDateTimePickerTabs?: {\n    defaultProps?: ComponentsProps['MuiDateTimePickerTabs'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDateTimePickerTabs'];\n  };\n  MuiDateTimePickerToolbar?: {\n    defaultProps?: ComponentsProps['MuiDateTimePickerToolbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDateTimePickerToolbar'];\n  };\n  MuiDayCalendar?: {\n    defaultProps?: ComponentsProps['MuiDayCalendar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDayCalendar'];\n  };\n  MuiDayCalendarSkeleton?: {\n    defaultProps?: ComponentsProps['MuiDayCalendarSkeleton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDayCalendarSkeleton'];\n  };\n  MuiDigitalClock?: {\n    defaultProps?: ComponentsProps['MuiDigitalClock'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDigitalClock'];\n  };\n  MuiLocalizationProvider?: {\n    defaultProps?: ComponentsProps['MuiLocalizationProvider'];\n  };\n  MuiMonthCalendar?: {\n    defaultProps?: ComponentsProps['MuiMonthCalendar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMonthCalendar'];\n  };\n  MuiMultiSectionDigitalClock?: {\n    defaultProps?: ComponentsProps['MuiMultiSectionDigitalClock'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMultiSectionDigitalClock'];\n  };\n  MuiMultiSectionDigitalClockSection?: {\n    defaultProps?: ComponentsProps['MuiMultiSectionDigitalClockSection'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiMultiSectionDigitalClockSection'];\n  };\n  MuiPickersArrowSwitcher?: {\n    defaultProps?: ComponentsProps['MuiPickersArrowSwitcher'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersArrowSwitcher'];\n  };\n  MuiPickersCalendarHeader?: {\n    defaultProps?: ComponentsProps['MuiPickersCalendarHeader'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersCalendarHeader'];\n  };\n  MuiPickersDay?: {\n    defaultProps?: ComponentsProps['MuiPickersDay'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersDay'];\n  };\n  MuiPickersFadeTransitionGroup?: {\n    defaultProps?: ComponentsProps['MuiPickersFadeTransitionGroup'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersFadeTransitionGroup'];\n  };\n  MuiPickersMonth?: {\n    defaultProps?: ComponentsProps['MuiPickersMonth'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersMonth'];\n  };\n  MuiPickersPopper?: {\n    defaultProps?: ComponentsProps['MuiPickersPopper'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersPopper'];\n  };\n  MuiPickersSlideTransition?: {\n    defaultProps?: ComponentsProps['MuiPickersSlideTransition'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersSlideTransition'];\n  };\n  MuiPickersToolbar?: {\n    defaultProps?: ComponentsProps['MuiPickersToolbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersToolbar'];\n  };\n  MuiPickersToolbarButton?: {\n    defaultProps?: ComponentsProps['MuiPickersToolbarButton'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersToolbarButton'];\n  };\n  MuiPickersToolbarText?: {\n    defaultProps?: ComponentsProps['MuiPickersToolbarText'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersToolbarText'];\n  };\n  MuiPickersLayout?: {\n    defaultProps?: ComponentsProps['MuiPickersLayout'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersLayout'];\n  };\n  MuiPickersYear?: {\n    defaultProps?: ComponentsProps['MuiPickersYear'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiPickersYear'];\n  };\n  MuiTimeClock?: {\n    defaultProps?: ComponentsProps['MuiTimeClock'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTimeClock'];\n  };\n  MuiTimeField?: {\n    defaultProps?: ComponentsProps['MuiTimeField'];\n  };\n  MuiTimePickerToolbar?: {\n    defaultProps?: ComponentsProps['MuiTimePickerToolbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiTimePickerToolbar'];\n  };\n  MuiYearCalendar?: {\n    defaultProps?: ComponentsProps['MuiYearCalendar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiYearCalendar'];\n  };\n\n  // Date Pickers\n  MuiDatePicker?: {\n    defaultProps?: ComponentsProps['MuiDatePicker'];\n  };\n  MuiDesktopDatePicker?: {\n    defaultProps?: ComponentsProps['MuiDesktopDatePicker'];\n  };\n  MuiMobileDatePicker?: {\n    defaultProps?: ComponentsProps['MuiMobileDatePicker'];\n  };\n  MuiStaticDatePicker?: {\n    defaultProps?: ComponentsProps['MuiStaticDatePicker'];\n  };\n\n  // Time Pickers\n  MuiTimePicker?: {\n    defaultProps?: ComponentsProps['MuiTimePicker'];\n  };\n  MuiDesktopTimePicker?: {\n    defaultProps?: ComponentsProps['MuiDesktopTimePicker'];\n  };\n  MuiMobileTimePicker?: {\n    defaultProps?: ComponentsProps['MuiMobileTimePicker'];\n  };\n  MuiStaticTimePicker?: {\n    defaultProps?: ComponentsProps['MuiStaticTimePicker'];\n  };\n\n  // Date Time Pickers\n  MuiDateTimePicker?: {\n    defaultProps?: ComponentsProps['MuiDateTimePicker'];\n  };\n  MuiDesktopDateTimePicker?: {\n    defaultProps?: ComponentsProps['MuiDesktopDateTimePicker'];\n  };\n  MuiMobileDateTimePicker?: {\n    defaultProps?: ComponentsProps['MuiMobileDateTimePicker'];\n  };\n  MuiStaticDateTimePicker?: {\n    defaultProps?: ComponentsProps['MuiStaticDateTimePicker'];\n  };\n}\n\ndeclare module '@mui/material/styles' {\n  interface Components<Theme = unknown> extends PickerComponents<Theme> {}\n}\n","node_modules/@mui/x-date-pickers/models/views.d.ts":"export type DateView = 'year' | 'month' | 'day';\nexport type TimeView = 'hours' | 'minutes' | 'seconds';\nexport type DateOrTimeView = DateView | TimeView;\n","node_modules/@mui/x-date-pickers/models/validation.d.ts":"/**\n * Validation error types applicable to both date and time validation\n */\ntype CommonDateTimeValidationError = 'invalidDate' | 'disableFuture' | 'disablePast' | null;\nexport type DateValidationError = CommonDateTimeValidationError | 'shouldDisableDate' | 'shouldDisableMonth' | 'shouldDisableYear' | 'minDate' | 'maxDate';\nexport type TimeValidationError = CommonDateTimeValidationError | 'minutesStep' | 'minTime' | 'maxTime' | 'shouldDisableClock-hours' | 'shouldDisableClock-minutes' | 'shouldDisableClock-seconds' | 'shouldDisableTime-hours' | 'shouldDisableTime-minutes' | 'shouldDisableTime-seconds';\nexport type DateTimeValidationError = DateValidationError | TimeValidationError;\nexport {};\n","node_modules/@mui/x-date-pickers/models/timezone.d.ts":"export type PickersTimezone = 'default' | 'system' | 'UTC' | string;\nexport interface TimezoneProps {\n    /**\n     * Choose which timezone to use for the value.\n     * Example: \"default\", \"system\", \"UTC\", \"America/New_York\".\n     * If you pass values from other timezones to some props, they will be converted to this timezone before being used.\n     * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.\n     * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.\n     */\n    timezone?: PickersTimezone;\n}\n","node_modules/@mui/x-date-pickers/models/pickers.d.ts":"import type { PickersShortcutsItemContext } from '../PickersShortcuts';\nexport interface PickerChangeHandlerContext<TError> {\n    validationError: TError;\n    /**\n     * Shortcut causing this `onChange` call.\n     * If the call has not been caused by a shortcut selection, this property will be `undefined`.\n     */\n    shortcut?: PickersShortcutsItemContext;\n}\n","node_modules/@mui/x-date-pickers/models/index.d.ts":"export * from './fields';\nexport * from './timezone';\nexport * from './validation';\nexport * from './views';\nexport * from './adapters';\nexport * from './common';\nexport * from './pickers';\n","node_modules/@mui/x-date-pickers/models/fields.d.ts":"import * as React from 'react';\nimport type { BaseFieldProps } from '../internals/models/fields';\nexport type FieldSectionType = 'year' | 'month' | 'day' | 'weekDay' | 'hours' | 'minutes' | 'seconds' | 'meridiem';\nexport type FieldSectionContentType = 'digit' | 'digit-with-letter' | 'letter';\nexport type FieldValueType = 'date' | 'time' | 'date-time';\nexport interface FieldSection {\n    /**\n     * Value of the section, as rendered inside the input.\n     * For example, in the date `May 25, 1995`, the value of the month section is \"May\".\n     */\n    value: string;\n    /**\n     * Format token used to parse the value of this section from the date object.\n     * For example, in the format `MMMM D, YYYY`, the format of the month section is \"MMMM\".\n     */\n    format: string;\n    /**\n     * Maximum length of the value, only defined for \"digit\" sections.\n     * Will be used to determine how many leading zeros should be added to the value.\n     */\n    maxLength: number | null;\n    /**\n     * Placeholder rendered when the value of this section is empty.\n     */\n    placeholder: string;\n    /**\n     * Type of the section.\n     */\n    type: FieldSectionType;\n    /**\n     * Type of content of the section.\n     * Will determine if we should apply a digit-based editing or a letter-based editing.\n     */\n    contentType: FieldSectionContentType;\n    /**\n     * If `true`, the value of this section is supposed to have leading zeroes when parsed by the date library.\n     * For example, the value `1` should be rendered as \"01\" instead of \"1\".\n     * @deprecated Will be removed in v7, use `hasLeadingZerosInFormat` instead.\n     */\n    hasLeadingZeros: boolean;\n    /**\n     * If `true`, the value of this section is supposed to have leading zeroes when parsed by the date library.\n     * For example, the value `1` should be rendered as \"01\" instead of \"1\".\n     */\n    hasLeadingZerosInFormat: boolean;\n    /**\n     * If `true`, the value of this section is supposed to have leading zeroes when rendered in the input.\n     * For example, the value `1` should be rendered as \"01\" instead of \"1\".\n     */\n    hasLeadingZerosInInput: boolean;\n    /**\n     * If `true`, the section value has been modified since the last time the sections were generated from a valid date.\n     * When we can generate a valid date from the section, we don't directly pass it to `onChange`,\n     * Otherwise, we would lose all the information contained in the original date, things like:\n     * - time if the format does not contain it\n     * - timezone / UTC\n     *\n     * To avoid losing that information, we transfer the values of the modified sections from the newly generated date to the original date.\n     */\n    modified: boolean;\n    /**\n     * Start index of the section in the format\n     */\n    start: number;\n    /**\n     * End index of the section in the format\n     */\n    end: number;\n    /**\n     * Start index of the section value in the input.\n     * Takes into account invisible unicode characters such as \\u2069 but does not include them\n     */\n    startInInput: number;\n    /**\n     * End index of the section value in the input.\n     * Takes into account invisible unicode characters such as \\u2069 but does not include them\n     */\n    endInInput: number;\n    /**\n     * Separator displayed before the value of the section in the input.\n     * If it contains escaped characters, then it must not have the escaping characters.\n     * For example, on Day.js, the `year` section of the format `YYYY [year]` has an end separator equal to `year` not `[year]`\n     */\n    startSeparator: string;\n    /**\n     * Separator displayed after the value of the section in the input.\n     * If it contains escaped characters, then it must not have the escaping characters.\n     * For example, on Day.js, the `year` section of the format `[year] YYYY` has a start separator equal to `[year]`\n     */\n    endSeparator: string;\n}\nexport interface FieldRef<TSection extends FieldSection> {\n    /**\n     * Returns the sections of the current value.\n     * @returns {TSection[]} The sections of the current value.\n     */\n    getSections: () => TSection[];\n    /**\n     * Returns the index of the active section (the first focused section).\n     * If no section is active, returns `null`.\n     * @returns {number | null} The index of the active section.\n     */\n    getActiveSectionIndex: () => number | null;\n    /**\n     * Updates the selected sections.\n     * @param {FieldSelectedSections} selectedSections The sections to select.\n     */\n    setSelectedSections: (selectedSections: FieldSelectedSections) => void;\n}\nexport type FieldSelectedSections = number | FieldSectionType | null | 'all' | {\n    startIndex: number;\n    endIndex: number;\n};\n/**\n * Props the single input field can receive when used inside a picker.\n * Only contains what the MUI component are passing to the field, not what users can pass using the `props.slotProps.field`.\n */\nexport interface BaseSingleInputFieldProps<TValue, TDate, TSection extends FieldSection, TError> extends BaseFieldProps<TValue, TDate, TSection, TError> {\n    label?: React.ReactNode;\n    id?: string;\n    name?: string;\n    inputRef?: React.Ref<HTMLInputElement>;\n    onKeyDown?: React.KeyboardEventHandler;\n    onBlur?: React.FocusEventHandler;\n    focused?: boolean;\n    InputProps?: {\n        ref?: React.Ref<any>;\n        endAdornment?: React.ReactNode;\n        startAdornment?: React.ReactNode;\n    };\n    inputProps?: {\n        'aria-label'?: string;\n    };\n    slots?: {};\n    slotProps?: {};\n    clearable?: boolean;\n    onClear?: React.MouseEventHandler;\n}\n","node_modules/@mui/x-date-pickers/models/common.d.ts":"export interface TimeStepOptions {\n    hours?: number;\n    minutes?: number;\n    seconds?: number;\n}\n","node_modules/@mui/x-date-pickers/models/adapters.d.ts":"import { FieldSectionContentType, FieldSectionType } from './fields';\nimport { PickersTimezone } from './timezone';\nexport interface AdapterFormats {\n    /**\n     * The 4-digit year.\n     * @example \"2019\"\n     */\n    year: string;\n    /**\n     * The full month name.\n     * @example \"January\"\n     */\n    month: string;\n    /**\n     * The abbreviated month name.\n     * @example \"Jan\"\n     */\n    monthShort: string;\n    /**\n     * The day of the month.\n     * @example \"1\"\n     */\n    dayOfMonth: string;\n    /**\n     * The name of the day of the week.\n     * @example \"Wednesday\"\n     */\n    weekday: string;\n    /**\n     * The abbreviated name of the day of the week.\n     * @example \"Wed\"\n     * */\n    weekdayShort: string;\n    /**\n     * The hours, 24-hour clock.\n     * @example \"23\"\n     */\n    hours24h: string;\n    /**\n     * The hours, 12-hour clock.\n     * @example \"11\"\n     */\n    hours12h: string;\n    /**\n     * The meridiem.\n     * @example \"AM\"\n     */\n    meridiem: string;\n    /**\n     * The minutes.\n     * @example \"44\"\n     */\n    minutes: string;\n    /**\n     * The seconds.\n     * @example \"00\"\n     */\n    seconds: string;\n    /** The localized full date.\n     * Used for the aria-label of the opening button of the `DatePicker`.\n     * @example \"Jan 1, 2019\"\n     */\n    fullDate: string;\n    /**\n     * The partially localized full date with weekday, useful for text-to-speech accessibility.\n     * @example \"Tuesday, January 1, 2019\"\n     * @deprecated Never used internally.\n     */\n    fullDateWithWeekday: string;\n    /**\n     * A keyboard input friendly date format.\n     * Used in the date fields.\n     * @example \"02/13/2020\n     */\n    keyboardDate: string;\n    /**\n     * The abbreviated month name and the day of the month.\n     * Used in the `DateRangePicker` toolbar.\n     * @example \"Jan 1\"\n     */\n    shortDate: string;\n    /**\n     * The month name and the day of the month.\n     * Used in the `DatePicker` toolbar for non-english locales.\n     * @example \"1 January\"\n     */\n    normalDate: string;\n    /**\n     * The month name, the day of the week and the day of the month.\n     * Used in the `DatePicker` toolbar for english locales.\n     * @example \"Sun, Jan 1\"\n     */\n    normalDateWithWeekday: string;\n    /**\n     * The month name and the 4-digit year.\n     * @example \"January 2018\"\n     * @deprecated Use `${adapter.formats.month} ${adapter.formats.year}`\n     */\n    monthAndYear: string;\n    /**\n     * The month name and the day of the month.\n     * @example \"January 1\"\n     * @deprecated Use `${adapter.formats.month} ${adapter.formats.dayOfMonth}`\n     */\n    monthAndDate: string;\n    /**\n     * The hours and the minutes.\n     * Used for the aria-label of the opening button of the `TimePicker`.\n     * @example \"11:44 PM\" for locales with meridiem, \"23:44\" for locales without meridiem.\n     */\n    fullTime: string;\n    /**\n     * The hours with the meridiem and minutes.\n     * @example \"11:44 PM\"\n     */\n    fullTime12h: string;\n    /**\n     * The hours without the meridiem and minutes.\n     * @example \"23:44\"\n     */\n    fullTime24h: string;\n    /**\n     * The combination of `fullDate` and `fullTime` formats.\n     * @example \"Jan 1, 2018 11:44 PM\"\n     * @deprecated Use `${adapter.formats.fullDate} ${adapter.formats.fullTime}`\n     */\n    fullDateTime: string;\n    /**\n     * The combination of `fullDate` and `fullTime12h` formats.\n     * @example \"Jan 1, 2018 11:44 PM\"\n     * @deprecated Use `${adapter.formats.fullDate} ${adapter.formats.fullTime12h}`\n     */\n    fullDateTime12h: string;\n    /**\n     * The combination of `fullDate` and `fullTime24h` formats.\n     * @example \"Jan 1, 2018 23:44\"\n     * @deprecated Use `${adapter.formats.fullDate} ${adapter.formats.fullTime24h}`\n     */\n    fullDateTime24h: string;\n    /**\n     * A keyboard input friendly time format.\n     * Used in the date-time fields.\n     * @example \"02/13/2020 11:44 PM\" for locales with meridiem, \"02/13/2020 23:44\" for locales without meridiem.\n     */\n    keyboardDateTime: string;\n    /**\n     * A keyboard input friendly time format for 12-hour clock.\n     * Used in the date-time fields.\n     * @example \"02/13/2020 11:44 PM\"\n     */\n    keyboardDateTime12h: string;\n    /**\n     * A keyboard input friendly time format for 24-hour clock.\n     * Used in the date-time fields.\n     * @example \"02/13/2020 23:44\"\n     */\n    keyboardDateTime24h: string;\n}\nexport type AdapterUnits = 'years' | 'quarters' | 'months' | 'weeks' | 'days' | 'hours' | 'minutes' | 'seconds' | 'milliseconds';\nexport type FieldFormatTokenMap = {\n    [formatToken: string]: FieldSectionType | {\n        sectionType: FieldSectionType;\n        contentType: FieldSectionContentType;\n        maxLength?: number;\n    };\n};\ntype PropertyIfNotNever<PName extends string, PType> = [PType] extends [never] ? {} : {\n    [P in PName]?: PType;\n};\nexport type AdapterOptions<TLocale, TInstance> = {\n    formats?: Partial<AdapterFormats>;\n    locale?: TLocale;\n} & PropertyIfNotNever<'instance', TInstance>;\nexport type DateBuilderReturnType<T extends string | null | undefined, TDate> = T extends null ? null : TDate;\nexport interface MuiPickersAdapter<TDate, TLocale = any> {\n    /**\n     * A boolean confirming that the adapter used is an MUI adapter.\n     */\n    isMUIAdapter: boolean;\n    isTimezoneCompatible: boolean;\n    formats: AdapterFormats;\n    locale?: TLocale;\n    /**\n     * Name of the library that is used right now\n     */\n    lib: string;\n    /**\n     * The characters used to escape a string inside a format.\n     */\n    escapedCharacters: {\n        start: string;\n        end: string;\n    };\n    /**\n     * A map containing all the format that the field components can understand.\n     */\n    formatTokenMap: FieldFormatTokenMap;\n    /**\n     * Create a date in the date library format.\n     * If no `value` parameter is provided, creates a date with the current timestamp.\n     * If a `value` parameter is provided, pass it to the date library to try to parse it.\n     * @template TDate\n     * @param {any} value The optional value to parse.\n     * @returns {TDate | null} The parsed date.\n     */\n    date(value?: any): TDate | null;\n    /**\n     * Create a date in the date library format.\n     * If no `value` parameter is provided, creates a date with the current timestamp.\n     * If a `value` parameter is provided, pass it to the date library to try to parse it.\n     * @template TDate\n     * @param {string | null | undefined} value The optional value to parse.\n     * @param {PickersTimezone} timezone The timezone of the date.\n     * @returns {TDate | null} The parsed date.\n     */\n    dateWithTimezone<T extends string | null | undefined>(value: T, timezone: PickersTimezone): DateBuilderReturnType<T, TDate>;\n    /**\n     * Extracts the timezone from a date.\n     * @template TDate\n     * @param {TDate} value The date from which we want to get the timezone.\n     */\n    getTimezone(value: TDate | null): string;\n    /**\n     * Convert a date to another timezone.\n     * @template TDate\n     * @param {TDate} value The date to convert.\n     * @param {PickersTimezone} timezone The timezone to convert the date to.\n     * @returns {TDate} The converted date.\n     */\n    setTimezone(value: TDate, timezone: PickersTimezone): TDate;\n    /**\n     * Convert a date in the library format into a JavaScript `Date` object.\n     * @template TDate\n     * @param {TDate} value The value to convert.\n     * @returns {Date} the JavaScript date.\n     */\n    toJsDate(value: TDate): Date;\n    /**\n     * Parse an iso string into a date in the date library format.\n     * @deprecate Will be removed in v7.\n     * @template TDate\n     * @param {string} isoString The iso string to parse.\n     * @returns {TDate} the parsed date.\n     */\n    parseISO(isoString: string): TDate;\n    /**\n     * Stringify a date in the date library format into an ISO string.\n     * @deprecate Will be removed in v7.\n     * @template TDate\n     * @param {TDate} value The date to stringify.\n     * @returns {string} the iso string representing the date.\n     */\n    toISO(value: TDate): string;\n    /**\n     * Parse a string date in a specific format.\n     * @template TDate\n     * @param {string} value The string date to parse.\n     * @param {string} format The format in which the string date is.\n     * @returns {TDate | null} The parsed date.\n     */\n    parse(value: string, format: string): TDate | null;\n    /**\n     * Get the code of the locale currently used by the adapter.\n     * @returns {string} The code of the locale.\n     */\n    getCurrentLocaleCode(): string;\n    /**\n     * Check if the current locale is using 12 hours cycle (i.e: time with meridiem).\n     * @returns {boolean} `true` if the current locale is using 12 hours cycle.\n     */\n    is12HourCycleInCurrentLocale(): boolean;\n    /**\n     * Create a format with no meta-token (e.g: `LLL` or `PP`).\n     * @param {string} format The format to expand.\n     * @returns {string} The expanded format.\n     */\n    expandFormat(format: string): string;\n    /**\n     * Create a user readable format (taking into account localized format tokens), useful to render helper text for input (e.g. placeholder).\n     * @deprecated  Will be removed in v7.\n     * @param {string} format The format to analyze.\n     * @returns {string} The helper text of the given format.\n     */\n    getFormatHelperText(format: string): string;\n    /**\n     * Check if the date is null.\n     * @deprecated  Will be removed in v7.\n     * @template TDate\n     * @param {TDate | null} value The date to test.\n     * @returns {boolean} `true` if the date is null.\n     */\n    isNull(value: TDate | null): boolean;\n    /**\n     * Check if the date is valid.\n     * @param {any} value The value to test.\n     * @returns {boolean} `true` if the value is valid.\n     */\n    isValid(value: any): boolean;\n    /**\n     * Format a date using an adapter format string (see the `AdapterFormats` interface)\n     * @template TDate\n     * @param {TDate} value The date to format.\n     * @param {keyof AdapterFormats} formatKey The formatKey to use.\n     * @returns {string} The stringify date.\n     */\n    format(value: TDate, formatKey: keyof AdapterFormats): string;\n    /**\n     * Format a date using a format of the date library.\n     * @template TDate\n     * @param {TDate} value The date to format.\n     * @param {string} formatString The format to use.\n     * @returns {string} The stringify date.\n     */\n    formatByString(value: TDate, formatString: string): string;\n    /**\n     * Format a number to be rendered in the clock.\n     * Is being used in hijri and jalali adapters.\n     * @param {string} numberToFormat The number to format.\n     * @returns {string} The formatted number.\n     */\n    formatNumber(numberToFormat: string): string;\n    /**\n     * Compute the difference between the two dates in the unit provided.\n     * @deprecated  Will be removed in v7.\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate | string} comparing The date to compare with the reference date.\n     * @param {AdapterUnits} unit The unit in which we want to the result to be.\n     * @returns {number} The diff between the two dates.\n     */\n    getDiff(value: TDate, comparing: TDate | string, unit?: AdapterUnits): number;\n    /**\n     * Check if the two dates are equal (e.g: they represent the same timestamp).\n     * @param {any} value The reference date.\n     * @param {any} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the two dates are equal.\n     */\n    isEqual(value: any, comparing: any): boolean;\n    /**\n     * Check if the two dates are in the same year (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the two dates are in the same year.\n     */\n    isSameYear(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the two dates are in the same month (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the two dates are in the same month.\n     */\n    isSameMonth(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the two dates are in the same day (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the two dates are in the same day.\n     */\n    isSameDay(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the two dates are at the same hour (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the two dates are in the same hour.\n     */\n    isSameHour(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the reference date is after the second date.\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the reference date is after the second date.\n     */\n    isAfter(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the year of the reference date is after the year of the second date (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the year of the reference date is after the year of the second date.\n     */\n    isAfterYear(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the day of the reference date is after the day of the second date (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the day of the reference date is after the day of the second date.\n     */\n    isAfterDay(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the reference date is before the second date.\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the reference date is before the second date.\n     */\n    isBefore(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the year of the reference date is before the year of the second date (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the year of the reference date is before the year of the second date.\n     */\n    isBeforeYear(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the day of the reference date is before the day of the second date (using the timezone of the reference date).\n     * @template TDate\n     * @param {TDate} value The reference date.\n     * @param {TDate} comparing The date to compare with the reference date.\n     * @returns {boolean} `true` if the day of the reference date is before the day of the second date.\n     */\n    isBeforeDay(value: TDate, comparing: TDate): boolean;\n    /**\n     * Check if the value is withing the provided range.\n     * @template TDate\n     * @param {TDate} value The value to test.\n     * @param {[TDate, TDate]} range The range in which the value should be.\n     * @returns {boolean} `true` if the value is within the provided range.\n     */\n    isWithinRange(value: TDate, range: [TDate, TDate]): boolean;\n    /**\n     * Return the start of the year for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The start of the year of the given date.\n     */\n    startOfYear(value: TDate): TDate;\n    /**\n     * Return the start of the month for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The start of the month of the given date.\n     */\n    startOfMonth(value: TDate): TDate;\n    /**\n     * Return the start of the week for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The start of the week of the given date.\n     */\n    startOfWeek(value: TDate): TDate;\n    /**\n     * Return the start of the day for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The start of the day of the given date.\n     */\n    startOfDay(value: TDate): TDate;\n    /**\n     * Return the end of the year for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The end of the year of the given date.\n     */\n    endOfYear(value: TDate): TDate;\n    /**\n     * Return the end of the month for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The end of the month of the given date.\n     */\n    endOfMonth(value: TDate): TDate;\n    /**\n     * Return the end of the week for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The end of the week of the given date.\n     */\n    endOfWeek(value: TDate): TDate;\n    /**\n     * Return the end of the day for the given date.\n     * @template TDate\n     * @param {TDate} value The original date.\n     * @returns {TDate} The end of the day of the given date.\n     */\n    endOfDay(value: TDate): TDate;\n    /**\n     * Add the specified number of years to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of years to be added.\n     * @returns {TDate} The new date with the years added.\n     */\n    addYears(value: TDate, amount: number): TDate;\n    /**\n     * Add the specified number of months to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of months to be added.\n     * @returns {TDate} The new date with the months added.\n     */\n    addMonths(value: TDate, amount: number): TDate;\n    /**\n     * Add the specified number of weeks to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of weeks to be added.\n     * @returns {TDate} The new date with the weeks added.\n     */\n    addWeeks(value: TDate, amount: number): TDate;\n    /**\n     * Add the specified number of days to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of days to be added.\n     * @returns {TDate} The new date with the days added.\n     */\n    addDays(value: TDate, amount: number): TDate;\n    /**\n     * Add the specified number of hours to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of hours to be added.\n     * @returns {TDate} The new date with the hours added.\n     */\n    addHours(value: TDate, amount: number): TDate;\n    /**\n     * Add the specified number of minutes to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of minutes to be added.\n     * @returns {TDate} The new date with the minutes added.\n     */\n    addMinutes(value: TDate, amount: number): TDate;\n    /**\n     * Add the specified number of seconds to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} amount The amount of seconds to be added.\n     * @returns {TDate} The new date with the seconds added.\n     */\n    addSeconds(value: TDate, amount: number): TDate;\n    /**\n     * Get the year of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The year of the given date.\n     */\n    getYear(value: TDate): number;\n    /**\n     * Get the month of the given date.\n     * The value is 0-based, in the Gregorian calendar January = 0, February = 1, ...\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The month of the given date.\n     */\n    getMonth(value: TDate): number;\n    /**\n     * Get the date (e.g: the day in the month) of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The date of the given date.\n     */\n    getDate(value: TDate): number;\n    /**\n     * Get the hours of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The hours of the given date.\n     */\n    getHours(value: TDate): number;\n    /**\n     * Get the minutes of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The minutes of the given date.\n     */\n    getMinutes(value: TDate): number;\n    /**\n     * Get the seconds of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The seconds of the given date.\n     */\n    getSeconds(value: TDate): number;\n    /**\n     * Get the milliseconds of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The milliseconds of the given date.\n     */\n    getMilliseconds(value: TDate): number;\n    /**\n     * Set the year to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} year The year of the new date.\n     * @returns {TDate} The new date with the year set.\n     */\n    setYear(value: TDate, year: number): TDate;\n    /**\n     * Set the month to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} month The month of the new date.\n     * @returns {TDate} The new date with the month set.\n     */\n    setMonth(value: TDate, month: number): TDate;\n    /**\n     * Set the date (e.g: the day in the month) to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} date The date of the new date.\n     * @returns {TDate} The new date with the date set.\n     */\n    setDate(value: TDate, date: number): TDate;\n    /**\n     * Set the hours to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} hours The hours of the new date.\n     * @returns {TDate} The new date with the hours set.\n     */\n    setHours(value: TDate, hours: number): TDate;\n    /**\n     * Set the minutes to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} minutes The minutes of the new date.\n     * @returns {TDate} The new date with the minutes set.\n     */\n    setMinutes(value: TDate, minutes: number): TDate;\n    /**\n     * Set the seconds to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} seconds The seconds of the new date.\n     * @returns {TDate} The new date with the seconds set.\n     */\n    setSeconds(value: TDate, seconds: number): TDate;\n    /**\n     * Set the milliseconds to the given date.\n     * @template TDate\n     * @param {TDate} value The date to be changed.\n     * @param {number} milliseconds The milliseconds of the new date.\n     * @returns {TDate} The new date with the milliseconds set.\n     */\n    setMilliseconds(value: TDate, milliseconds: number): TDate;\n    /**\n     * Get the number of days in a month of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The number of days in the month\n     */\n    getDaysInMonth(value: TDate): number;\n    /**\n     * Add one month to the given date.\n     * @deprecated Use `addMonths(value, 1)`\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {TDate} The new date with one month added.\n     */\n    getNextMonth(value: TDate): TDate;\n    /**\n     * Subtract one month from the given date.\n     * @deprecated Use `addMonths(value, -1)`\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {TDate} The new date with one month subtracted.\n     */\n    getPreviousMonth(value: TDate): TDate;\n    /**\n     * Get an array with all the months in the year of the given date.\n     * @deprecated Will be removed in v7.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {TDate[]} All the months in the year of the given date.\n     */\n    getMonthArray(value: TDate): TDate[];\n    /**\n     * Create a date with the date of the first param and the time of the second param.\n     * @deprecated Use `adapter.setHours`, `adapter.setMinutes` and `adapter.setSeconds`.\n     * @template TDate\n     * @param {TDate} dateParam Param from which we want to get the date.\n     * @param {TDate} timeParam Param from which we want to get the time.\n     * @returns Date with the date of the first param and the time of the second param.\n     */\n    mergeDateAndTime(dateParam: TDate, timeParam: TDate): TDate;\n    /**\n     * Get the label of each day of a week.\n     * @deprecated Will be removed in v7. Use `getWeekdays` from date-utils and format the dates.\n     * @returns {string[]} The label of each day of a week.\n     */\n    getWeekdays(): string[];\n    /**\n     * Create a nested list with all the days of the month of the given date grouped by week.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {TDate[][]} A nested list with all the days of the month grouped by week.\n     */\n    getWeekArray(value: TDate): TDate[][];\n    /**\n     * Get the number of the week of the given date.\n     * @template TDate\n     * @param {TDate} value The given date.\n     * @returns {number} The number of the week of the given date.\n     */\n    getWeekNumber(value: TDate): number;\n    /**\n     * Create a list with all the years between the start end the end date.\n     * @template TDate\n     * @param {TDate} start The start of the range.\n     * @param {TDate} end The end of the range.\n     * @returns {TDate[]} List of all the years between the start end the end date.\n     */\n    getYearRange(start: TDate, end: TDate): TDate[];\n    /**\n     * Allow to customize how the \"am\"` and \"pm\" strings are rendered.\n     * @deprecated Use `utils.format(utils.setHours(utils.date()!, meridiem === 'am' ? 2 : 14), 'meridiem')` instead.\n     * @param {\"am\" | \"pm\"} meridiem The string to render.\n     * @return {string} The formatted string.\n     */\n    getMeridiemText(meridiem: 'am' | 'pm'): string;\n}\nexport {};\n","node_modules/@mui/x-date-pickers/icons/index.d.ts":"/**\n * @ignore - internal component.\n */\nexport declare const ArrowDropDownIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const ArrowLeftIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const ArrowRightIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const CalendarIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const ClockIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const DateRangeIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const TimeIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const ClearIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n","node_modules/@mui/x-date-pickers/hooks/useClearableField.d.ts":"import * as React from 'react';\nimport { FieldSlotsComponents, FieldSlotsComponentsProps, FieldsTextFieldProps } from '../internals';\ntype UseClearableFieldProps<TFieldProps extends FieldsTextFieldProps, TInputProps extends {\n    endAdornment?: React.ReactNode;\n} | undefined, TFieldSlots extends FieldSlotsComponents, TFieldSlotsComponentsProps extends FieldSlotsComponentsProps> = {\n    clearable: boolean;\n    fieldProps: TFieldProps;\n    InputProps: TInputProps;\n    onClear: React.MouseEventHandler<HTMLButtonElement>;\n    slots?: {\n        [K in keyof TFieldSlots as Uncapitalize<K & string>]: TFieldSlots[K];\n    };\n    slotProps?: TFieldSlotsComponentsProps;\n    components?: TFieldSlots;\n    componentsProps?: TFieldSlotsComponentsProps;\n};\nexport declare const useClearableField: <TFieldProps extends FieldsTextFieldProps, TInputProps extends {\n    endAdornment?: React.ReactNode;\n} | undefined, TFieldSlotsComponents extends FieldSlotsComponents, TFieldSlotsComponentsProps extends FieldSlotsComponentsProps>({ clearable, fieldProps: forwardedFieldProps, InputProps: ForwardedInputProps, onClear, slots, slotProps, components, componentsProps, }: UseClearableFieldProps<TFieldProps, TInputProps, TFieldSlotsComponents, TFieldSlotsComponentsProps>) => {\n    InputProps: TInputProps & {\n        endAdornment: React.JSX.Element;\n    };\n    fieldProps: TFieldProps;\n};\nexport {};\n","node_modules/@mui/x-date-pickers/hooks/index.d.ts":"export { useClearableField } from './useClearableField';\n","node_modules/@mui/x-date-pickers/internals/index.d.ts":"export { PickersArrowSwitcher } from './components/PickersArrowSwitcher/PickersArrowSwitcher';\nexport type { ExportedPickersArrowSwitcherProps, PickersArrowSwitcherSlotsComponent, PickersArrowSwitcherSlotsComponentsProps, } from './components/PickersArrowSwitcher';\nexport { PickersModalDialog } from './components/PickersModalDialog';\nexport type { PickersModalDialogSlotsComponent, PickersModalDialogSlotsComponentsProps, } from './components/PickersModalDialog';\nexport { PickersPopper } from './components/PickersPopper';\nexport type { PickersPopperSlotsComponent, PickersPopperSlotsComponentsProps, } from './components/PickersPopper';\nexport { PickersToolbar } from './components/PickersToolbar';\nexport type { PickersToolbarProps } from './components/PickersToolbar';\nexport { pickersToolbarClasses } from './components/pickersToolbarClasses';\nexport type { PickersToolbarClassKey, PickersToolbarClasses, } from './components/pickersToolbarClasses';\nexport type { PickersToolbarButtonProps } from './components/PickersToolbarButton';\nexport { pickersToolbarButtonClasses } from './components/pickersToolbarButtonClasses';\nexport type { PickersToolbarButtonClassKey, PickersToolbarButtonClasses, } from './components/pickersToolbarButtonClasses';\nexport type { PickersToolbarTextProps, ExportedPickersToolbarTextProps, } from './components/PickersToolbarText';\nexport { pickersToolbarTextClasses } from './components/pickersToolbarTextClasses';\nexport type { PickersToolbarTextClassKey, PickersToolbarTextClasses, } from './components/pickersToolbarTextClasses';\nexport { pickersArrowSwitcherClasses } from './components/PickersArrowSwitcher/pickersArrowSwitcherClasses';\nexport type { PickersArrowSwitcherClassKey, PickersArrowSwitcherClasses, } from './components/PickersArrowSwitcher/pickersArrowSwitcherClasses';\nexport type { PickerPopperProps } from './components/PickersPopper';\nexport { pickersPopperClasses } from './components/pickersPopperClasses';\nexport type { PickersPopperClassKey, PickersPopperClasses, } from './components/pickersPopperClasses';\nexport { PickersToolbarButton } from './components/PickersToolbarButton';\nexport { DAY_MARGIN, DIALOG_WIDTH } from './constants/dimensions';\nexport { useControlledValueWithTimezone } from './hooks/useValueWithTimezone';\nexport type { DesktopOnlyPickerProps } from './hooks/useDesktopPicker';\nexport { useField, createDateStrForInputFromSections, addPositionPropertiesToSections, } from './hooks/useField';\nexport type { UseFieldInternalProps, UseFieldParams, UseFieldResponse, UseFieldForwardedProps, FieldValueManager, FieldChangeHandler, FieldChangeHandlerContext, FieldSlotsComponents, FieldSlotsComponentsProps, } from './hooks/useField';\nexport type { MobileOnlyPickerProps } from './hooks/useMobilePicker';\nexport { usePicker } from './hooks/usePicker';\nexport type { UsePickerResponse, UsePickerParams, UsePickerProps } from './hooks/usePicker';\nexport type { UsePickerValueNonStaticProps, PickerValueManager, PickerSelectionState, } from './hooks/usePicker/usePickerValue.types';\nexport type { UsePickerViewsNonStaticProps, PickerViewRendererLookup, UsePickerViewsProps, } from './hooks/usePicker/usePickerViews';\nexport { useStaticPicker } from './hooks/useStaticPicker';\nexport type { StaticOnlyPickerProps, UseStaticPickerSlotsComponent, UseStaticPickerSlotsComponentsProps, } from './hooks/useStaticPicker';\nexport { useLocalizationContext, useDefaultDates, useUtils, useLocaleText, useNow, } from './hooks/useUtils';\nexport type { ExportedUseViewsOptions } from './hooks/useViews';\nexport { useValidation } from './hooks/useValidation';\nexport type { ValidationProps, Validator, InferError } from './hooks/useValidation';\nexport { usePreviousMonthDisabled, useNextMonthDisabled } from './hooks/date-helpers-hooks';\nexport type { BaseFieldProps, FieldsTextFieldProps } from './models/fields';\nexport type { BasePickerProps, BasePickerInputProps, BaseNonStaticPickerProps, } from './models/props/basePickerProps';\nexport type { BaseToolbarProps, ExportedBaseToolbarProps } from './models/props/toolbar';\nexport type { DefaultizedProps, MakeOptional } from './models/helpers';\nexport type { WrapperVariant } from './models/common';\nexport type { BaseDateValidationProps, BaseTimeValidationProps, TimeValidationProps, MonthValidationProps, YearValidationProps, DayValidationProps, DateTimeValidationProps, } from './models/validation';\nexport { applyDefaultDate, replaceInvalidDateByNull, areDatesEqual, getTodayDate, } from './utils/date-utils';\nexport { splitFieldInternalAndForwardedProps } from './utils/fields';\nexport { getDefaultReferenceDate } from './utils/getDefaultReferenceDate';\nexport { executeInTheNextEventLoopTick, getActiveElement, onSpaceOrEnter, DEFAULT_DESKTOP_MODE_MEDIA_QUERY, } from './utils/utils';\nexport { useDefaultReduceAnimations } from './hooks/useDefaultReduceAnimations';\nexport { extractValidationProps } from './utils/validation/extractValidationProps';\nexport { validateDate } from './utils/validation/validateDate';\nexport { validateDateTime } from './utils/validation/validateDateTime';\nexport { validateTime } from './utils/validation/validateTime';\nexport { buildDeprecatedPropsWarning, buildWarning } from './utils/warning';\nexport { uncapitalizeObjectKeys } from './utils/slots-migration';\nexport type { UncapitalizeObjectKeys, SlotsAndSlotProps } from './utils/slots-migration';\nexport { DayCalendar } from '../DateCalendar/DayCalendar';\nexport type { DayCalendarProps, DayCalendarSlotsComponent, DayCalendarSlotsComponentsProps, ExportedDayCalendarProps, } from '../DateCalendar/DayCalendar';\nexport type { ExportedDateCalendarProps } from '../DateCalendar/DateCalendar.types';\nexport { useCalendarState } from '../DateCalendar/useCalendarState';\n","node_modules/@mui/x-date-pickers/locales/zhHK.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const zhHK: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/zhCN.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const zhCN: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/viVN.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const viVN: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/urPK.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const urPK: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/ukUA.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const ukUA: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/trTR.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const trTR: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/svSE.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const svSE: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/skSK.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const skSK: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/ruRU.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const ruRU: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/roRO.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const roRO: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/ptBR.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const ptBR: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/plPL.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const plPL: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/nlNL.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const nlNL: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/nbNO.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const nbNO: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/mk.d.ts":"export declare const mk: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: import(\"../internals/models\").TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/kzKZ.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const kzKZ: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/koKR.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const koKR: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/jaJP.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const jaJP: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/itIT.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const itIT: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/isIS.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const isIS: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/index.d.ts":"export * from './beBY';\nexport * from './caES';\nexport * from './csCZ';\nexport * from './daDK';\nexport * from './deDE';\nexport * from './elGR';\nexport * from './enUS';\nexport * from './esES';\nexport * from './eu';\nexport * from './faIR';\nexport * from './fiFI';\nexport * from './frFR';\nexport * from './heIL';\nexport * from './huHU';\nexport * from './isIS';\nexport * from './itIT';\nexport * from './jaJP';\nexport * from './koKR';\nexport * from './kzKZ';\nexport * from './mk';\nexport * from './nbNO';\nexport * from './nlNL';\nexport * from './plPL';\nexport * from './ptBR';\nexport * from './roRO';\nexport * from './ruRU';\nexport * from './skSK';\nexport * from './svSE';\nexport * from './trTR';\nexport * from './ukUA';\nexport * from './urPK';\nexport * from './viVN';\nexport * from './zhCN';\nexport * from './zhHK';\nexport * from './utils/pickersLocaleTextApi';\n","node_modules/@mui/x-date-pickers/locales/huHU.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const huHU: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/heIL.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const heIL: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/frFR.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const frFR: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/fiFI.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const fiFI: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/faIR.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const faIR: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/eu.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const eu: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/esES.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const esES: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/enUS.d.ts":"import { PickersLocaleText } from './utils/pickersLocaleTextApi';\nexport declare const DEFAULT_LOCALE: PickersLocaleText<any>;\nexport declare const enUS: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: import(\"../internals/models\").TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/elGR.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const elGR: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/deDE.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const deDE: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/daDK.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const daDK: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/csCZ.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const csCZ: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/caES.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const caES: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/locales/beBY.d.ts":"import { TimeViewWithMeridiem } from '../internals/models';\nexport declare const beBY: {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"..\").TimeView, time: any, adapter: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/dateViewRenderers/index.d.ts":"export { renderDateViewCalendar } from './dateViewRenderers';\nexport type { DateViewRendererProps } from './dateViewRenderers';\n","node_modules/@mui/x-date-pickers/dateViewRenderers/dateViewRenderers.d.ts":"import * as React from 'react';\nimport { DateCalendarProps } from '../DateCalendar';\nimport { DateView } from '../models';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\nexport interface DateViewRendererProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends Omit<DateCalendarProps<TDate>, 'views' | 'openTo' | 'view' | 'onViewChange' | 'focusedView'> {\n    view: TView;\n    onViewChange?: (view: TView) => void;\n    views: readonly TView[];\n    focusedView: TView | null;\n}\nexport declare const renderDateViewCalendar: <TDate extends unknown>({ view, onViewChange, views, focusedView, onFocusedViewChange, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minDate, maxDate, shouldDisableDate, shouldDisableMonth, shouldDisableYear, reduceAnimations, onMonthChange, monthsPerRow, onYearChange, yearsPerRow, defaultCalendarMonth, components, componentsProps, slots, slotProps, loading, renderLoading, disableHighlightToday, readOnly, disabled, showDaysOutsideCurrentMonth, dayOfWeekFormatter, sx, autoFocus, fixedWeekNumber, displayWeekNumber, timezone, }: DateViewRendererProps<TDate, DateView>) => React.JSX.Element;\n","node_modules/@mui/x-date-pickers/dateTimeViewRenderers/index.d.ts":"export { renderDesktopDateTimeView } from './dateTimeViewRenderers';\nexport type { DateTimeViewRendererProps } from './dateTimeViewRenderers';\n","node_modules/@mui/x-date-pickers/dateTimeViewRenderers/dateTimeViewRenderers.d.ts":"import * as React from 'react';\nimport { DateCalendarProps } from '../DateCalendar';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\nimport { MultiSectionDigitalClockProps } from '../MultiSectionDigitalClock';\nimport type { DateTimePickerProps } from '../DateTimePicker/DateTimePicker.types';\nexport interface DateTimeViewRendererProps<TDate> extends Omit<DateCalendarProps<TDate> & MultiSectionDigitalClockProps<TDate>, 'views' | 'openTo' | 'view' | 'onViewChange' | 'focusedView' | 'components' | 'componentsProps' | 'slots' | 'slotProps'>, Pick<DateTimePickerProps<TDate>, 'components' | 'componentsProps' | 'slots' | 'slotProps'> {\n    view: DateOrTimeViewWithMeridiem;\n    onViewChange?: (view: DateOrTimeViewWithMeridiem) => void;\n    views: readonly DateOrTimeViewWithMeridiem[];\n    focusedView: DateOrTimeViewWithMeridiem | null;\n    timeViewsCount: number;\n    shouldRenderTimeInASingleColumn: boolean;\n}\nexport declare const renderDesktopDateTimeView: <TDate extends unknown>({ view, onViewChange, views, focusedView, onFocusedViewChange, value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minDate, minTime, maxDate, maxTime, shouldDisableDate, shouldDisableMonth, shouldDisableYear, shouldDisableTime, shouldDisableClock, reduceAnimations, minutesStep, ampm, onMonthChange, monthsPerRow, onYearChange, yearsPerRow, defaultCalendarMonth, components, componentsProps, slots, slotProps, loading, renderLoading, disableHighlightToday, readOnly, disabled, showDaysOutsideCurrentMonth, dayOfWeekFormatter, sx, autoFocus, fixedWeekNumber, displayWeekNumber, timezone, disableIgnoringDatePartForTimeValidation, timeSteps, skipDisabled, timeViewsCount, shouldRenderTimeInASingleColumn, }: DateTimeViewRendererProps<TDate>) => React.JSX.Element;\n","node_modules/@mui/x-date-pickers/TimeField/useTimeField.d.ts":"import { UseTimeFieldProps, UseTimeFieldParams } from './TimeField.types';\nexport declare const useTimeField: <TDate, TChildProps extends {}>({ props: inProps, inputRef, }: UseTimeFieldParams<TDate, TChildProps>) => import(\"../internals/hooks/useField\").UseFieldResponse<Omit<TChildProps & Omit<UseTimeFieldProps<TDate>, \"format\" | keyof import(\"../internals\").BaseTimeValidationProps> & Required<Pick<UseTimeFieldProps<TDate>, \"format\" | keyof import(\"../internals\").BaseTimeValidationProps>>, keyof UseTimeFieldProps<any>>>;\n","node_modules/@mui/x-date-pickers/TimeField/index.d.ts":"export { TimeField } from './TimeField';\nexport { useTimeField as unstable_useTimeField } from './useTimeField';\nexport type { UseTimeFieldProps, UseTimeFieldComponentProps, TimeFieldProps, UseTimeFieldDefaultizedProps, } from './TimeField.types';\n","node_modules/@mui/x-date-pickers/TimeField/TimeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport TextField from '@mui/material/TextField';\nimport { UseFieldInternalProps } from '../internals/hooks/useField';\nimport { DefaultizedProps, MakeOptional } from '../internals/models/helpers';\nimport { BaseTimeValidationProps, TimeValidationProps } from '../internals/models/validation';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { FieldsTextFieldProps } from '../internals/models/fields';\nimport { FieldSection, TimeValidationError } from '../models';\nimport { FieldSlotsComponents, FieldSlotsComponentsProps } from '../internals';\nexport interface UseTimeFieldParams<TDate, TChildProps extends {}> {\n    props: UseTimeFieldComponentProps<TDate, TChildProps>;\n    inputRef?: React.Ref<HTMLInputElement>;\n}\nexport interface UseTimeFieldProps<TDate> extends MakeOptional<UseFieldInternalProps<TDate | null, TDate, FieldSection, TimeValidationError>, 'format'>, TimeValidationProps<TDate>, BaseTimeValidationProps {\n    /**\n     * 12h/24h view for hour selection clock.\n     * @default `utils.is12HourCycleInCurrentLocale()`\n     */\n    ampm?: boolean;\n}\nexport type UseTimeFieldDefaultizedProps<TDate> = DefaultizedProps<UseTimeFieldProps<TDate>, keyof BaseTimeValidationProps | 'format'>;\nexport type UseTimeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseTimeFieldProps<TDate>> & UseTimeFieldProps<TDate>;\nexport interface TimeFieldProps<TDate> extends UseTimeFieldComponentProps<TDate, FieldsTextFieldProps> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: TimeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: TimeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<TimeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: TimeFieldSlotsComponentsProps<TDate>;\n}\nexport type TimeFieldOwnerState<TDate> = TimeFieldProps<TDate>;\nexport interface TimeFieldSlotsComponent extends FieldSlotsComponents {\n    /**\n     * Form control with an input to render the value.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n}\nexport interface TimeFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    textField?: SlotComponentProps<typeof TextField, {}, TimeFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers/TimeField/TimeField.d.ts":"import * as React from 'react';\nimport { TimeFieldProps } from './TimeField.types';\ntype TimeFieldComponent = (<TDate>(props: TimeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimeField](http://mui.com/x/react-date-pickers/time-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [TimeField API](https://mui.com/x/api/date-pickers/time-field/)\n */\ndeclare const TimeField: TimeFieldComponent;\nexport { TimeField };\n","node_modules/@mui/x-date-pickers/YearCalendar/yearCalendarClasses.d.ts":"export interface YearCalendarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type YearCalendarClassKey = keyof YearCalendarClasses;\nexport declare function getYearCalendarUtilityClass(slot: string): string;\nexport declare const yearCalendarClasses: Record<\"root\", string>;\n","node_modules/@mui/x-date-pickers/YearCalendar/pickersYearClasses.d.ts":"export interface PickersYearClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the year button element. */\n    yearButton: string;\n    /** Styles applied to a selected year button element. */\n    selected: string;\n    /** Styles applied to a disabled year button element. */\n    disabled: string;\n}\nexport type PickersYearClassKey = keyof PickersYearClasses;\nexport declare function getPickersYearUtilityClass(slot: string): string;\nexport declare const pickersYearClasses: Record<keyof PickersYearClasses, string>;\n","node_modules/@mui/x-date-pickers/YearCalendar/index.d.ts":"export { YearCalendar } from './YearCalendar';\nexport type { YearCalendarProps } from './YearCalendar.types';\nexport { yearCalendarClasses, getYearCalendarUtilityClass } from './yearCalendarClasses';\nexport type { YearCalendarClasses, YearCalendarClassKey } from './yearCalendarClasses';\nexport { pickersYearClasses } from './pickersYearClasses';\nexport type { PickersYearClasses, PickersYearClassKey } from './pickersYearClasses';\nexport type { ExportedPickersYearProps } from './PickersYear';\n","node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.types.d.ts":"import { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { YearCalendarClasses } from './yearCalendarClasses';\nimport { BaseDateValidationProps, YearValidationProps } from '../internals/models/validation';\nimport { TimezoneProps } from '../models';\nexport interface ExportedYearCalendarProps {\n    /**\n     * Years rendered per row.\n     * @default 3\n     */\n    yearsPerRow?: 3 | 4;\n}\nexport interface YearCalendarProps<TDate> extends ExportedYearCalendarProps, YearValidationProps<TDate>, BaseDateValidationProps<TDate>, TimezoneProps {\n    autoFocus?: boolean;\n    /**\n     * className applied to the root element.\n     */\n    className?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<YearCalendarClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /** If `true` picker is disabled */\n    disabled?: boolean;\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: TDate | null;\n    /**\n     * The default selected value.\n     * Used when the component is not controlled.\n     */\n    defaultValue?: TDate | null;\n    /**\n     * The date used to generate the new value when both `value` and `defaultValue` are empty.\n     * @default The closest valid year using the validation props, except callbacks such as `shouldDisableYear`.\n     */\n    referenceDate?: TDate;\n    /**\n     * Callback fired when the value changes.\n     * @template TDate\n     * @param {TDate} value The new value.\n     */\n    onChange?: (value: TDate) => void;\n    /** If `true` picker is readonly */\n    readOnly?: boolean;\n    /**\n     * If `true`, today's date is rendering without highlighting with circle.\n     * @default false\n     */\n    disableHighlightToday?: boolean;\n    onYearFocus?: (year: number) => void;\n    hasFocus?: boolean;\n    onFocusedViewChange?: (hasFocus: boolean) => void;\n    gridLabelId?: string;\n}\n","node_modules/@mui/x-date-pickers/YearCalendar/YearCalendar.d.ts":"import * as React from 'react';\nimport { YearCalendarProps } from './YearCalendar.types';\ntype YearCalendarComponent = (<TDate>(props: YearCalendarProps<TDate>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)\n *\n * API:\n *\n * - [YearCalendar API](https://mui.com/x/api/date-pickers/year-calendar/)\n */\nexport declare const YearCalendar: YearCalendarComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/YearCalendar/PickersYear.d.ts":"import * as React from 'react';\nimport { PickersYearClasses } from './pickersYearClasses';\nexport interface ExportedPickersYearProps {\n    classes?: Partial<PickersYearClasses>;\n}\nexport interface PickersYearProps extends ExportedPickersYearProps {\n    'aria-current'?: React.AriaAttributes['aria-current'];\n    autoFocus?: boolean;\n    children: React.ReactNode;\n    className?: string;\n    disabled?: boolean;\n    onClick: (event: React.MouseEvent, year: number) => void;\n    onKeyDown: (event: React.KeyboardEvent, year: number) => void;\n    onFocus: (event: React.FocusEvent, year: number) => void;\n    onBlur: (event: React.FocusEvent, year: number) => void;\n    selected: boolean;\n    value: number;\n    tabIndex: number;\n    yearsPerRow: 3 | 4;\n}\n/**\n * @ignore - internal component.\n */\nexport declare const PickersYear: React.NamedExoticComponent<PickersYearProps>;\n","node_modules/@mui/x-date-pickers/TimeClock/timeClockClasses.d.ts":"export interface TimeClockClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the arrowSwitcher element. */\n    arrowSwitcher: string;\n}\nexport type TimeClockClassKey = keyof TimeClockClasses;\nexport declare function getTimeClockUtilityClass(slot: string): string;\nexport declare const timeClockClasses: TimeClockClasses;\n","node_modules/@mui/x-date-pickers/TimeClock/shared.d.ts":"export declare const CLOCK_WIDTH = 220;\nexport declare const CLOCK_HOUR_WIDTH = 36;\nexport declare const getMinutes: (offsetX: number, offsetY: number, step?: number) => number;\nexport declare const getHours: (offsetX: number, offsetY: number, ampm: boolean) => number;\n","node_modules/@mui/x-date-pickers/TimeClock/index.d.ts":"export { TimeClock } from './TimeClock';\nexport type { TimeClockProps, TimeClockSlotsComponent, TimeClockSlotsComponentsProps, } from './TimeClock.types';\nexport { clockClasses } from './clockClasses';\nexport type { ClockClasses, ClockClassKey } from './clockClasses';\nexport type { ClockProps } from './Clock';\nexport { clockNumberClasses } from './clockNumberClasses';\nexport type { ClockNumberClasses, ClockNumberClassKey } from './clockNumberClasses';\nexport type { ClockNumberProps } from './ClockNumber';\nexport { timeClockClasses, getTimeClockUtilityClass } from './timeClockClasses';\nexport type { TimeClockClasses, TimeClockClassKey } from './timeClockClasses';\nexport { clockPointerClasses } from './clockPointerClasses';\nexport type { ClockPointerClasses, ClockPointerClassKey } from './clockPointerClasses';\nexport type { ClockPointerProps } from './ClockPointer';\n","node_modules/@mui/x-date-pickers/TimeClock/clockPointerClasses.d.ts":"export interface ClockPointerClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the thumb element. */\n    thumb: string;\n}\nexport type ClockPointerClassKey = keyof ClockPointerClasses;\nexport declare function getClockPointerUtilityClass(slot: string): string;\nexport declare const clockPointerClasses: ClockPointerClasses;\n","node_modules/@mui/x-date-pickers/TimeClock/clockNumberClasses.d.ts":"export interface ClockNumberClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to a selected root element. */\n    selected: string;\n    /** Styles applied to a disabled root element. */\n    disabled: string;\n}\nexport type ClockNumberClassKey = keyof ClockNumberClasses;\nexport declare function getClockNumberUtilityClass(slot: string): string;\nexport declare const clockNumberClasses: ClockNumberClasses;\n","node_modules/@mui/x-date-pickers/TimeClock/clockClasses.d.ts":"export interface ClockClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the clock element. */\n    clock: string;\n    /** Styles applied to the wrapper element. */\n    wrapper: string;\n    /** Styles applied to the square mask element. */\n    squareMask: string;\n    /** Styles applied to the pin element. */\n    pin: string;\n    /** Styles applied to the am button element. */\n    amButton: string;\n    /** Styles applied to the pm button element. */\n    pmButton: string;\n    /** Styles applied to the meridiem typography element. */\n    meridiemText: string;\n}\nexport type ClockClassKey = keyof ClockClasses;\nexport declare function getClockUtilityClass(slot: string): string;\nexport declare const clockClasses: ClockClasses;\n","node_modules/@mui/x-date-pickers/TimeClock/TimeClock.types.d.ts":"import { TimeClockClasses } from './timeClockClasses';\nimport { PickersArrowSwitcherSlotsComponent, PickersArrowSwitcherSlotsComponentsProps } from '../internals/components/PickersArrowSwitcher';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { BaseClockProps, ExportedBaseClockProps } from '../internals/models/props/clock';\nimport { TimeView } from '../models';\nimport { TimeViewWithMeridiem } from '../internals/models';\nexport interface ExportedTimeClockProps<TDate> extends ExportedBaseClockProps<TDate> {\n    /**\n     * Display ampm controls under the clock (instead of in the toolbar).\n     * @default false\n     */\n    ampmInClock?: boolean;\n}\nexport interface TimeClockSlotsComponent extends PickersArrowSwitcherSlotsComponent {\n}\nexport interface TimeClockSlotsComponentsProps extends PickersArrowSwitcherSlotsComponentsProps {\n}\nexport interface TimeClockProps<TDate, TView extends TimeViewWithMeridiem = TimeView> extends ExportedTimeClockProps<TDate>, BaseClockProps<TDate, TView> {\n    /**\n     * Available views.\n     * @default ['hours', 'minutes']\n     */\n    views?: readonly TView[];\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TimeClockClasses>;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: TimeClockSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: TimeClockSlotsComponentsProps;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<TimeClockSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: TimeClockSlotsComponentsProps;\n    showViewSwitcher?: boolean;\n}\n","node_modules/@mui/x-date-pickers/TimeClock/TimeClock.d.ts":"import * as React from 'react';\nimport { TimeClockProps } from './TimeClock.types';\ntype TimeClockComponent = (<TDate>(props: TimeClockProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [TimeClock](https://mui.com/x/react-date-pickers/time-clock/)\n *\n * API:\n *\n * - [TimeClock API](https://mui.com/x/api/date-pickers/time-clock/)\n */\nexport declare const TimeClock: TimeClockComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/TimeClock/ClockPointer.d.ts":"import * as React from 'react';\nimport { TimeView } from '../models';\nimport { ClockPointerClasses } from './clockPointerClasses';\nexport interface ClockPointerProps extends React.HTMLAttributes<HTMLDivElement> {\n    hasSelected: boolean;\n    isInner: boolean;\n    type: TimeView;\n    viewValue: number;\n    classes?: Partial<ClockPointerClasses>;\n}\n/**\n * @ignore - internal component.\n */\nexport declare function ClockPointer(inProps: ClockPointerProps): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/TimeClock/ClockNumbers.d.ts":"import * as React from 'react';\nimport { MuiPickersAdapter } from '../models';\nimport type { PickerSelectionState } from '../internals/hooks/usePicker';\ninterface GetHourNumbersOptions<TDate> {\n    ampm: boolean;\n    value: TDate | null;\n    getClockNumberText: (hour: string) => string;\n    isDisabled: (value: number) => boolean;\n    onChange: (value: number, isFinish?: PickerSelectionState) => void;\n    /**\n     * DOM id that the selected option should have\n     * Should only be `undefined` on the server\n     */\n    selectedId: string | undefined;\n    utils: MuiPickersAdapter<TDate>;\n}\n/**\n * @ignore - internal component.\n */\nexport declare const getHourNumbers: <TDate extends unknown>({ ampm, value, getClockNumberText, isDisabled, selectedId, utils, }: GetHourNumbersOptions<TDate>) => React.JSX.Element[];\nexport declare const getMinutesNumbers: <TDate extends unknown>({ utils, value, isDisabled, getClockNumberText, selectedId, }: Omit<GetHourNumbersOptions<TDate>, \"value\" | \"ampm\"> & {\n    value: number;\n}) => React.JSX.Element[];\nexport {};\n","node_modules/@mui/x-date-pickers/TimeClock/ClockNumber.d.ts":"import * as React from 'react';\nimport { ClockNumberClasses } from './clockNumberClasses';\nexport interface ClockNumberProps extends React.HTMLAttributes<HTMLSpanElement> {\n    'aria-label': string;\n    disabled: boolean;\n    /**\n     * Make sure callers pass an id which. It should be defined if selected.\n     */\n    id: string | undefined;\n    index: number;\n    inner: boolean;\n    label: string;\n    selected: boolean;\n    classes?: Partial<ClockNumberClasses>;\n}\n/**\n * @ignore - internal component.\n */\nexport declare function ClockNumber(inProps: ClockNumberProps): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/TimeClock/Clock.d.ts":"import * as React from 'react';\nimport type { PickerSelectionState } from '../internals/hooks/usePicker';\nimport { useMeridiemMode } from '../internals/hooks/date-helpers-hooks';\nimport { TimeView } from '../models';\nimport { ClockClasses } from './clockClasses';\nexport interface ClockProps<TDate> extends ReturnType<typeof useMeridiemMode> {\n    ampm: boolean;\n    ampmInClock: boolean;\n    autoFocus?: boolean;\n    children: readonly React.ReactNode[];\n    isTimeDisabled: (timeValue: number, type: TimeView) => boolean;\n    minutesStep?: number;\n    onChange: (value: number, isFinish?: PickerSelectionState) => void;\n    /**\n     * DOM id that the selected option should have\n     * Should only be `undefined` on the server\n     */\n    selectedId: string | undefined;\n    type: TimeView;\n    /**\n     * The numeric value of the current view.\n     */\n    viewValue: number;\n    /**\n     * The current full date value.\n     */\n    value: TDate | null;\n    disabled?: boolean;\n    readOnly?: boolean;\n    className?: string;\n    classes?: Partial<ClockClasses>;\n}\n/**\n * @ignore - internal component.\n */\nexport declare function Clock<TDate>(inProps: ClockProps<TDate>): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/TimePicker/timePickerToolbarClasses.d.ts":"export interface TimePickerToolbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the separator element. */\n    separator: string;\n    /** Styles applied to the time sections element. */\n    hourMinuteLabel: string;\n    /** Styles applied to the time sections element in landscape mode. */\n    hourMinuteLabelLandscape: string;\n    /** Styles applied to the time sections element in \"rtl\" theme mode. */\n    hourMinuteLabelReverse: string;\n    /** Styles applied to the meridiem selection element. */\n    ampmSelection: string;\n    /** Styles applied to the meridiem selection element in landscape mode. */\n    ampmLandscape: string;\n    /** Styles applied to the meridiem label element. */\n    ampmLabel: string;\n}\nexport type TimePickerToolbarClassKey = keyof TimePickerToolbarClasses;\nexport declare function getTimePickerToolbarUtilityClass(slot: string): string;\nexport declare const timePickerToolbarClasses: TimePickerToolbarClasses;\n","node_modules/@mui/x-date-pickers/TimePicker/shared.d.ts":"import * as React from 'react';\nimport { DefaultizedProps } from '../internals/models/helpers';\nimport { TimeClockSlotsComponent, TimeClockSlotsComponentsProps } from '../TimeClock/TimeClock.types';\nimport { BasePickerInputProps } from '../internals/models/props/basePickerProps';\nimport { BaseTimeValidationProps } from '../internals/models/validation';\nimport { LocalizedComponent } from '../locales/utils/pickersLocaleTextApi';\nimport { TimePickerToolbarProps, ExportedTimePickerToolbarProps } from './TimePickerToolbar';\nimport { TimeValidationError } from '../models';\nimport { PickerViewRendererLookup } from '../internals/hooks/usePicker/usePickerViews';\nimport { TimeViewRendererProps } from '../timeViewRenderers';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { BaseClockProps, ExportedBaseClockProps } from '../internals/models/props/clock';\nimport { TimeViewWithMeridiem } from '../internals/models';\nexport interface BaseTimePickerSlotsComponent<TDate> extends TimeClockSlotsComponent {\n    /**\n     * Custom component for the toolbar rendered above the views.\n     * @default TimePickerToolbar\n     */\n    Toolbar?: React.JSXElementConstructor<TimePickerToolbarProps<TDate>>;\n}\nexport interface BaseTimePickerSlotsComponentsProps extends TimeClockSlotsComponentsProps {\n    toolbar?: ExportedTimePickerToolbarProps;\n}\nexport interface BaseTimePickerProps<TDate, TView extends TimeViewWithMeridiem> extends BasePickerInputProps<TDate | null, TDate, TView, TimeValidationError>, ExportedBaseClockProps<TDate> {\n    /**\n     * Display ampm controls under the clock (instead of in the toolbar).\n     * @default true on desktop, false on mobile\n     */\n    ampmInClock?: boolean;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: BaseTimePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: BaseTimePickerSlotsComponentsProps;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<BaseTimePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: BaseTimePickerSlotsComponentsProps;\n    /**\n     * Define custom view renderers for each section.\n     * If `null`, the section will only have field editing.\n     * If `undefined`, internally defined view will be the used.\n     */\n    viewRenderers?: Partial<PickerViewRendererLookup<TDate | null, TView, TimeViewRendererProps<TView, BaseClockProps<TDate, TView>>, {}>>;\n}\ntype UseTimePickerDefaultizedProps<TDate, TView extends TimeViewWithMeridiem, Props extends BaseTimePickerProps<TDate, TView>> = LocalizedComponent<TDate, Omit<DefaultizedProps<Props, 'views' | 'openTo' | 'ampm' | keyof BaseTimeValidationProps>, 'components' | 'componentsProps'>>;\nexport declare function useTimePickerDefaultizedProps<TDate, TView extends TimeViewWithMeridiem, Props extends BaseTimePickerProps<TDate, TView>>(props: Props, name: string): UseTimePickerDefaultizedProps<TDate, TView, Props>;\nexport {};\n","node_modules/@mui/x-date-pickers/TimePicker/index.d.ts":"export { TimePicker } from './TimePicker';\nexport type { TimePickerProps, TimePickerSlotsComponents, TimePickerSlotsComponentsProps, } from './TimePicker.types';\nexport { TimePickerToolbar } from './TimePickerToolbar';\nexport type { TimePickerToolbarProps } from './TimePickerToolbar';\nexport { timePickerToolbarClasses } from './timePickerToolbarClasses';\nexport type { TimePickerToolbarClassKey, TimePickerToolbarClasses, } from './timePickerToolbarClasses';\n","node_modules/@mui/x-date-pickers/TimePicker/TimePickerToolbar.d.ts":"import * as React from 'react';\nimport { BaseToolbarProps, ExportedBaseToolbarProps } from '../internals/models/props/toolbar';\nimport { TimePickerToolbarClasses } from './timePickerToolbarClasses';\nimport { TimeViewWithMeridiem } from '../internals/models';\nexport interface TimePickerToolbarProps<TDate> extends BaseToolbarProps<TDate | null, TimeViewWithMeridiem>, ExportedTimePickerToolbarProps {\n    ampm?: boolean;\n    ampmInClock?: boolean;\n}\nexport interface ExportedTimePickerToolbarProps extends ExportedBaseToolbarProps {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<TimePickerToolbarClasses>;\n}\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)\n *\n * API:\n *\n * - [TimePickerToolbar API](https://mui.com/x/api/date-pickers/time-picker-toolbar/)\n */\ndeclare function TimePickerToolbar<TDate extends unknown>(inProps: TimePickerToolbarProps<TDate>): React.JSX.Element;\ndeclare namespace TimePickerToolbar {\n    var propTypes: any;\n}\nexport { TimePickerToolbar };\n","node_modules/@mui/x-date-pickers/TimePicker/TimePicker.types.d.ts":"import { DesktopTimePickerProps, DesktopTimePickerSlotsComponent, DesktopTimePickerSlotsComponentsProps } from '../DesktopTimePicker';\nimport { TimeViewWithMeridiem } from '../internals/models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { MobileTimePickerProps, MobileTimePickerSlotsComponent, MobileTimePickerSlotsComponentsProps } from '../MobileTimePicker';\nexport interface TimePickerSlotsComponents<TDate> extends DesktopTimePickerSlotsComponent<TDate>, MobileTimePickerSlotsComponent<TDate, TimeViewWithMeridiem> {\n}\nexport interface TimePickerSlotsComponentsProps<TDate> extends DesktopTimePickerSlotsComponentsProps<TDate>, MobileTimePickerSlotsComponentsProps<TDate, TimeViewWithMeridiem> {\n}\nexport interface TimePickerProps<TDate> extends DesktopTimePickerProps<TDate>, Omit<MobileTimePickerProps<TDate, TimeViewWithMeridiem>, 'views'> {\n    /**\n     * CSS media query when `Mobile` mode will be changed to `Desktop`.\n     * @default '@media (pointer: fine)'\n     * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n     */\n    desktopModeMediaQuery?: string;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: TimePickerSlotsComponents<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: TimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<TimePickerSlotsComponents<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: TimePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/TimePicker/TimePicker.d.ts":"import * as React from 'react';\nimport { TimePickerProps } from './TimePicker.types';\ntype TimePickerComponent = (<TDate>(props: TimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [TimePicker API](https://mui.com/x/api/date-pickers/time-picker/)\n */\ndeclare const TimePicker: TimePickerComponent;\nexport { TimePicker };\n","node_modules/@mui/x-date-pickers/StaticDateTimePicker/index.d.ts":"export { StaticDateTimePicker } from './StaticDateTimePicker';\nexport type { StaticDateTimePickerProps, StaticDateTimePickerSlotsComponent, StaticDateTimePickerSlotsComponentsProps, } from './StaticDateTimePicker.types';\n","node_modules/@mui/x-date-pickers/StaticDateTimePicker/StaticDateTimePicker.types.d.ts":"import { BaseDateTimePickerProps, BaseDateTimePickerSlotsComponent, BaseDateTimePickerSlotsComponentsProps } from '../DateTimePicker/shared';\nimport { StaticOnlyPickerProps, UseStaticPickerSlotsComponent, UseStaticPickerSlotsComponentsProps } from '../internals/hooks/useStaticPicker';\nimport { MakeOptional, UncapitalizeObjectKeys } from '../internals';\nimport { DateOrTimeView } from '../models';\nexport interface StaticDateTimePickerSlotsComponent<TDate> extends BaseDateTimePickerSlotsComponent<TDate>, UseStaticPickerSlotsComponent<TDate, DateOrTimeView> {\n}\nexport interface StaticDateTimePickerSlotsComponentsProps<TDate> extends BaseDateTimePickerSlotsComponentsProps<TDate>, UseStaticPickerSlotsComponentsProps<TDate, DateOrTimeView> {\n}\nexport interface StaticDateTimePickerProps<TDate> extends BaseDateTimePickerProps<TDate, DateOrTimeView>, MakeOptional<StaticOnlyPickerProps, 'displayStaticWrapperAs'> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: StaticDateTimePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: StaticDateTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<StaticDateTimePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: StaticDateTimePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/StaticDateTimePicker/StaticDateTimePicker.d.ts":"import * as React from 'react';\nimport { StaticDateTimePickerProps } from './StaticDateTimePicker.types';\ntype StaticDateTimePickerComponent = (<TDate>(props: StaticDateTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticDateTimePicker API](https://mui.com/x/api/date-pickers/static-date-time-picker/)\n */\ndeclare const StaticDateTimePicker: StaticDateTimePickerComponent;\nexport { StaticDateTimePicker };\n","node_modules/@mui/x-date-pickers/StaticTimePicker/index.d.ts":"export { StaticTimePicker } from './StaticTimePicker';\nexport type { StaticTimePickerProps, StaticTimePickerSlotsComponent, StaticTimePickerSlotsComponentsProps, } from './StaticTimePicker.types';\n","node_modules/@mui/x-date-pickers/StaticTimePicker/StaticTimePicker.types.d.ts":"import { BaseTimePickerProps, BaseTimePickerSlotsComponent, BaseTimePickerSlotsComponentsProps } from '../TimePicker/shared';\nimport { StaticOnlyPickerProps, UseStaticPickerSlotsComponent, UseStaticPickerSlotsComponentsProps } from '../internals/hooks/useStaticPicker';\nimport { MakeOptional, UncapitalizeObjectKeys } from '../internals';\nimport { TimeView } from '../models';\nexport interface StaticTimePickerSlotsComponent<TDate> extends BaseTimePickerSlotsComponent<TDate>, UseStaticPickerSlotsComponent<TDate, TimeView> {\n}\nexport interface StaticTimePickerSlotsComponentsProps<TDate> extends BaseTimePickerSlotsComponentsProps, UseStaticPickerSlotsComponentsProps<TDate, TimeView> {\n}\nexport interface StaticTimePickerProps<TDate> extends BaseTimePickerProps<TDate, TimeView>, MakeOptional<StaticOnlyPickerProps, 'displayStaticWrapperAs'> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: StaticTimePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: StaticTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<StaticTimePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: StaticTimePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/StaticTimePicker/StaticTimePicker.d.ts":"import * as React from 'react';\nimport { StaticTimePickerProps } from './StaticTimePicker.types';\ntype StaticTimePickerComponent = (<TDate>(props: StaticTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticTimePicker API](https://mui.com/x/api/date-pickers/static-time-picker/)\n */\ndeclare const StaticTimePicker: StaticTimePickerComponent;\nexport { StaticTimePicker };\n","node_modules/@mui/x-date-pickers/StaticDatePicker/index.d.ts":"export { StaticDatePicker } from './StaticDatePicker';\nexport type { StaticDatePickerProps, StaticDatePickerSlotsComponent, StaticDatePickerSlotsComponentsProps, } from './StaticDatePicker.types';\n","node_modules/@mui/x-date-pickers/StaticDatePicker/StaticDatePicker.types.d.ts":"import { BaseDatePickerProps, BaseDatePickerSlotsComponent, BaseDatePickerSlotsComponentsProps } from '../DatePicker/shared';\nimport { StaticOnlyPickerProps, UseStaticPickerSlotsComponent, UseStaticPickerSlotsComponentsProps } from '../internals/hooks/useStaticPicker';\nimport { MakeOptional, UncapitalizeObjectKeys } from '../internals';\nimport { DateView } from '../models';\nexport interface StaticDatePickerSlotsComponent<TDate> extends BaseDatePickerSlotsComponent<TDate>, UseStaticPickerSlotsComponent<TDate, DateView> {\n}\nexport interface StaticDatePickerSlotsComponentsProps<TDate> extends BaseDatePickerSlotsComponentsProps<TDate>, UseStaticPickerSlotsComponentsProps<TDate, DateView> {\n}\nexport interface StaticDatePickerProps<TDate> extends BaseDatePickerProps<TDate>, MakeOptional<StaticOnlyPickerProps, 'displayStaticWrapperAs'> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: StaticDatePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: StaticDatePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<StaticDatePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: StaticDatePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/StaticDatePicker/StaticDatePicker.d.ts":"import * as React from 'react';\nimport { StaticDatePickerProps } from './StaticDatePicker.types';\ntype StaticDatePickerComponent = (<TDate>(props: StaticDatePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticDatePicker API](https://mui.com/x/api/date-pickers/static-date-picker/)\n */\ndeclare const StaticDatePicker: StaticDatePickerComponent;\nexport { StaticDatePicker };\n","node_modules/@mui/x-date-pickers/PickersShortcuts/index.d.ts":"export { PickersShortcuts } from './PickersShortcuts';\nexport type { PickersShortcutsProps, PickersShortcutsItem, PickersShortcutsItemContext, PickerShortcutChangeImportance, } from './PickersShortcuts';\n","node_modules/@mui/x-date-pickers/PickersShortcuts/PickersShortcuts.d.ts":"import * as React from 'react';\nimport { ListProps } from '@mui/material/List';\ninterface PickersShortcutsItemGetValueParams<TValue> {\n    isValid: (value: TValue) => boolean;\n}\nexport interface PickersShortcutsItem<TValue> {\n    label: string;\n    getValue: (params: PickersShortcutsItemGetValueParams<TValue>) => TValue;\n}\nexport type PickersShortcutsItemContext = Omit<PickersShortcutsItem<unknown>, 'getValue'>;\nexport type PickerShortcutChangeImportance = 'set' | 'accept';\nexport interface ExportedPickersShortcutProps<TValue> extends Omit<ListProps, 'onChange'> {\n    /**\n     * Ordered array of shortcuts to display.\n     * If empty, does not display the shortcuts.\n     * @default `[]`\n     */\n    items?: PickersShortcutsItem<TValue>[];\n    /**\n     * Importance of the change when picking a shortcut:\n     * - \"accept\": fires `onChange`, fires `onAccept` and closes the picker.\n     * - \"set\": fires `onChange` but do not fire `onAccept` and does not close the picker.\n     * @default \"accept\"\n     */\n    changeImportance?: PickerShortcutChangeImportance;\n}\nexport interface PickersShortcutsProps<TValue> extends ExportedPickersShortcutProps<TValue> {\n    isLandscape: boolean;\n    onChange: (newValue: TValue, changeImportance?: PickerShortcutChangeImportance, shortcut?: PickersShortcutsItemContext) => void;\n    isValid: (value: TValue) => boolean;\n}\n/**\n * Demos:\n *\n * - [Shortcuts](https://mui.com/x/react-date-pickers/shortcuts/)\n *\n * API:\n *\n * - [PickersShortcuts API](https://mui.com/x/api/date-pickers/pickers-shortcuts/)\n */\ndeclare function PickersShortcuts<TValue>(props: PickersShortcutsProps<TValue>): React.JSX.Element | null;\ndeclare namespace PickersShortcuts {\n    var propTypes: any;\n}\nexport { PickersShortcuts };\n","node_modules/@mui/x-date-pickers/PickersActionBar/index.d.ts":"export { PickersActionBar } from './PickersActionBar';\nexport type { PickersActionBarProps, PickersActionBarAction } from './PickersActionBar';\n","node_modules/@mui/x-date-pickers/PickersActionBar/PickersActionBar.d.ts":"import * as React from 'react';\nimport { DialogActionsProps } from '@mui/material/DialogActions';\nexport type PickersActionBarAction = 'clear' | 'cancel' | 'accept' | 'today';\nexport interface PickersActionBarProps extends DialogActionsProps {\n    /**\n     * Ordered array of actions to display.\n     * If empty, does not display that action bar.\n     * @default `['cancel', 'accept']` for mobile and `[]` for desktop\n     */\n    actions?: PickersActionBarAction[];\n    onAccept: () => void;\n    onClear: () => void;\n    onCancel: () => void;\n    onSetToday: () => void;\n}\n/**\n * Demos:\n *\n * - [Custom slots and subcomponents](https://mui.com/x/react-date-pickers/custom-components/)\n * - [Custom layout](https://mui.com/x/react-date-pickers/custom-layout/)\n *\n * API:\n *\n * - [PickersActionBar API](https://mui.com/x/api/date-pickers/pickers-action-bar/)\n */\ndeclare function PickersActionBar(props: PickersActionBarProps): React.JSX.Element | null;\ndeclare namespace PickersActionBar {\n    var propTypes: any;\n}\nexport { PickersActionBar };\n","node_modules/@mui/x-date-pickers/PickersDay/pickersDayClasses.d.ts":"export interface PickersDayClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `disableMargin=false`. */\n    dayWithMargin: string;\n    /** Styles applied to the root element if `outsideCurrentMonth=true` and `showDaysOutsideCurrentMonth=true`. */\n    dayOutsideMonth: string;\n    /** Styles applied to the root element if `outsideCurrentMonth=true` and `showDaysOutsideCurrentMonth=false`. */\n    hiddenDaySpacingFiller: string;\n    /** Styles applied to the root element if `disableHighlightToday=false` and `today=true`. */\n    today: string;\n    /** State class applied to the root element if `selected=true`. */\n    selected: string;\n    /** State class applied to the root element if `disabled=true`. */\n    disabled: string;\n}\nexport type PickersDayClassKey = keyof PickersDayClasses;\nexport declare function getPickersDayUtilityClass(slot: string): string;\nexport declare const pickersDayClasses: Record<keyof PickersDayClasses, string>;\n","node_modules/@mui/x-date-pickers/PickersDay/index.d.ts":"export { PickersDay } from './PickersDay';\nexport type { PickersDayProps } from './PickersDay';\nexport { pickersDayClasses, getPickersDayUtilityClass } from './pickersDayClasses';\nexport type { PickersDayClasses, PickersDayClassKey } from './pickersDayClasses';\n","node_modules/@mui/x-date-pickers/PickersDay/PickersDay.d.ts":"import * as React from 'react';\nimport { ButtonBaseProps } from '@mui/material/ButtonBase';\nimport { ExtendMui } from '../internals/models/helpers';\nimport { PickersDayClasses } from './pickersDayClasses';\nexport interface ExportedPickersDayProps {\n    /**\n     * If `true`, today's date is rendering without highlighting with circle.\n     * @default false\n     */\n    disableHighlightToday?: boolean;\n    /**\n     * If `true`, days outside the current month are rendered:\n     *\n     * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.\n     *\n     * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.\n     *\n     * - ignored if `calendars` equals more than `1` on range pickers.\n     * @default false\n     */\n    showDaysOutsideCurrentMonth?: boolean;\n}\nexport interface PickersDayProps<TDate> extends ExportedPickersDayProps, Omit<ExtendMui<ButtonBaseProps>, 'onKeyDown' | 'onFocus' | 'onBlur' | 'onMouseEnter' | 'LinkComponent'> {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersDayClasses>;\n    /**\n     * The date to show.\n     */\n    day: TDate;\n    /**\n     * If `true`, renders as disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, days are rendering without margin. Useful for displaying linked range of days.\n     * @default false\n     */\n    disableMargin?: boolean;\n    isAnimating?: boolean;\n    onFocus?: (event: React.FocusEvent<HTMLButtonElement>, day: TDate) => void;\n    onBlur?: (event: React.FocusEvent<HTMLButtonElement>, day: TDate) => void;\n    onKeyDown?: (event: React.KeyboardEvent<HTMLButtonElement>, day: TDate) => void;\n    onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement>, day: TDate) => void;\n    onDaySelect: (day: TDate) => void;\n    /**\n     * If `true`, day is outside of month and will be hidden.\n     */\n    outsideCurrentMonth: boolean;\n    /**\n     * If `true`, day is the first visible cell of the month.\n     * Either the first day of the month or the first day of the week depending on `showDaysOutsideCurrentMonth`.\n     */\n    isFirstVisibleCell: boolean;\n    /**\n     * If `true`, day is the last visible cell of the month.\n     * Either the last day of the month or the last day of the week depending on `showDaysOutsideCurrentMonth`.\n     */\n    isLastVisibleCell: boolean;\n    /**\n     * If `true`, renders as selected.\n     * @default false\n     */\n    selected?: boolean;\n    /**\n     * If `true`, renders as today date.\n     * @default false\n     */\n    today?: boolean;\n}\ntype PickersDayComponent = (<TDate>(props: PickersDayProps<TDate> & React.RefAttributes<HTMLButtonElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)\n * API:\n *\n * - [PickersDay API](https://mui.com/x/api/date-pickers/pickers-day/)\n */\nexport declare const PickersDay: PickersDayComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockSectionClasses.d.ts":"export interface MultiSectionDigitalClockSectionClasses {\n    /** Styles applied to the root (list) element. */\n    root: string;\n    /** Styles applied to the list item (by default: MenuItem) element. */\n    item: string;\n}\nexport type MultiSectionDigitalClockSectionClassKey = keyof MultiSectionDigitalClockSectionClasses;\nexport declare function getMultiSectionDigitalClockSectionUtilityClass(slot: string): string;\nexport declare const multiSectionDigitalClockSectionClasses: MultiSectionDigitalClockSectionClasses;\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/multiSectionDigitalClockClasses.d.ts":"export interface MultiSectionDigitalClockClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type MultiSectionDigitalClockClassKey = keyof MultiSectionDigitalClockClasses;\nexport declare function getMultiSectionDigitalClockUtilityClass(slot: string): string;\nexport declare const multiSectionDigitalClockClasses: MultiSectionDigitalClockClasses;\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/index.d.ts":"export { MultiSectionDigitalClock } from './MultiSectionDigitalClock';\nexport type { MultiSectionDigitalClockProps, MultiSectionDigitalClockSlotsComponent, MultiSectionDigitalClockSlotsComponentsProps, } from './MultiSectionDigitalClock.types';\nexport { multiSectionDigitalClockSectionClasses } from './multiSectionDigitalClockSectionClasses';\nexport type { MultiSectionDigitalClockSectionClasses, MultiSectionDigitalClockSectionClassKey, } from './multiSectionDigitalClockSectionClasses';\nexport type { ExportedMultiSectionDigitalClockSectionProps } from './MultiSectionDigitalClockSection';\nexport { multiSectionDigitalClockClasses, getMultiSectionDigitalClockUtilityClass, } from './multiSectionDigitalClockClasses';\nexport type { MultiSectionDigitalClockClasses, MultiSectionDigitalClockClassKey, } from './multiSectionDigitalClockClasses';\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClockSection.d.ts":"import * as React from 'react';\nimport { MultiSectionDigitalClockSectionClasses } from './multiSectionDigitalClockSectionClasses';\nimport type { MultiSectionDigitalClockOption, MultiSectionDigitalClockSlotsComponent, MultiSectionDigitalClockSlotsComponentsProps } from './MultiSectionDigitalClock.types';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nexport interface ExportedMultiSectionDigitalClockSectionProps {\n    className?: string;\n    classes?: Partial<MultiSectionDigitalClockSectionClasses>;\n    slots?: UncapitalizeObjectKeys<MultiSectionDigitalClockSlotsComponent>;\n    slotProps?: MultiSectionDigitalClockSlotsComponentsProps;\n}\nexport interface MultiSectionDigitalClockSectionProps<TValue> extends ExportedMultiSectionDigitalClockSectionProps {\n    autoFocus?: boolean;\n    disabled?: boolean;\n    readOnly?: boolean;\n    items: MultiSectionDigitalClockOption<TValue>[];\n    onChange: (value: TValue) => void;\n    active?: boolean;\n    skipDisabled?: boolean;\n    role?: string;\n}\ntype MultiSectionDigitalClockSectionComponent = <TValue>(props: MultiSectionDigitalClockSectionProps<TValue> & React.RefAttributes<HTMLUListElement>) => React.JSX.Element & {\n    propTypes?: any;\n};\n/**\n * @ignore - internal component.\n */\nexport declare const MultiSectionDigitalClockSection: MultiSectionDigitalClockSectionComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.utils.d.ts":"import { MuiPickersAdapter } from '../models';\nimport { MultiSectionDigitalClockOption } from './MultiSectionDigitalClock.types';\ninterface IGetHoursSectionOptions<TDate> {\n    now: TDate;\n    value: TDate | null;\n    utils: MuiPickersAdapter<TDate>;\n    ampm: boolean;\n    isDisabled: (value: number) => boolean;\n    timeStep: number;\n    resolveAriaLabel: (value: string) => string;\n}\nexport declare const getHourSectionOptions: <TDate>({ now, value, utils, ampm, isDisabled, resolveAriaLabel, timeStep, }: IGetHoursSectionOptions<TDate>) => MultiSectionDigitalClockOption<number>[];\ninterface IGetTimeSectionOptions<TDate> {\n    value: number | null;\n    utils: MuiPickersAdapter<TDate>;\n    isDisabled: (value: number) => boolean;\n    timeStep: number;\n    resolveLabel: (value: number) => string;\n    hasValue?: boolean;\n    resolveAriaLabel: (value: string) => string;\n}\nexport declare const getTimeSectionOptions: <TDate>({ value, utils, isDisabled, timeStep, resolveLabel, resolveAriaLabel, hasValue, }: IGetTimeSectionOptions<TDate>) => MultiSectionDigitalClockOption<number>[];\nexport {};\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.types.d.ts":"/// <reference types=\"react\" />\nimport { SlotComponentProps } from '@mui/base/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { MultiSectionDigitalClockClasses } from './multiSectionDigitalClockClasses';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { BaseClockProps, ExportedBaseClockProps, MultiSectionDigitalClockOnlyProps } from '../internals/models/props/clock';\nimport { MultiSectionDigitalClockSectionProps } from './MultiSectionDigitalClockSection';\nimport { TimeViewWithMeridiem } from '../internals/models';\nexport interface MultiSectionDigitalClockOption<TValue> {\n    isDisabled?: (value: TValue) => boolean;\n    isSelected: (value: TValue) => boolean;\n    label: string;\n    value: TValue;\n    ariaLabel: string;\n}\nexport interface ExportedMultiSectionDigitalClockProps<TDate> extends ExportedBaseClockProps<TDate>, MultiSectionDigitalClockOnlyProps {\n}\nexport interface MultiSectionDigitalClockViewProps<TValue> extends Pick<MultiSectionDigitalClockSectionProps<TValue>, 'onChange' | 'items'> {\n}\nexport interface MultiSectionDigitalClockSlotsComponent {\n    /**\n     * Component responsible for rendering a single multi section digital clock section item.\n     * @default MenuItem from '@mui/material'\n     */\n    DigitalClockSectionItem?: React.ElementType;\n}\nexport interface MultiSectionDigitalClockSlotsComponentsProps {\n    digitalClockSectionItem?: SlotComponentProps<typeof MenuItem, {}, Record<string, any>>;\n}\nexport interface MultiSectionDigitalClockProps<TDate> extends ExportedMultiSectionDigitalClockProps<TDate>, BaseClockProps<TDate, TimeViewWithMeridiem> {\n    /**\n     * Available views.\n     * @default ['hours', 'minutes']\n     */\n    views?: readonly TimeViewWithMeridiem[];\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<MultiSectionDigitalClockClasses>;\n    /**\n     * Overrideable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MultiSectionDigitalClockSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MultiSectionDigitalClockSlotsComponentsProps;\n    /**\n     * Overrideable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MultiSectionDigitalClockSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MultiSectionDigitalClockSlotsComponentsProps;\n}\n","node_modules/@mui/x-date-pickers/MultiSectionDigitalClock/MultiSectionDigitalClock.d.ts":"import * as React from 'react';\nimport { MultiSectionDigitalClockProps } from './MultiSectionDigitalClock.types';\ntype MultiSectionDigitalClockComponent = (<TDate>(props: MultiSectionDigitalClockProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [DigitalClock](https://mui.com/x/react-date-pickers/digital-clock/)\n *\n * API:\n *\n * - [MultiSectionDigitalClock API](https://mui.com/x/api/date-pickers/multi-section-digital-clock/)\n */\nexport declare const MultiSectionDigitalClock: MultiSectionDigitalClockComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/MobileTimePicker/index.d.ts":"export { MobileTimePicker } from './MobileTimePicker';\nexport type { MobileTimePickerProps, MobileTimePickerSlotsComponent, MobileTimePickerSlotsComponentsProps, } from './MobileTimePicker.types';\n","node_modules/@mui/x-date-pickers/MobileTimePicker/MobileTimePicker.types.d.ts":"import { UseMobilePickerSlotsComponent, ExportedUseMobilePickerSlotsComponentsProps, MobileOnlyPickerProps } from '../internals/hooks/useMobilePicker';\nimport { BaseTimePickerProps, BaseTimePickerSlotsComponent, BaseTimePickerSlotsComponentsProps } from '../TimePicker/shared';\nimport { MakeOptional } from '../internals/models/helpers';\nimport { TimeView } from '../models';\nimport { TimeViewWithMeridiem } from '../internals/models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nexport interface MobileTimePickerSlotsComponent<TDate, TView extends TimeViewWithMeridiem = TimeView> extends BaseTimePickerSlotsComponent<TDate>, MakeOptional<UseMobilePickerSlotsComponent<TDate, TView>, 'Field'> {\n}\nexport interface MobileTimePickerSlotsComponentsProps<TDate, TView extends TimeViewWithMeridiem = TimeView> extends BaseTimePickerSlotsComponentsProps, ExportedUseMobilePickerSlotsComponentsProps<TDate, TView> {\n}\nexport interface MobileTimePickerProps<TDate, TView extends TimeViewWithMeridiem = TimeView> extends BaseTimePickerProps<TDate, TView>, MobileOnlyPickerProps<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MobileTimePickerSlotsComponent<TDate, TView>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MobileTimePickerSlotsComponentsProps<TDate, TView>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MobileTimePickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MobileTimePickerSlotsComponentsProps<TDate, TView>;\n}\n","node_modules/@mui/x-date-pickers/MobileTimePicker/MobileTimePicker.d.ts":"import * as React from 'react';\nimport { MobileTimePickerProps } from './MobileTimePicker.types';\ntype MobileTimePickerComponent = (<TDate>(props: MobileTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [MobileTimePicker API](https://mui.com/x/api/date-pickers/mobile-time-picker/)\n */\ndeclare const MobileTimePicker: MobileTimePickerComponent;\nexport { MobileTimePicker };\n","node_modules/@mui/x-date-pickers/MonthCalendar/pickersMonthClasses.d.ts":"export interface PickersMonthClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the month button element. */\n    monthButton: string;\n    /** Styles applied to a disabled month button element. */\n    disabled: string;\n    /** Styles applied to a selected month button element. */\n    selected: string;\n}\nexport type PickersMonthClassKey = keyof PickersMonthClasses;\nexport declare function getPickersMonthUtilityClass(slot: string): string;\nexport declare const pickersMonthClasses: Record<keyof PickersMonthClasses, string>;\n","node_modules/@mui/x-date-pickers/MonthCalendar/monthCalendarClasses.d.ts":"export declare function getMonthCalendarUtilityClass(slot: string): string;\nexport interface MonthCalendarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type MonthCalendarClassKey = keyof MonthCalendarClasses;\nexport declare const monthCalendarClasses: Record<\"root\", string>;\n","node_modules/@mui/x-date-pickers/MonthCalendar/index.d.ts":"export { MonthCalendar } from './MonthCalendar';\nexport type { MonthCalendarProps } from './MonthCalendar.types';\nexport { monthCalendarClasses, getMonthCalendarUtilityClass } from './monthCalendarClasses';\nexport type { MonthCalendarClasses, MonthCalendarClassKey } from './monthCalendarClasses';\nexport { pickersMonthClasses } from './pickersMonthClasses';\nexport type { PickersMonthClassKey, PickersMonthClasses } from './pickersMonthClasses';\nexport type { ExportedPickersMonthProps } from './PickersMonth';\n","node_modules/@mui/x-date-pickers/MonthCalendar/PickersMonth.d.ts":"import * as React from 'react';\nimport { PickersMonthClasses } from './pickersMonthClasses';\nexport interface ExportedPickersMonthProps {\n    classes?: Partial<PickersMonthClasses>;\n}\nexport interface PickersMonthProps extends ExportedPickersMonthProps {\n    'aria-current'?: React.AriaAttributes['aria-current'];\n    'aria-label'?: React.AriaAttributes['aria-label'];\n    autoFocus: boolean;\n    children: React.ReactNode;\n    disabled?: boolean;\n    onClick: (event: React.MouseEvent, month: number) => void;\n    onKeyDown: (event: React.KeyboardEvent, month: number) => void;\n    onFocus: (event: React.FocusEvent, month: number) => void;\n    onBlur: (event: React.FocusEvent, month: number) => void;\n    selected?: boolean;\n    value: number;\n    tabIndex: number;\n    monthsPerRow: 3 | 4;\n}\n/**\n * @ignore - do not document.\n */\nexport declare const PickersMonth: React.NamedExoticComponent<PickersMonthProps>;\n","node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.types.d.ts":"import { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { MonthCalendarClasses } from './monthCalendarClasses';\nimport { BaseDateValidationProps, MonthValidationProps } from '../internals/models/validation';\nimport { TimezoneProps } from '../models';\nexport interface ExportedMonthCalendarProps {\n    /**\n     * Months rendered per row.\n     * @default 3\n     */\n    monthsPerRow?: 3 | 4;\n}\nexport interface MonthCalendarProps<TDate> extends ExportedMonthCalendarProps, MonthValidationProps<TDate>, BaseDateValidationProps<TDate>, TimezoneProps {\n    autoFocus?: boolean;\n    /**\n     * className applied to the root element.\n     */\n    className?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<MonthCalendarClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /** If `true` picker is disabled */\n    disabled?: boolean;\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: TDate | null;\n    /**\n     * The default selected value.\n     * Used when the component is not controlled.\n     */\n    defaultValue?: TDate | null;\n    /**\n     * The date used to generate the new value when both `value` and `defaultValue` are empty.\n     * @default The closest valid month using the validation props, except callbacks such as `shouldDisableMonth`.\n     */\n    referenceDate?: TDate;\n    /**\n     * Callback fired when the value changes.\n     * @template TDate\n     * @param {TDate} value The new value.\n     */\n    onChange?: (value: TDate) => void;\n    /** If `true` picker is readonly */\n    readOnly?: boolean;\n    /**\n     * If `true`, today's date is rendering without highlighting with circle.\n     * @default false\n     */\n    disableHighlightToday?: boolean;\n    onMonthFocus?: (month: number) => void;\n    hasFocus?: boolean;\n    onFocusedViewChange?: (hasFocus: boolean) => void;\n    gridLabelId?: string;\n}\n","node_modules/@mui/x-date-pickers/MonthCalendar/MonthCalendar.d.ts":"import * as React from 'react';\nimport { DefaultizedProps } from '../internals/models/helpers';\nimport { MonthCalendarProps } from './MonthCalendar.types';\nexport declare function useMonthCalendarDefaultizedProps<TDate>(props: MonthCalendarProps<TDate>, name: string): DefaultizedProps<MonthCalendarProps<TDate>, 'minDate' | 'maxDate' | 'disableFuture' | 'disablePast'>;\ntype MonthCalendarComponent = (<TDate>(props: MonthCalendarProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)\n *\n * API:\n *\n * - [MonthCalendar API](https://mui.com/x/api/date-pickers/month-calendar/)\n */\nexport declare const MonthCalendar: MonthCalendarComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/PickersLayout/usePickerLayout.d.ts":"import { PickersLayoutProps, SubComponents } from './PickersLayout.types';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\ninterface UsePickerLayoutResponse extends SubComponents {\n}\ndeclare const usePickerLayout: <TValue, TDate, TView extends DateOrTimeViewWithMeridiem>(props: PickersLayoutProps<TValue, TDate, TView>) => UsePickerLayoutResponse;\nexport default usePickerLayout;\n","node_modules/@mui/x-date-pickers/PickersLayout/pickersLayoutClasses.d.ts":"export interface PickersLayoutClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element in landscape orientation. */\n    landscape: string;\n    /** Styles applied to the contentWrapper element (which contains the tabs and the view itself). */\n    contentWrapper: string;\n    /** Styles applied to the toolbar. */\n    toolbar: string;\n    /** Styles applied to the action bar. */\n    actionBar: string;\n    /** Styles applied to the tabs. */\n    tabs: string;\n    /** Styles applied to the shortcuts container. */\n    shortcuts: string;\n}\nexport type PickersLayoutClassKey = keyof PickersLayoutClasses;\nexport declare function getPickersLayoutUtilityClass(slot: string): string;\nexport declare const pickersLayoutClasses: Record<keyof PickersLayoutClasses, string>;\n","node_modules/@mui/x-date-pickers/PickersLayout/index.d.ts":"export { PickersLayout, PickersLayoutRoot, PickersLayoutContentWrapper } from './PickersLayout';\nexport type { PickersLayoutProps, PickersLayoutSlotsComponent, PickersLayoutSlotsComponentsProps, ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps, } from './PickersLayout.types';\nexport { default as usePickerLayout } from './usePickerLayout';\nexport { pickersLayoutClasses } from './pickersLayoutClasses';\nexport type { PickersLayoutClassKey } from './pickersLayoutClasses';\n","node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.types.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { PickersActionBarProps } from '../PickersActionBar';\nimport { BaseToolbarProps, ExportedBaseToolbarProps } from '../internals/models/props/toolbar';\nimport { BaseTabsProps, ExportedBaseTabsProps } from '../internals/models/props/tabs';\nimport { UsePickerLayoutPropsResponseLayoutProps } from '../internals/hooks/usePicker/usePickerLayoutProps';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { PickersLayoutClasses } from './pickersLayoutClasses';\nimport { DateOrTimeViewWithMeridiem, WrapperVariant } from '../internals/models/common';\nimport { PickersShortcutsProps } from '../PickersShortcuts';\nexport interface ExportedPickersLayoutSlotsComponent<TValue, TDate, TView extends DateOrTimeViewWithMeridiem> {\n    /**\n     * Custom component for the action bar, it is placed below the picker views.\n     * @default PickersActionBar\n     */\n    ActionBar?: React.ElementType<PickersActionBarProps>;\n    /**\n     * Custom component for the shortcuts.\n     * @default PickersShortcuts\n     */\n    Shortcuts?: React.JSXElementConstructor<PickersShortcutsProps<TValue>>;\n    /**\n     * Custom component for wrapping the layout.\n     * It wraps the toolbar, views, action bar, and shortcuts.\n     */\n    Layout?: React.JSXElementConstructor<PickersLayoutProps<TValue, TDate, TView> & React.RefAttributes<HTMLDivElement>>;\n}\ninterface PickersLayoutActionBarOwnerState<TValue, TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersLayoutProps<TValue, TDate, TView> {\n    wrapperVariant: WrapperVariant;\n}\ninterface PickersShortcutsOwnerState<TValue> extends PickersShortcutsProps<TValue> {\n    wrapperVariant: WrapperVariant;\n}\nexport interface ExportedPickersLayoutSlotsComponentsProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem> {\n    /**\n     * Props passed down to the action bar component.\n     */\n    actionBar?: SlotComponentProps<React.ComponentType<Omit<PickersActionBarProps, 'onAccept' | 'onClear' | 'onCancel' | 'onSetToday'>>, {}, PickersLayoutActionBarOwnerState<TValue, TDate, TView>>;\n    /**\n     * Props passed down to the shortcuts component.\n     */\n    shortcuts?: SlotComponentProps<React.ComponentType<PickersShortcutsProps<TValue>>, {}, PickersShortcutsOwnerState<TValue>>;\n    /**\n     * Props passed down to the layoutRoot component.\n     */\n    layout?: Partial<PickersLayoutProps<TValue, TDate, TView>>;\n}\nexport interface PickersLayoutSlotsComponent<TValue, TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedPickersLayoutSlotsComponent<TValue, TDate, TView> {\n    /**\n     * Tabs enabling toggling between views.\n     */\n    Tabs?: React.ElementType<BaseTabsProps<TView>>;\n    /**\n     * Custom component for the toolbar.\n     * It is placed above the picker views.\n     */\n    Toolbar?: React.JSXElementConstructor<BaseToolbarProps<TValue, TView>>;\n}\nexport interface PickersLayoutSlotsComponentsProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedPickersLayoutSlotsComponentsProps<TValue, TDate, TView> {\n    /**\n     * Props passed down to the tabs component.\n     */\n    tabs?: ExportedBaseTabsProps;\n    /**\n     * Props passed down to the toolbar component.\n     */\n    toolbar?: ExportedBaseToolbarProps;\n}\nexport interface PickersLayoutProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem> extends Omit<UsePickerLayoutPropsResponseLayoutProps<TValue, TView>, 'value'> {\n    value?: TValue;\n    className?: string;\n    children?: React.ReactNode;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Ref to pass to the root element\n     */\n    ref?: React.Ref<HTMLDivElement>;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersLayoutClasses>;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: PickersLayoutSlotsComponent<TValue, TDate, TView>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: PickersLayoutSlotsComponentsProps<TValue, TDate, TView>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<PickersLayoutSlotsComponent<TValue, TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: PickersLayoutSlotsComponentsProps<TValue, TDate, TView>;\n}\nexport interface SubComponents {\n    toolbar: React.ReactNode;\n    content: React.ReactNode;\n    tabs: React.ReactNode;\n    actionBar: React.ReactNode;\n    shortcuts: React.ReactNode;\n}\nexport {};\n","node_modules/@mui/x-date-pickers/PickersLayout/PickersLayout.d.ts":"import * as React from 'react';\nimport { PickersLayoutProps } from './PickersLayout.types';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\ndeclare const PickersLayoutRoot: import(\"@emotion/styled\").StyledComponent<import(\"@mui/system\").MUIStyledCommonProps<import(\"@mui/material/styles\").Theme> & {\n    ownerState: {\n        isLandscape: boolean;\n    };\n}, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof React.ClassAttributes<HTMLDivElement> | keyof React.HTMLAttributes<HTMLDivElement>>, {}>;\nexport { PickersLayoutRoot };\nexport declare const PickersLayoutContentWrapper: import(\"@emotion/styled\").StyledComponent<import(\"@mui/system\").MUIStyledCommonProps<import(\"@mui/material/styles\").Theme>, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof React.ClassAttributes<HTMLDivElement> | keyof React.HTMLAttributes<HTMLDivElement>>, {}>;\n/**\n * Demos:\n *\n * - [Custom layout](https://mui.com/x/react-date-pickers/custom-layout/)\n *\n * API:\n *\n * - [PickersLayout API](https://mui.com/x/api/date-pickers/pickers-layout/)\n */\ndeclare const PickersLayout: {\n    <TValue, TDate, TView extends DateOrTimeViewWithMeridiem>(inProps: PickersLayoutProps<TValue, TDate, TView>): React.JSX.Element;\n    propTypes: any;\n};\nexport { PickersLayout };\n","node_modules/@mui/x-date-pickers/PickersCalendarHeader/pickersCalendarHeaderClasses.d.ts":"export interface PickersCalendarHeaderClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the label container element. */\n    labelContainer: string;\n    /** Styles applied to the label element. */\n    label: string;\n    /** Styles applied to the switch view button element. */\n    switchViewButton: string;\n    /** Styles applied to the switch view icon element. */\n    switchViewIcon: string;\n}\nexport type PickersCalendarHeaderClassKey = keyof PickersCalendarHeaderClasses;\nexport declare const getPickersCalendarHeaderUtilityClass: (slot: string) => string;\nexport declare const pickersCalendarHeaderClasses: PickersCalendarHeaderClasses;\n","node_modules/@mui/x-date-pickers/PickersCalendarHeader/index.d.ts":"export { pickersCalendarHeaderClasses } from './pickersCalendarHeaderClasses';\nexport type { PickersCalendarHeaderClassKey, PickersCalendarHeaderClasses, } from './pickersCalendarHeaderClasses';\nexport { PickersCalendarHeader } from './PickersCalendarHeader';\nexport type { PickersCalendarHeaderProps, PickersCalendarHeaderSlotsComponent, PickersCalendarHeaderSlotsComponentsProps, ExportedPickersCalendarHeaderProps, } from './PickersCalendarHeader.types';\n","node_modules/@mui/x-date-pickers/PickersCalendarHeader/PickersCalendarHeader.types.d.ts":"/// <reference types=\"react\" />\nimport { SlotComponentProps } from '@mui/base/utils';\nimport IconButton from '@mui/material/IconButton';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { ExportedPickersArrowSwitcherProps, PickersArrowSwitcherSlotsComponent, PickersArrowSwitcherSlotsComponentsProps } from '../internals/components/PickersArrowSwitcher';\nimport { MonthValidationOptions } from '../internals/hooks/date-helpers-hooks';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { DateView } from '../models/views';\nimport { SlideDirection } from '../DateCalendar/PickersSlideTransition';\nimport { PickersCalendarHeaderClasses } from './pickersCalendarHeaderClasses';\nexport interface PickersCalendarHeaderSlotsComponent extends PickersArrowSwitcherSlotsComponent {\n    /**\n     * Button displayed to switch between different calendar views.\n     * @default IconButton\n     */\n    SwitchViewButton?: React.ElementType;\n    /**\n     * Icon displayed in the SwitchViewButton. Rotated by 180° when the open view is 'year'.\n     * @default ArrowDropDown\n     */\n    SwitchViewIcon?: React.ElementType;\n}\nexport interface PickersCalendarHeaderComponentsPropsOverrides {\n}\nexport type PickersCalendarHeaderOwnerState<TDate> = PickersCalendarHeaderProps<TDate>;\nexport interface PickersCalendarHeaderSlotsComponentsProps<TDate> extends PickersArrowSwitcherSlotsComponentsProps {\n    switchViewButton?: SlotComponentProps<typeof IconButton, PickersCalendarHeaderComponentsPropsOverrides, PickersCalendarHeaderOwnerState<TDate>>;\n    switchViewIcon?: SlotComponentProps<typeof SvgIcon, PickersCalendarHeaderComponentsPropsOverrides, undefined>;\n}\nexport interface PickersCalendarHeaderProps<TDate> extends ExportedPickersArrowSwitcherProps, MonthValidationOptions<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: PickersCalendarHeaderSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: PickersCalendarHeaderSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<PickersCalendarHeaderSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: PickersCalendarHeaderSlotsComponentsProps<TDate>;\n    currentMonth: TDate;\n    disabled?: boolean;\n    views: readonly DateView[];\n    onMonthChange: (date: TDate, slideDirection: SlideDirection) => void;\n    view: DateView;\n    reduceAnimations: boolean;\n    onViewChange?: (view: DateView) => void;\n    labelId?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersCalendarHeaderClasses>;\n    /**\n     * className applied to the root element.\n     */\n    className?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n}\nexport type ExportedPickersCalendarHeaderProps<TDate> = Pick<PickersCalendarHeaderProps<TDate>, 'classes' | 'slots' | 'slotProps'>;\n","node_modules/@mui/x-date-pickers/PickersCalendarHeader/PickersCalendarHeader.d.ts":"import * as React from 'react';\nimport { PickersCalendarHeaderProps } from './PickersCalendarHeader.types';\ntype PickersCalendarHeaderComponent = (<TDate>(props: PickersCalendarHeaderProps<TDate> & React.RefAttributes<HTMLButtonElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)\n * - [DateRangeCalendar](https://mui.com/x/react-date-pickers/date-range-calendar/)\n * - [Custom slots and subcomponents](https://mui.com/x/react-date-pickers/custom-components/)\n *\n * API:\n *\n * - [PickersCalendarHeader API](https://mui.com/x/api/date-pickers/pickers-calendar-header/)\n */\ndeclare const PickersCalendarHeader: PickersCalendarHeaderComponent;\nexport { PickersCalendarHeader };\n","node_modules/@mui/x-date-pickers/MobileDateTimePicker/index.d.ts":"export { MobileDateTimePicker } from './MobileDateTimePicker';\nexport type { MobileDateTimePickerProps, MobileDateTimePickerSlotsComponent, MobileDateTimePickerSlotsComponentsProps, } from './MobileDateTimePicker.types';\n","node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.types.d.ts":"import { UseMobilePickerSlotsComponent, ExportedUseMobilePickerSlotsComponentsProps, MobileOnlyPickerProps } from '../internals/hooks/useMobilePicker';\nimport { BaseDateTimePickerProps, BaseDateTimePickerSlotsComponent, BaseDateTimePickerSlotsComponentsProps } from '../DateTimePicker/shared';\nimport { MakeOptional } from '../internals/models/helpers';\nimport { DateOrTimeView } from '../models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\nexport interface MobileDateTimePickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem = DateOrTimeView> extends BaseDateTimePickerSlotsComponent<TDate>, MakeOptional<UseMobilePickerSlotsComponent<TDate, TView>, 'Field'> {\n}\nexport interface MobileDateTimePickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem = DateOrTimeView> extends BaseDateTimePickerSlotsComponentsProps<TDate>, ExportedUseMobilePickerSlotsComponentsProps<TDate, TView> {\n}\nexport interface MobileDateTimePickerProps<TDate, TView extends DateOrTimeViewWithMeridiem = DateOrTimeView> extends BaseDateTimePickerProps<TDate, TView>, MobileOnlyPickerProps<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MobileDateTimePickerSlotsComponent<TDate, TView>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MobileDateTimePickerSlotsComponentsProps<TDate, TView>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MobileDateTimePickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MobileDateTimePickerSlotsComponentsProps<TDate, TView>;\n}\n","node_modules/@mui/x-date-pickers/MobileDateTimePicker/MobileDateTimePicker.d.ts":"import * as React from 'react';\nimport { MobileDateTimePickerProps } from './MobileDateTimePicker.types';\ntype MobileDateTimePickerComponent = (<TDate>(props: MobileDateTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [MobileDateTimePicker API](https://mui.com/x/api/date-pickers/mobile-date-time-picker/)\n */\ndeclare const MobileDateTimePicker: MobileDateTimePickerComponent;\nexport { MobileDateTimePicker };\n","node_modules/@mui/x-date-pickers/LocalizationProvider/index.d.ts":"export { LocalizationProvider, MuiPickersAdapterContext } from './LocalizationProvider';\nexport type { LocalizationProviderProps } from './LocalizationProvider';\n","node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.d.ts":"import * as React from 'react';\nimport { AdapterFormats, MuiPickersAdapter } from '../models';\nimport { PickersInputLocaleText } from '../locales';\nexport interface MuiPickersAdapterContextValue<TDate> {\n    defaultDates: {\n        minDate: TDate;\n        maxDate: TDate;\n    };\n    utils: MuiPickersAdapter<TDate>;\n    localeText: PickersInputLocaleText<TDate> | undefined;\n}\nexport type MuiPickersAdapterContextNullableValue<TDate> = {\n    [K in keyof MuiPickersAdapterContextValue<TDate>]: MuiPickersAdapterContextValue<TDate>[K] | null;\n};\nexport declare const MuiPickersAdapterContext: React.Context<MuiPickersAdapterContextNullableValue<any> | null>;\nexport interface LocalizationProviderProps<TDate, TLocale> {\n    children?: React.ReactNode;\n    /**\n     * Date library adapter class function.\n     * @see See the localization provider {@link https://mui.com/x/react-date-pickers/getting-started/#setup-your-date-library-adapter date adapter setup section} for more details.\n     */\n    dateAdapter?: new (...args: any) => MuiPickersAdapter<TDate, TLocale>;\n    /** Formats that are used for any child pickers */\n    dateFormats?: Partial<AdapterFormats>;\n    /**\n     * Date library instance you are using, if it has some global overrides\n     * ```jsx\n     * dateLibInstance={momentTimeZone}\n     * ```\n     */\n    dateLibInstance?: any;\n    /**\n     * Locale for the date library you are using\n     */\n    adapterLocale?: TLocale;\n    /**\n     * Locale for components texts\n     */\n    localeText?: PickersInputLocaleText<TDate>;\n}\ntype LocalizationProviderComponent = (<TDate, TLocale>(props: LocalizationProviderProps<TDate, TLocale>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [Date format and localization](https://mui.com/x/react-date-pickers/adapters-locale/)\n * - [Calendar systems](https://mui.com/x/react-date-pickers/calendar-systems/)\n * - [Translated components](https://mui.com/x/react-date-pickers/localization/)\n * - [UTC and timezones](https://mui.com/x/react-date-pickers/timezone/)\n *\n * API:\n *\n * - [LocalizationProvider API](https://mui.com/x/api/date-pickers/localization-provider/)\n */\nexport declare const LocalizationProvider: LocalizationProviderComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/DesktopDateTimePicker/index.d.ts":"export { DesktopDateTimePicker } from './DesktopDateTimePicker';\nexport type { DesktopDateTimePickerProps, DesktopDateTimePickerSlotsComponent, DesktopDateTimePickerSlotsComponentsProps, } from './DesktopDateTimePicker.types';\n","node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.types.d.ts":"import { UseDesktopPickerSlotsComponent, ExportedUseDesktopPickerSlotsComponentsProps, DesktopOnlyPickerProps } from '../internals/hooks/useDesktopPicker';\nimport { BaseDateTimePickerProps, BaseDateTimePickerSlotsComponent, BaseDateTimePickerSlotsComponentsProps } from '../DateTimePicker/shared';\nimport { MakeOptional } from '../internals/models/helpers';\nimport { DateOrTimeView } from '../models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { DesktopOnlyTimePickerProps } from '../internals/models/props/clock';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\nimport { MultiSectionDigitalClockSlotsComponent, MultiSectionDigitalClockSlotsComponentsProps } from '../MultiSectionDigitalClock';\nimport { DigitalClockSlotsComponent, DigitalClockSlotsComponentsProps } from '../DigitalClock';\nexport interface DesktopDateTimePickerSlotsComponent<TDate> extends BaseDateTimePickerSlotsComponent<TDate>, MakeOptional<UseDesktopPickerSlotsComponent<TDate, DateOrTimeViewWithMeridiem>, 'Field' | 'OpenPickerIcon'>, DigitalClockSlotsComponent, MultiSectionDigitalClockSlotsComponent {\n}\nexport interface DesktopDateTimePickerSlotsComponentsProps<TDate> extends BaseDateTimePickerSlotsComponentsProps<TDate>, ExportedUseDesktopPickerSlotsComponentsProps<TDate, DateOrTimeViewWithMeridiem>, DigitalClockSlotsComponentsProps, MultiSectionDigitalClockSlotsComponentsProps {\n}\nexport interface DesktopDateTimePickerProps<TDate> extends BaseDateTimePickerProps<TDate, DateOrTimeViewWithMeridiem>, DesktopOnlyPickerProps<TDate>, DesktopOnlyTimePickerProps<TDate> {\n    /**\n     * Available views.\n     */\n    views?: readonly DateOrTimeView[];\n    /**\n     * Years rendered per row.\n     * @default 4\n     */\n    yearsPerRow?: 3 | 4;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DesktopDateTimePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DesktopDateTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DesktopDateTimePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DesktopDateTimePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/DesktopDateTimePicker/DesktopDateTimePicker.d.ts":"import * as React from 'react';\nimport { DesktopDateTimePickerProps } from './DesktopDateTimePicker.types';\ntype DesktopDateTimePickerComponent = (<TDate>(props: DesktopDateTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDateTimePicker API](https://mui.com/x/api/date-pickers/desktop-date-time-picker/)\n */\ndeclare const DesktopDateTimePicker: DesktopDateTimePickerComponent;\nexport { DesktopDateTimePicker };\n","node_modules/@mui/x-date-pickers/MobileDatePicker/index.d.ts":"export { MobileDatePicker } from './MobileDatePicker';\nexport type { MobileDatePickerProps, MobileDatePickerSlotsComponent, MobileDatePickerSlotsComponentsProps, } from './MobileDatePicker.types';\n","node_modules/@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.types.d.ts":"import { UseMobilePickerSlotsComponent, MobileOnlyPickerProps, ExportedUseMobilePickerSlotsComponentsProps } from '../internals/hooks/useMobilePicker';\nimport { BaseDatePickerProps, BaseDatePickerSlotsComponent, BaseDatePickerSlotsComponentsProps } from '../DatePicker/shared';\nimport { MakeOptional } from '../internals/models/helpers';\nimport { DateView } from '../models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nexport interface MobileDatePickerSlotsComponent<TDate> extends BaseDatePickerSlotsComponent<TDate>, MakeOptional<UseMobilePickerSlotsComponent<TDate, DateView>, 'Field'> {\n}\nexport interface MobileDatePickerSlotsComponentsProps<TDate> extends BaseDatePickerSlotsComponentsProps<TDate>, ExportedUseMobilePickerSlotsComponentsProps<TDate, DateView> {\n}\nexport interface MobileDatePickerProps<TDate> extends BaseDatePickerProps<TDate>, MobileOnlyPickerProps<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MobileDatePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MobileDatePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MobileDatePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MobileDatePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/MobileDatePicker/MobileDatePicker.d.ts":"import * as React from 'react';\nimport { MobileDatePickerProps } from './MobileDatePicker.types';\ntype MobileDatePickerComponent = (<TDate>(props: MobileDatePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [MobileDatePicker API](https://mui.com/x/api/date-pickers/mobile-date-picker/)\n */\ndeclare const MobileDatePicker: MobileDatePickerComponent;\nexport { MobileDatePicker };\n","node_modules/@mui/x-date-pickers/DigitalClock/index.d.ts":"export { DigitalClock } from './DigitalClock';\nexport type { DigitalClockProps, DigitalClockSlotsComponent, DigitalClockSlotsComponentsProps, ExportedDigitalClockProps, } from './DigitalClock.types';\nexport { digitalClockClasses, getDigitalClockUtilityClass } from './digitalClockClasses';\nexport type { DigitalClockClasses, DigitalClockClassKey } from './digitalClockClasses';\n","node_modules/@mui/x-date-pickers/DigitalClock/digitalClockClasses.d.ts":"export interface DigitalClockClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the list (by default: MenuList) element. */\n    list: string;\n    /** Styles applied to the list item (by default: MenuItem) element. */\n    item: string;\n}\nexport type DigitalClockClassKey = keyof DigitalClockClasses;\nexport declare function getDigitalClockUtilityClass(slot: string): string;\nexport declare const digitalClockClasses: DigitalClockClasses;\n","node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.types.d.ts":"/// <reference types=\"react\" />\nimport { SlotComponentProps } from '@mui/base/utils';\nimport MenuItem from '@mui/material/MenuItem';\nimport { DigitalClockClasses } from './digitalClockClasses';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { BaseClockProps, DigitalClockOnlyProps, ExportedBaseClockProps } from '../internals/models/props/clock';\nimport { TimeView } from '../models';\nexport interface ExportedDigitalClockProps<TDate> extends ExportedBaseClockProps<TDate>, DigitalClockOnlyProps {\n}\nexport interface DigitalClockSlotsComponent {\n    /**\n     * Component responsible for rendering a single digital clock item.\n     * @default MenuItem from '@mui/material'\n     */\n    DigitalClockItem?: React.ElementType;\n}\nexport interface DigitalClockSlotsComponentsProps {\n    digitalClockItem?: SlotComponentProps<typeof MenuItem, {}, Record<string, any>>;\n}\nexport interface DigitalClockProps<TDate> extends ExportedDigitalClockProps<TDate>, BaseClockProps<TDate, Extract<TimeView, 'hours'>> {\n    /**\n     * Available views.\n     * @default ['hours']\n     */\n    views?: readonly 'hours'[];\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DigitalClockClasses>;\n    /**\n     * Overrideable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DigitalClockSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DigitalClockSlotsComponentsProps;\n    /**\n     * Overrideable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DigitalClockSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DigitalClockSlotsComponentsProps;\n}\n","node_modules/@mui/x-date-pickers/DigitalClock/DigitalClock.d.ts":"import * as React from 'react';\nimport { DigitalClockProps } from './DigitalClock.types';\ntype DigitalClockComponent = (<TDate>(props: DigitalClockProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [DigitalClock](https://mui.com/x/react-date-pickers/digital-clock/)\n *\n * API:\n *\n * - [DigitalClock API](https://mui.com/x/api/date-pickers/digital-clock/)\n */\nexport declare const DigitalClock: DigitalClockComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/DesktopTimePicker/index.d.ts":"export { DesktopTimePicker } from './DesktopTimePicker';\nexport type { DesktopTimePickerProps, DesktopTimePickerSlotsComponent, DesktopTimePickerSlotsComponentsProps, } from './DesktopTimePicker.types';\n","node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.types.d.ts":"import { UseDesktopPickerSlotsComponent, ExportedUseDesktopPickerSlotsComponentsProps, DesktopOnlyPickerProps } from '../internals/hooks/useDesktopPicker';\nimport { BaseTimePickerProps, BaseTimePickerSlotsComponent, BaseTimePickerSlotsComponentsProps } from '../TimePicker/shared';\nimport { MakeOptional } from '../internals/models/helpers';\nimport { TimeViewWithMeridiem } from '../internals/models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { DesktopOnlyTimePickerProps } from '../internals/models/props/clock';\nimport { DigitalClockSlotsComponent, DigitalClockSlotsComponentsProps } from '../DigitalClock';\nimport { MultiSectionDigitalClockSlotsComponent, MultiSectionDigitalClockSlotsComponentsProps } from '../MultiSectionDigitalClock';\nimport { TimeView } from '../models';\nexport interface DesktopTimePickerSlotsComponent<TDate> extends BaseTimePickerSlotsComponent<TDate>, MakeOptional<UseDesktopPickerSlotsComponent<TDate, TimeViewWithMeridiem>, 'Field' | 'OpenPickerIcon'>, DigitalClockSlotsComponent, MultiSectionDigitalClockSlotsComponent {\n}\nexport interface DesktopTimePickerSlotsComponentsProps<TDate> extends BaseTimePickerSlotsComponentsProps, ExportedUseDesktopPickerSlotsComponentsProps<TDate, TimeViewWithMeridiem>, DigitalClockSlotsComponentsProps, MultiSectionDigitalClockSlotsComponentsProps {\n}\nexport interface DesktopTimePickerProps<TDate> extends BaseTimePickerProps<TDate, TimeViewWithMeridiem>, DesktopOnlyPickerProps<TDate>, DesktopOnlyTimePickerProps<TDate> {\n    /**\n     * Available views.\n     */\n    views?: readonly TimeView[];\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DesktopTimePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DesktopTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DesktopTimePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DesktopTimePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/DesktopTimePicker/DesktopTimePicker.d.ts":"import * as React from 'react';\nimport { DesktopTimePickerProps } from './DesktopTimePicker.types';\ntype DesktopTimePickerComponent = (<TDate>(props: DesktopTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)\n */\ndeclare const DesktopTimePicker: DesktopTimePickerComponent;\nexport { DesktopTimePicker };\n","node_modules/@mui/x-date-pickers/DesktopDatePicker/index.d.ts":"export { DesktopDatePicker } from './DesktopDatePicker';\nexport type { DesktopDatePickerProps, DesktopDatePickerSlotsComponent, DesktopDatePickerSlotsComponentsProps, } from './DesktopDatePicker.types';\n","node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.types.d.ts":"import { UseDesktopPickerSlotsComponent, ExportedUseDesktopPickerSlotsComponentsProps, DesktopOnlyPickerProps } from '../internals/hooks/useDesktopPicker';\nimport { BaseDatePickerProps, BaseDatePickerSlotsComponent, BaseDatePickerSlotsComponentsProps } from '../DatePicker/shared';\nimport { MakeOptional } from '../internals/models/helpers';\nimport { DateView } from '../models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nexport interface DesktopDatePickerSlotsComponent<TDate> extends BaseDatePickerSlotsComponent<TDate>, MakeOptional<UseDesktopPickerSlotsComponent<TDate, DateView>, 'Field' | 'OpenPickerIcon'> {\n}\nexport interface DesktopDatePickerSlotsComponentsProps<TDate> extends BaseDatePickerSlotsComponentsProps<TDate>, ExportedUseDesktopPickerSlotsComponentsProps<TDate, DateView> {\n}\nexport interface DesktopDatePickerProps<TDate> extends BaseDatePickerProps<TDate>, DesktopOnlyPickerProps<TDate> {\n    /**\n     * Years rendered per row.\n     * @default 4\n     */\n    yearsPerRow?: 3 | 4;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DesktopDatePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DesktopDatePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DesktopDatePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DesktopDatePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/DesktopDatePicker/DesktopDatePicker.d.ts":"import * as React from 'react';\nimport { DesktopDatePickerProps } from './DesktopDatePicker.types';\ntype DesktopDatePickerComponent = (<TDate>(props: DesktopDatePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)\n */\ndeclare const DesktopDatePicker: DesktopDatePickerComponent;\nexport { DesktopDatePicker };\n","node_modules/@mui/x-date-pickers/DayCalendarSkeleton/index.d.ts":"export { DayCalendarSkeleton } from './DayCalendarSkeleton';\nexport type { DayCalendarSkeletonProps } from './DayCalendarSkeleton';\nexport { dayCalendarSkeletonClasses, getDayCalendarSkeletonUtilityClass, } from './dayCalendarSkeletonClasses';\nexport type { DayCalendarSkeletonClassKey, DayCalendarSkeletonClasses, } from './dayCalendarSkeletonClasses';\n","node_modules/@mui/x-date-pickers/DayCalendarSkeleton/dayCalendarSkeletonClasses.d.ts":"export interface DayCalendarSkeletonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the week element. */\n    week: string;\n    /** Styles applied to the day element. */\n    daySkeleton: string;\n}\nexport type DayCalendarSkeletonClassKey = keyof DayCalendarSkeletonClasses;\nexport declare const getDayCalendarSkeletonUtilityClass: (slot: string) => string;\nexport declare const dayCalendarSkeletonClasses: DayCalendarSkeletonClasses;\n","node_modules/@mui/x-date-pickers/DayCalendarSkeleton/DayCalendarSkeleton.d.ts":"import * as React from 'react';\nimport { Theme } from '@mui/material/styles';\nimport { SxProps } from '@mui/system';\nimport { DayCalendarSkeletonClasses } from './dayCalendarSkeletonClasses';\ntype HTMLDivProps = React.JSX.IntrinsicElements['div'];\nexport interface DayCalendarSkeletonProps extends HTMLDivProps {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DayCalendarSkeletonClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    ref?: React.Ref<HTMLDivElement>;\n}\n/**\n * Demos:\n *\n * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)\n *\n * API:\n *\n * - [CalendarPickerSkeleton API](https://mui.com/x/api/date-pickers/calendar-picker-skeleton/)\n */\ndeclare function DayCalendarSkeleton(inProps: DayCalendarSkeletonProps): React.JSX.Element;\ndeclare namespace DayCalendarSkeleton {\n    var propTypes: any;\n}\nexport { DayCalendarSkeleton };\n","node_modules/@mui/x-date-pickers/DateTimeField/useDateTimeField.d.ts":"import { UseDateTimeFieldProps, UseDateTimeFieldParams } from './DateTimeField.types';\nexport declare const useDateTimeField: <TDate, TChildProps extends {}>({ props: inProps, inputRef, }: UseDateTimeFieldParams<TDate, TChildProps>) => import(\"../internals/hooks/useField\").UseFieldResponse<Omit<TChildProps & Omit<UseDateTimeFieldProps<TDate>, \"format\" | \"disableFuture\" | \"disablePast\" | \"maxDate\" | \"minDate\"> & Required<Pick<UseDateTimeFieldProps<TDate>, \"format\" | \"disableFuture\" | \"disablePast\" | \"maxDate\" | \"minDate\">>, keyof UseDateTimeFieldProps<any>>>;\n","node_modules/@mui/x-date-pickers/DateTimeField/index.d.ts":"export { DateTimeField } from './DateTimeField';\nexport { useDateTimeField as unstable_useDateTimeField } from './useDateTimeField';\nexport type { UseDateTimeFieldProps, UseDateTimeFieldComponentProps, DateTimeFieldProps, UseDateTimeFieldDefaultizedProps, } from './DateTimeField.types';\n","node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport TextField from '@mui/material/TextField';\nimport { DateTimeValidationError, FieldSection } from '../models';\nimport { UseFieldInternalProps } from '../internals/hooks/useField';\nimport { DefaultizedProps, MakeOptional } from '../internals/models/helpers';\nimport { BaseDateValidationProps, BaseTimeValidationProps, DateTimeValidationProps, DayValidationProps, MonthValidationProps, TimeValidationProps, YearValidationProps } from '../internals/models/validation';\nimport { FieldsTextFieldProps } from '../internals/models/fields';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { FieldSlotsComponents, FieldSlotsComponentsProps } from '../internals';\nexport interface UseDateTimeFieldParams<TDate, TChildProps extends {}> {\n    props: UseDateTimeFieldComponentProps<TDate, TChildProps>;\n    inputRef?: React.Ref<HTMLInputElement>;\n}\nexport interface UseDateTimeFieldProps<TDate> extends MakeOptional<UseFieldInternalProps<TDate | null, TDate, FieldSection, DateTimeValidationError>, 'format'>, DayValidationProps<TDate>, MonthValidationProps<TDate>, YearValidationProps<TDate>, BaseDateValidationProps<TDate>, TimeValidationProps<TDate>, BaseTimeValidationProps, DateTimeValidationProps<TDate> {\n    /**\n     * 12h/24h view for hour selection clock.\n     * @default `utils.is12HourCycleInCurrentLocale()`\n     */\n    ampm?: boolean;\n}\nexport type UseDateTimeFieldDefaultizedProps<TDate> = DefaultizedProps<UseDateTimeFieldProps<TDate>, keyof BaseDateValidationProps<any> | keyof BaseTimeValidationProps | 'format'>;\nexport type UseDateTimeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseDateTimeFieldProps<TDate>> & UseDateTimeFieldProps<TDate>;\nexport interface DateTimeFieldProps<TDate> extends UseDateTimeFieldComponentProps<TDate, FieldsTextFieldProps> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DateTimeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DateTimeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DateTimeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DateTimeFieldSlotsComponentsProps<TDate>;\n}\nexport type DateTimeFieldOwnerState<TDate> = DateTimeFieldProps<TDate>;\nexport interface DateTimeFieldSlotsComponent extends FieldSlotsComponents {\n    /**\n     * Form control with an input to render the value.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n}\nexport interface DateTimeFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    textField?: SlotComponentProps<typeof TextField, {}, DateTimeFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers/DateTimeField/DateTimeField.d.ts":"import * as React from 'react';\nimport { DateTimeFieldProps } from './DateTimeField.types';\ntype DateTimeFieldComponent = (<TDate>(props: DateTimeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateTimeField](http://mui.com/x/react-date-pickers/date-time-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [DateTimeField API](https://mui.com/x/api/date-pickers/date-time-field/)\n */\ndeclare const DateTimeField: DateTimeFieldComponent;\nexport { DateTimeField };\n","node_modules/@mui/x-date-pickers/DatePicker/shared.d.ts":"import * as React from 'react';\nimport { DefaultizedProps } from '../internals/models/helpers';\nimport { DateCalendarSlotsComponent, DateCalendarSlotsComponentsProps, ExportedDateCalendarProps } from '../DateCalendar/DateCalendar.types';\nimport { DateValidationError, DateView } from '../models';\nimport { BasePickerInputProps } from '../internals/models/props/basePickerProps';\nimport { BaseDateValidationProps, UncapitalizeObjectKeys } from '../internals';\nimport { LocalizedComponent } from '../locales/utils/pickersLocaleTextApi';\nimport { DatePickerToolbarProps, ExportedDatePickerToolbarProps } from './DatePickerToolbar';\nimport { PickerViewRendererLookup } from '../internals/hooks/usePicker/usePickerViews';\nimport { DateViewRendererProps } from '../dateViewRenderers';\nexport interface BaseDatePickerSlotsComponent<TDate> extends DateCalendarSlotsComponent<TDate> {\n    /**\n     * Custom component for the toolbar rendered above the views.\n     * @default DatePickerToolbar\n     */\n    Toolbar?: React.JSXElementConstructor<DatePickerToolbarProps<TDate>>;\n}\nexport interface BaseDatePickerSlotsComponentsProps<TDate> extends DateCalendarSlotsComponentsProps<TDate> {\n    toolbar?: ExportedDatePickerToolbarProps;\n}\nexport interface BaseDatePickerProps<TDate> extends BasePickerInputProps<TDate | null, TDate, DateView, DateValidationError>, ExportedDateCalendarProps<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: BaseDatePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: BaseDatePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<BaseDatePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: BaseDatePickerSlotsComponentsProps<TDate>;\n    /**\n     * Define custom view renderers for each section.\n     * If `null`, the section will only have field editing.\n     * If `undefined`, internally defined view will be the used.\n     */\n    viewRenderers?: Partial<PickerViewRendererLookup<TDate | null, DateView, DateViewRendererProps<TDate, DateView>, {}>>;\n}\ntype UseDatePickerDefaultizedProps<TDate, Props extends BaseDatePickerProps<TDate>> = LocalizedComponent<TDate, Omit<DefaultizedProps<Props, 'views' | 'openTo' | keyof BaseDateValidationProps<TDate>>, 'components' | 'componentsProps'>>;\nexport declare function useDatePickerDefaultizedProps<TDate, Props extends BaseDatePickerProps<TDate>>(props: Props, name: string): UseDatePickerDefaultizedProps<TDate, Props>;\nexport {};\n","node_modules/@mui/x-date-pickers/DatePicker/index.d.ts":"export { DatePicker } from './DatePicker';\nexport type { DatePickerProps, DatePickerSlotsComponents, DatePickerSlotsComponentsProps, } from './DatePicker.types';\nexport { DatePickerToolbar } from './DatePickerToolbar';\nexport type { DatePickerToolbarProps } from './DatePickerToolbar';\nexport { datePickerToolbarClasses } from './datePickerToolbarClasses';\nexport type { DatePickerToolbarClassKey, DatePickerToolbarClasses, } from './datePickerToolbarClasses';\n","node_modules/@mui/x-date-pickers/DatePicker/datePickerToolbarClasses.d.ts":"export interface DatePickerToolbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the title element. */\n    title: string;\n}\nexport type DatePickerToolbarClassKey = keyof DatePickerToolbarClasses;\nexport declare function getDatePickerToolbarUtilityClass(slot: string): string;\nexport declare const datePickerToolbarClasses: DatePickerToolbarClasses;\n","node_modules/@mui/x-date-pickers/DatePicker/DatePickerToolbar.d.ts":"import * as React from 'react';\nimport { BaseToolbarProps, ExportedBaseToolbarProps } from '../internals/models/props/toolbar';\nimport { DateView } from '../models';\nimport { DatePickerToolbarClasses } from './datePickerToolbarClasses';\nexport interface DatePickerToolbarProps<TDate> extends BaseToolbarProps<TDate | null, DateView>, ExportedDatePickerToolbarProps {\n}\nexport interface ExportedDatePickerToolbarProps extends ExportedBaseToolbarProps {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DatePickerToolbarClasses>;\n}\ntype DatePickerToolbarComponent = (<TDate>(props: DatePickerToolbarProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)\n *\n * API:\n *\n * - [DatePickerToolbar API](https://mui.com/x/api/date-pickers/date-picker-toolbar/)\n */\nexport declare const DatePickerToolbar: DatePickerToolbarComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/DatePicker/DatePicker.types.d.ts":"import { DesktopDatePickerProps, DesktopDatePickerSlotsComponent, DesktopDatePickerSlotsComponentsProps } from '../DesktopDatePicker';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { MobileDatePickerProps, MobileDatePickerSlotsComponent, MobileDatePickerSlotsComponentsProps } from '../MobileDatePicker';\nexport interface DatePickerSlotsComponents<TDate> extends DesktopDatePickerSlotsComponent<TDate>, MobileDatePickerSlotsComponent<TDate> {\n}\nexport interface DatePickerSlotsComponentsProps<TDate> extends DesktopDatePickerSlotsComponentsProps<TDate>, MobileDatePickerSlotsComponentsProps<TDate> {\n}\nexport interface DatePickerProps<TDate> extends DesktopDatePickerProps<TDate>, MobileDatePickerProps<TDate> {\n    /**\n     * CSS media query when `Mobile` mode will be changed to `Desktop`.\n     * @default '@media (pointer: fine)'\n     * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n     */\n    desktopModeMediaQuery?: string;\n    /**\n     * Years rendered per row.\n     * @default 4 on desktop, 3 on mobile\n     */\n    yearsPerRow?: 3 | 4;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DatePickerSlotsComponents<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DatePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DatePickerSlotsComponents<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DatePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/DatePicker/DatePicker.d.ts":"import * as React from 'react';\nimport { DatePickerProps } from './DatePicker.types';\ntype DatePickerComponent = (<TDate>(props: DatePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DatePicker API](https://mui.com/x/api/date-pickers/date-picker/)\n */\ndeclare const DatePicker: DatePickerComponent;\nexport { DatePicker };\n","node_modules/@mui/x-date-pickers/DateCalendar/useIsDateDisabled.d.ts":"import { DateComponentValidationProps } from '../internals/utils/validation/validateDate';\nexport declare const useIsDateDisabled: <TDate>({ shouldDisableDate, shouldDisableMonth, shouldDisableYear, minDate, maxDate, disableFuture, disablePast, timezone, }: DateComponentValidationProps<TDate>) => (day: TDate | null) => boolean;\n","node_modules/@mui/x-date-pickers/DateCalendar/useCalendarState.d.ts":"import { SlideDirection } from './PickersSlideTransition';\nimport { MuiPickersAdapter, PickersTimezone } from '../models';\nimport { DateCalendarDefaultizedProps } from './DateCalendar.types';\ninterface CalendarState<TDate> {\n    currentMonth: TDate;\n    focusedDay: TDate | null;\n    isMonthSwitchingAnimating: boolean;\n    slideDirection: SlideDirection;\n}\ntype ReducerAction<TType, TAdditional = {}> = {\n    type: TType;\n} & TAdditional;\ninterface ChangeMonthPayload<TDate> {\n    direction: SlideDirection;\n    newMonth: TDate;\n}\ninterface ChangeFocusedDayPayload<TDate> {\n    focusedDay: TDate | null;\n    /**\n     * The update does not trigger month switching animation.\n     * For example: when selecting month from the month view.\n     */\n    withoutMonthSwitchingAnimation?: boolean;\n}\nexport declare const createCalendarStateReducer: <TDate extends unknown>(reduceAnimations: boolean, disableSwitchToMonthOnDayFocus: boolean, utils: MuiPickersAdapter<TDate, any>) => (state: CalendarState<TDate>, action: {\n    type: \"finishMonthSwitchingAnimation\";\n} | ReducerAction<\"changeMonth\", ChangeMonthPayload<TDate>> | ReducerAction<\"changeFocusedDay\", ChangeFocusedDayPayload<TDate>>) => CalendarState<TDate>;\ninterface UseCalendarStateParams<TDate> extends Pick<DateCalendarDefaultizedProps<TDate>, 'value' | 'referenceDate' | 'defaultCalendarMonth' | 'disableFuture' | 'disablePast' | 'minDate' | 'maxDate' | 'onMonthChange' | 'reduceAnimations' | 'shouldDisableDate'> {\n    disableSwitchToMonthOnDayFocus?: boolean;\n    timezone: PickersTimezone;\n}\nexport declare const useCalendarState: <TDate extends unknown>(params: UseCalendarStateParams<TDate>) => {\n    referenceDate: any;\n    calendarState: CalendarState<TDate>;\n    changeMonth: (newDate: TDate) => void;\n    changeFocusedDay: (newFocusedDate: TDate | null, withoutMonthSwitchingAnimation?: boolean) => void;\n    isDateDisabled: (day: TDate | null) => boolean;\n    onMonthSwitchingAnimationEnd: () => void;\n    handleChangeMonth: (payload: ChangeMonthPayload<TDate>) => void;\n};\nexport {};\n","node_modules/@mui/x-date-pickers/DateCalendar/pickersSlideTransitionClasses.d.ts":"export interface PickersSlideTransitionClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to content element sliding in from left. */\n    'slideEnter-left': string;\n    /** Styles applied to content element sliding in from right. */\n    'slideEnter-right': string;\n    /** Styles applied to the element entering (transitioning into) the container. */\n    slideEnterActive: string;\n    /** Styles applied to the element leaving (transitioning out of) the container. */\n    slideExit: string;\n    /** Styles applied to the element on the left leaving (transitioning out of) the container. */\n    'slideExitActiveLeft-left': string;\n    /** Styles applied to the element on the right leaving (transitioning out of) the container. */\n    'slideExitActiveLeft-right': string;\n}\nexport type PickersSlideTransitionClassKey = keyof PickersSlideTransitionClasses;\nexport declare const getPickersSlideTransitionUtilityClass: (slot: string) => string;\nexport declare const pickersSlideTransitionClasses: PickersSlideTransitionClasses;\n","node_modules/@mui/x-date-pickers/DateCalendar/pickersFadeTransitionGroupClasses.d.ts":"export interface PickersFadeTransitionGroupClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type PickersFadeTransitionGroupClassKey = keyof PickersFadeTransitionGroupClasses;\nexport declare const getPickersFadeTransitionGroupUtilityClass: (slot: string) => string;\nexport declare const pickersFadeTransitionGroupClasses: PickersFadeTransitionGroupClasses;\n","node_modules/@mui/x-date-pickers/DateCalendar/index.d.ts":"export { DateCalendar } from './DateCalendar';\nexport type { DateCalendarProps, DateCalendarSlotsComponent, DateCalendarSlotsComponentsProps, } from './DateCalendar.types';\nexport { getDateCalendarUtilityClass, dateCalendarClasses } from './dateCalendarClasses';\nexport type { DateCalendarClassKey, DateCalendarClasses } from './dateCalendarClasses';\nexport { dayPickerClasses } from './dayCalendarClasses';\nexport type { DayCalendarClassKey, DayCalendarClasses } from './dayCalendarClasses';\nexport type { PickersFadeTransitionGroupProps } from './PickersFadeTransitionGroup';\nexport { pickersFadeTransitionGroupClasses } from './pickersFadeTransitionGroupClasses';\nexport type { PickersFadeTransitionGroupClassKey, PickersFadeTransitionGroupClasses, } from './pickersFadeTransitionGroupClasses';\nexport { pickersSlideTransitionClasses } from './pickersSlideTransitionClasses';\nexport type { PickersSlideTransitionClassKey, PickersSlideTransitionClasses, } from './pickersSlideTransitionClasses';\nexport type { ExportedSlideTransitionProps } from './PickersSlideTransition';\nexport * from '../PickersCalendarHeader';\n","node_modules/@mui/x-date-pickers/DateCalendar/dayCalendarClasses.d.ts":"export interface DayCalendarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the header element. */\n    header: string;\n    /** Styles applied to the week day label element. */\n    weekDayLabel: string;\n    /** Styles applied to the loading container element. */\n    loadingContainer: string;\n    /** Styles applied to the slide transition element. */\n    slideTransition: string;\n    /** Styles applied to the month container element. */\n    monthContainer: string;\n    /** Styles applied to the week container element. */\n    weekContainer: string;\n    /** Styles applied to the week number header */\n    weekNumberLabel: string;\n    /** Styles applied to the week number element */\n    weekNumber: string;\n}\nexport type DayCalendarClassKey = keyof DayCalendarClasses;\nexport declare const getDayCalendarUtilityClass: (slot: string) => string;\nexport declare const dayPickerClasses: DayCalendarClasses;\n","node_modules/@mui/x-date-pickers/DateCalendar/dateCalendarClasses.d.ts":"export interface DateCalendarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the transition group element. */\n    viewTransitionContainer: string;\n}\nexport type DateCalendarClassKey = keyof DateCalendarClasses;\nexport declare const getDateCalendarUtilityClass: (slot: string) => string;\nexport declare const dateCalendarClasses: DateCalendarClasses;\n","node_modules/@mui/x-date-pickers/DateCalendar/PickersSlideTransition.d.ts":"import * as React from 'react';\nimport { CSSTransitionProps } from 'react-transition-group/CSSTransition';\nimport { PickersSlideTransitionClasses } from './pickersSlideTransitionClasses';\nexport type SlideDirection = 'right' | 'left';\nexport interface ExportedSlideTransitionProps {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersSlideTransitionClasses>;\n}\nexport interface SlideTransitionProps extends Omit<CSSTransitionProps, 'timeout'>, ExportedSlideTransitionProps {\n    children: React.ReactElement;\n    className?: string;\n    reduceAnimations: boolean;\n    slideDirection: SlideDirection;\n    transKey: React.Key;\n}\n/**\n * @ignore - do not document.\n */\nexport declare function PickersSlideTransition(inProps: SlideTransitionProps): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/DateCalendar/PickersFadeTransitionGroup.d.ts":"import * as React from 'react';\nimport { PickersFadeTransitionGroupClasses } from './pickersFadeTransitionGroupClasses';\nexport interface PickersFadeTransitionGroupProps {\n    children: React.ReactElement;\n    className?: string;\n    reduceAnimations: boolean;\n    transKey: React.Key;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersFadeTransitionGroupClasses>;\n}\n/**\n * @ignore - do not document.\n */\nexport declare function PickersFadeTransitionGroup(inProps: PickersFadeTransitionGroupProps): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/DateCalendar/DayCalendar.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { PickersDay, PickersDayProps, ExportedPickersDayProps } from '../PickersDay/PickersDay';\nimport { PickerOnChangeFn } from '../internals/hooks/useViews';\nimport { SlideDirection, SlideTransitionProps } from './PickersSlideTransition';\nimport { BaseDateValidationProps, DayValidationProps, MonthValidationProps, YearValidationProps } from '../internals/models/validation';\nimport { DayCalendarClasses } from './dayCalendarClasses';\nimport { SlotsAndSlotProps } from '../internals/utils/slots-migration';\nimport { TimezoneProps } from '../models';\nimport { DefaultizedProps } from '../internals/models/helpers';\nexport interface DayCalendarSlotsComponent<TDate> {\n    /**\n     * Custom component for day.\n     * Check the [PickersDay](https://mui.com/x/api/date-pickers/pickers-day/) component.\n     * @default PickersDay\n     */\n    Day?: React.ElementType<PickersDayProps<TDate>>;\n}\nexport interface DayCalendarSlotsComponentsProps<TDate> {\n    day?: SlotComponentProps<typeof PickersDay, {}, DayCalendarProps<TDate> & {\n        day: TDate;\n        selected: boolean;\n    }>;\n}\nexport interface ExportedDayCalendarProps<TDate> extends ExportedPickersDayProps {\n    /**\n     * If `true`, calls `renderLoading` instead of rendering the day calendar.\n     * Can be used to preload information and show it in calendar.\n     * @default false\n     */\n    loading?: boolean;\n    /**\n     * Component displaying when passed `loading` true.\n     * @returns {React.ReactNode} The node to render when loading.\n     * @default () => \"...\"\n     */\n    renderLoading?: () => React.ReactNode;\n    /**\n     * Formats the day of week displayed in the calendar header.\n     * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.\n     * @param {TDate} date The date of the day of week provided by the adapter.\n     * @returns {string} The name to display.\n     * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()\n     */\n    dayOfWeekFormatter?: (day: string, date: TDate) => string;\n    /**\n     * If `true`, the week number will be display in the calendar.\n     */\n    displayWeekNumber?: boolean;\n    /**\n     * Calendar will show more weeks in order to match this value.\n     * Put it to 6 for having fix number of week in Gregorian calendars\n     * @default undefined\n     */\n    fixedWeekNumber?: number;\n}\nexport interface DayCalendarProps<TDate> extends ExportedDayCalendarProps<TDate>, DayValidationProps<TDate>, MonthValidationProps<TDate>, YearValidationProps<TDate>, Required<BaseDateValidationProps<TDate>>, DefaultizedProps<TimezoneProps, 'timezone'>, SlotsAndSlotProps<DayCalendarSlotsComponent<TDate>, DayCalendarSlotsComponentsProps<TDate>> {\n    autoFocus?: boolean;\n    className?: string;\n    currentMonth: TDate;\n    selectedDays: (TDate | null)[];\n    onSelectedDaysChange: PickerOnChangeFn<TDate>;\n    disabled?: boolean;\n    focusedDay: TDate | null;\n    isMonthSwitchingAnimating: boolean;\n    onFocusedDayChange: (newFocusedDay: TDate) => void;\n    onMonthSwitchingAnimationEnd: () => void;\n    readOnly?: boolean;\n    reduceAnimations: boolean;\n    slideDirection: SlideDirection;\n    TransitionProps?: Partial<SlideTransitionProps>;\n    hasFocus?: boolean;\n    onFocusedViewChange?: (newHasFocus: boolean) => void;\n    gridLabelId?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DayCalendarClasses>;\n}\n/**\n * @ignore - do not document.\n */\nexport declare function DayCalendar<TDate>(inProps: DayCalendarProps<TDate>): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.types.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { PickersCalendarHeader, PickersCalendarHeaderProps, PickersCalendarHeaderSlotsComponent, PickersCalendarHeaderSlotsComponentsProps } from '../PickersCalendarHeader';\nimport { DayCalendarSlotsComponent, DayCalendarSlotsComponentsProps, ExportedDayCalendarProps } from './DayCalendar';\nimport { DateCalendarClasses } from './dateCalendarClasses';\nimport { BaseDateValidationProps, YearValidationProps, MonthValidationProps, DayValidationProps } from '../internals/models/validation';\nimport { ExportedUseViewsOptions } from '../internals/hooks/useViews';\nimport { DateView, TimezoneProps } from '../models';\nimport { DefaultizedProps } from '../internals/models/helpers';\nimport { SlotsAndSlotProps } from '../internals/utils/slots-migration';\nimport { ExportedYearCalendarProps } from '../YearCalendar/YearCalendar.types';\nimport { ExportedMonthCalendarProps } from '../MonthCalendar/MonthCalendar.types';\nexport interface DateCalendarSlotsComponent<TDate> extends PickersCalendarHeaderSlotsComponent, DayCalendarSlotsComponent<TDate> {\n    /**\n     * Custom component for calendar header.\n     * Check the [PickersCalendarHeader](https://mui.com/x/api/date-pickers/pickers-calendar-header/) component.\n     * @default PickersCalendarHeader\n     */\n    CalendarHeader?: React.ElementType<PickersCalendarHeaderProps<TDate>>;\n}\nexport interface DateCalendarSlotsComponentsProps<TDate> extends PickersCalendarHeaderSlotsComponentsProps<TDate>, DayCalendarSlotsComponentsProps<TDate> {\n    calendarHeader?: SlotComponentProps<typeof PickersCalendarHeader, {}, DateCalendarProps<TDate>>;\n}\nexport interface ExportedDateCalendarProps<TDate> extends ExportedDayCalendarProps<TDate>, ExportedMonthCalendarProps, ExportedYearCalendarProps, BaseDateValidationProps<TDate>, DayValidationProps<TDate>, YearValidationProps<TDate>, MonthValidationProps<TDate>, TimezoneProps {\n    /**\n     * Default calendar month displayed when `value` and `defaultValue` are empty.\n     * @deprecated Consider using `referenceDate` instead.\n     */\n    defaultCalendarMonth?: TDate;\n    /**\n     * If `true`, the picker and text field are disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Make picker read only.\n     * @default false\n     */\n    readOnly?: boolean;\n    /**\n     * If `true`, disable heavy animations.\n     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n     */\n    reduceAnimations?: boolean;\n    /**\n     * Component displaying when passed `loading` true.\n     * @returns {React.ReactNode} The node to render when loading.\n     * @default () => <span data-mui-test=\"loading-progress\">...</span>\n     */\n    renderLoading?: () => React.ReactNode;\n    /**\n     * Callback fired on year change.\n     * @template TDate\n     * @param {TDate} year The new year.\n     */\n    onYearChange?: (year: TDate) => void;\n    /**\n     * Callback fired on month change.\n     * @template TDate\n     * @param {TDate} month The new month.\n     */\n    onMonthChange?: (month: TDate) => void;\n}\nexport interface DateCalendarProps<TDate> extends ExportedDateCalendarProps<TDate>, ExportedUseViewsOptions<DateView>, SlotsAndSlotProps<DateCalendarSlotsComponent<TDate>, DateCalendarSlotsComponentsProps<TDate>> {\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: TDate | null;\n    /**\n     * The default selected value.\n     * Used when the component is not controlled.\n     */\n    defaultValue?: TDate | null;\n    /**\n     * The date used to generate the new value when both `value` and `defaultValue` are empty.\n     * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.\n     */\n    referenceDate?: TDate;\n    className?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DateCalendarClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n}\nexport type DateCalendarDefaultizedProps<TDate> = DefaultizedProps<DateCalendarProps<TDate>, 'views' | 'openTo' | 'loading' | 'reduceAnimations' | 'renderLoading' | keyof BaseDateValidationProps<TDate>>;\n","node_modules/@mui/x-date-pickers/DateCalendar/DateCalendar.d.ts":"import * as React from 'react';\nimport { DateCalendarProps } from './DateCalendar.types';\ntype DateCalendarComponent = (<TDate>(props: DateCalendarProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)\n * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DateCalendar API](https://mui.com/x/api/date-pickers/date-calendar/)\n */\nexport declare const DateCalendar: DateCalendarComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/AdapterMomentJalaali/index.d.ts":"export { AdapterMomentJalaali } from './AdapterMomentJalaali';\n","node_modules/@mui/x-date-pickers/AdapterMomentJalaali/AdapterMomentJalaali.d.ts":"import defaultJMoment, { Moment } from 'moment-jalaali';\nimport { AdapterMoment } from '../AdapterMoment';\nimport { AdapterOptions, DateBuilderReturnType, FieldFormatTokenMap, MuiPickersAdapter } from '../models';\n/**\n * Based on `@date-io/jalaali`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterMomentJalaali extends AdapterMoment implements MuiPickersAdapter<Moment, string> {\n    isTimezoneCompatible: boolean;\n    lib: string;\n    moment: typeof defaultJMoment;\n    formatTokenMap: FieldFormatTokenMap;\n    constructor({ formats, instance }?: AdapterOptions<string, typeof defaultJMoment>);\n    date: (value?: any) => defaultJMoment.Moment | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T) => DateBuilderReturnType<T, defaultJMoment.Moment>;\n    getTimezone: () => string;\n    setTimezone: (value: Moment) => Moment;\n    parseISO: (isoString: string) => defaultJMoment.Moment;\n    parse: (value: string, format: string) => defaultJMoment.Moment | null;\n    getFormatHelperText: (format: string) => string;\n    isValid: (value: any) => boolean;\n    formatNumber: (numberToFormat: string) => string;\n    isEqual: (value: any, comparing: any) => boolean;\n    isSameYear: (value: Moment, comparing: Moment) => boolean;\n    isSameMonth: (value: Moment, comparing: Moment) => boolean;\n    isAfterYear: (value: Moment, comparing: Moment) => boolean;\n    isBeforeYear: (value: Moment, comparing: Moment) => boolean;\n    startOfYear: (value: Moment) => defaultJMoment.Moment;\n    startOfMonth: (value: Moment) => defaultJMoment.Moment;\n    endOfYear: (value: Moment) => defaultJMoment.Moment;\n    endOfMonth: (value: Moment) => defaultJMoment.Moment;\n    addYears: (value: Moment, amount: number) => defaultJMoment.Moment;\n    addMonths: (value: Moment, amount: number) => defaultJMoment.Moment;\n    getYear: (value: Moment) => number;\n    getMonth: (value: Moment) => number;\n    getDate: (value: Moment) => number;\n    setYear: (value: Moment, year: number) => defaultJMoment.Moment;\n    setMonth: (value: Moment, month: number) => defaultJMoment.Moment;\n    setDate: (value: Moment, date: number) => defaultJMoment.Moment;\n    getNextMonth: (value: Moment) => defaultJMoment.Moment;\n    getPreviousMonth: (value: Moment) => defaultJMoment.Moment;\n    getWeekdays: () => string[];\n    getWeekArray: (value: Moment) => defaultJMoment.Moment[][];\n    getWeekNumber: (value: Moment) => number;\n    getYearRange: (start: Moment, end: Moment) => defaultJMoment.Moment[];\n    getMeridiemText: (ampm: 'am' | 'pm') => string;\n}\n","node_modules/@mui/x-date-pickers/DateField/useDateField.d.ts":"import { UseDateFieldProps, UseDateFieldParams } from './DateField.types';\nexport declare const useDateField: <TDate, TChildProps extends {}>({ props: inProps, inputRef, }: UseDateFieldParams<TDate, TChildProps>) => import(\"../internals/hooks/useField\").UseFieldResponse<Omit<TChildProps & Omit<UseDateFieldProps<TDate>, \"format\" | keyof import(\"../internals\").BaseDateValidationProps<any>> & Required<Pick<UseDateFieldProps<TDate>, \"format\" | keyof import(\"../internals\").BaseDateValidationProps<any>>>, keyof UseDateFieldProps<TDate>>>;\n","node_modules/@mui/x-date-pickers/DateField/index.d.ts":"export { DateField } from './DateField';\nexport { useDateField as unstable_useDateField } from './useDateField';\nexport type { UseDateFieldProps, UseDateFieldComponentProps, DateFieldProps, UseDateFieldDefaultizedProps, } from './DateField.types';\n","node_modules/@mui/x-date-pickers/DateField/DateField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport TextField from '@mui/material/TextField';\nimport { FieldSlotsComponents, FieldSlotsComponentsProps } from '../internals';\nimport { DateValidationError, FieldSection } from '../models';\nimport { UseFieldInternalProps } from '../internals/hooks/useField';\nimport { DefaultizedProps, MakeOptional } from '../internals/models/helpers';\nimport { BaseDateValidationProps, DayValidationProps, MonthValidationProps, YearValidationProps } from '../internals/models/validation';\nimport { FieldsTextFieldProps } from '../internals/models/fields';\nimport { SlotsAndSlotProps } from '../internals/utils/slots-migration';\nexport interface UseDateFieldParams<TDate, TChildProps extends {}> {\n    props: UseDateFieldComponentProps<TDate, TChildProps>;\n    inputRef?: React.Ref<HTMLInputElement>;\n}\nexport interface UseDateFieldProps<TDate> extends MakeOptional<UseFieldInternalProps<TDate | null, TDate, FieldSection, DateValidationError>, 'format'>, DayValidationProps<TDate>, MonthValidationProps<TDate>, YearValidationProps<TDate>, BaseDateValidationProps<TDate> {\n}\nexport type UseDateFieldDefaultizedProps<TDate> = DefaultizedProps<UseDateFieldProps<TDate>, keyof BaseDateValidationProps<any> | 'format'>;\nexport type UseDateFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseDateFieldProps<TDate>> & UseDateFieldProps<TDate>;\nexport interface DateFieldProps<TDate> extends UseDateFieldComponentProps<TDate, FieldsTextFieldProps>, SlotsAndSlotProps<DateFieldSlotsComponent, DateFieldSlotsComponentsProps<TDate>> {\n}\nexport type DateFieldOwnerState<TDate> = DateFieldProps<TDate>;\nexport interface DateFieldSlotsComponent extends FieldSlotsComponents {\n    /**\n     * Form control with an input to render the value.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n}\nexport interface DateFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    textField?: SlotComponentProps<typeof TextField, {}, DateFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers/DateField/DateField.d.ts":"import * as React from 'react';\nimport { DateFieldProps } from './DateField.types';\ntype DateFieldComponent = (<TDate>(props: DateFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateField](http://mui.com/x/react-date-pickers/date-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [DateField API](https://mui.com/x/api/date-pickers/date-field/)\n */\ndeclare const DateField: DateFieldComponent;\nexport { DateField };\n","node_modules/@mui/x-date-pickers/DateTimePicker/shared.d.ts":"import * as React from 'react';\nimport { DefaultizedProps } from '../internals/models/helpers';\nimport { DateTimeValidationError } from '../models';\nimport { DateCalendarSlotsComponent, DateCalendarSlotsComponentsProps, ExportedDateCalendarProps } from '../DateCalendar/DateCalendar.types';\nimport { TimeClockSlotsComponent, TimeClockSlotsComponentsProps } from '../TimeClock/TimeClock.types';\nimport { BasePickerInputProps } from '../internals/models/props/basePickerProps';\nimport { DateTimePickerTabsProps, ExportedDateTimePickerTabsProps } from './DateTimePickerTabs';\nimport { BaseDateValidationProps, BaseTimeValidationProps, DateTimeValidationProps } from '../internals/models/validation';\nimport { LocalizedComponent } from '../locales/utils/pickersLocaleTextApi';\nimport { DateTimePickerToolbarProps, ExportedDateTimePickerToolbarProps } from './DateTimePickerToolbar';\nimport { PickerViewRendererLookup } from '../internals/hooks/usePicker/usePickerViews';\nimport { DateViewRendererProps } from '../dateViewRenderers';\nimport { TimeViewRendererProps } from '../timeViewRenderers';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { BaseClockProps, ExportedBaseClockProps } from '../internals/models/props/clock';\nimport { DateOrTimeViewWithMeridiem, TimeViewWithMeridiem } from '../internals/models';\nexport interface BaseDateTimePickerSlotsComponent<TDate> extends DateCalendarSlotsComponent<TDate>, TimeClockSlotsComponent {\n    /**\n     * Tabs enabling toggling between date and time pickers.\n     * @default DateTimePickerTabs\n     */\n    Tabs?: React.ElementType<DateTimePickerTabsProps>;\n    /**\n     * Custom component for the toolbar rendered above the views.\n     * @default DateTimePickerToolbar\n     */\n    Toolbar?: React.JSXElementConstructor<DateTimePickerToolbarProps<TDate>>;\n}\nexport interface BaseDateTimePickerSlotsComponentsProps<TDate> extends DateCalendarSlotsComponentsProps<TDate>, TimeClockSlotsComponentsProps {\n    /**\n     * Props passed down to the tabs component.\n     */\n    tabs?: ExportedDateTimePickerTabsProps;\n    /**\n     * Props passed down to the toolbar component.\n     */\n    toolbar?: ExportedDateTimePickerToolbarProps;\n}\nexport interface BaseDateTimePickerProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends BasePickerInputProps<TDate | null, TDate, TView, DateTimeValidationError>, Omit<ExportedDateCalendarProps<TDate>, 'onViewChange'>, ExportedBaseClockProps<TDate>, DateTimeValidationProps<TDate> {\n    /**\n     * Display ampm controls under the clock (instead of in the toolbar).\n     * @default true on desktop, false on mobile\n     */\n    ampmInClock?: boolean;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: BaseDateTimePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: BaseDateTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<BaseDateTimePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: BaseDateTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Define custom view renderers for each section.\n     * If `null`, the section will only have field editing.\n     * If `undefined`, internally defined view will be the used.\n     */\n    viewRenderers?: Partial<PickerViewRendererLookup<TDate | null, TView, DateViewRendererProps<TDate, TView> & TimeViewRendererProps<TimeViewWithMeridiem, BaseClockProps<TDate, TimeViewWithMeridiem>>, {}>>;\n}\ntype UseDateTimePickerDefaultizedProps<TDate, TView extends DateOrTimeViewWithMeridiem, Props extends BaseDateTimePickerProps<TDate, TView>> = LocalizedComponent<TDate, DefaultizedProps<Props, 'views' | 'openTo' | 'orientation' | 'ampm' | keyof BaseDateValidationProps<TDate> | keyof BaseTimeValidationProps>>;\nexport declare function useDateTimePickerDefaultizedProps<TDate, TView extends DateOrTimeViewWithMeridiem, Props extends BaseDateTimePickerProps<TDate, TView>>(props: Props, name: string): Omit<UseDateTimePickerDefaultizedProps<TDate, TView, Props>, 'components' | 'componentsProps'>;\nexport {};\n","node_modules/@mui/x-date-pickers/DateTimePicker/index.d.ts":"export { DateTimePicker } from './DateTimePicker';\nexport type { DateTimePickerProps, DateTimePickerSlotsComponents, DateTimePickerSlotsComponentsProps, } from './DateTimePicker.types';\nexport { DateTimePickerTabs } from './DateTimePickerTabs';\nexport type { DateTimePickerTabsProps } from './DateTimePickerTabs';\nexport { dateTimePickerTabsClasses } from './dateTimePickerTabsClasses';\nexport type { DateTimePickerTabsClassKey, DateTimePickerTabsClasses, } from './dateTimePickerTabsClasses';\nexport { DateTimePickerToolbar } from './DateTimePickerToolbar';\nexport type { DateTimePickerToolbarProps } from './DateTimePickerToolbar';\nexport { dateTimePickerToolbarClasses } from './dateTimePickerToolbarClasses';\nexport type { DateTimePickerToolbarClassKey, DateTimePickerToolbarClasses, } from './dateTimePickerToolbarClasses';\n","node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerToolbarClasses.d.ts":"export interface DateTimePickerToolbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the date container element. */\n    dateContainer: string;\n    /** Styles applied to the time container element. */\n    timeContainer: string;\n    /** Styles applied to the time (except am/pm) container element. */\n    timeDigitsContainer: string;\n    /** Styles applied to the time container if rtl. */\n    timeLabelReverse: string;\n    /** Styles applied to the separator element. */\n    separator: string;\n    /** Styles applied to the am/pm section. */\n    ampmSelection: string;\n    /** Styles applied to am/pm section in landscape mode. */\n    ampmLandscape: string;\n    /** Styles applied to am/pm labels. */\n    ampmLabel: string;\n}\nexport type DateTimePickerToolbarClassKey = keyof DateTimePickerToolbarClasses;\nexport declare function getDateTimePickerToolbarUtilityClass(slot: string): string;\nexport declare const dateTimePickerToolbarClasses: DateTimePickerToolbarClasses;\n","node_modules/@mui/x-date-pickers/DateTimePicker/dateTimePickerTabsClasses.d.ts":"export interface DateTimePickerTabsClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type DateTimePickerTabsClassKey = keyof DateTimePickerTabsClasses;\nexport declare function getDateTimePickerTabsUtilityClass(slot: string): string;\nexport declare const dateTimePickerTabsClasses: DateTimePickerTabsClasses;\n","node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerToolbar.d.ts":"import * as React from 'react';\nimport { BaseToolbarProps, ExportedBaseToolbarProps } from '../internals/models/props/toolbar';\nimport { DateTimePickerToolbarClasses } from './dateTimePickerToolbarClasses';\nimport { DateOrTimeViewWithMeridiem, WrapperVariant } from '../internals/models';\nexport interface ExportedDateTimePickerToolbarProps extends ExportedBaseToolbarProps {\n    ampm?: boolean;\n    ampmInClock?: boolean;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DateTimePickerToolbarClasses>;\n}\nexport interface DateTimePickerToolbarProps<TDate> extends ExportedDateTimePickerToolbarProps, BaseToolbarProps<TDate | null, DateOrTimeViewWithMeridiem> {\n    toolbarVariant?: WrapperVariant;\n}\n/**\n * Demos:\n *\n * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)\n * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)\n *\n * API:\n *\n * - [DateTimePickerToolbar API](https://mui.com/x/api/date-pickers/date-time-picker-toolbar/)\n */\ndeclare function DateTimePickerToolbar<TDate extends unknown>(inProps: DateTimePickerToolbarProps<TDate>): React.JSX.Element;\ndeclare namespace DateTimePickerToolbar {\n    var propTypes: any;\n}\nexport { DateTimePickerToolbar };\n","node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePickerTabs.d.ts":"import * as React from 'react';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\nimport { DateTimePickerTabsClasses } from './dateTimePickerTabsClasses';\nimport { BaseTabsProps, ExportedBaseTabsProps } from '../internals/models/props/tabs';\nexport interface ExportedDateTimePickerTabsProps extends ExportedBaseTabsProps {\n    /**\n     * Toggles visibility of the tabs allowing view switching.\n     * @default `window.innerHeight < 667` for `DesktopDateTimePicker` and `MobileDateTimePicker`, `displayStaticWrapperAs === 'desktop'` for `StaticDateTimePicker`\n     */\n    hidden?: boolean;\n    /**\n     * Date tab icon.\n     * @default DateRange\n     */\n    dateIcon?: React.ReactNode;\n    /**\n     * Time tab icon.\n     * @default Time\n     */\n    timeIcon?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DateTimePickerTabsClasses>;\n}\nexport interface DateTimePickerTabsProps extends ExportedDateTimePickerTabsProps, BaseTabsProps<DateOrTimeViewWithMeridiem> {\n}\n/**\n * Demos:\n *\n * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)\n * - [Custom slots and subcomponents](https://mui.com/x/react-date-pickers/custom-components/)\n *\n * API:\n *\n * - [DateTimePickerTabs API](https://mui.com/x/api/date-pickers/date-time-picker-tabs/)\n */\ndeclare const DateTimePickerTabs: {\n    (inProps: DateTimePickerTabsProps): React.JSX.Element | null;\n    propTypes: any;\n};\nexport { DateTimePickerTabs };\n","node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.types.d.ts":"import { DesktopDateTimePickerProps, DesktopDateTimePickerSlotsComponent, DesktopDateTimePickerSlotsComponentsProps } from '../DesktopDateTimePicker';\nimport { DateOrTimeViewWithMeridiem } from '../internals/models';\nimport { UncapitalizeObjectKeys } from '../internals/utils/slots-migration';\nimport { MobileDateTimePickerProps, MobileDateTimePickerSlotsComponent, MobileDateTimePickerSlotsComponentsProps } from '../MobileDateTimePicker';\nexport interface DateTimePickerSlotsComponents<TDate> extends DesktopDateTimePickerSlotsComponent<TDate>, MobileDateTimePickerSlotsComponent<TDate, DateOrTimeViewWithMeridiem> {\n}\nexport interface DateTimePickerSlotsComponentsProps<TDate> extends DesktopDateTimePickerSlotsComponentsProps<TDate>, MobileDateTimePickerSlotsComponentsProps<TDate, DateOrTimeViewWithMeridiem> {\n}\nexport interface DateTimePickerProps<TDate> extends DesktopDateTimePickerProps<TDate>, Omit<MobileDateTimePickerProps<TDate, DateOrTimeViewWithMeridiem>, 'views'> {\n    /**\n     * CSS media query when `Mobile` mode will be changed to `Desktop`.\n     * @default '@media (pointer: fine)'\n     * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n     */\n    desktopModeMediaQuery?: string;\n    /**\n     * Years rendered per row.\n     * @default 4 on desktop, 3 on mobile\n     */\n    yearsPerRow?: 3 | 4;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DateTimePickerSlotsComponents<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DateTimePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DateTimePickerSlotsComponents<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DateTimePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers/DateTimePicker/DateTimePicker.d.ts":"import * as React from 'react';\nimport { DateTimePickerProps } from './DateTimePicker.types';\ntype DateTimePickerComponent = (<TDate>(props: DateTimePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DateTimePicker API](https://mui.com/x/api/date-pickers/date-time-picker/)\n */\ndeclare const DateTimePicker: DateTimePickerComponent;\nexport { DateTimePicker };\n","node_modules/@mui/x-date-pickers/AdapterLuxon/index.d.ts":"export { AdapterLuxon } from './AdapterLuxon';\n","node_modules/@mui/x-date-pickers/AdapterLuxon/AdapterLuxon.d.ts":"import { DateTime } from 'luxon';\nimport { AdapterFormats, AdapterOptions, AdapterUnits, DateBuilderReturnType, FieldFormatTokenMap, MuiPickersAdapter, PickersTimezone } from '../models';\n/**\n * Based on `@date-io/luxon`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterLuxon implements MuiPickersAdapter<DateTime, string> {\n    isMUIAdapter: boolean;\n    isTimezoneCompatible: boolean;\n    lib: string;\n    locale: string;\n    formats: AdapterFormats;\n    escapedCharacters: {\n        start: string;\n        end: string;\n    };\n    formatTokenMap: FieldFormatTokenMap;\n    constructor({ locale, formats }?: AdapterOptions<string, never>);\n    private setLocaleToValue;\n    date: (value?: any) => DateTime<true> | DateTime<false> | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T, timezone: PickersTimezone) => DateBuilderReturnType<T, DateTime<boolean>>;\n    getTimezone: (value: DateTime) => string;\n    setTimezone: (value: DateTime, timezone: PickersTimezone) => DateTime;\n    toJsDate: (value: DateTime) => Date;\n    parseISO: (isoString: string) => DateTime<true> | DateTime<false>;\n    toISO: (value: DateTime) => string;\n    parse: (value: string, formatString: string) => DateTime<true> | DateTime<false> | null;\n    getCurrentLocaleCode: () => string;\n    is12HourCycleInCurrentLocale: () => boolean;\n    expandFormat: (format: string) => string;\n    getFormatHelperText: (format: string) => string;\n    isNull: (value: DateTime | null) => boolean;\n    isValid: (value: any) => boolean;\n    format: (value: DateTime, formatKey: keyof AdapterFormats) => string;\n    formatByString: (value: DateTime, format: string) => string;\n    formatNumber: (numberToFormat: string) => string;\n    getDiff: (value: DateTime, comparing: DateTime | string, unit?: AdapterUnits) => number;\n    isEqual: (value: any, comparing: any) => boolean;\n    isSameYear: (value: DateTime, comparing: DateTime) => boolean;\n    isSameMonth: (value: DateTime, comparing: DateTime) => boolean;\n    isSameDay: (value: DateTime, comparing: DateTime) => boolean;\n    isSameHour: (value: DateTime, comparing: DateTime) => boolean;\n    isAfter: (value: DateTime, comparing: DateTime) => boolean;\n    isAfterYear: (value: DateTime, comparing: DateTime) => boolean;\n    isAfterDay: (value: DateTime, comparing: DateTime) => boolean;\n    isBefore: (value: DateTime, comparing: DateTime) => boolean;\n    isBeforeYear: (value: DateTime, comparing: DateTime) => boolean;\n    isBeforeDay: (value: DateTime, comparing: DateTime) => boolean;\n    isWithinRange: (value: DateTime, [start, end]: [DateTime, DateTime]) => boolean;\n    startOfYear: (value: DateTime) => DateTime<boolean>;\n    startOfMonth: (value: DateTime) => DateTime<boolean>;\n    startOfWeek: (value: DateTime) => DateTime<boolean>;\n    startOfDay: (value: DateTime) => DateTime<boolean>;\n    endOfYear: (value: DateTime) => DateTime<boolean>;\n    endOfMonth: (value: DateTime) => DateTime<boolean>;\n    endOfWeek: (value: DateTime) => DateTime<boolean>;\n    endOfDay: (value: DateTime) => DateTime<boolean>;\n    addYears: (value: DateTime, amount: number) => DateTime<boolean>;\n    addMonths: (value: DateTime, amount: number) => DateTime<boolean>;\n    addWeeks: (value: DateTime, amount: number) => DateTime<boolean>;\n    addDays: (value: DateTime, amount: number) => DateTime<boolean>;\n    addHours: (value: DateTime, amount: number) => DateTime<boolean>;\n    addMinutes: (value: DateTime, amount: number) => DateTime<boolean>;\n    addSeconds: (value: DateTime, amount: number) => DateTime<boolean>;\n    getYear: (value: DateTime) => number;\n    getMonth: (value: DateTime) => number;\n    getDate: (value: DateTime) => number;\n    getHours: (value: DateTime) => number;\n    getMinutes: (value: DateTime) => number;\n    getSeconds: (value: DateTime) => number;\n    getMilliseconds: (value: DateTime) => number;\n    setYear: (value: DateTime, year: number) => DateTime<boolean>;\n    setMonth: (value: DateTime, month: number) => DateTime<boolean>;\n    setDate: (value: DateTime, date: number) => DateTime<boolean>;\n    setHours: (value: DateTime, hours: number) => DateTime<boolean>;\n    setMinutes: (value: DateTime, minutes: number) => DateTime<boolean>;\n    setSeconds: (value: DateTime, seconds: number) => DateTime<boolean>;\n    setMilliseconds: (value: DateTime, milliseconds: number) => DateTime<boolean>;\n    getDaysInMonth: (value: DateTime) => import(\"luxon\").PossibleDaysInMonth;\n    getNextMonth: (value: DateTime) => DateTime<boolean>;\n    getPreviousMonth: (value: DateTime) => DateTime<boolean>;\n    getMonthArray: (value: DateTime) => DateTime<boolean>[];\n    mergeDateAndTime: (dateParam: DateTime, timeParam: DateTime) => DateTime<boolean>;\n    getWeekdays: () => string[];\n    getWeekArray: (value: DateTime) => DateTime<boolean>[][];\n    getWeekNumber: (value: DateTime) => number;\n    getYearRange: (start: DateTime, end: DateTime) => DateTime<boolean>[];\n    getMeridiemText: (ampm: 'am' | 'pm') => string;\n}\n","node_modules/@mui/x-date-pickers/AdapterMoment/index.d.ts":"export { AdapterMoment } from './AdapterMoment';\n","node_modules/@mui/x-date-pickers/AdapterMoment/AdapterMoment.d.ts":"import defaultMoment, { Moment } from 'moment';\nimport { AdapterFormats, AdapterOptions, AdapterUnits, DateBuilderReturnType, FieldFormatTokenMap, MuiPickersAdapter, PickersTimezone } from '../models';\n/**\n * Based on `@date-io/moment`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterMoment implements MuiPickersAdapter<Moment, string> {\n    isMUIAdapter: boolean;\n    isTimezoneCompatible: boolean;\n    lib: string;\n    moment: typeof defaultMoment;\n    locale?: string;\n    formats: AdapterFormats;\n    escapedCharacters: {\n        start: string;\n        end: string;\n    };\n    formatTokenMap: FieldFormatTokenMap;\n    constructor({ locale, formats, instance }?: AdapterOptions<string, typeof defaultMoment>);\n    private setLocaleToValue;\n    /**\n     * Some methods from moment can't take the locale as a parameter and always use the current locale.\n     * To respect the adapter locale, we need to set it as the current locale and then reset the previous locale.\n     */\n    private syncMomentLocale;\n    private hasTimezonePlugin;\n    private createSystemDate;\n    private createUTCDate;\n    private createTZDate;\n    date: (value?: any) => defaultMoment.Moment | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T, timezone: PickersTimezone) => DateBuilderReturnType<T, defaultMoment.Moment>;\n    getTimezone: (value: Moment) => string;\n    setTimezone: (value: Moment, timezone: PickersTimezone) => Moment;\n    toJsDate: (value: Moment) => Date;\n    parseISO: (isoString: string) => defaultMoment.Moment;\n    toISO: (value: Moment) => string;\n    parse: (value: string, format: string) => defaultMoment.Moment | null;\n    getCurrentLocaleCode: () => string;\n    is12HourCycleInCurrentLocale: () => boolean;\n    expandFormat: (format: string) => string;\n    getFormatHelperText: (format: string) => string;\n    isNull: (value: Moment | null) => boolean;\n    isValid: (value: any) => boolean;\n    format: (value: Moment, formatKey: keyof AdapterFormats) => string;\n    formatByString: (value: Moment, formatString: string) => string;\n    formatNumber: (numberToFormat: string) => string;\n    getDiff: (value: Moment, comparing: Moment | string, unit?: AdapterUnits) => number;\n    isEqual: (value: any, comparing: any) => boolean;\n    isSameYear: (value: Moment, comparing: Moment) => boolean;\n    isSameMonth: (value: Moment, comparing: Moment) => boolean;\n    isSameDay: (value: Moment, comparing: Moment) => boolean;\n    isSameHour: (value: Moment, comparing: Moment) => boolean;\n    isAfter: (value: Moment, comparing: Moment) => boolean;\n    isAfterYear: (value: Moment, comparing: Moment) => boolean;\n    isAfterDay: (value: Moment, comparing: Moment) => boolean;\n    isBefore: (value: Moment, comparing: Moment) => boolean;\n    isBeforeYear: (value: Moment, comparing: Moment) => boolean;\n    isBeforeDay: (value: Moment, comparing: Moment) => boolean;\n    isWithinRange: (value: Moment, [start, end]: [Moment, Moment]) => boolean;\n    startOfYear: (value: Moment) => defaultMoment.Moment;\n    startOfMonth: (value: Moment) => defaultMoment.Moment;\n    startOfWeek: (value: Moment) => defaultMoment.Moment;\n    startOfDay: (value: Moment) => defaultMoment.Moment;\n    endOfYear: (value: Moment) => defaultMoment.Moment;\n    endOfMonth: (value: Moment) => defaultMoment.Moment;\n    endOfWeek: (value: Moment) => defaultMoment.Moment;\n    endOfDay: (value: Moment) => defaultMoment.Moment;\n    addYears: (value: Moment, amount: number) => defaultMoment.Moment;\n    addMonths: (value: Moment, amount: number) => defaultMoment.Moment;\n    addWeeks: (value: Moment, amount: number) => defaultMoment.Moment;\n    addDays: (value: Moment, amount: number) => defaultMoment.Moment;\n    addHours: (value: Moment, amount: number) => defaultMoment.Moment;\n    addMinutes: (value: Moment, amount: number) => defaultMoment.Moment;\n    addSeconds: (value: Moment, amount: number) => defaultMoment.Moment;\n    getYear: (value: Moment) => number;\n    getMonth: (value: Moment) => number;\n    getDate: (value: Moment) => number;\n    getHours: (value: Moment) => number;\n    getMinutes: (value: Moment) => number;\n    getSeconds: (value: Moment) => number;\n    getMilliseconds: (value: Moment) => number;\n    setYear: (value: Moment, year: number) => defaultMoment.Moment;\n    setMonth: (value: Moment, month: number) => defaultMoment.Moment;\n    setDate: (value: Moment, date: number) => defaultMoment.Moment;\n    setHours: (value: Moment, hours: number) => defaultMoment.Moment;\n    setMinutes: (value: Moment, minutes: number) => defaultMoment.Moment;\n    setSeconds: (value: Moment, seconds: number) => defaultMoment.Moment;\n    setMilliseconds: (value: Moment, milliseconds: number) => defaultMoment.Moment;\n    getDaysInMonth: (value: Moment) => number;\n    getNextMonth: (value: Moment) => defaultMoment.Moment;\n    getPreviousMonth: (value: Moment) => defaultMoment.Moment;\n    getMonthArray: (value: Moment) => defaultMoment.Moment[];\n    mergeDateAndTime: (dateParam: Moment, timeParam: Moment) => defaultMoment.Moment;\n    getWeekdays: () => string[];\n    getWeekArray: (value: Moment) => defaultMoment.Moment[][];\n    getWeekNumber: (value: Moment) => number;\n    getYearRange: (start: Moment, end: Moment) => defaultMoment.Moment[];\n    getMeridiemText: (ampm: 'am' | 'pm') => string;\n}\n","node_modules/@mui/x-date-pickers/AdapterDayjs/index.d.ts":"export { AdapterDayjs } from './AdapterDayjs';\n","node_modules/@mui/x-date-pickers/AdapterDayjs/AdapterDayjs.d.ts":"import defaultDayjs, { Dayjs } from 'dayjs';\nimport { FieldFormatTokenMap, MuiPickersAdapter, AdapterFormats, AdapterUnits, AdapterOptions, PickersTimezone, DateBuilderReturnType } from '../models';\ntype Constructor = (...args: Parameters<typeof defaultDayjs>) => Dayjs;\n/**\n * Based on `@date-io/dayjs`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterDayjs implements MuiPickersAdapter<Dayjs, string> {\n    isMUIAdapter: boolean;\n    isTimezoneCompatible: boolean;\n    lib: string;\n    rawDayJsInstance?: typeof defaultDayjs;\n    dayjs: Constructor;\n    locale?: string;\n    formats: AdapterFormats;\n    escapedCharacters: {\n        start: string;\n        end: string;\n    };\n    formatTokenMap: FieldFormatTokenMap;\n    constructor({ locale, formats, instance }?: AdapterOptions<string, typeof defaultDayjs>);\n    private setLocaleToValue;\n    private hasUTCPlugin;\n    private hasTimezonePlugin;\n    private isSame;\n    /**\n     * Replaces \"default\" by undefined and \"system\" by the system timezone before passing it to `dayjs`.\n     */\n    private cleanTimezone;\n    private createSystemDate;\n    private createUTCDate;\n    private createTZDate;\n    private getLocaleFormats;\n    /**\n     * If the new day does not have the same offset as the old one (when switching to summer day time for example),\n     * Then dayjs will not automatically adjust the offset (moment does).\n     * We have to parse again the value to make sure the `fixOffset` method is applied.\n     * See https://github.com/iamkun/dayjs/blob/b3624de619d6e734cd0ffdbbd3502185041c1b60/src/plugin/timezone/index.js#L72\n     */\n    private adjustOffset;\n    date: (value?: any) => defaultDayjs.Dayjs | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T, timezone: PickersTimezone) => DateBuilderReturnType<T, defaultDayjs.Dayjs>;\n    getTimezone: (value: Dayjs) => string;\n    setTimezone: (value: Dayjs, timezone: PickersTimezone) => Dayjs;\n    toJsDate: (value: Dayjs) => Date;\n    parseISO: (isoString: string) => defaultDayjs.Dayjs;\n    toISO: (value: Dayjs) => string;\n    parse: (value: string, format: string) => defaultDayjs.Dayjs | null;\n    getCurrentLocaleCode: () => string;\n    is12HourCycleInCurrentLocale: () => boolean;\n    expandFormat: (format: string) => string;\n    getFormatHelperText: (format: string) => string;\n    isNull: (value: Dayjs | null) => boolean;\n    isValid: (value: any) => boolean;\n    format: (value: Dayjs, formatKey: keyof AdapterFormats) => string;\n    formatByString: (value: Dayjs, formatString: string) => string;\n    formatNumber: (numberToFormat: string) => string;\n    getDiff: (value: Dayjs, comparing: Dayjs | string, unit?: AdapterUnits) => number;\n    isEqual: (value: any, comparing: any) => boolean;\n    isSameYear: (value: Dayjs, comparing: Dayjs) => boolean;\n    isSameMonth: (value: Dayjs, comparing: Dayjs) => boolean;\n    isSameDay: (value: Dayjs, comparing: Dayjs) => boolean;\n    isSameHour: (value: Dayjs, comparing: Dayjs) => boolean;\n    isAfter: (value: Dayjs, comparing: Dayjs) => boolean;\n    isAfterYear: (value: Dayjs, comparing: Dayjs) => boolean;\n    isAfterDay: (value: Dayjs, comparing: Dayjs) => boolean;\n    isBefore: (value: Dayjs, comparing: Dayjs) => boolean;\n    isBeforeYear: (value: Dayjs, comparing: Dayjs) => boolean;\n    isBeforeDay: (value: Dayjs, comparing: Dayjs) => boolean;\n    isWithinRange: (value: Dayjs, [start, end]: [Dayjs, Dayjs]) => boolean;\n    startOfYear: (value: Dayjs) => defaultDayjs.Dayjs;\n    startOfMonth: (value: Dayjs) => defaultDayjs.Dayjs;\n    startOfWeek: (value: Dayjs) => defaultDayjs.Dayjs;\n    startOfDay: (value: Dayjs) => defaultDayjs.Dayjs;\n    endOfYear: (value: Dayjs) => defaultDayjs.Dayjs;\n    endOfMonth: (value: Dayjs) => defaultDayjs.Dayjs;\n    endOfWeek: (value: Dayjs) => defaultDayjs.Dayjs;\n    endOfDay: (value: Dayjs) => defaultDayjs.Dayjs;\n    addYears: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    addMonths: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    addWeeks: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    addDays: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    addHours: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    addMinutes: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    addSeconds: (value: Dayjs, amount: number) => defaultDayjs.Dayjs;\n    getYear: (value: Dayjs) => number;\n    getMonth: (value: Dayjs) => number;\n    getDate: (value: Dayjs) => number;\n    getHours: (value: Dayjs) => number;\n    getMinutes: (value: Dayjs) => number;\n    getSeconds: (value: Dayjs) => number;\n    getMilliseconds: (value: Dayjs) => number;\n    setYear: (value: Dayjs, year: number) => defaultDayjs.Dayjs;\n    setMonth: (value: Dayjs, month: number) => defaultDayjs.Dayjs;\n    setDate: (value: Dayjs, date: number) => defaultDayjs.Dayjs;\n    setHours: (value: Dayjs, hours: number) => defaultDayjs.Dayjs;\n    setMinutes: (value: Dayjs, minutes: number) => defaultDayjs.Dayjs;\n    setSeconds: (value: Dayjs, seconds: number) => defaultDayjs.Dayjs;\n    setMilliseconds: (value: Dayjs, milliseconds: number) => defaultDayjs.Dayjs;\n    getDaysInMonth: (value: Dayjs) => number;\n    getNextMonth: (value: Dayjs) => defaultDayjs.Dayjs;\n    getPreviousMonth: (value: Dayjs) => defaultDayjs.Dayjs;\n    getMonthArray: (value: Dayjs) => defaultDayjs.Dayjs[];\n    mergeDateAndTime: (dateParam: Dayjs, timeParam: Dayjs) => defaultDayjs.Dayjs;\n    getWeekdays: () => string[];\n    getWeekArray: (value: Dayjs) => defaultDayjs.Dayjs[][];\n    getWeekNumber: (value: Dayjs) => number;\n    getYearRange: (start: Dayjs, end: Dayjs) => defaultDayjs.Dayjs[];\n    getMeridiemText: (ampm: 'am' | 'pm') => \"AM\" | \"PM\";\n}\nexport {};\n","node_modules/@mui/x-date-pickers/AdapterDateFnsJalali/index.d.ts":"export { AdapterDateFnsJalali } from './AdapterDateFnsJalali';\n","node_modules/@mui/x-date-pickers/AdapterDateFnsJalali/AdapterDateFnsJalali.d.ts":"/// <reference types=\"date-fns-jalali\" />\nimport defaultLocale from 'date-fns-jalali/locale/fa-IR';\nimport { AdapterFormats, AdapterOptions, AdapterUnits, DateBuilderReturnType, FieldFormatTokenMap, MuiPickersAdapter } from '../models';\ntype DateFnsLocale = typeof defaultLocale;\n/**\n * Based on `@date-io/date-fns-jalali`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterDateFnsJalali implements MuiPickersAdapter<Date, DateFnsLocale> {\n    isMUIAdapter: boolean;\n    isTimezoneCompatible: boolean;\n    lib: string;\n    locale?: DateFnsLocale;\n    formats: AdapterFormats;\n    formatTokenMap: FieldFormatTokenMap;\n    escapedCharacters: {\n        start: string;\n        end: string;\n    };\n    constructor({ locale, formats }?: AdapterOptions<DateFnsLocale, never>);\n    date: (value?: any) => Date | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T) => DateBuilderReturnType<T, Date>;\n    getTimezone: () => string;\n    setTimezone: (value: Date) => Date;\n    toJsDate: (value: Date) => Date;\n    parseISO: (isoString: string) => Date;\n    toISO: (value: Date) => string;\n    parse: (value: string, format: string) => Date | null;\n    getCurrentLocaleCode: () => string;\n    is12HourCycleInCurrentLocale: () => boolean;\n    expandFormat: (format: string) => string;\n    getFormatHelperText: (format: string) => string;\n    isNull: (value: Date | null) => boolean;\n    isValid: (value: any) => boolean;\n    format: (value: Date, formatKey: keyof AdapterFormats) => string;\n    formatByString: (value: Date, formatString: string) => string;\n    formatNumber: (numberToFormat: string) => string;\n    getDiff: (value: Date, comparing: Date | string, unit?: AdapterUnits) => number;\n    isEqual: (value: any, comparing: any) => boolean;\n    isSameYear: (value: Date, comparing: Date) => boolean;\n    isSameMonth: (value: Date, comparing: Date) => boolean;\n    isSameDay: (value: Date, comparing: Date) => boolean;\n    isSameHour: (value: Date, comparing: Date) => boolean;\n    isAfter: (value: Date, comparing: Date) => boolean;\n    isAfterYear: (value: Date, comparing: Date) => boolean;\n    isAfterDay: (value: Date, comparing: Date) => boolean;\n    isBefore: (value: Date, comparing: Date) => boolean;\n    isBeforeYear: (value: Date, comparing: Date) => boolean;\n    isBeforeDay: (value: Date, comparing: Date) => boolean;\n    isWithinRange: (value: Date, [start, end]: [Date, Date]) => boolean;\n    startOfYear: (value: Date) => Date;\n    startOfMonth: (value: Date) => Date;\n    startOfWeek: (value: Date) => Date;\n    startOfDay: (value: Date) => Date;\n    endOfYear: (value: Date) => Date;\n    endOfMonth: (value: Date) => Date;\n    endOfWeek: (value: Date) => Date;\n    endOfDay: (value: Date) => Date;\n    addYears: (value: Date, amount: number) => Date;\n    addMonths: (value: Date, amount: number) => Date;\n    addWeeks: (value: Date, amount: number) => Date;\n    addDays: (value: Date, amount: number) => Date;\n    addHours: (value: Date, amount: number) => Date;\n    addMinutes: (value: Date, amount: number) => Date;\n    addSeconds: (value: Date, amount: number) => Date;\n    getYear: (value: Date) => number;\n    getMonth: (value: Date) => number;\n    getDate: (value: Date) => number;\n    getHours: (value: Date) => number;\n    getMinutes: (value: Date) => number;\n    getSeconds: (value: Date) => number;\n    getMilliseconds: (value: Date) => number;\n    setYear: (value: Date, year: number) => Date;\n    setMonth: (value: Date, month: number) => Date;\n    setDate: (value: Date, date: number) => Date;\n    setHours: (value: Date, hours: number) => Date;\n    setMinutes: (value: Date, minutes: number) => Date;\n    setSeconds: (value: Date, seconds: number) => Date;\n    setMilliseconds: (value: Date, milliseconds: number) => Date;\n    getDaysInMonth: (value: Date) => number;\n    getNextMonth: (value: Date) => Date;\n    getPreviousMonth: (value: Date) => Date;\n    getMonthArray: (value: Date) => Date[];\n    mergeDateAndTime: (dateParam: Date, timeParam: Date) => Date;\n    getWeekdays: () => string[];\n    getWeekArray: (value: Date) => Date[][];\n    getWeekNumber: (date: Date) => number;\n    getYearRange: (start: Date, end: Date) => Date[];\n    getMeridiemText: (ampm: 'am' | 'pm') => \"ق.ظ\" | \"ب.ظ\";\n}\nexport {};\n","node_modules/@mui/x-date-pickers/AdapterDateFnsBase/index.d.ts":"export { AdapterDateFnsBase } from './AdapterDateFnsBase';\n","node_modules/@mui/x-date-pickers/AdapterDateFnsBase/AdapterDateFnsBase.d.ts":"import { AdapterFormats, AdapterOptions, DateBuilderReturnType, FieldFormatTokenMap, MuiPickersAdapter } from '../models';\nimport { MakeRequired } from '../internals/models/helpers';\ntype DateFnsLocaleBase = {\n    formatLong?: {\n        date?: any;\n        time?: any;\n        dateTime?: any;\n    };\n    code?: string;\n};\ntype DateFnsAdapterBaseOptions<DateFnsLocale extends DateFnsLocaleBase> = MakeRequired<AdapterOptions<DateFnsLocale, never>, 'locale'> & {\n    longFormatters: Record<'p' | 'P', (token: string, formatLong: any) => string>;\n};\n/**\n * Based on `@date-io/date-fns`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterDateFnsBase<DateFnsLocale extends DateFnsLocaleBase> implements Pick<MuiPickersAdapter<Date, DateFnsLocale>, 'date' | 'dateWithTimezone' | 'getTimezone' | 'setTimezone' | 'toJsDate' | 'getCurrentLocaleCode' | 'is12HourCycleInCurrentLocale' | 'expandFormat' | 'getFormatHelperText' | 'isNull' | 'formatNumber' | 'getMeridiemText'> {\n    isMUIAdapter: boolean;\n    isTimezoneCompatible: boolean;\n    lib: string;\n    locale: DateFnsLocale;\n    formats: AdapterFormats;\n    formatTokenMap: FieldFormatTokenMap;\n    escapedCharacters: {\n        start: string;\n        end: string;\n    };\n    longFormatters: DateFnsAdapterBaseOptions<DateFnsLocale>['longFormatters'];\n    constructor(props: DateFnsAdapterBaseOptions<DateFnsLocale>);\n    date: (value?: any) => Date | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T) => DateBuilderReturnType<T, Date>;\n    getTimezone: () => string;\n    setTimezone: (value: Date) => Date;\n    toJsDate: (value: Date) => Date;\n    getCurrentLocaleCode: () => string;\n    is12HourCycleInCurrentLocale: () => boolean;\n    expandFormat: (format: string) => string;\n    getFormatHelperText: (format: string) => string;\n    isNull: (value: Date | null) => boolean;\n    formatNumber: (numberToFormat: string) => string;\n    getMeridiemText: (ampm: 'am' | 'pm') => \"AM\" | \"PM\";\n}\nexport {};\n","node_modules/@mui/x-date-pickers/AdapterDateFns/index.d.ts":"export { AdapterDateFns } from './AdapterDateFns';\n","node_modules/@mui/x-date-pickers/AdapterDateFns/AdapterDateFns.d.ts":"/// <reference types=\"date-fns\" />\nimport defaultLocale from 'date-fns/locale/en-US';\nimport { AdapterFormats, AdapterOptions, AdapterUnits, MuiPickersAdapter } from '../models';\nimport { AdapterDateFnsBase } from '../AdapterDateFnsBase';\ntype DateFnsLocale = typeof defaultLocale;\n/**\n * Based on `@date-io/date-fns`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterDateFns extends AdapterDateFnsBase<DateFnsLocale> implements MuiPickersAdapter<Date, DateFnsLocale> {\n    constructor({ locale, formats }?: AdapterOptions<DateFnsLocale, never>);\n    parseISO: (isoString: string) => Date;\n    toISO: (value: Date) => string;\n    parse: (value: string, format: string) => Date | null;\n    isValid: (value: any) => boolean;\n    format: (value: Date, formatKey: keyof AdapterFormats) => string;\n    formatByString: (value: Date, formatString: string) => string;\n    getDiff: (value: Date, comparing: Date | string, unit?: AdapterUnits) => number;\n    isEqual: (value: any, comparing: any) => boolean;\n    isSameYear: (value: Date, comparing: Date) => boolean;\n    isSameMonth: (value: Date, comparing: Date) => boolean;\n    isSameDay: (value: Date, comparing: Date) => boolean;\n    isSameHour: (value: Date, comparing: Date) => boolean;\n    isAfter: (value: Date, comparing: Date) => boolean;\n    isAfterYear: (value: Date, comparing: Date) => boolean;\n    isAfterDay: (value: Date, comparing: Date) => boolean;\n    isBefore: (value: Date, comparing: Date) => boolean;\n    isBeforeYear: (value: Date, comparing: Date) => boolean;\n    isBeforeDay: (value: Date, comparing: Date) => boolean;\n    isWithinRange: (value: Date, [start, end]: [Date, Date]) => boolean;\n    startOfYear: (value: Date) => Date;\n    startOfMonth: (value: Date) => Date;\n    startOfWeek: (value: Date) => Date;\n    startOfDay: (value: Date) => Date;\n    endOfYear: (value: Date) => Date;\n    endOfMonth: (value: Date) => Date;\n    endOfWeek: (value: Date) => Date;\n    endOfDay: (value: Date) => Date;\n    addYears: (value: Date, amount: number) => Date;\n    addMonths: (value: Date, amount: number) => Date;\n    addWeeks: (value: Date, amount: number) => Date;\n    addDays: (value: Date, amount: number) => Date;\n    addHours: (value: Date, amount: number) => Date;\n    addMinutes: (value: Date, amount: number) => Date;\n    addSeconds: (value: Date, amount: number) => Date;\n    getYear: (value: Date) => number;\n    getMonth: (value: Date) => number;\n    getDate: (value: Date) => number;\n    getHours: (value: Date) => number;\n    getMinutes: (value: Date) => number;\n    getSeconds: (value: Date) => number;\n    getMilliseconds: (value: Date) => number;\n    setYear: (value: Date, year: number) => Date;\n    setMonth: (value: Date, month: number) => Date;\n    setDate: (value: Date, date: number) => Date;\n    setHours: (value: Date, hours: number) => Date;\n    setMinutes: (value: Date, minutes: number) => Date;\n    setSeconds: (value: Date, seconds: number) => Date;\n    setMilliseconds: (value: Date, milliseconds: number) => Date;\n    getDaysInMonth: (value: Date) => number;\n    getNextMonth: (value: Date) => Date;\n    getPreviousMonth: (value: Date) => Date;\n    getMonthArray: (value: Date) => Date[];\n    mergeDateAndTime: (dateParam: Date, timeParam: Date) => Date;\n    getWeekdays: () => string[];\n    getWeekArray: (value: Date) => Date[][];\n    getWeekNumber: (value: Date) => number;\n    getYearRange: (start: Date, end: Date) => Date[];\n}\nexport {};\n","node_modules/@mui/x-date-pickers/AdapterMomentHijri/index.d.ts":"export { AdapterMomentHijri } from './AdapterMomentHijri';\n","node_modules/@mui/x-date-pickers/AdapterMomentHijri/AdapterMomentHijri.d.ts":"import defaultHMoment, { Moment } from 'moment-hijri';\nimport { AdapterMoment } from '../AdapterMoment';\nimport { AdapterOptions, DateBuilderReturnType, FieldFormatTokenMap, MuiPickersAdapter } from '../models';\n/**\n * Based on `@date-io/hijri`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterMomentHijri extends AdapterMoment implements MuiPickersAdapter<Moment, string> {\n    lib: string;\n    moment: typeof defaultHMoment;\n    isTimezoneCompatible: boolean;\n    formatTokenMap: FieldFormatTokenMap;\n    constructor({ formats, instance }?: AdapterOptions<string, typeof defaultHMoment>);\n    date: (value?: any) => defaultHMoment.Moment | null;\n    dateWithTimezone: <T extends string | null | undefined>(value: T) => DateBuilderReturnType<T, defaultHMoment.Moment>;\n    getTimezone: () => string;\n    setTimezone: (value: Moment) => Moment;\n    parse: (value: string, format: string) => defaultHMoment.Moment | null;\n    getFormatHelperText: (format: string) => string;\n    formatNumber: (numberToFormat: string) => string;\n    isEqual: (value: any, comparing: any) => boolean;\n    startOfYear: (value: Moment) => defaultHMoment.Moment;\n    startOfMonth: (value: Moment) => defaultHMoment.Moment;\n    endOfYear: (value: Moment) => defaultHMoment.Moment;\n    endOfMonth: (value: Moment) => defaultHMoment.Moment;\n    addYears: (value: Moment, amount: number) => defaultHMoment.Moment;\n    addMonths: (value: Moment, amount: number) => defaultHMoment.Moment;\n    getYear: (value: Moment) => number;\n    getMonth: (value: Moment) => number;\n    getDate: (value: Moment) => number;\n    setYear: (value: Moment, year: number) => defaultHMoment.Moment;\n    setMonth: (value: Moment, month: number) => defaultHMoment.Moment;\n    setDate: (value: Moment, date: number) => defaultHMoment.Moment;\n    getNextMonth: (value: Moment) => defaultHMoment.Moment;\n    getPreviousMonth: (value: Moment) => defaultHMoment.Moment;\n    getWeekdays: () => string[];\n    getWeekArray: (value: Moment) => defaultHMoment.Moment[][];\n    getWeekNumber: (value: Moment) => number;\n    getYearRange: (start: Moment, end: Moment) => defaultHMoment.Moment[];\n    getMeridiemText: (ampm: 'am' | 'pm') => string;\n}\n","node_modules/@mui/x-date-pickers/AdapterDateFnsV3/index.d.ts":"export { AdapterDateFns } from './AdapterDateFnsV3';\n","node_modules/@mui/x-date-pickers/AdapterDateFnsV3/AdapterDateFnsV3.d.ts":"import { Locale as DateFnsLocale } from 'date-fns/locale/types';\nimport { AdapterFormats, AdapterOptions, AdapterUnits, MuiPickersAdapter } from '../models';\nimport { AdapterDateFnsBase } from '../AdapterDateFnsBase';\n/**\n * Based on `@date-io/date-fns`\n *\n * MIT License\n *\n * Copyright (c) 2017 Dmitriy Kovalenko\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nexport declare class AdapterDateFns extends AdapterDateFnsBase<DateFnsLocale> implements MuiPickersAdapter<Date, DateFnsLocale> {\n    constructor({ locale, formats }?: AdapterOptions<DateFnsLocale, never>);\n    parseISO: (isoString: string) => any;\n    toISO: (value: Date) => any;\n    parse: (value: string, format: string) => any;\n    isValid: (value: any) => any;\n    format: (value: Date, formatKey: keyof AdapterFormats) => any;\n    formatByString: (value: Date, formatString: string) => any;\n    getDiff: (value: Date, comparing: Date | string, unit?: AdapterUnits) => any;\n    isEqual: (value: any, comparing: any) => any;\n    isSameYear: (value: Date, comparing: Date) => any;\n    isSameMonth: (value: Date, comparing: Date) => any;\n    isSameDay: (value: Date, comparing: Date) => any;\n    isSameHour: (value: Date, comparing: Date) => any;\n    isAfter: (value: Date, comparing: Date) => any;\n    isAfterYear: (value: Date, comparing: Date) => any;\n    isAfterDay: (value: Date, comparing: Date) => any;\n    isBefore: (value: Date, comparing: Date) => any;\n    isBeforeYear: (value: Date, comparing: Date) => any;\n    isBeforeDay: (value: Date, comparing: Date) => any;\n    isWithinRange: (value: Date, [start, end]: [Date, Date]) => any;\n    startOfYear: (value: Date) => any;\n    startOfMonth: (value: Date) => any;\n    startOfWeek: (value: Date) => any;\n    startOfDay: (value: Date) => any;\n    endOfYear: (value: Date) => any;\n    endOfMonth: (value: Date) => any;\n    endOfWeek: (value: Date) => any;\n    endOfDay: (value: Date) => any;\n    addYears: (value: Date, amount: number) => any;\n    addMonths: (value: Date, amount: number) => any;\n    addWeeks: (value: Date, amount: number) => any;\n    addDays: (value: Date, amount: number) => any;\n    addHours: (value: Date, amount: number) => any;\n    addMinutes: (value: Date, amount: number) => any;\n    addSeconds: (value: Date, amount: number) => any;\n    getYear: (value: Date) => any;\n    getMonth: (value: Date) => any;\n    getDate: (value: Date) => any;\n    getHours: (value: Date) => any;\n    getMinutes: (value: Date) => any;\n    getSeconds: (value: Date) => any;\n    getMilliseconds: (value: Date) => any;\n    setYear: (value: Date, year: number) => any;\n    setMonth: (value: Date, month: number) => any;\n    setDate: (value: Date, date: number) => any;\n    setHours: (value: Date, hours: number) => any;\n    setMinutes: (value: Date, minutes: number) => any;\n    setSeconds: (value: Date, seconds: number) => any;\n    setMilliseconds: (value: Date, milliseconds: number) => any;\n    getDaysInMonth: (value: Date) => any;\n    getNextMonth: (value: Date) => any;\n    getPreviousMonth: (value: Date) => any;\n    getMonthArray: (value: Date) => any[];\n    mergeDateAndTime: (dateParam: Date, timeParam: Date) => any;\n    getWeekdays: () => any;\n    getWeekArray: (value: Date) => Date[][];\n    getWeekNumber: (value: Date) => any;\n    getYearRange: (start: Date, end: Date) => Date[];\n}\n","node_modules/@mui/x-date-pickers/internals/utils/warning.d.ts":"export declare const buildDeprecatedPropsWarning: (message: string | string[]) => (deprecatedProps: {\n    [key: string]: any;\n}) => void;\nexport declare const buildWarning: (message: string | string[], gravity?: 'warning' | 'error') => () => void;\n","node_modules/@mui/x-date-pickers/internals/utils/views.d.ts":"import { DateOrTimeView } from '../../models';\nimport { DateOrTimeViewWithMeridiem } from '../models';\nexport declare const areViewsEqual: <TView extends DateOrTimeView>(views: ReadonlyArray<DateOrTimeView>, expectedViews: TView[]) => views is readonly TView[];\nexport declare const applyDefaultViewProps: <TView extends DateOrTimeViewWithMeridiem>({ openTo, defaultOpenTo, views, defaultViews, }: {\n    openTo: TView | undefined;\n    defaultOpenTo: TView;\n    views: readonly TView[] | undefined;\n    defaultViews: readonly TView[];\n}) => {\n    views: readonly TView[];\n    openTo: TView;\n};\n","node_modules/@mui/x-date-pickers/internals/utils/valueManagers.d.ts":"import type { PickerValueManager } from '../hooks/usePicker';\nimport { DateValidationError, TimeValidationError, DateTimeValidationError, FieldSection } from '../../models';\nimport type { FieldValueManager } from '../hooks/useField';\nexport type SingleItemPickerValueManager<TValue = any, TDate = any, TError extends DateValidationError | TimeValidationError | DateTimeValidationError = any> = PickerValueManager<TValue, TDate, TError>;\nexport declare const singleItemValueManager: SingleItemPickerValueManager;\nexport declare const singleItemFieldValueManager: FieldValueManager<any, any, FieldSection>;\n","node_modules/@mui/x-date-pickers/internals/utils/utils.d.ts":"import * as React from 'react';\nexport declare function arrayIncludes<T>(array: T[] | readonly T[], itemOrItems: T | T[]): boolean;\nexport declare const onSpaceOrEnter: (innerFn: (ev: React.MouseEvent<any> | React.KeyboardEvent<any>) => void, externalEvent?: ((event: React.KeyboardEvent<any>) => void) | undefined) => (event: React.KeyboardEvent) => void;\nexport declare const executeInTheNextEventLoopTick: (fn: () => void) => void;\nexport declare const getActiveElement: (root?: Document | ShadowRoot) => Element | null;\nexport declare const DEFAULT_DESKTOP_MODE_MEDIA_QUERY = \"@media (pointer: fine)\";\n","node_modules/@mui/x-date-pickers/internals/utils/time-utils.d.ts":"import { MuiPickersAdapter, TimeView } from '../../models';\nimport { DateOrTimeViewWithMeridiem, TimeViewWithMeridiem } from '../models';\nexport declare const isTimeView: (view: DateOrTimeViewWithMeridiem) => boolean;\nexport declare const isInternalTimeView: (view: DateOrTimeViewWithMeridiem) => view is TimeViewWithMeridiem;\nexport type Meridiem = 'am' | 'pm';\nexport declare const getMeridiem: <TDate>(date: TDate | null, utils: MuiPickersAdapter<TDate, any>) => Meridiem | null;\nexport declare const convertValueToMeridiem: (value: number, meridiem: Meridiem | null, ampm: boolean) => number;\nexport declare const convertToMeridiem: <TDate>(time: TDate, meridiem: Meridiem, ampm: boolean, utils: MuiPickersAdapter<TDate, any>) => TDate;\nexport declare const getSecondsInDay: <TDate>(date: TDate, utils: MuiPickersAdapter<TDate, any>) => number;\nexport declare const createIsAfterIgnoreDatePart: <TDate>(disableIgnoringDatePartForTimeValidation: boolean, utils: MuiPickersAdapter<TDate, any>) => (dateLeft: TDate, dateRight: TDate) => boolean;\nexport declare const resolveTimeFormat: (utils: MuiPickersAdapter<any>, { format, views, ampm }: {\n    format?: string | undefined;\n    views: readonly TimeView[];\n    ampm: boolean;\n}) => string;\n","node_modules/@mui/x-date-pickers/internals/utils/slots-migration.d.ts":"type OptionalKeys<T extends object> = Exclude<{\n    [K in keyof T]: {} extends Pick<T, K> ? K : never;\n}[keyof T], undefined>;\ntype UncapitalizeKeys<T extends object> = Uncapitalize<keyof T & string>;\nexport type UncapitalizeObjectKeys<T extends object> = {\n    [key in UncapitalizeKeys<Pick<T, OptionalKeys<T>>>]?: Capitalize<key> extends keyof T ? T[Capitalize<key>] : never;\n} & {\n    [key in UncapitalizeKeys<Omit<T, OptionalKeys<T>>>]: Capitalize<key> extends keyof T ? T[Capitalize<key>] : never;\n};\nexport interface SlotsAndSlotProps<TSlots extends object, TSlotProps> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: TSlots;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: TSlotProps;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<TSlots>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: TSlotProps;\n}\ntype ObjectWithUnCapitalizedKeys<TInputType> = TInputType extends object ? UncapitalizeObjectKeys<TInputType> : undefined;\nexport declare const uncapitalizeObjectKeys: <TInputType extends object>(capitalizedObject: TInputType | undefined) => ObjectWithUnCapitalizedKeys<TInputType> | undefined;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/utils/getDefaultReferenceDate.d.ts":"import { getTodayDate } from './date-utils';\nimport { DateOrTimeView, FieldSection, MuiPickersAdapter, PickersTimezone } from '../../models';\nexport interface GetDefaultReferenceDateProps<TDate> {\n    maxDate?: TDate;\n    minDate?: TDate;\n    minTime?: TDate;\n    maxTime?: TDate;\n    disableIgnoringDatePartForTimeValidation?: boolean;\n}\nexport declare const SECTION_TYPE_GRANULARITY: {\n    year: number;\n    month: number;\n    day: number;\n    hours: number;\n    minutes: number;\n    seconds: number;\n    milliseconds: number;\n};\nexport declare const getSectionTypeGranularity: (sections: FieldSection[]) => number;\nexport declare const getViewsGranularity: (views: readonly DateOrTimeView[]) => number;\nexport declare const getDefaultReferenceDate: <TDate>({ props, utils, granularity, timezone, getTodayDate: inGetTodayDate, }: {\n    props: GetDefaultReferenceDateProps<TDate>;\n    utils: MuiPickersAdapter<TDate, any>;\n    granularity: number;\n    timezone: PickersTimezone;\n    getTodayDate?: (() => TDate) | undefined;\n}) => TDate;\n","node_modules/@mui/x-date-pickers/internals/utils/fields.d.ts":"import { FieldValueType } from '../../models';\nexport declare const splitFieldInternalAndForwardedProps: <TProps extends {}, TInternalPropNames extends keyof TProps>(props: TProps, valueType: FieldValueType) => {\n    forwardedProps: Omit<TProps, TInternalPropNames>;\n    internalProps: Pick<TProps, TInternalPropNames>;\n};\n","node_modules/@mui/x-date-pickers/internals/utils/date-utils.d.ts":"import { DateView, FieldValueType, MuiPickersAdapter, PickersTimezone } from '../../models';\nimport { DateOrTimeViewWithMeridiem } from '../models';\nexport declare const mergeDateAndTime: <TDate>(utils: MuiPickersAdapter<TDate, any>, dateParam: TDate, timeParam: TDate) => TDate;\ninterface FindClosestDateParams<TDate> {\n    date: TDate;\n    disableFuture?: boolean;\n    disablePast?: boolean;\n    maxDate: TDate;\n    minDate: TDate;\n    isDateDisabled: (date: TDate) => boolean;\n    utils: MuiPickersAdapter<TDate>;\n    timezone: PickersTimezone;\n}\nexport declare const findClosestEnabledDate: <TDate>({ date, disableFuture, disablePast, maxDate, minDate, isDateDisabled, utils, timezone, }: FindClosestDateParams<TDate>) => NonNullable<TDate> | null;\nexport declare const replaceInvalidDateByNull: <TDate>(utils: MuiPickersAdapter<TDate, any>, value: TDate | null) => NonNullable<TDate> | null;\nexport declare const applyDefaultDate: <TDate>(utils: MuiPickersAdapter<TDate, any>, value: TDate | null | undefined, defaultValue: TDate) => TDate;\nexport declare const areDatesEqual: <TDate>(utils: MuiPickersAdapter<TDate, any>, a: TDate, b: TDate) => boolean;\nexport declare const getMonthsInYear: <TDate>(utils: MuiPickersAdapter<TDate, any>, year: TDate) => TDate[];\nexport declare const getTodayDate: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, valueType?: FieldValueType) => TDate;\nexport declare const formatMeridiem: <TDate>(utils: MuiPickersAdapter<TDate, any>, meridiem: 'am' | 'pm') => string;\nexport declare const isDatePickerView: (view: DateOrTimeViewWithMeridiem) => view is DateView;\nexport declare const resolveDateFormat: (utils: MuiPickersAdapter<any>, { format, views }: {\n    format?: string | undefined;\n    views: readonly DateView[];\n}, isInToolbar: boolean) => string;\nexport declare const getWeekdays: <TDate>(utils: MuiPickersAdapter<TDate, any>, date: TDate) => TDate[];\nexport {};\n","node_modules/@mui/x-date-pickers/internals/utils/date-time-utils.d.ts":"import { DateOrTimeView, MuiPickersAdapter } from '../../models';\nimport { DateOrTimeViewWithMeridiem } from '../models';\nimport { DesktopOnlyTimePickerProps } from '../models/props/clock';\nimport { DefaultizedProps } from '../models/helpers';\nexport declare const resolveDateTimeFormat: (utils: MuiPickersAdapter<any>, { views, format, ...other }: {\n    format?: string | undefined;\n    views: readonly DateOrTimeView[];\n    ampm: boolean;\n}) => string;\ninterface DefaultizedTimeViewsProps<TDate, TView = DateOrTimeView> extends DefaultizedProps<DesktopOnlyTimePickerProps<TDate>, 'ampm'> {\n    views: readonly TView[];\n}\ninterface DefaultizedTimeViewsResponse<TDate, TView = DateOrTimeViewWithMeridiem> extends Required<Pick<DefaultizedTimeViewsProps<TDate, TView>, 'thresholdToRenderTimeInASingleColumn' | 'timeSteps' | 'views'>> {\n    shouldRenderTimeInASingleColumn: boolean;\n}\nexport declare function resolveTimeViewsResponse<TDate, InTView extends DateOrTimeView = DateOrTimeView, OutTView extends DateOrTimeViewWithMeridiem = DateOrTimeViewWithMeridiem>({ thresholdToRenderTimeInASingleColumn: inThreshold, ampm, timeSteps: inTimeSteps, views, }: DefaultizedTimeViewsProps<TDate, InTView>): DefaultizedTimeViewsResponse<TDate, OutTView>;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/models/validation.d.ts":"import { TimeView } from '../../models';\ninterface FutureAndPastValidationProps {\n    /**\n     * If `true`, disable values before the current date for date components, time for time components and both for date time components.\n     * @default false\n     */\n    disablePast?: boolean;\n    /**\n     * If `true`, disable values after the current date for date components, time for time components and both for date time components.\n     * @default false\n     */\n    disableFuture?: boolean;\n}\n/**\n * Validation props common to all the time views.\n * All these props have a default value when used inside a field / picker / clock.\n */\nexport interface BaseTimeValidationProps extends FutureAndPastValidationProps {\n}\n/**\n * Props used to validate a time value.\n */\nexport interface TimeValidationProps<TDate> {\n    /**\n     * Minimal selectable time.\n     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n     */\n    minTime?: TDate;\n    /**\n     * Maximal selectable time.\n     * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.\n     */\n    maxTime?: TDate;\n    /**\n     * Step over minutes.\n     * @default 1\n     */\n    minutesStep?: number;\n    /**\n     * Disable specific time.\n     * @template TDate\n     * @param {TDate} value The value to check.\n     * @param {TimeView} view The clock type of the timeValue.\n     * @returns {boolean} If `true` the time will be disabled.\n     */\n    shouldDisableTime?: (value: TDate, view: TimeView) => boolean;\n    /**\n     * Disable specific clock time.\n     * @param {number} clockValue The value to check.\n     * @param {TimeView} view The clock type of the timeValue.\n     * @returns {boolean} If `true` the time will be disabled.\n     * @deprecated Consider using `shouldDisableTime`.\n     */\n    shouldDisableClock?: (clockValue: number, view: TimeView) => boolean;\n    /**\n     * Do not ignore date part when validating min/max time.\n     * @default false\n     */\n    disableIgnoringDatePartForTimeValidation?: boolean;\n}\n/**\n * Validation props common to all the date views.\n * All these props have a default value when used inside a field / picker / calendar.\n */\nexport interface BaseDateValidationProps<TDate> extends FutureAndPastValidationProps {\n    /**\n     * Maximal selectable date.\n     */\n    maxDate?: TDate;\n    /**\n     * Minimal selectable date.\n     */\n    minDate?: TDate;\n}\n/**\n * Props used to validate a date value (validates day + month + year).\n */\nexport interface DayValidationProps<TDate> {\n    /**\n     * Disable specific date.\n     *\n     * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n     *\n     * @template TDate\n     * @param {TDate} day The date to test.\n     * @returns {boolean} If `true` the date will be disabled.\n     */\n    shouldDisableDate?: (day: TDate) => boolean;\n}\n/**\n * Props used to validate a month value\n */\nexport interface MonthValidationProps<TDate> {\n    /**\n     * Disable specific month.\n     * @template TDate\n     * @param {TDate} month The month to test.\n     * @returns {boolean} If `true`, the month will be disabled.\n     */\n    shouldDisableMonth?: (month: TDate) => boolean;\n}\n/**\n * Props used to validate a year value\n */\nexport interface YearValidationProps<TDate> {\n    /**\n     * Disable specific year.\n     * @template TDate\n     * @param {TDate} year The year to test.\n     * @returns {boolean} If `true`, the year will be disabled.\n     */\n    shouldDisableYear?: (year: TDate) => boolean;\n}\n/**\n * Props used to validate a date time value.\n */\nexport interface DateTimeValidationProps<TDate> {\n    /**\n     * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.\n     */\n    minDateTime?: TDate;\n    /**\n     * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.\n     */\n    maxDateTime?: TDate;\n}\nexport {};\n","node_modules/@mui/x-date-pickers/internals/models/index.d.ts":"export * from './fields';\nexport * from './common';\n","node_modules/@mui/x-date-pickers/internals/models/helpers.d.ts":"/**\n * All standard components exposed by `material-ui` are `StyledComponents` with\n * certain `classes`, on which one can also set a top-level `className` and inline\n * `style`.\n */\nexport type ExtendMui<C, Removals extends keyof C = never> = Omit<C, 'classes' | 'theme' | Removals>;\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\nexport type MakeRequired<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\nexport type DefaultizedProps<P extends {}, RequiredProps extends keyof P, AdditionalProps extends {} = {}> = Omit<P, RequiredProps | keyof AdditionalProps> & Required<Pick<P, RequiredProps>> & AdditionalProps;\n","node_modules/@mui/x-date-pickers/internals/models/fields.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport type { UseFieldInternalProps } from '../hooks/useField';\nimport type { FieldSection } from '../../models';\nexport interface BaseFieldProps<TValue, TDate, TSection extends FieldSection, TError> extends Omit<UseFieldInternalProps<TValue, TDate, TSection, TError>, 'format'> {\n    className?: string;\n    format?: string;\n    disabled?: boolean;\n    ref?: React.Ref<HTMLDivElement>;\n}\nexport interface FieldsTextFieldProps extends Omit<TextFieldProps, 'autoComplete' | 'error' | 'maxRows' | 'minRows' | 'multiline' | 'placeholder' | 'rows' | 'select' | 'SelectProps' | 'type'> {\n}\n","node_modules/@mui/x-date-pickers/internals/models/common.d.ts":"import { DateView, TimeView } from '@mui/x-date-pickers/models/views';\nexport type WrapperVariant = 'mobile' | 'desktop' | null;\nexport type TimeViewWithMeridiem = TimeView | 'meridiem';\nexport type DateOrTimeViewWithMeridiem = DateView | TimeViewWithMeridiem;\n","node_modules/@mui/x-date-pickers/internals/hooks/useViews.d.ts":"import type { PickerSelectionState } from './usePicker';\nimport { MakeOptional } from '../models/helpers';\nimport { DateOrTimeViewWithMeridiem } from '../models';\nexport type PickerOnChangeFn<TDate> = (date: TDate | null, selectionState?: PickerSelectionState) => void;\nexport interface UseViewsOptions<TValue, TView extends DateOrTimeViewWithMeridiem> {\n    /**\n     * Callback fired when the value changes.\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @template TView The view type. Will be one of date or time views.\n     * @param {TValue} value The new value.\n     * @param {PickerSelectionState | undefined} selectionState Indicates if the date selection is complete.\n     * @param {TView | undefined} selectedView Indicates the view in which the selection has been made.\n     */\n    onChange: (value: TValue, selectionState?: PickerSelectionState, selectedView?: TView) => void;\n    /**\n     * Callback fired on view change.\n     * @template TView\n     * @param {TView} view The new view.\n     */\n    onViewChange?: (view: TView) => void;\n    /**\n     * The default visible view.\n     * Used when the component view is not controlled.\n     * Must be a valid option from `views` list.\n     */\n    openTo?: TView;\n    /**\n     * The visible view.\n     * Used when the component view is controlled.\n     * Must be a valid option from `views` list.\n     */\n    view?: TView;\n    /**\n     * Available views.\n     */\n    views: readonly TView[];\n    /**\n     * If `true`, the main element is focused during the first mount.\n     * This main element is:\n     * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).\n     * - the `input` element if there is a field rendered.\n     */\n    autoFocus?: boolean;\n    /**\n     * Controlled focused view.\n     */\n    focusedView?: TView | null;\n    /**\n     * Callback fired on focused view change.\n     * @template TView\n     * @param {TView} view The new view to focus or not.\n     * @param {boolean} hasFocus `true` if the view should be focused.\n     */\n    onFocusedViewChange?: (view: TView, hasFocus: boolean) => void;\n}\nexport interface ExportedUseViewsOptions<TView extends DateOrTimeViewWithMeridiem> extends MakeOptional<UseViewsOptions<any, TView>, 'onChange' | 'openTo' | 'views'> {\n}\ninterface UseViewsResponse<TValue, TView extends DateOrTimeViewWithMeridiem> {\n    view: TView;\n    setView: (view: TView) => void;\n    focusedView: TView | null;\n    setFocusedView: (view: TView, hasFocus: boolean) => void;\n    nextView: TView | null;\n    previousView: TView | null;\n    defaultView: TView;\n    goToNextView: () => void;\n    setValueAndGoToNextView: (value: TValue, currentViewSelectionState?: PickerSelectionState, selectedView?: TView) => void;\n}\nexport declare function useViews<TValue, TView extends DateOrTimeViewWithMeridiem>({ onChange, onViewChange, openTo, view: inView, views, autoFocus, focusedView: inFocusedView, onFocusedViewChange, }: UseViewsOptions<TValue, TView>): UseViewsResponse<TValue, TView>;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/hooks/useValueWithTimezone.d.ts":"import type { PickerValueManager } from './usePicker';\nimport { PickersTimezone } from '../../models';\n/**\n * Hooks making sure that:\n * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined\n * - The value rendered is always the one from `props.timezone` if defined\n */\nexport declare const useValueWithTimezone: <TDate, TValue, TChange extends (...params: any[]) => void>({ timezone: timezoneProp, value: valueProp, defaultValue, onChange, valueManager, }: {\n    timezone: PickersTimezone | undefined;\n    value: TValue | undefined;\n    defaultValue: TValue | undefined;\n    onChange: TChange | undefined;\n    valueManager: PickerValueManager<TValue, TDate, any>;\n}) => {\n    value: TValue;\n    handleValueChange: TChange;\n    timezone: string;\n};\n/**\n * Wrapper around `useControlled` and `useValueWithTimezone`\n */\nexport declare const useControlledValueWithTimezone: <TDate, TValue, TChange extends (...params: any[]) => void>({ name, timezone: timezoneProp, value: valueProp, defaultValue, onChange: onChangeProp, valueManager, }: {\n    name: string;\n    timezone: PickersTimezone | undefined;\n    value: TValue | undefined;\n    defaultValue: TValue | undefined;\n    onChange: TChange | undefined;\n    valueManager: PickerValueManager<TValue, TDate, any>;\n}) => {\n    value: TValue;\n    handleValueChange: TChange;\n    timezone: string;\n};\n","node_modules/@mui/x-date-pickers/internals/hooks/useValidation.d.ts":"import { MuiPickersAdapterContextValue } from '../../LocalizationProvider/LocalizationProvider';\ninterface ValidationCommonProps<TError, TValue> {\n    /**\n     * Callback that fired when input value or new `value` prop validation returns **new** validation error (or value is valid after error).\n     * In case of validation error detected `reason` prop return non-null value and `TextField` must be displayed in `error` state.\n     * This can be used to render appropriate form error.\n     * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @param {TError} reason The reason why the current value is not valid.\n     * @param {TValue} value The invalid value.\n     */\n    onError?: (reason: TError, value: TValue) => void;\n    value: TValue;\n}\nexport type ValidationProps<TError, TValue, TValidationProps extends {}> = ValidationCommonProps<TError, TValue> & TValidationProps;\nexport type InferError<TProps> = TProps extends Pick<ValidationCommonProps<any, any>, 'onError'> ? Parameters<Exclude<TProps['onError'], undefined>>[0] : never;\nexport type Validator<TValue, TDate, TError, TValidationProps> = (params: {\n    adapter: MuiPickersAdapterContextValue<TDate>;\n    value: TValue;\n    props: Omit<TValidationProps, 'value' | 'onError'>;\n}) => TError;\nexport declare function useValidation<TValue, TDate, TError, TValidationProps extends {}>(props: ValidationProps<TError, TValue, TValidationProps>, validate: Validator<TValue, TDate, TError, TValidationProps>, isSameError: (a: TError, b: TError | null) => boolean, defaultErrorState: TError): TError;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/hooks/useUtils.d.ts":"import { MuiPickersAdapterContextValue } from '../../LocalizationProvider/LocalizationProvider';\nimport { PickersLocaleText } from '../../locales/utils/pickersLocaleTextApi';\nimport { PickersTimezone } from '../../models';\nexport declare const useLocalizationContext: <TDate>() => Omit<MuiPickersAdapterContextValue<TDate>, \"localeText\"> & {\n    localeText: PickersLocaleText<TDate>;\n};\nexport declare const useUtils: <TDate>() => import(\"../../models\").MuiPickersAdapter<TDate, any>;\nexport declare const useDefaultDates: <TDate>() => {\n    minDate: TDate;\n    maxDate: TDate;\n};\nexport declare const useLocaleText: <TDate>() => PickersLocaleText<TDate>;\nexport declare const useNow: <TDate>(timezone: PickersTimezone) => TDate;\n","node_modules/@mui/x-date-pickers/internals/hooks/useOpenState.d.ts":"export interface OpenStateProps {\n    open?: boolean;\n    onOpen?: () => void;\n    onClose?: () => void;\n}\nexport declare const useOpenState: ({ open, onOpen, onClose }: OpenStateProps) => {\n    isOpen: boolean;\n    setIsOpen: (newIsOpen: boolean) => void;\n};\n","node_modules/@mui/x-date-pickers/internals/hooks/useIsLandscape.d.ts":"import { DateOrTimeViewWithMeridiem } from '../models';\ntype Orientation = 'portrait' | 'landscape';\nexport declare const useIsLandscape: (views: readonly DateOrTimeViewWithMeridiem[], customOrientation: Orientation | undefined) => boolean;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/hooks/useDefaultReduceAnimations.d.ts":"export declare const slowAnimationDevices: boolean;\nexport declare const useDefaultReduceAnimations: () => boolean;\n","node_modules/@mui/x-date-pickers/internals/hooks/useClockReferenceDate.d.ts":"import { MuiPickersAdapter, PickersTimezone } from '../../models';\nexport declare const useClockReferenceDate: <TDate, TProps extends {}>({ value, referenceDate: referenceDateProp, utils, props, timezone, }: {\n    value: TDate;\n    referenceDate: TDate | undefined;\n    utils: MuiPickersAdapter<TDate, any>;\n    props: TProps;\n    timezone: PickersTimezone;\n}) => any;\n","node_modules/@mui/x-date-pickers/internals/hooks/date-helpers-hooks.d.ts":"import { PickerOnChangeFn } from './useViews';\nimport { PickerSelectionState } from './usePicker';\nimport { PickersTimezone } from '../../models';\nexport interface MonthValidationOptions<TDate> {\n    disablePast?: boolean;\n    disableFuture?: boolean;\n    minDate: TDate;\n    maxDate: TDate;\n    timezone: PickersTimezone;\n}\nexport declare function useNextMonthDisabled<TDate>(month: TDate, { disableFuture, maxDate, timezone, }: Pick<MonthValidationOptions<TDate>, 'disableFuture' | 'maxDate' | 'timezone'>): boolean;\nexport declare function usePreviousMonthDisabled<TDate>(month: TDate, { disablePast, minDate, timezone, }: Pick<MonthValidationOptions<TDate>, 'disablePast' | 'minDate' | 'timezone'>): boolean;\nexport declare function useMeridiemMode<TDate>(date: TDate | null, ampm: boolean | undefined, onChange: PickerOnChangeFn<TDate>, selectionState?: PickerSelectionState): {\n    meridiemMode: import(\"../utils/time-utils\").Meridiem | null;\n    handleMeridiemChange: (mode: 'am' | 'pm') => void;\n};\n","node_modules/@mui/x-date-pickers/internals/constants/dimensions.d.ts":"export declare const DAY_SIZE = 36;\nexport declare const DAY_MARGIN = 2;\nexport declare const DIALOG_WIDTH = 320;\nexport declare const MAX_CALENDAR_HEIGHT = 280;\nexport declare const VIEW_HEIGHT = 334;\nexport declare const DIGITAL_CLOCK_VIEW_HEIGHT = 232;\nexport declare const MULTI_SECTION_CLOCK_SECTION_WIDTH = 48;\n","node_modules/@mui/x-date-pickers/internals/demo/index.d.ts":"export { DemoContainer, DemoItem } from './DemoContainer';\n","node_modules/@mui/x-date-pickers/internals/demo/DemoContainer.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/material/styles';\ninterface DemoGridProps {\n    children: React.ReactNode;\n    components: string[];\n    sx?: SxProps<Theme>;\n}\ninterface DemoItemProps {\n    label?: React.ReactNode;\n    component?: string;\n    children: React.ReactNode;\n}\n/**\n * WARNING: This is an internal component used in documentation to achieve a desired layout.\n * Please do not use it in your application.\n */\nexport declare function DemoItem(props: DemoItemProps): React.JSX.Element;\n/**\n * WARNING: This is an internal component used in documentation to achieve a desired layout.\n * Please do not use it in your application.\n */\nexport declare function DemoContainer(props: DemoGridProps): React.JSX.Element;\nexport {};\n","node_modules/@mui/x-date-pickers/locales/utils/pickersLocaleTextApi.d.ts":"import { TimeViewWithMeridiem } from '../../internals/models';\nimport { DateView, TimeView, MuiPickersAdapter, FieldSectionContentType } from '../../models';\nexport interface PickersComponentSpecificLocaleText {\n    /**\n     * Title displayed in the toolbar of the `DatePicker` and its variants.\n     * Will be overridden by the `toolbarTitle` translation key passed directly on the picker.\n     */\n    datePickerToolbarTitle: string;\n    /**\n     * Title displayed in the toolbar of the `TimePicker` and its variants.\n     * Will be overridden by the `toolbarTitle` translation key passed directly on the picker.\n     */\n    timePickerToolbarTitle: string;\n    /**\n     * Title displayed in the toolbar of the `DateTimePicker` and its variants.\n     * Will be overridden by the `toolbarTitle` translation key passed directly on the picker.\n     */\n    dateTimePickerToolbarTitle: string;\n    /**\n     * Title displayed in the toolbar of the `DateRangePicker` and its variants.\n     * Will be overridden by the `toolbarTitle` translation key passed directly on the picker.\n     */\n    dateRangePickerToolbarTitle: string;\n}\nexport interface PickersComponentAgnosticLocaleText<TDate> {\n    previousMonth: string;\n    nextMonth: string;\n    calendarWeekNumberHeaderLabel: string;\n    calendarWeekNumberHeaderText: string;\n    calendarWeekNumberAriaLabelText: (weekNumber: number) => string;\n    calendarWeekNumberText: (weekNumber: number) => string;\n    openPreviousView: string;\n    openNextView: string;\n    calendarViewSwitchingButtonAriaLabel: (currentView: DateView) => string;\n    start: string;\n    end: string;\n    cancelButtonLabel: string;\n    clearButtonLabel: string;\n    okButtonLabel: string;\n    todayButtonLabel: string;\n    clockLabelText: (view: TimeView, time: TDate | null, adapter: MuiPickersAdapter<TDate>) => string;\n    hoursClockNumberText: (hours: string) => string;\n    minutesClockNumberText: (minutes: string) => string;\n    secondsClockNumberText: (seconds: string) => string;\n    selectViewText: (view: TimeViewWithMeridiem) => string;\n    openDatePickerDialogue: (date: TDate | null, utils: MuiPickersAdapter<TDate>) => string;\n    openTimePickerDialogue: (date: TDate | null, utils: MuiPickersAdapter<TDate>) => string;\n    fieldClearLabel: string;\n    timeTableLabel: string;\n    dateTableLabel: string;\n    fieldYearPlaceholder: (params: {\n        digitAmount: number;\n        format: string;\n    }) => string;\n    fieldMonthPlaceholder: (params: {\n        contentType: FieldSectionContentType;\n        format: string;\n    }) => string;\n    fieldDayPlaceholder: (params: {\n        format: string;\n    }) => string;\n    fieldWeekDayPlaceholder: (params: {\n        contentType: FieldSectionContentType;\n        format: string;\n    }) => string;\n    fieldHoursPlaceholder: (params: {\n        format: string;\n    }) => string;\n    fieldMinutesPlaceholder: (params: {\n        format: string;\n    }) => string;\n    fieldSecondsPlaceholder: (params: {\n        format: string;\n    }) => string;\n    fieldMeridiemPlaceholder: (params: {\n        format: string;\n    }) => string;\n}\nexport interface PickersLocaleText<TDate> extends PickersComponentAgnosticLocaleText<TDate>, PickersComponentSpecificLocaleText {\n}\nexport type PickersInputLocaleText<TDate> = Partial<PickersLocaleText<TDate>>;\n/**\n * Translations that can be provided directly to the picker components.\n * It contains some generic translations like `toolbarTitle`\n * which will be dispatched to various translations keys in `PickersLocaleText`, depending on the pickers received them.\n */\nexport interface PickersInputComponentLocaleText<TDate> extends Partial<PickersComponentAgnosticLocaleText<TDate>> {\n    /**\n     * Title displayed in the toolbar of this picker.\n     * Will override the global translation keys like `datePickerToolbarTitle` passed to the `LocalizationProvider`.\n     */\n    toolbarTitle?: string;\n}\nexport type PickersTranslationKeys = keyof PickersLocaleText<any>;\nexport type LocalizedComponent<TDate, Props extends {\n    localeText?: PickersInputComponentLocaleText<TDate>;\n}> = Omit<Props, 'localeText'> & {\n    localeText?: PickersInputLocaleText<TDate>;\n};\n","node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.d.ts":"import { PickersLocaleText } from './pickersLocaleTextApi';\nexport declare const getPickersLocalization: (pickersTranslations: Partial<PickersLocaleText<any>>) => {\n    components: {\n        MuiLocalizationProvider: {\n            defaultProps: {\n                localeText: {\n                    previousMonth?: string | undefined;\n                    nextMonth?: string | undefined;\n                    calendarWeekNumberHeaderLabel?: string | undefined;\n                    calendarWeekNumberHeaderText?: string | undefined;\n                    calendarWeekNumberAriaLabelText?: ((weekNumber: number) => string) | undefined;\n                    calendarWeekNumberText?: ((weekNumber: number) => string) | undefined;\n                    openPreviousView?: string | undefined;\n                    openNextView?: string | undefined;\n                    calendarViewSwitchingButtonAriaLabel?: ((currentView: import(\"../..\").DateView) => string) | undefined;\n                    start?: string | undefined;\n                    end?: string | undefined;\n                    cancelButtonLabel?: string | undefined;\n                    clearButtonLabel?: string | undefined;\n                    okButtonLabel?: string | undefined;\n                    todayButtonLabel?: string | undefined;\n                    clockLabelText?: ((view: import(\"../..\").TimeView, time: any, adapter: import(\"../..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    hoursClockNumberText?: ((hours: string) => string) | undefined;\n                    minutesClockNumberText?: ((minutes: string) => string) | undefined;\n                    secondsClockNumberText?: ((seconds: string) => string) | undefined;\n                    selectViewText?: ((view: import(\"../../internals/models\").TimeViewWithMeridiem) => string) | undefined;\n                    openDatePickerDialogue?: ((date: any, utils: import(\"../..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    openTimePickerDialogue?: ((date: any, utils: import(\"../..\").MuiPickersAdapter<any, any>) => string) | undefined;\n                    fieldClearLabel?: string | undefined;\n                    timeTableLabel?: string | undefined;\n                    dateTableLabel?: string | undefined;\n                    fieldYearPlaceholder?: ((params: {\n                        digitAmount: number;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMonthPlaceholder?: ((params: {\n                        contentType: import(\"../..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldDayPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldWeekDayPlaceholder?: ((params: {\n                        contentType: import(\"../..\").FieldSectionContentType;\n                        format: string;\n                    }) => string) | undefined;\n                    fieldHoursPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMinutesPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldSecondsPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    fieldMeridiemPlaceholder?: ((params: {\n                        format: string;\n                    }) => string) | undefined;\n                    datePickerToolbarTitle?: string | undefined;\n                    timePickerToolbarTitle?: string | undefined;\n                    dateTimePickerToolbarTitle?: string | undefined;\n                    dateRangePickerToolbarTitle?: string | undefined;\n                };\n            };\n        };\n    };\n};\n","node_modules/@mui/x-date-pickers/internals/components/pickersToolbarTextClasses.d.ts":"export interface PickersToolbarTextClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to a selected root element. */\n    selected: string;\n}\nexport type PickersToolbarTextClassKey = keyof PickersToolbarTextClasses;\nexport declare function getPickersToolbarTextUtilityClass(slot: string): string;\nexport declare const pickersToolbarTextClasses: Record<\"selected\" | \"root\", string>;\n","node_modules/@mui/x-date-pickers/internals/components/pickersToolbarClasses.d.ts":"export interface PickersToolbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the content element. */\n    content: string;\n}\nexport type PickersToolbarClassKey = keyof PickersToolbarClasses;\nexport declare function getPickersToolbarUtilityClass(slot: string): string;\nexport declare const pickersToolbarClasses: Record<\"content\" | \"root\", string>;\n","node_modules/@mui/x-date-pickers/internals/components/pickersToolbarButtonClasses.d.ts":"export interface PickersToolbarButtonClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type PickersToolbarButtonClassKey = keyof PickersToolbarButtonClasses;\nexport declare function getPickersToolbarButtonUtilityClass(slot: string): string;\nexport declare const pickersToolbarButtonClasses: Record<\"root\", string>;\n","node_modules/@mui/x-date-pickers/internals/components/pickersPopperClasses.d.ts":"export interface PickersPopperClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the paper element. */\n    paper: string;\n}\nexport type PickersPopperClassKey = keyof PickersPopperClasses;\nexport declare function getPickersPopperUtilityClass(slot: string): string;\nexport declare const pickersPopperClasses: Record<\"root\" | \"paper\", string>;\n","node_modules/@mui/x-date-pickers/internals/components/PickersToolbarText.d.ts":"import * as React from 'react';\nimport { TypographyProps } from '@mui/material/Typography';\nimport { PickersToolbarTextClasses } from './pickersToolbarTextClasses';\nexport interface ExportedPickersToolbarTextProps extends Omit<TypographyProps, 'classes' | 'variant' | 'align'> {\n    classes?: Partial<PickersToolbarTextClasses>;\n}\nexport interface PickersToolbarTextProps extends Omit<TypographyProps, 'classes'>, Pick<ExportedPickersToolbarTextProps, 'classes'> {\n    selected?: boolean;\n    value: React.ReactNode;\n}\nexport declare const PickersToolbarText: React.ForwardRefExoticComponent<Omit<PickersToolbarTextProps, \"ref\"> & React.RefAttributes<HTMLSpanElement>>;\n","node_modules/@mui/x-date-pickers/internals/components/PickersToolbarButton.d.ts":"import * as React from 'react';\nimport { ButtonProps } from '@mui/material/Button';\nimport { TypographyProps } from '@mui/material/Typography';\nimport { ExtendMui } from '../models/helpers';\nimport { PickersToolbarButtonClasses } from './pickersToolbarButtonClasses';\nexport interface PickersToolbarButtonProps extends ExtendMui<ButtonProps, 'value' | 'variant'> {\n    align?: TypographyProps['align'];\n    selected: boolean;\n    typographyClassName?: string;\n    value: React.ReactNode;\n    variant: TypographyProps['variant'];\n    classes?: Partial<PickersToolbarButtonClasses>;\n    width?: number;\n}\nexport declare const PickersToolbarButton: React.FunctionComponent<PickersToolbarButtonProps>;\n","node_modules/@mui/x-date-pickers/internals/components/PickersToolbar.d.ts":"import * as React from 'react';\nimport { BaseToolbarProps } from '../models/props/toolbar';\nimport { PickersToolbarClasses } from './pickersToolbarClasses';\nimport { DateOrTimeViewWithMeridiem } from '../models';\nexport interface PickersToolbarProps<TValue, TView extends DateOrTimeViewWithMeridiem> extends Pick<BaseToolbarProps<TValue, TView>, 'isLandscape' | 'hidden' | 'titleId'> {\n    className?: string;\n    landscapeDirection?: 'row' | 'column';\n    toolbarTitle: React.ReactNode;\n    classes?: Partial<PickersToolbarClasses>;\n}\ntype PickersToolbarComponent = (<TValue, TView extends DateOrTimeViewWithMeridiem>(props: React.PropsWithChildren<PickersToolbarProps<TValue, TView>> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\nexport declare const PickersToolbar: PickersToolbarComponent;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/components/PickersPopper.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport MuiPaper, { PaperProps as MuiPaperProps } from '@mui/material/Paper';\nimport MuiPopper, { PopperProps as MuiPopperProps, PopperPlacementType } from '@mui/material/Popper';\nimport { TrapFocusProps as MuiTrapFocusProps } from '@mui/material/Unstable_TrapFocus';\nimport { TransitionProps as MuiTransitionProps } from '@mui/material/transitions';\nimport { PickersPopperClasses } from './pickersPopperClasses';\nimport { UncapitalizeObjectKeys } from '../utils/slots-migration';\nimport { UsePickerValueActions } from '../hooks/usePicker/usePickerValue.types';\ninterface PickersPopperOwnerState extends PickerPopperProps {\n    placement: PopperPlacementType;\n}\nexport interface PickersPopperSlotsComponent {\n    /**\n     * Custom component for the paper rendered inside the desktop picker's Popper.\n     * @default PickersPopperPaper\n     */\n    DesktopPaper?: React.JSXElementConstructor<MuiPaperProps>;\n    /**\n     * Custom component for the desktop popper [Transition](https://mui.com/material-ui/transitions/).\n     * @default Grow or Fade from '@mui/material' when `reduceAnimations` is `true`.\n     */\n    DesktopTransition?: React.JSXElementConstructor<MuiTransitionProps>;\n    /**\n     * Custom component for trapping the focus inside the views on desktop.\n     * @default FocusTrap from '@mui/base'.\n     */\n    DesktopTrapFocus?: React.JSXElementConstructor<MuiTrapFocusProps>;\n    /**\n     * Custom component for the popper inside which the views are rendered on desktop.\n     * @default Popper from '@mui/material'.\n     */\n    Popper?: React.ElementType<MuiPopperProps>;\n}\nexport interface PickersPopperSlotsComponentsProps {\n    /**\n     * Props passed down to the desktop [Paper](https://mui.com/material-ui/api/paper/) component.\n     */\n    desktopPaper?: SlotComponentProps<typeof MuiPaper, {}, PickersPopperOwnerState>;\n    /**\n     * Props passed down to the desktop [Transition](https://mui.com/material-ui/transitions/) component.\n     */\n    desktopTransition?: Partial<MuiTransitionProps>;\n    /**\n     * Props passed down to the [FocusTrap](https://mui.com/base-ui/react-focus-trap/) component on desktop.\n     */\n    desktopTrapFocus?: Partial<MuiTrapFocusProps>;\n    /**\n     * Props passed down to [Popper](https://mui.com/material-ui/api/popper/) component.\n     */\n    popper?: SlotComponentProps<typeof MuiPopper, {}, PickerPopperProps>;\n}\nexport interface PickerPopperProps extends UsePickerValueActions {\n    role: 'tooltip' | 'dialog';\n    anchorEl: MuiPopperProps['anchorEl'];\n    open: MuiPopperProps['open'];\n    placement?: MuiPopperProps['placement'];\n    containerRef?: React.Ref<HTMLDivElement>;\n    children?: React.ReactNode;\n    onBlur?: () => void;\n    slots?: UncapitalizeObjectKeys<PickersPopperSlotsComponent>;\n    slotProps?: PickersPopperSlotsComponentsProps;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersPopperClasses>;\n    shouldRestoreFocus?: () => boolean;\n    reduceAnimations?: boolean;\n}\nexport declare function PickersPopper(inProps: PickerPopperProps): React.JSX.Element;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/components/PickersModalDialog.d.ts":"import * as React from 'react';\nimport { DialogProps as MuiDialogProps } from '@mui/material/Dialog';\nimport { PaperProps as MuiPaperProps } from '@mui/material/Paper/Paper';\nimport { TransitionProps as MuiTransitionProps } from '@mui/material/transitions/transition';\nimport { UncapitalizeObjectKeys } from '../utils/slots-migration';\nimport { UsePickerValueActions } from '../hooks/usePicker/usePickerValue.types';\nexport interface PickersModalDialogSlotsComponent {\n    /**\n     * Custom component for the dialog inside which the views are rendered on mobile.\n     * @default PickersModalDialogRoot\n     */\n    Dialog?: React.ElementType<MuiDialogProps>;\n    /**\n     * Custom component for the paper rendered inside the mobile picker's Dialog.\n     * @default Paper from '@mui/material'.\n     */\n    MobilePaper?: React.JSXElementConstructor<MuiPaperProps>;\n    /**\n     * Custom component for the mobile dialog [Transition](https://mui.com/material-ui/transitions/).\n     * @default Fade from '@mui/material'.\n     */\n    MobileTransition?: React.JSXElementConstructor<MuiTransitionProps>;\n}\nexport interface PickersModalDialogSlotsComponentsProps {\n    /**\n     * Props passed down to the [`Dialog`](https://mui.com/material-ui/api/dialog/) component.\n     */\n    dialog?: Partial<MuiDialogProps>;\n    /**\n     * Props passed down to the mobile [Paper](https://mui.com/material-ui/api/paper/) component.\n     */\n    mobilePaper?: Partial<MuiPaperProps>;\n    /**\n     * Props passed down to the mobile [Transition](https://mui.com/material-ui/transitions/) component.\n     */\n    mobileTransition?: Partial<MuiTransitionProps>;\n}\nexport interface PickersModalDialogProps extends UsePickerValueActions {\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<PickersModalDialogSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: PickersModalDialogSlotsComponentsProps;\n    open: boolean;\n}\nexport declare function PickersModalDialog(props: React.PropsWithChildren<PickersModalDialogProps>): React.JSX.Element;\n","node_modules/@mui/x-date-pickers/internals/utils/validation/validateTime.d.ts":"import { Validator } from '../../hooks/useValidation';\nimport { BaseTimeValidationProps, TimeValidationProps } from '../../models/validation';\nimport { TimeValidationError, TimezoneProps } from '../../../models';\nimport { DefaultizedProps } from '../../models/helpers';\nexport interface TimeComponentValidationProps<TDate> extends Required<BaseTimeValidationProps>, TimeValidationProps<TDate>, DefaultizedProps<TimezoneProps, 'timezone'> {\n}\nexport declare const validateTime: Validator<any | null, any, TimeValidationError, TimeComponentValidationProps<any>>;\n","node_modules/@mui/x-date-pickers/internals/utils/validation/validateDateTime.d.ts":"import { Validator } from '../../hooks/useValidation';\nimport { DateComponentValidationProps } from './validateDate';\nimport { TimeComponentValidationProps } from './validateTime';\nimport { DateTimeValidationError } from '../../../models';\nexport interface DateTimeComponentValidationProps<TDate> extends DateComponentValidationProps<TDate>, TimeComponentValidationProps<TDate> {\n}\nexport declare const validateDateTime: Validator<any | null, any, DateTimeValidationError, DateTimeComponentValidationProps<any>>;\n","node_modules/@mui/x-date-pickers/internals/utils/validation/validateDate.d.ts":"import { Validator } from '../../hooks/useValidation';\nimport { BaseDateValidationProps, DayValidationProps, MonthValidationProps, YearValidationProps } from '../../models/validation';\nimport { DateValidationError, TimezoneProps } from '../../../models';\nimport { DefaultizedProps } from '../../models/helpers';\nexport interface DateComponentValidationProps<TDate> extends DayValidationProps<TDate>, MonthValidationProps<TDate>, YearValidationProps<TDate>, Required<BaseDateValidationProps<TDate>>, DefaultizedProps<TimezoneProps, 'timezone'> {\n}\nexport declare const validateDate: Validator<any | null, any, DateValidationError, DateComponentValidationProps<any>>;\n","node_modules/@mui/x-date-pickers/internals/utils/validation/extractValidationProps.d.ts":"import { BaseDateValidationProps, BaseTimeValidationProps, DateTimeValidationProps, DayValidationProps, MonthValidationProps, TimeValidationProps, YearValidationProps } from '../../models/validation';\nexport declare const DATE_VALIDATION_PROP_NAMES: (keyof BaseDateValidationProps<any> | keyof YearValidationProps<any> | keyof MonthValidationProps<any> | keyof DayValidationProps<any>)[];\nexport declare const TIME_VALIDATION_PROP_NAMES: (keyof BaseTimeValidationProps | keyof TimeValidationProps<any> | 'ampm')[];\nexport declare const DATE_TIME_VALIDATION_PROP_NAMES: (keyof DateTimeValidationProps<any>)[];\n/**\n * Extract the validation props for the props received by a component.\n * Limit the risk of forgetting some of them and reduce the bundle size.\n */\nexport declare const extractValidationProps: <Props extends {\n    [key: string]: any;\n}>(props: Props) => Pick<Props, \"ampm\" | \"disableFuture\" | \"disablePast\" | \"maxDate\" | \"minDate\" | \"minutesStep\" | \"shouldDisableDate\" | \"shouldDisableMonth\" | \"shouldDisableYear\" | \"minTime\" | \"maxTime\" | \"shouldDisableTime\" | \"shouldDisableClock\" | \"disableIgnoringDatePartForTimeValidation\" | \"minDateTime\" | \"maxDateTime\">;\n","node_modules/@mui/x-date-pickers/internals/models/props/toolbar.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { DateOrTimeViewWithMeridiem } from '../common';\nexport interface BaseToolbarProps<TValue, TView extends DateOrTimeViewWithMeridiem> extends ExportedBaseToolbarProps {\n    isLandscape: boolean;\n    onChange: (newValue: TValue) => void;\n    value: TValue;\n    /**\n     * Currently visible picker view.\n     */\n    view: TView;\n    /**\n     * Callback called when a toolbar is clicked\n     * @template TView\n     * @param {TView} view The view to open\n     */\n    onViewChange: (view: TView) => void;\n    views: readonly TView[];\n    disabled?: boolean;\n    readOnly?: boolean;\n    titleId?: string;\n}\nexport interface ExportedBaseToolbarProps {\n    /**\n     * Toolbar date format.\n     */\n    toolbarFormat?: string;\n    /**\n     * Toolbar value placeholder—it is displayed when the value is empty.\n     * @default \"––\"\n     */\n    toolbarPlaceholder?: React.ReactNode;\n    /**\n     * className applied to the root component.\n     */\n    className?: string;\n    /**\n     * If `true`, show the toolbar even in desktop mode.\n     * @default `true` for Desktop, `false` for Mobile.\n     */\n    hidden?: boolean;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n}\n","node_modules/@mui/x-date-pickers/internals/models/props/tabs.d.ts":"import { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { DateOrTimeViewWithMeridiem } from '../common';\nexport interface BaseTabsProps<TView extends DateOrTimeViewWithMeridiem> {\n    /**\n     * Currently visible picker view.\n     */\n    view: TView;\n    /**\n     * Callback called when a tab is clicked\n     * @template TView\n     * @param {TView} view The view to open\n     */\n    onViewChange: (view: TView) => void;\n    className?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n}\nexport interface ExportedBaseTabsProps {\n}\n","node_modules/@mui/x-date-pickers/internals/models/props/clock.d.ts":"import { SxProps, Theme } from '@mui/material/styles';\nimport { BaseTimeValidationProps, TimeValidationProps } from '../validation';\nimport { TimeStepOptions, TimezoneProps } from '../../../models';\nimport type { ExportedDigitalClockProps } from '../../../DigitalClock/DigitalClock.types';\nimport type { ExportedMultiSectionDigitalClockProps } from '../../../MultiSectionDigitalClock/MultiSectionDigitalClock.types';\nimport type { ExportedUseViewsOptions } from '../../hooks/useViews';\nimport { TimeViewWithMeridiem } from '../common';\nexport interface ExportedBaseClockProps<TDate> extends TimeValidationProps<TDate>, BaseTimeValidationProps, TimezoneProps {\n    /**\n     * 12h/24h view for hour selection clock.\n     * @default `utils.is12HourCycleInCurrentLocale()`\n     */\n    ampm?: boolean;\n}\nexport interface BaseClockProps<TDate, TView extends TimeViewWithMeridiem> extends ExportedUseViewsOptions<TView>, ExportedBaseClockProps<TDate> {\n    className?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: TDate | null;\n    /**\n     * The default selected value.\n     * Used when the component is not controlled.\n     */\n    defaultValue?: TDate | null;\n    /**\n     * If `true`, the picker views and text field are disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the picker views and text field are read-only.\n     * @default false\n     */\n    readOnly?: boolean;\n    /**\n     * The date used to generate the new value when both `value` and `defaultValue` are empty.\n     * @default The closest valid time using the validation props, except callbacks such as `shouldDisableTime`.\n     */\n    referenceDate?: TDate;\n}\nexport interface DesktopOnlyTimePickerProps<TDate> extends Omit<ExportedDigitalClockProps<TDate>, 'timeStep'>, Omit<ExportedMultiSectionDigitalClockProps<TDate>, 'timeSteps'> {\n    /**\n     * Amount of time options below or at which the single column time renderer is used.\n     * @default 24\n     */\n    thresholdToRenderTimeInASingleColumn?: number;\n    /**\n     * The time steps between two time unit options.\n     * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n     * When single column time renderer is used, only `timeStep.minutes` will be used.\n     * @default{ hours: 1, minutes: 5, seconds: 5 }\n     */\n    timeSteps?: TimeStepOptions;\n}\ninterface DigitalClockOnlyBaseProps {\n    /**\n     * If `true`, disabled digital clock items will not be rendered.\n     * @default false\n     */\n    skipDisabled?: boolean;\n}\nexport interface DigitalClockOnlyProps extends DigitalClockOnlyBaseProps {\n    /**\n     * The time steps between two time options.\n     * For example, if `timeStep = 45`, then the available time options will be `[00:00, 00:45, 01:30, 02:15, 03:00, etc.]`.\n     * @default 30\n     */\n    timeStep?: number;\n}\nexport interface MultiSectionDigitalClockOnlyProps extends DigitalClockOnlyBaseProps {\n    /**\n     * The time steps between two time unit options.\n     * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.\n     * @default{ hours: 1, minutes: 5, seconds: 5 }\n     */\n    timeSteps?: TimeStepOptions;\n}\nexport {};\n","node_modules/@mui/x-date-pickers/internals/models/props/basePickerProps.d.ts":"import * as React from 'react';\nimport { Theme } from '@mui/material/styles';\nimport { SxProps } from '@mui/system';\nimport { UsePickerBaseProps } from '../../hooks/usePicker';\nimport { PickersInputComponentLocaleText } from '../../../locales/utils/pickersLocaleTextApi';\nimport type { UsePickerViewsProps } from '../../hooks/usePicker/usePickerViews';\nimport { MakeOptional } from '../helpers';\nimport { DateOrTimeViewWithMeridiem } from '../common';\n/**\n * Props common to all pickers after applying the default props on each picker.\n */\nexport interface BasePickerProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, any, any>, TAdditionalProps extends {}> extends UsePickerBaseProps<TValue, TDate, TView, TError, TExternalProps, TAdditionalProps> {\n    /**\n     * Class name applied to the root element.\n     */\n    className?: string;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Locale for components texts.\n     * Allows overriding texts coming from `LocalizationProvider` and `theme`.\n     */\n    localeText?: PickersInputComponentLocaleText<TDate>;\n}\n/**\n * Props common to all pickers before applying the default props on each picker.\n */\nexport interface BasePickerInputProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TError> extends Omit<MakeOptional<BasePickerProps<TValue, TDate, TView, TError, any, any>, 'openTo' | 'views'>, 'viewRenderers'> {\n}\n/**\n * Props common to all non-static pickers.\n * These props are handled by the headless wrappers.\n */\nexport interface BaseNonStaticPickerProps {\n    /**\n     * Format of the date when rendered in the input(s).\n     * Defaults to localized format based on the used `views`.\n     */\n    format?: string;\n    /**\n     * Density of the format when rendered in the input.\n     * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n     * @default \"dense\"\n     */\n    formatDensity?: 'dense' | 'spacious';\n}\n/**\n * Props common to all non-range non-static pickers.\n * These props are handled by the headless wrappers.\n */\nexport interface BaseNonRangeNonStaticPickerProps {\n    /**\n     * The label content.\n     */\n    label?: React.ReactNode;\n    /**\n     * Pass a ref to the `input` element.\n     */\n    inputRef?: React.Ref<HTMLInputElement>;\n    /**\n     * Name attribute used by the `input` element in the Field.\n     */\n    name?: string;\n}\n","node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/useStaticPicker.types.d.ts":"import * as React from 'react';\nimport { ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps } from '../../../PickersLayout/PickersLayout.types';\nimport { BasePickerProps } from '../../models/props/basePickerProps';\nimport { UncapitalizeObjectKeys } from '../../utils/slots-migration';\nimport { UsePickerParams } from '../usePicker';\nimport { UsePickerViewsProps } from '../usePicker/usePickerViews';\nimport { FieldSection } from '../../../models';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\nexport interface UseStaticPickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedPickersLayoutSlotsComponent<TDate | null, TDate, TView> {\n}\nexport interface UseStaticPickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedPickersLayoutSlotsComponentsProps<TDate | null, TDate, TView> {\n}\nexport interface StaticOnlyPickerProps {\n    /**\n     * Force static wrapper inner components to be rendered in mobile or desktop mode.\n     * @default \"mobile\"\n     */\n    displayStaticWrapperAs: 'desktop' | 'mobile';\n    /**\n     * If `true`, the view is focused during the first mount.\n     */\n    autoFocus?: boolean;\n    /**\n     * Callback fired when component requests to be closed.\n     * Can be fired when selecting (by default on `desktop` mode) or clearing a value.\n     * @deprecated Please avoid using as it will be removed in next major version.\n     */\n    onClose?: () => void;\n}\nexport interface UseStaticPickerProps<TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<TDate | null, TDate, TView, any, any>> extends BasePickerProps<TDate | null, TDate, TView, TError, TExternalProps, {}>, StaticOnlyPickerProps {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: UseStaticPickerSlotsComponent<TDate, TView>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: UseStaticPickerSlotsComponentsProps<TDate, TView>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<UseStaticPickerSlotsComponent<TDate | null, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: UseStaticPickerSlotsComponentsProps<TDate, TView>;\n}\nexport interface UseStaticPickerParams<TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseStaticPickerProps<TDate, TView, any, TExternalProps>> extends Pick<UsePickerParams<TDate | null, TDate, TView, FieldSection, TExternalProps, {}>, 'valueManager' | 'valueType' | 'validator'> {\n    props: TExternalProps;\n    /**\n     * Ref to pass to the root element\n     */\n    ref?: React.Ref<HTMLDivElement>;\n}\n","node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/useStaticPicker.d.ts":"import * as React from 'react';\nimport { UseStaticPickerParams, UseStaticPickerProps } from './useStaticPicker.types';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\n/**\n * Hook managing all the single-date static pickers:\n * - StaticDatePicker\n * - StaticDateTimePicker\n * - StaticTimePicker\n */\nexport declare const useStaticPicker: <TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseStaticPickerProps<TDate, TView, any, TExternalProps>>({ props, ref, ...pickerParams }: UseStaticPickerParams<TDate, TView, TExternalProps>) => {\n    renderPicker: () => React.JSX.Element;\n};\n","node_modules/@mui/x-date-pickers/internals/hooks/useStaticPicker/index.d.ts":"export { useStaticPicker } from './useStaticPicker';\nexport type { UseStaticPickerSlotsComponent, UseStaticPickerSlotsComponentsProps, StaticOnlyPickerProps, } from './useStaticPicker.types';\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerViews.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { UseViewsOptions } from '../useViews';\nimport type { UsePickerValueViewsResponse } from './usePickerValue.types';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\nimport { TimezoneProps } from '../../../models';\ninterface PickerViewsRendererBaseExternalProps<TView extends DateOrTimeViewWithMeridiem> extends Omit<UsePickerViewsProps<any, any, TView, any, any>, 'openTo' | 'viewRenderers'> {\n}\nexport type PickerViewsRendererProps<TValue, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends PickerViewsRendererBaseExternalProps<TView>, TAdditionalProps extends {}> = TExternalProps & TAdditionalProps & UsePickerValueViewsResponse<TValue> & {\n    view: TView;\n    views: readonly TView[];\n    focusedView: TView | null;\n    onFocusedViewChange: (viewToFocus: TView, hasFocus: boolean) => void;\n};\ntype PickerViewRenderer<TValue, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends PickerViewsRendererBaseExternalProps<TView>, TAdditionalProps extends {}> = (props: PickerViewsRendererProps<TValue, TView, TExternalProps, TAdditionalProps>) => React.ReactNode;\nexport type PickerViewRendererLookup<TValue, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends PickerViewsRendererBaseExternalProps<any>, TAdditionalProps extends {}> = {\n    [K in TView]: PickerViewRenderer<TValue, K, TExternalProps, TAdditionalProps> | null;\n};\n/**\n * Props used to handle the views that are common to all pickers.\n */\nexport interface UsePickerViewsBaseProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, any, any>, TAdditionalProps extends {}> extends Omit<UseViewsOptions<any, TView>, 'onChange' | 'onFocusedViewChange' | 'focusedView'>, TimezoneProps {\n    /**\n     * If `true`, the picker and text field are disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `null`, the section will only have field editing.\n     * If `undefined`, internally defined view will be the used.\n     */\n    viewRenderers: PickerViewRendererLookup<TValue, TView, TExternalProps, TAdditionalProps>;\n    /**\n     * If `true`, disable heavy animations.\n     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n     */\n    reduceAnimations?: boolean;\n    /**\n     * The date used to generate the new value when both `value` and `defaultValue` are empty.\n     * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.\n     */\n    referenceDate?: TDate;\n}\n/**\n * Props used to handle the views of the pickers.\n */\nexport interface UsePickerViewsNonStaticProps {\n    /**\n     * If `true`, the open picker button will not be rendered (renders only the field).\n     * @default false\n     */\n    disableOpenPicker?: boolean;\n}\n/**\n * Props used to handle the value of the pickers.\n */\nexport interface UsePickerViewsProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, any, any>, TAdditionalProps extends {}> extends UsePickerViewsBaseProps<TValue, TDate, TView, TExternalProps, TAdditionalProps>, UsePickerViewsNonStaticProps {\n    className?: string;\n    sx?: SxProps<Theme>;\n}\nexport interface UsePickerViewParams<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, TExternalProps, TAdditionalProps>, TAdditionalProps extends {}> {\n    props: TExternalProps;\n    propsFromPickerValue: UsePickerValueViewsResponse<TValue>;\n    additionalViewProps: TAdditionalProps;\n    inputRef?: React.RefObject<HTMLInputElement>;\n    autoFocusView: boolean;\n}\nexport interface UsePickerViewsResponse<TView extends DateOrTimeViewWithMeridiem> {\n    /**\n     * Does the picker have at least one view that should be rendered in UI mode ?\n     * If not, we can hide the icon to open the picker.\n     */\n    hasUIView: boolean;\n    renderCurrentView: () => React.ReactNode;\n    shouldRestoreFocus: () => boolean;\n    layoutProps: UsePickerViewsLayoutResponse<TView>;\n}\nexport interface UsePickerViewsLayoutResponse<TView extends DateOrTimeViewWithMeridiem> {\n    view: TView | null;\n    onViewChange: (view: TView) => void;\n    views: readonly TView[];\n}\n/**\n * Manage the views of all the pickers:\n * - Handles the view switch\n * - Handles the switch between UI views and field views\n * - Handles the focus management when switching views\n */\nexport declare const usePickerViews: <TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, any, any>, TAdditionalProps extends {}>({ props, propsFromPickerValue, additionalViewProps, inputRef, autoFocusView, }: UsePickerViewParams<TValue, TDate, TView, TExternalProps, TAdditionalProps>) => UsePickerViewsResponse<TView>;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.types.d.ts":"import { FieldChangeHandlerContext, UseFieldInternalProps } from '../useField';\nimport { InferError, Validator } from '../useValidation';\nimport { UseFieldValidationProps } from '../useField/useField.types';\nimport { WrapperVariant } from '../../models/common';\nimport { FieldSection, FieldSelectedSections, FieldValueType, TimezoneProps, MuiPickersAdapter, PickersTimezone, PickerChangeHandlerContext } from '../../../models';\nimport { GetDefaultReferenceDateProps } from '../../utils/getDefaultReferenceDate';\nimport { PickerShortcutChangeImportance, PickersShortcutsItemContext } from '../../../PickersShortcuts';\nexport interface PickerValueManager<TValue, TDate, TError> {\n    /**\n     * Determines if two values are equal.\n     * @template TDate, TValue\n     * @param {MuiPickersAdapter<TDate>} utils The adapter.\n     * @param {TValue} valueLeft The first value to compare.\n     * @param {TValue} valueRight The second value to compare.\n     * @returns {boolean} A boolean indicating if the two values are equal.\n     */\n    areValuesEqual: (utils: MuiPickersAdapter<TDate>, valueLeft: TValue, valueRight: TValue) => boolean;\n    /**\n     * Value to set when clicking the \"Clear\" button.\n     */\n    emptyValue: TValue;\n    /**\n     * Method returning the value to set when clicking the \"Today\" button\n     * @template TDate, TValue\n     * @param {MuiPickersAdapter<TDate>} utils The adapter.\n     * @param {PickersTimezone} timezone The current timezone.\n     * @param {FieldValueType} valueType The type of the value being edited.\n     * @returns {TValue} The value to set when clicking the \"Today\" button.\n     */\n    getTodayValue: (utils: MuiPickersAdapter<TDate>, timezone: PickersTimezone, valueType: FieldValueType) => TValue;\n    /**\n     * @template TDate, TValue\n     * Method returning the reference value to use when mounting the component.\n     * @param {object} params The params of the method.\n     * @param {TDate | undefined} params.referenceDate The referenceDate provided by the user.\n     * @param {TValue} params.value The value provided by the user.\n     * @param {GetDefaultReferenceDateProps<TDate>} params.props The validation props needed to compute the reference value.\n     * @param {MuiPickersAdapter<TDate>} params.utils The adapter.\n     * @param {number} params.granularity The granularity of the selection possible on this component.\n     * @param {PickersTimezone} params.timezone The current timezone.\n     * @param {() => TDate} params.getTodayDate The reference date to use if no reference date is passed to the component.\n     * @returns {TValue} The reference value to use for non-provided dates.\n     */\n    getInitialReferenceValue: (params: {\n        referenceDate: TDate | undefined;\n        value: TValue;\n        props: GetDefaultReferenceDateProps<TDate>;\n        utils: MuiPickersAdapter<TDate>;\n        granularity: number;\n        timezone: PickersTimezone;\n        getTodayDate?: () => TDate;\n    }) => TValue;\n    /**\n     * Method parsing the input value to replace all invalid dates by `null`.\n     * @template TDate, TValue\n     * @param {MuiPickersAdapter<TDate>} utils The adapter.\n     * @param {TValue} value The value to parse.\n     * @returns {TValue} The value without invalid date.\n     */\n    cleanValue: (utils: MuiPickersAdapter<TDate>, value: TValue) => TValue;\n    /**\n     * Generates the new value, given the previous value and the new proposed value.\n     * @template TDate, TValue\n     * @param {MuiPickersAdapter<TDate>} utils The adapter.\n     * @param {TValue} lastValidDateValue The last valid value.\n     * @param {TValue} value The proposed value.\n     * @returns {TValue} The new value.\n     */\n    valueReducer?: (utils: MuiPickersAdapter<TDate>, lastValidDateValue: TValue, value: TValue) => TValue;\n    /**\n     * Compare two errors to know if they are equal.\n     * @template TError\n     * @param {TError} error The new error\n     * @param {TError | null} prevError The previous error\n     * @returns {boolean} `true` if the new error is different from the previous one.\n     */\n    isSameError: (error: TError, prevError: TError | null) => boolean;\n    /**\n     * Checks if the current error is empty or not.\n     * @template TError\n     * @param {TError} error The current error.\n     * @returns {boolean} `true` if the current error is not empty.\n     */\n    hasError: (error: TError) => boolean;\n    /**\n     * The value identifying no error, used to initialise the error state.\n     */\n    defaultErrorState: TError;\n    /**\n     * Return the timezone of the date inside a value.\n     * Throw an error on range picker if both values don't have the same timezone.\n     @template TValue, TDate\n     @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n     @param {TValue} value The current value.\n     @returns {string | null} The timezone of the current value.\n     */\n    getTimezone: (utils: MuiPickersAdapter<TDate>, value: TValue) => string | null;\n    /**\n     * Change the timezone of the dates inside a value.\n     @template TValue, TDate\n     @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n     @param {PickersTimezone} timezone The current timezone.\n     @param {TValue} value The value to convert.\n     @returns {TValue} The value with the new dates in the new timezone.\n     */\n    setTimezone: (utils: MuiPickersAdapter<TDate>, timezone: PickersTimezone, value: TValue) => TValue;\n}\nexport type PickerSelectionState = 'partial' | 'shallow' | 'finish';\nexport interface UsePickerValueState<TValue> {\n    /**\n     * Date displayed on the views and the field.\n     * It is updated whenever the user modifies something.\n     */\n    draft: TValue;\n    /**\n     * Last value published (e.g: the last value for which `shouldPublishValue` returned `true`).\n     * If `onChange` is defined, it's the value that was passed on the last call to this callback.\n     */\n    lastPublishedValue: TValue;\n    /**\n     * Last value committed (e.g: the last value for which `shouldCommitValue` returned `true`).\n     * If `onAccept` is defined, it's the value that was passed on the last call to this callback.\n     */\n    lastCommittedValue: TValue;\n    /**\n     * Last value passed with `props.value`.\n     * Used to update the `draft` value whenever the `value` prop changes.\n     */\n    lastControlledValue: TValue | undefined;\n    /**\n     * If we never modified the value since the mount of the component,\n     * Then we might want to apply some custom logic.\n     *\n     * For example, when the component is not controlled and `defaultValue` is defined.\n     * Then clicking on \"Accept\", \"Today\" or \"Clear\" should fire `onAccept` with `defaultValue`, but clicking on \"Cancel\" or dimissing the picker should not.\n     */\n    hasBeenModifiedSinceMount: boolean;\n}\nexport interface PickerValueUpdaterParams<TValue, TError> {\n    action: PickerValueUpdateAction<TValue, TError>;\n    dateState: UsePickerValueState<TValue>;\n    /**\n     * Check if the new draft value has changed compared to some given value.\n     * @template TValue\n     * @param {TValue} comparisonValue The value to compare the new draft value with.\n     * @returns {boolean} `true` if the new draft value is equal to the comparison value.\n     */\n    hasChanged: (comparisonValue: TValue) => boolean;\n    isControlled: boolean;\n    closeOnSelect: boolean;\n}\nexport type PickerValueUpdateAction<TValue, TError> = {\n    name: 'setValueFromView';\n    value: TValue;\n    selectionState: PickerSelectionState;\n} | {\n    name: 'setValueFromField';\n    value: TValue;\n    context: FieldChangeHandlerContext<TError>;\n} | {\n    name: 'setValueFromAction';\n    value: TValue;\n    pickerAction: 'accept' | 'today' | 'cancel' | 'dismiss' | 'clear';\n} | {\n    name: 'setValueFromShortcut';\n    value: TValue;\n    changeImportance: PickerShortcutChangeImportance;\n    shortcut?: PickersShortcutsItemContext;\n};\n/**\n * Props used to handle the value that are common to all pickers.\n */\nexport interface UsePickerValueBaseProps<TValue, TError> {\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: TValue;\n    /**\n     * The default value.\n     * Used when the component is not controlled.\n     */\n    defaultValue?: TValue;\n    /**\n     * Callback fired when the value changes.\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n     * @param {TValue} value The new value.\n     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n     */\n    onChange?: (value: TValue, context: PickerChangeHandlerContext<TError>) => void;\n    /**\n     * Callback fired when the value is accepted.\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @param {TValue} value The value that was just accepted.\n     */\n    onAccept?: (value: TValue) => void;\n    /**\n     * Callback fired when the error associated to the current value changes.\n     * If the error has a non-null value, then the `TextField` will be rendered in `error` state.\n     *\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n     * @param {TError} error The new error describing why the current value is not valid.\n     * @param {TValue} value The value associated to the error.\n     */\n    onError?: (error: TError, value: TValue) => void;\n}\n/**\n * Props used to handle the value of non-static pickers.\n */\nexport interface UsePickerValueNonStaticProps<TValue, TSection extends FieldSection> extends Pick<UseFieldInternalProps<TValue, unknown, TSection, unknown>, 'selectedSections' | 'onSelectedSectionsChange'> {\n    /**\n     * If `true`, the popover or modal will close after submitting the full date.\n     * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).\n     */\n    closeOnSelect?: boolean;\n    /**\n     * Control the popup or dialog open state.\n     * @default false\n     */\n    open?: boolean;\n    /**\n     * Callback fired when the popup requests to be closed.\n     * Use in controlled mode (see `open`).\n     */\n    onClose?: () => void;\n    /**\n     * Callback fired when the popup requests to be opened.\n     * Use in controlled mode (see `open`).\n     */\n    onOpen?: () => void;\n}\n/**\n * Props used to handle the value of the pickers.\n */\nexport interface UsePickerValueProps<TValue, TSection extends FieldSection, TError> extends UsePickerValueBaseProps<TValue, TError>, UsePickerValueNonStaticProps<TValue, TSection>, TimezoneProps {\n}\nexport interface UsePickerValueParams<TValue, TDate, TSection extends FieldSection, TExternalProps extends UsePickerValueProps<TValue, TSection, any>> {\n    props: TExternalProps;\n    valueManager: PickerValueManager<TValue, TDate, InferError<TExternalProps>>;\n    valueType: FieldValueType;\n    wrapperVariant: WrapperVariant;\n    validator: Validator<TValue, TDate, InferError<TExternalProps>, UseFieldValidationProps<TValue, TExternalProps>>;\n}\nexport interface UsePickerValueActions {\n    onAccept: () => void;\n    onClear: () => void;\n    onDismiss: () => void;\n    onCancel: () => void;\n    onSetToday: () => void;\n    onOpen: () => void;\n    onClose: () => void;\n}\nexport type UsePickerValueFieldResponse<TValue, TSection extends FieldSection, TError> = Required<Pick<UseFieldInternalProps<TValue, unknown, TSection, TError>, 'value' | 'onChange' | 'selectedSections' | 'onSelectedSectionsChange'>>;\n/**\n * Props passed to `usePickerViews`.\n */\nexport interface UsePickerValueViewsResponse<TValue> {\n    value: TValue;\n    onChange: (value: TValue, selectionState?: PickerSelectionState) => void;\n    open: boolean;\n    onClose: () => void;\n    onSelectedSectionsChange: (newValue: FieldSelectedSections) => void;\n}\n/**\n * Props passed to `usePickerLayoutProps`.\n */\nexport interface UsePickerValueLayoutResponse<TValue> extends UsePickerValueActions {\n    value: TValue;\n    onChange: (newValue: TValue) => void;\n    onSelectShortcut: (newValue: TValue, changeImportance?: PickerShortcutChangeImportance) => void;\n    isValid: (value: TValue) => boolean;\n}\nexport interface UsePickerValueResponse<TValue, TSection extends FieldSection, TError> {\n    open: boolean;\n    actions: UsePickerValueActions;\n    viewProps: UsePickerValueViewsResponse<TValue>;\n    fieldProps: UsePickerValueFieldResponse<TValue, TSection, TError>;\n    layoutProps: UsePickerValueLayoutResponse<TValue>;\n}\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerValue.d.ts":"import { InferError } from '../useValidation';\nimport { FieldSection } from '../../../models';\nimport { UsePickerValueProps, UsePickerValueParams, UsePickerValueResponse } from './usePickerValue.types';\n/**\n * Manage the value lifecycle of all the pickers.\n */\nexport declare const usePickerValue: <TValue, TDate, TSection extends FieldSection, TExternalProps extends UsePickerValueProps<TValue, TSection, any>>({ props, valueManager, valueType, wrapperVariant, validator, }: UsePickerValueParams<TValue, TDate, TSection, TExternalProps>) => UsePickerValueResponse<TValue, TSection, InferError<TExternalProps>>;\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePickerLayoutProps.d.ts":"import { UsePickerValueLayoutResponse } from './usePickerValue.types';\nimport { UsePickerViewsLayoutResponse } from './usePickerViews';\nimport { DateOrTimeViewWithMeridiem, WrapperVariant } from '../../models/common';\n/**\n * Props used to create the layout of the views.\n * Those props are exposed on all the pickers.\n */\nexport interface UsePickerLayoutProps {\n    disabled?: boolean;\n    readOnly?: boolean;\n    /**\n     * Force rendering in particular orientation.\n     */\n    orientation?: 'portrait' | 'landscape';\n}\nexport interface UsePickerLayoutPropsResponseLayoutProps<TValue, TView extends DateOrTimeViewWithMeridiem> extends UsePickerValueLayoutResponse<TValue>, UsePickerViewsLayoutResponse<TView>, UsePickerLayoutProps {\n    isLandscape: boolean;\n    wrapperVariant: WrapperVariant;\n    isValid: (value: TValue) => boolean;\n}\nexport interface UsePickerLayoutPropsResponse<TValue, TView extends DateOrTimeViewWithMeridiem> {\n    layoutProps: UsePickerLayoutPropsResponseLayoutProps<TValue, TView>;\n}\nexport interface UsePickerLayoutPropsParams<TValue, TView extends DateOrTimeViewWithMeridiem> {\n    props: UsePickerLayoutProps;\n    propsFromPickerValue: UsePickerValueLayoutResponse<TValue>;\n    propsFromPickerViews: UsePickerViewsLayoutResponse<TView>;\n    wrapperVariant: WrapperVariant;\n}\n/**\n * Prepare the props for the view layout (managed by `PickersLayout`)\n */\nexport declare const usePickerLayoutProps: <TValue, TView extends DateOrTimeViewWithMeridiem>({ props, propsFromPickerValue, propsFromPickerViews, wrapperVariant, }: UsePickerLayoutPropsParams<TValue, TView>) => UsePickerLayoutPropsResponse<TValue, TView>;\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePicker.types.d.ts":"import { UsePickerValueParams, UsePickerValueProps, UsePickerValueBaseProps, UsePickerValueResponse } from './usePickerValue.types';\nimport { UsePickerViewsProps, UsePickerViewParams, UsePickerViewsResponse, UsePickerViewsBaseProps } from './usePickerViews';\nimport { UsePickerLayoutProps, UsePickerLayoutPropsResponse } from './usePickerLayoutProps';\nimport { FieldSection } from '../../../models';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\n/**\n * Props common to all picker headless implementations.\n */\nexport interface UsePickerBaseProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, any, any>, TAdditionalProps extends {}> extends UsePickerValueBaseProps<TValue, TError>, UsePickerViewsBaseProps<TValue, TDate, TView, TExternalProps, TAdditionalProps>, UsePickerLayoutProps {\n}\nexport interface UsePickerProps<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TSection extends FieldSection, TError, TExternalProps extends UsePickerViewsProps<TValue, TDate, TView, any, any>, TAdditionalProps extends {}> extends UsePickerValueProps<TValue, TSection, TError>, UsePickerViewsProps<TValue, TDate, TView, TExternalProps, TAdditionalProps>, UsePickerLayoutProps {\n}\nexport interface UsePickerParams<TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TSection extends FieldSection, TExternalProps extends UsePickerProps<TValue, TDate, TView, TSection, any, any, any>, TAdditionalProps extends {}> extends Pick<UsePickerValueParams<TValue, TDate, TSection, TExternalProps>, 'valueManager' | 'valueType' | 'wrapperVariant' | 'validator'>, Pick<UsePickerViewParams<TValue, TDate, TView, TExternalProps, TAdditionalProps>, 'additionalViewProps' | 'inputRef' | 'autoFocusView'> {\n    props: TExternalProps;\n}\nexport interface UsePickerResponse<TValue, TView extends DateOrTimeViewWithMeridiem, TSection extends FieldSection, TError> extends Omit<UsePickerValueResponse<TValue, TSection, TError>, 'viewProps' | 'layoutProps'>, Omit<UsePickerViewsResponse<TView>, 'layoutProps'>, UsePickerLayoutPropsResponse<TValue, TView> {\n}\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/usePicker.d.ts":"import { UsePickerParams, UsePickerProps, UsePickerResponse } from './usePicker.types';\nimport { InferError } from '../useValidation';\nimport { FieldSection } from '../../../models';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\nexport declare const usePicker: <TValue, TDate, TView extends DateOrTimeViewWithMeridiem, TSection extends FieldSection, TExternalProps extends UsePickerProps<TValue, TDate, TView, TSection, any, any, any>, TAdditionalProps extends {}>({ props, valueManager, valueType, wrapperVariant, inputRef, additionalViewProps, validator, autoFocusView, }: UsePickerParams<TValue, TDate, TView, TSection, TExternalProps, TAdditionalProps>) => UsePickerResponse<TValue, TView, TSection, InferError<TExternalProps>>;\n","node_modules/@mui/x-date-pickers/internals/hooks/usePicker/index.d.ts":"export { usePicker } from './usePicker';\nexport type { UsePickerProps, UsePickerBaseProps, UsePickerParams, UsePickerResponse, } from './usePicker.types';\nexport type { PickerValueManager, PickerSelectionState } from './usePickerValue.types';\n","node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/useMobilePicker.types.d.ts":"import * as React from 'react';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { BaseNonStaticPickerProps, BasePickerProps, BaseNonRangeNonStaticPickerProps } from '../../models/props/basePickerProps';\nimport { PickersModalDialogSlotsComponent, PickersModalDialogSlotsComponentsProps } from '../../components/PickersModalDialog';\nimport { UsePickerParams, UsePickerProps } from '../usePicker';\nimport { BaseSingleInputFieldProps, FieldSection, MuiPickersAdapter } from '../../../models';\nimport { ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps, PickersLayoutSlotsComponentsProps } from '../../../PickersLayout/PickersLayout.types';\nimport { UsePickerValueNonStaticProps } from '../usePicker/usePickerValue.types';\nimport { UsePickerViewsNonStaticProps, UsePickerViewsProps } from '../usePicker/usePickerViews';\nimport { UncapitalizeObjectKeys } from '../../utils/slots-migration';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\nexport interface UseMobilePickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersModalDialogSlotsComponent, ExportedPickersLayoutSlotsComponent<TDate | null, TDate, TView> {\n    /**\n     * Component used to enter the date with the keyboard.\n     */\n    Field: React.ElementType<BaseSingleInputFieldProps<TDate | null, TDate, FieldSection, any>>;\n    /**\n     * Form control with an input to render the value inside the default field.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType<TextFieldProps>;\n}\nexport interface ExportedUseMobilePickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersModalDialogSlotsComponentsProps, ExportedPickersLayoutSlotsComponentsProps<TDate | null, TDate, TView> {\n    field?: SlotComponentProps<React.ElementType<BaseSingleInputFieldProps<TDate | null, TDate, FieldSection, unknown>>, {}, UsePickerProps<TDate | null, TDate, any, FieldSection, any, any, any>>;\n    textField?: SlotComponentProps<typeof TextField, {}, Record<string, any>>;\n}\nexport interface UseMobilePickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedUseMobilePickerSlotsComponentsProps<TDate, TView>, Pick<PickersLayoutSlotsComponentsProps<TDate | null, TDate, TView>, 'toolbar'> {\n}\nexport interface MobileOnlyPickerProps<TDate> extends BaseNonStaticPickerProps, BaseNonRangeNonStaticPickerProps, UsePickerValueNonStaticProps<TDate | null, FieldSection>, UsePickerViewsNonStaticProps {\n}\nexport interface UseMobilePickerProps<TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<any, any, TView, any, any>> extends BasePickerProps<TDate | null, TDate, TView, TError, TExternalProps, {}>, MobileOnlyPickerProps<TDate> {\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots: UncapitalizeObjectKeys<UseMobilePickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: UseMobilePickerSlotsComponentsProps<TDate, TView>;\n}\nexport interface UseMobilePickerParams<TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseMobilePickerProps<TDate, TView, any, TExternalProps>> extends Pick<UsePickerParams<TDate | null, TDate, TView, FieldSection, TExternalProps, {}>, 'valueManager' | 'valueType' | 'validator'> {\n    props: TExternalProps;\n    getOpenDialogAriaText: (date: TDate | null, utils: MuiPickersAdapter<TDate>) => string;\n}\n","node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/useMobilePicker.d.ts":"import * as React from 'react';\nimport { UseMobilePickerParams, UseMobilePickerProps } from './useMobilePicker.types';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\n/**\n * Hook managing all the single-date mobile pickers:\n * - MobileDatePicker\n * - MobileDateTimePicker\n * - MobileTimePicker\n */\nexport declare const useMobilePicker: <TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseMobilePickerProps<TDate, TView, any, TExternalProps>>({ props, getOpenDialogAriaText, ...pickerParams }: UseMobilePickerParams<TDate, TView, TExternalProps>) => {\n    renderPicker: () => React.JSX.Element;\n};\n","node_modules/@mui/x-date-pickers/internals/hooks/useMobilePicker/index.d.ts":"export { useMobilePicker } from './useMobilePicker';\nexport type { UseMobilePickerSlotsComponent, UseMobilePickerSlotsComponentsProps, ExportedUseMobilePickerSlotsComponentsProps, MobileOnlyPickerProps, } from './useMobilePicker.types';\n","node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldState.d.ts":"import { UseFieldForwardedProps, UseFieldInternalProps, UseFieldParams, UseFieldState, FieldSelectedSectionsIndexes } from './useField.types';\nimport { FieldSection, FieldSelectedSections } from '../../../models';\nexport interface UpdateSectionValueParams<TSection extends FieldSection> {\n    /**\n     * The section on which we want to apply the new value.\n     */\n    activeSection: TSection;\n    /**\n     * Value to apply to the active section.\n     */\n    newSectionValue: string;\n    /**\n     * If `true`, the focus will move to the next section.\n     */\n    shouldGoToNextSection: boolean;\n}\nexport declare const useFieldState: <TValue, TDate, TSection extends FieldSection, TForwardedProps extends UseFieldForwardedProps, TInternalProps extends UseFieldInternalProps<any, any, any, any>>(params: UseFieldParams<TValue, TDate, TSection, TForwardedProps, TInternalProps>) => {\n    state: UseFieldState<TValue, TSection>;\n    selectedSectionIndexes: FieldSelectedSectionsIndexes | null;\n    setSelectedSections: (newSelectedSections: FieldSelectedSections) => void;\n    clearValue: () => void;\n    clearActiveSection: () => void;\n    updateSectionValue: ({ activeSection, newSectionValue, shouldGoToNextSection, }: UpdateSectionValueParams<TSection>) => void;\n    updateValueFromValueStr: (valueStr: string) => void;\n    setTempAndroidValueStr: (tempValueStrAndroid: string | null) => void;\n    sectionsValueBoundaries: import(\"./useField.types\").FieldSectionsValueBoundaries<TDate>;\n    placeholder: string;\n    timezone: string;\n};\n","node_modules/@mui/x-date-pickers/internals/hooks/useField/useFieldCharacterEditing.d.ts":"import { FieldSection, PickersTimezone } from '../../../models';\nimport { FieldSectionsValueBoundaries } from './useField.types';\nimport { UpdateSectionValueParams } from './useFieldState';\ninterface ApplyCharacterEditingParams {\n    keyPressed: string;\n    sectionIndex: number;\n}\ninterface UseFieldEditingParams<TDate, TSection extends FieldSection> {\n    sections: TSection[];\n    updateSectionValue: (params: UpdateSectionValueParams<TSection>) => void;\n    sectionsValueBoundaries: FieldSectionsValueBoundaries<TDate>;\n    setTempAndroidValueStr: (newValue: string | null) => void;\n    timezone: PickersTimezone;\n}\n/**\n * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).\n * This hook has two main editing behaviors\n *\n * 1. The numeric editing when the user presses a digit\n * 2. The letter editing when the user presses another key\n */\nexport declare const useFieldCharacterEditing: <TDate, TSection extends FieldSection>({ sections, updateSectionValue, sectionsValueBoundaries, setTempAndroidValueStr, timezone, }: UseFieldEditingParams<TDate, TSection>) => {\n    applyCharacterEditing: (params: ApplyCharacterEditingParams) => void;\n    resetCharacterQuery: () => void;\n};\nexport {};\n","node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.utils.d.ts":"import { AvailableAdjustKeyCode, FieldSectionsValueBoundaries, SectionOrdering, FieldSectionWithoutPosition, FieldSectionValueBoundaries } from './useField.types';\nimport { FieldSectionType, FieldValueType, FieldSection, MuiPickersAdapter, FieldSectionContentType, PickersTimezone } from '../../../models';\nimport { PickersLocaleText } from '../../../locales/utils/pickersLocaleTextApi';\nexport declare const getDateSectionConfigFromFormatToken: <TDate>(utils: MuiPickersAdapter<TDate, any>, formatToken: string) => Pick<FieldSection, 'type' | 'contentType'> & {\n    maxLength: number | undefined;\n};\nexport declare const getDaysInWeekStr: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, format: string) => string[];\nexport declare const getLetterEditingOptions: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, sectionType: FieldSectionType, format: string) => string[];\nexport declare const cleanLeadingZeros: <TDate>(utils: MuiPickersAdapter<TDate, any>, valueStr: string, size: number) => string;\nexport declare const cleanDigitSectionValue: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, value: number, sectionBoundaries: FieldSectionValueBoundaries<TDate, any>, section: Pick<FieldSection, 'format' | 'type' | 'contentType' | 'hasLeadingZerosInFormat' | 'hasLeadingZerosInInput' | 'maxLength'>) => string;\nexport declare const adjustSectionValue: <TDate, TSection extends FieldSection>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, section: TSection, keyCode: AvailableAdjustKeyCode, sectionsValueBoundaries: FieldSectionsValueBoundaries<TDate>, activeDate: TDate | null, stepsAttributes?: {\n    minutesStep?: number;\n}) => string;\nexport declare const getSectionVisibleValue: (section: FieldSectionWithoutPosition, target: 'input-rtl' | 'input-ltr' | 'non-input') => string;\nexport declare const cleanString: (dirtyString: string) => string;\nexport declare const addPositionPropertiesToSections: <TSection extends FieldSection>(sections: FieldSectionWithoutPosition<TSection>[], isRTL: boolean) => TSection[];\nexport declare const changeSectionValueFormat: <TDate>(utils: MuiPickersAdapter<TDate, any>, valueStr: string, currentFormat: string, newFormat: string) => string;\nexport declare const doesSectionFormatHaveLeadingZeros: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, contentType: FieldSectionContentType, sectionType: FieldSectionType, format: string) => boolean;\nexport declare const splitFormatIntoSections: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, localeText: PickersLocaleText<TDate>, format: string, date: TDate | null, formatDensity: 'dense' | 'spacious', shouldRespectLeadingZeros: boolean, isRTL: boolean) => FieldSectionWithoutPosition[];\n/**\n * Some date libraries like `dayjs` don't support parsing from date with escaped characters.\n * To make sure that the parsing works, we are building a format and a date without any separator.\n */\nexport declare const getDateFromDateSections: <TDate>(utils: MuiPickersAdapter<TDate, any>, sections: FieldSection[]) => NonNullable<TDate>;\nexport declare const createDateStrForInputFromSections: (sections: FieldSection[], isRTL: boolean) => string;\nexport declare const getSectionsBoundaries: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone) => FieldSectionsValueBoundaries<TDate>;\nexport declare const validateSections: <TSection extends FieldSection>(sections: TSection[], valueType: FieldValueType) => void;\nexport declare const mergeDateIntoReferenceDate: <TDate>(utils: MuiPickersAdapter<TDate, any>, timezone: PickersTimezone, dateToTransferFrom: TDate, sections: FieldSectionWithoutPosition[], referenceDate: TDate, shouldLimitToEditedSections: boolean) => TDate;\nexport declare const isAndroid: () => boolean;\nexport declare const getSectionOrder: (sections: FieldSectionWithoutPosition[], isRTL: boolean) => SectionOrdering;\n","node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport IconButton from '@mui/material/IconButton';\nimport { ClearIcon } from '../../../icons';\nimport { FieldSectionType, FieldSection, FieldSelectedSections, MuiPickersAdapter, TimezoneProps, FieldSectionContentType, FieldValueType, PickersTimezone } from '../../../models';\nimport type { PickerValueManager } from '../usePicker';\nimport { InferError, Validator } from '../useValidation';\nexport interface UseFieldParams<TValue, TDate, TSection extends FieldSection, TForwardedProps extends UseFieldForwardedProps, TInternalProps extends UseFieldInternalProps<any, any, any, any>> {\n    inputRef?: React.Ref<HTMLInputElement>;\n    forwardedProps: TForwardedProps;\n    internalProps: TInternalProps;\n    valueManager: PickerValueManager<TValue, TDate, InferError<TInternalProps>>;\n    fieldValueManager: FieldValueManager<TValue, TDate, TSection>;\n    validator: Validator<TValue, TDate, InferError<TInternalProps>, UseFieldValidationProps<TValue, TInternalProps>>;\n    valueType: FieldValueType;\n}\nexport interface UseFieldInternalProps<TValue, TDate, TSection extends FieldSection, TError> extends TimezoneProps {\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: TValue;\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: TValue;\n    /**\n     * The date used to generate a part of the new value that is not present in the format when both `value` and `defaultValue` are empty.\n     * For example, on time fields it will be used to determine the date to set.\n     * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`. Value is rounded to the most granular section used.\n     */\n    referenceDate?: TDate;\n    /**\n     * Callback fired when the value changes.\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n     * @param {TValue} value The new value.\n     * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.\n     */\n    onChange?: FieldChangeHandler<TValue, TError>;\n    /**\n     * Callback fired when the error associated to the current value changes.\n     * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.\n     * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.\n     * @param {TError} error The new error.\n     * @param {TValue} value The value associated to the error.\n     */\n    onError?: (error: TError, value: TValue) => void;\n    /**\n     * Format of the date when rendered in the input(s).\n     */\n    format: string;\n    /**\n     * Density of the format when rendered in the input.\n     * Setting `formatDensity` to `\"spacious\"` will add a space before and after each `/`, `-` and `.` character.\n     * @default \"dense\"\n     */\n    formatDensity?: 'dense' | 'spacious';\n    /**\n     * If `true`, the format will respect the leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `8/16/2018`)\n     * If `false`, the format will always add leading zeroes (e.g: on dayjs, the format `M/D/YYYY` will render `08/16/2018`)\n     *\n     * Warning n°1: Luxon is not able to respect the leading zeroes when using macro tokens (e.g: \"DD\"), so `shouldRespectLeadingZeros={true}` might lead to inconsistencies when using `AdapterLuxon`.\n     *\n     * Warning n°2: When `shouldRespectLeadingZeros={true}`, the field will add an invisible character on the sections containing a single digit to make sure `onChange` is fired.\n     * If you need to get the clean value from the input, you can remove this character using `input.value.replace(/\\u200e/g, '')`.\n     *\n     * Warning n°3: When used in strict mode, dayjs and moment require to respect the leading zeros.\n     * This mean that when using `shouldRespectLeadingZeros={false}`, if you retrieve the value directly from the input (not listening to `onChange`) and your format contains tokens without leading zeros, the value will not be parsed by your library.\n     *\n     * @default `false`\n     */\n    shouldRespectLeadingZeros?: boolean;\n    /**\n     * It prevents the user from changing the value of the field\n     * (not from interacting with the field).\n     * @default false\n     */\n    readOnly?: boolean;\n    /**\n     * The currently selected sections.\n     * This prop accept four formats:\n     * 1. If a number is provided, the section at this index will be selected.\n     * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.\n     * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.\n     * 4. If `null` is provided, no section will be selected\n     * If not provided, the selected sections will be handled internally.\n     */\n    selectedSections?: FieldSelectedSections;\n    /**\n     * Callback fired when the selected sections change.\n     * @param {FieldSelectedSections} newValue The new selected sections.\n     */\n    onSelectedSectionsChange?: (newValue: FieldSelectedSections) => void;\n    /**\n     * The ref object used to imperatively interact with the field.\n     */\n    unstableFieldRef?: React.Ref<FieldRef<TSection>>;\n    /**\n     * Callback fired when the clear button is clicked.\n     */\n    onClear?: React.MouseEventHandler;\n    /**\n     * If `true`, a clear button will be shown in the field allowing value clearing.\n     * @default false\n     */\n    clearable?: boolean;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n}\nexport interface FieldRef<TSection extends FieldSection> {\n    /**\n     * Returns the sections of the current value.\n     * @returns {TSection[]} The sections of the current value.\n     */\n    getSections: () => TSection[];\n    /**\n     * Returns the index of the active section (the first focused section).\n     * If no section is active, returns `null`.\n     * @returns {number | null} The index of the active section.\n     */\n    getActiveSectionIndex: () => number | null;\n    /**\n     * Updates the selected sections.\n     * @param {FieldSelectedSections} selectedSections The sections to select.\n     */\n    setSelectedSections: (selectedSections: FieldSelectedSections) => void;\n}\nexport interface UseFieldForwardedProps {\n    onKeyDown?: React.KeyboardEventHandler;\n    onMouseUp?: React.MouseEventHandler;\n    onPaste?: React.ClipboardEventHandler<HTMLInputElement>;\n    onClick?: React.MouseEventHandler;\n    onFocus?: () => void;\n    onBlur?: () => void;\n    error?: boolean;\n    onClear?: React.MouseEventHandler;\n    clearable?: boolean;\n    disabled?: boolean;\n}\nexport type UseFieldResponse<TForwardedProps extends UseFieldForwardedProps> = Omit<TForwardedProps, keyof UseFieldForwardedProps> & Required<UseFieldForwardedProps> & Pick<React.InputHTMLAttributes<HTMLInputElement>, 'autoCorrect' | 'inputMode' | 'placeholder'> & {\n    ref: React.Ref<HTMLInputElement>;\n    value: string;\n    onChange: React.ChangeEventHandler<HTMLInputElement>;\n    error: boolean;\n    readOnly: boolean;\n    autoComplete: 'off';\n};\nexport type FieldSectionWithoutPosition<TSection extends FieldSection = FieldSection> = Omit<TSection, 'start' | 'end' | 'startInInput' | 'endInInput'>;\nexport type FieldSectionValueBoundaries<TDate, SectionType extends FieldSectionType> = {\n    minimum: number;\n    maximum: number;\n} & (SectionType extends 'day' ? {\n    longestMonth: TDate;\n} : {});\nexport type FieldSectionsValueBoundaries<TDate> = {\n    [SectionType in FieldSectionType]: (params: {\n        currentDate: TDate | null;\n        format: string;\n        contentType: FieldSectionContentType;\n    }) => FieldSectionValueBoundaries<TDate, SectionType>;\n};\nexport type FieldChangeHandler<TValue, TError> = (value: TValue, context: FieldChangeHandlerContext<TError>) => void;\nexport interface FieldChangeHandlerContext<TError> {\n    validationError: TError;\n}\n/**\n * Object used to access and update the active date (i.e: the date containing the active section).\n * Mainly useful in the range fields where we need to update the date containing the active section without impacting the other one.\n */\ninterface FieldActiveDateManager<TValue, TDate, TSection extends FieldSection> {\n    /**\n     * Active date from `state.value`.\n     */\n    date: TDate | null;\n    /**\n     * Active date from the `state.referenceValue`.\n     */\n    referenceDate: TDate;\n    /**\n     * @template TSection\n     * @param  {TSection[]} sections The sections of the full value.\n     * @returns {TSection[]} The sections of the active date.\n     * Get the sections of the active date.\n     */\n    getSections: (sections: TSection[]) => TSection[];\n    /**\n     * Creates the new value and reference value based on the new active date and the current state.\n     * @template TValue, TDate\n     * @param {TDate | null} newActiveDate The new value of the date containing the active section.\n     * @returns {Pick<UseFieldState<TValue, any>, 'value' | 'referenceValue'>} The new value and reference value to publish and store in the state.\n     */\n    getNewValuesFromNewActiveDate: (newActiveDate: TDate | null) => Pick<UseFieldState<TValue, any>, 'value' | 'referenceValue'>;\n}\nexport type FieldSelectedSectionsIndexes = {\n    startIndex: number;\n    endIndex: number;\n    /**\n     * If `true`, the selectors at the very beginning and very end of the input will be selected.\n     * @default false\n     */\n    shouldSelectBoundarySelectors?: boolean;\n};\nexport interface FieldValueManager<TValue, TDate, TSection extends FieldSection> {\n    /**\n     * Creates the section list from the current value.\n     * The `prevSections` are used on the range fields to avoid losing the sections of a partially filled date when editing the other date.\n     * @template TValue, TDate, TSection\n     * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n     * @param {TValue} value The current value to generate sections from.\n     * @param {TSection[] | null} fallbackSections The sections to use as a fallback if a date is null or invalid.\n     * @param {boolean} isRTL `true` if the direction is \"right to left\".\n     * @param {(date: TDate) => FieldSectionWithoutPosition[]} getSectionsFromDate Returns the sections of the given date.\n     * @returns {TSection[]}  The new section list.\n     */\n    getSectionsFromValue: (utils: MuiPickersAdapter<TDate>, value: TValue, fallbackSections: TSection[] | null, isRTL: boolean, getSectionsFromDate: (date: TDate) => FieldSectionWithoutPosition[]) => TSection[];\n    /**\n     * Creates the string value to render in the input based on the current section list.\n     * @template TSection\n     * @param {TSection[]} sections The current section list.\n     * @param {boolean} isRTL `true` if the current orientation is \"right to left\"\n     * @returns {string} The string value to render in the input.\n     */\n    getValueStrFromSections: (sections: TSection[], isRTL: boolean) => string;\n    /**\n     * Returns the manager of the active date.\n     * @template TValue, TDate, TSection\n     * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n     * @param {UseFieldState<TValue, TSection>} state The current state of the field.\n     * @param {TSection} activeSection The active section.\n     * @returns {FieldActiveDateManager<TValue, TDate, TSection>} The manager of the active date.\n     */\n    getActiveDateManager: (utils: MuiPickersAdapter<TDate>, state: UseFieldState<TValue, TSection>, activeSection: TSection) => FieldActiveDateManager<TValue, TDate, TSection>;\n    /**\n     * Parses a string version (most of the time coming from the input).\n     * This method should only be used when the change does not come from a single section.\n     * @template TValue, TDate\n     * @param {string} valueStr The string value to parse.\n     * @param {TValue} referenceValue The reference value currently stored in state.\n     * @param {(dateStr: string, referenceDate: TDate) => TDate | null} parseDate A method to convert a string date into a parsed one.\n     * @returns {TValue} The new parsed value.\n     */\n    parseValueStr: (valueStr: string, referenceValue: TValue, parseDate: (dateStr: string, referenceDate: TDate) => TDate | null) => TValue;\n    /**\n     * Update the reference value with the new value.\n     * This method must make sure that no date inside the returned `referenceValue` is invalid.\n     * @template TValue, TDate\n     * @param {MuiPickersAdapter<TDate>} utils The utils to manipulate the date.\n     * @param {TValue} value The new value from which we want to take all valid dates in the `referenceValue` state.\n     * @param {TValue} prevReferenceValue The previous reference value. It is used as a fallback for invalid dates in the new value.\n     * @returns {TValue} The new reference value with no invalid date.\n     */\n    updateReferenceValue: (utils: MuiPickersAdapter<TDate>, value: TValue, prevReferenceValue: TValue) => TValue;\n}\nexport interface UseFieldState<TValue, TSection extends FieldSection> {\n    value: TValue;\n    /**\n     * Non-nullable value used to keep trace of the timezone and the date parts not present in the format.\n     * It is updated whenever we have a valid date (for the range picker we update only the portion of the range that is valid).\n     */\n    referenceValue: TValue;\n    sections: TSection[];\n    /**\n     * Android `onChange` behavior when the input selection is not empty is quite different from a desktop behavior.\n     * There are two `onChange` calls:\n     * 1. A call with the selected content removed.\n     * 2. A call with the key pressed added to the value.\n     **\n     * For instance, if the input value equals `month / day / year` and `day` is selected.\n     * The pressing `1` will have the following behavior:\n     * 1. A call with `month /  / year`.\n     * 2. A call with `month / 1 / year`.\n     *\n     * But if you don't update the input with the value passed on the first `onChange`.\n     * Then the second `onChange` will add the key press at the beginning of the selected value.\n     * 1. A call with `month / / year` that we don't set into state.\n     * 2. A call with `month / 1day / year`.\n     *\n     * The property below allows us to set the first `onChange` value into state waiting for the second one.\n     */\n    tempValueStrAndroid: string | null;\n}\nexport type UseFieldValidationProps<TValue, TInternalProps extends {\n    value?: TValue;\n    defaultValue?: TValue;\n    timezone?: PickersTimezone;\n}> = Omit<TInternalProps, 'value' | 'defaultValue' | 'timezone'> & {\n    value: TValue;\n    timezone: PickersTimezone;\n};\nexport type AvailableAdjustKeyCode = 'ArrowUp' | 'ArrowDown' | 'PageUp' | 'PageDown' | 'Home' | 'End';\nexport type SectionNeighbors = {\n    [sectionIndex: number]: {\n        /**\n         * Index of the next section displayed on the left. `null` if it's the leftmost section.\n         */\n        leftIndex: number | null;\n        /**\n         * Index of the next section displayed on the right. `null` if it's the rightmost section.\n         */\n        rightIndex: number | null;\n    };\n};\nexport type SectionOrdering = {\n    /**\n     * For each section index provide the index of the section displayed on the left and on the right.\n     */\n    neighbors: SectionNeighbors;\n    /**\n     * Index of the section displayed on the far left\n     */\n    startIndex: number;\n    /**\n     * Index of the section displayed on the far right\n     */\n    endIndex: number;\n};\nexport interface FieldSlotsComponents {\n    /**\n     * Icon to display inside the clear button.\n     * @default ClearIcon\n     */\n    ClearIcon?: React.ElementType;\n    /**\n     * Button to clear the value.\n     * @default IconButton\n     */\n    ClearButton?: React.ElementType;\n}\nexport interface FieldSlotsComponentsProps {\n    clearIcon?: SlotComponentProps<typeof ClearIcon, {}, {}>;\n    clearButton?: SlotComponentProps<typeof IconButton, {}, {}>;\n}\nexport {};\n","node_modules/@mui/x-date-pickers/internals/hooks/useField/useField.d.ts":"import { UseFieldParams, UseFieldResponse, UseFieldForwardedProps, UseFieldInternalProps } from './useField.types';\nimport { FieldSection } from '../../../models';\nexport declare const useField: <TValue, TDate, TSection extends FieldSection, TForwardedProps extends UseFieldForwardedProps, TInternalProps extends UseFieldInternalProps<any, any, any, any> & {\n    minutesStep?: number | undefined;\n}>(params: UseFieldParams<TValue, TDate, TSection, TForwardedProps, TInternalProps>) => UseFieldResponse<TForwardedProps>;\n","node_modules/@mui/x-date-pickers/internals/hooks/useField/index.d.ts":"export { useField } from './useField';\nexport type { FieldValueManager, UseFieldInternalProps, UseFieldForwardedProps, UseFieldParams, UseFieldResponse, FieldChangeHandler, FieldChangeHandlerContext, FieldRef, FieldSlotsComponents, FieldSlotsComponentsProps, } from './useField.types';\nexport { splitFormatIntoSections, addPositionPropertiesToSections, createDateStrForInputFromSections, } from './useField.utils';\n","node_modules/@mui/x-date-pickers/internals/components/PickerViewRoot/index.d.ts":"export { PickerViewRoot } from './PickerViewRoot';\n","node_modules/@mui/x-date-pickers/internals/components/PickerViewRoot/PickerViewRoot.d.ts":"/// <reference types=\"react\" />\nexport declare const PickerViewRoot: import(\"@emotion/styled\").StyledComponent<import(\"@mui/system\").MUIStyledCommonProps<import(\"@mui/material/styles\").Theme>, import(\"react\").DetailedHTMLProps<import(\"react\").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;\n","node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.types.d.ts":"import * as React from 'react';\nimport IconButton, { IconButtonProps } from '@mui/material/IconButton';\nimport { InputAdornmentProps } from '@mui/material/InputAdornment';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { BaseNonStaticPickerProps, BasePickerProps, BaseNonRangeNonStaticPickerProps } from '../../models/props/basePickerProps';\nimport { PickersPopperSlotsComponent, PickersPopperSlotsComponentsProps } from '../../components/PickersPopper';\nimport { UsePickerParams, UsePickerProps } from '../usePicker';\nimport { BaseSingleInputFieldProps, FieldSection, MuiPickersAdapter } from '../../../models';\nimport { ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps, PickersLayoutSlotsComponentsProps } from '../../../PickersLayout/PickersLayout.types';\nimport { UsePickerValueNonStaticProps } from '../usePicker/usePickerValue.types';\nimport { UsePickerViewsNonStaticProps, UsePickerViewsProps } from '../usePicker/usePickerViews';\nimport { UncapitalizeObjectKeys } from '../../utils/slots-migration';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\nimport { FieldSlotsComponents, FieldSlotsComponentsProps } from '../useField';\nexport interface UseDesktopPickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem> extends Pick<PickersPopperSlotsComponent, 'DesktopPaper' | 'DesktopTransition' | 'DesktopTrapFocus' | 'Popper'>, ExportedPickersLayoutSlotsComponent<TDate | null, TDate, TView>, FieldSlotsComponents {\n    /**\n     * Component used to enter the date with the keyboard.\n     */\n    Field: React.ElementType<BaseSingleInputFieldProps<TDate | null, TDate, FieldSection, any>>;\n    /**\n     * Form control with an input to render the value inside the default field.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType<TextFieldProps>;\n    /**\n     * Component displayed on the start or end input adornment used to open the picker on desktop.\n     * @default InputAdornment\n     */\n    InputAdornment?: React.ElementType<InputAdornmentProps>;\n    /**\n     * Button to open the picker on desktop.\n     * @default IconButton\n     */\n    OpenPickerButton?: React.ElementType<IconButtonProps>;\n    /**\n     * Icon displayed in the open picker button on desktop.\n     */\n    OpenPickerIcon: React.ElementType;\n}\nexport interface UseDesktopPickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedUseDesktopPickerSlotsComponentsProps<TDate, TView>, Pick<PickersLayoutSlotsComponentsProps<TDate | null, TDate, TView>, 'toolbar'> {\n}\nexport interface ExportedUseDesktopPickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersPopperSlotsComponentsProps, ExportedPickersLayoutSlotsComponentsProps<TDate | null, TDate, TView>, FieldSlotsComponentsProps {\n    field?: SlotComponentProps<React.ElementType<BaseSingleInputFieldProps<TDate | null, TDate, FieldSection, unknown>>, {}, UsePickerProps<TDate | null, TDate, any, FieldSection, any, any, any>>;\n    textField?: SlotComponentProps<typeof TextField, {}, Record<string, any>>;\n    inputAdornment?: Partial<InputAdornmentProps>;\n    openPickerButton?: SlotComponentProps<typeof IconButton, {}, UseDesktopPickerProps<TDate, any, any, any>>;\n    openPickerIcon?: Record<string, any>;\n}\nexport interface DesktopOnlyPickerProps<TDate> extends BaseNonStaticPickerProps, BaseNonRangeNonStaticPickerProps, UsePickerValueNonStaticProps<TDate | null, FieldSection>, UsePickerViewsNonStaticProps {\n    /**\n     * If `true`, the `input` element is focused during the first mount.\n     */\n    autoFocus?: boolean;\n}\nexport interface UseDesktopPickerProps<TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<any, any, TView, any, any>> extends BasePickerProps<TDate | null, TDate, TView, TError, TExternalProps, {}>, DesktopOnlyPickerProps<TDate> {\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots: UncapitalizeObjectKeys<UseDesktopPickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: UseDesktopPickerSlotsComponentsProps<TDate, TView>;\n}\nexport interface UseDesktopPickerParams<TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseDesktopPickerProps<TDate, TView, any, TExternalProps>> extends Pick<UsePickerParams<TDate | null, TDate, TView, FieldSection, TExternalProps, {}>, 'valueManager' | 'valueType' | 'validator'> {\n    props: TExternalProps;\n    getOpenDialogAriaText: (date: TDate | null, utils: MuiPickersAdapter<TDate>) => string;\n}\n","node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/useDesktopPicker.d.ts":"import * as React from 'react';\nimport { UseDesktopPickerParams, UseDesktopPickerProps } from './useDesktopPicker.types';\nimport { DateOrTimeViewWithMeridiem } from '../../models';\n/**\n * Hook managing all the single-date desktop pickers:\n * - DesktopDatePicker\n * - DesktopDateTimePicker\n * - DesktopTimePicker\n */\nexport declare const useDesktopPicker: <TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseDesktopPickerProps<TDate, TView, any, TExternalProps>>({ props, getOpenDialogAriaText, ...pickerParams }: UseDesktopPickerParams<TDate, TView, TExternalProps>) => {\n    renderPicker: () => React.JSX.Element;\n};\n","node_modules/@mui/x-date-pickers/internals/hooks/useDesktopPicker/index.d.ts":"export { useDesktopPicker } from './useDesktopPicker';\nexport type { UseDesktopPickerSlotsComponent, UseDesktopPickerSlotsComponentsProps, ExportedUseDesktopPickerSlotsComponentsProps, DesktopOnlyPickerProps, } from './useDesktopPicker.types';\n","node_modules/@mui/x-date-pickers/internals/components/FakeTextField/index.d.ts":"export { FakeTextField } from './FakeTextField';\n","node_modules/@mui/x-date-pickers/internals/components/FakeTextField/FakeTextField.d.ts":"import * as React from 'react';\nexport interface FakeTextFieldElement {\n    container: React.HTMLAttributes<HTMLSpanElement>;\n    content: React.HTMLAttributes<HTMLSpanElement>;\n    before: React.HTMLAttributes<HTMLSpanElement>;\n    after: React.HTMLAttributes<HTMLSpanElement>;\n}\ninterface FakeTextFieldProps {\n    elements: FakeTextFieldElement[];\n    valueStr: string;\n    onValueStrChange: React.ChangeEventHandler<HTMLInputElement>;\n    error: boolean;\n    id?: string;\n    InputProps: any;\n    inputProps: any;\n    disabled?: boolean;\n    autoFocus?: boolean;\n    ownerState?: any;\n    valueType: 'value' | 'placeholder';\n}\nexport declare const FakeTextField: React.ForwardRefExoticComponent<FakeTextFieldProps & React.RefAttributes<HTMLDivElement>>;\nexport {};\n","node_modules/@mui/x-date-pickers/internals/components/DateTimeViewWrapper/index.d.ts":"export { DateTimeViewWrapper } from './DateTimeViewWrapper';\n","node_modules/@mui/x-date-pickers/internals/components/DateTimeViewWrapper/DateTimeViewWrapper.d.ts":"/// <reference types=\"react\" />\nexport declare const DateTimeViewWrapper: import(\"@emotion/styled\").StyledComponent<import(\"@mui/system\").MUIStyledCommonProps<import(\"@mui/material/styles\").Theme>, import(\"react\").DetailedHTMLProps<import(\"react\").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;\n","node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/pickersArrowSwitcherClasses.d.ts":"export interface PickersArrowSwitcherClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the spacer element. */\n    spacer: string;\n    /** Styles applied to the button element. */\n    button: string;\n}\nexport type PickersArrowSwitcherClassKey = keyof PickersArrowSwitcherClasses;\nexport declare function getPickersArrowSwitcherUtilityClass(slot: string): string;\nexport declare const pickersArrowSwitcherClasses: Record<\"button\" | \"root\" | \"spacer\", string>;\n","node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/index.d.ts":"export { PickersArrowSwitcher } from './PickersArrowSwitcher';\nexport type { PickersArrowSwitcherSlotsComponent, PickersArrowSwitcherSlotsComponentsProps, ExportedPickersArrowSwitcherProps, } from './PickersArrowSwitcher.types';\n","node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport IconButton from '@mui/material/IconButton';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport { PickersArrowSwitcherClasses } from './pickersArrowSwitcherClasses';\nimport { UncapitalizeObjectKeys } from '../../utils/slots-migration';\nexport interface ExportedPickersArrowSwitcherProps {\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<PickersArrowSwitcherSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: PickersArrowSwitcherSlotsComponentsProps;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<PickersArrowSwitcherClasses>;\n}\nexport interface PickersArrowSwitcherProps extends ExportedPickersArrowSwitcherProps, Omit<React.HTMLProps<HTMLDivElement>, 'ref' | 'as'> {\n    children?: React.ReactNode;\n    isPreviousDisabled: boolean;\n    isPreviousHidden?: boolean;\n    onGoToPrevious: () => void;\n    previousLabel: string;\n    isNextDisabled: boolean;\n    isNextHidden?: boolean;\n    onGoToNext: () => void;\n    nextLabel: string;\n}\nexport type PickersArrowSwitcherOwnerState = PickersArrowSwitcherProps;\nexport interface PickersArrowSwitcherComponentsPropsOverrides {\n}\nexport interface PickersArrowSwitcherSlotsComponent {\n    /**\n     * Button allowing to switch to the left view.\n     * @default IconButton\n     */\n    PreviousIconButton?: React.ElementType;\n    /**\n     * Button allowing to switch to the right view.\n     * @default IconButton\n     */\n    NextIconButton?: React.ElementType;\n    /**\n     * Icon displayed in the left view switch button.\n     * @default ArrowLeft\n     */\n    LeftArrowIcon?: React.ElementType;\n    /**\n     * Icon displayed in the right view switch button.\n     * @default ArrowRight\n     */\n    RightArrowIcon?: React.ElementType;\n}\nexport interface PickersArrowSwitcherButtonSlotOwnerState extends PickersArrowSwitcherOwnerState {\n    hidden?: boolean;\n}\nexport interface PickersArrowSwitcherSlotsComponentsProps {\n    previousIconButton?: SlotComponentProps<typeof IconButton, PickersArrowSwitcherComponentsPropsOverrides, PickersArrowSwitcherButtonSlotOwnerState>;\n    nextIconButton?: SlotComponentProps<typeof IconButton, PickersArrowSwitcherComponentsPropsOverrides, PickersArrowSwitcherButtonSlotOwnerState>;\n    leftArrowIcon?: SlotComponentProps<typeof SvgIcon, PickersArrowSwitcherComponentsPropsOverrides, undefined>;\n    rightArrowIcon?: SlotComponentProps<typeof SvgIcon, PickersArrowSwitcherComponentsPropsOverrides, undefined>;\n}\n","node_modules/@mui/x-date-pickers/internals/components/PickersArrowSwitcher/PickersArrowSwitcher.d.ts":"import * as React from 'react';\nimport { PickersArrowSwitcherProps } from './PickersArrowSwitcher.types';\nexport declare const PickersArrowSwitcher: React.ForwardRefExoticComponent<PickersArrowSwitcherProps & React.RefAttributes<HTMLDivElement>>;\n","node_modules/@mui/x-date-pickers-pro/package.json":"{\n  \"name\": \"@mui/x-date-pickers-pro\",\n  \"version\": \"6.19.8\",\n  \"description\": \"The commercial edition of the date picker components (MUI X).\",\n  \"author\": \"MUI Team\",\n  \"main\": \"./node/index.js\",\n  \"license\": \"SEE LICENSE IN LICENSE\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/mui-x/issues\"\n  },\n  \"homepage\": \"https://mui.com/x/react-date-pickers/\",\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"material-ui\",\n    \"material design\",\n    \"datepicker\",\n    \"daterangepicker\",\n    \"timepicker\",\n    \"datetimepicker\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/mui-x.git\",\n    \"directory\": \"packages/x-date-pickers-pro\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.2\",\n    \"@mui/base\": \"^5.0.0-beta.22\",\n    \"@mui/utils\": \"^5.14.16\",\n    \"@mui/x-date-pickers\": \"6.19.8\",\n    \"@mui/x-license-pro\": \"6.10.2\",\n    \"clsx\": \"^2.0.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"react-transition-group\": \"^4.4.5\"\n  },\n  \"peerDependencies\": {\n    \"@emotion/react\": \"^11.9.0\",\n    \"@emotion/styled\": \"^11.8.1\",\n    \"@mui/material\": \"^5.8.6\",\n    \"@mui/system\": \"^5.8.0\",\n    \"date-fns\": \"^2.25.0 || ^3.2.0\",\n    \"date-fns-jalali\": \"^2.13.0-0\",\n    \"dayjs\": \"^1.10.7\",\n    \"luxon\": \"^3.0.2\",\n    \"moment\": \"^2.29.4\",\n    \"moment-hijri\": \"^2.1.2\",\n    \"moment-jalaali\": \"^0.7.4 || ^0.8.0 || ^0.9.0 || ^0.10.0\",\n    \"react\": \"^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@emotion/react\": {\n      \"optional\": true\n    },\n    \"@emotion/styled\": {\n      \"optional\": true\n    },\n    \"date-fns\": {\n      \"optional\": true\n    },\n    \"date-fns-jalali\": {\n      \"optional\": true\n    },\n    \"dayjs\": {\n      \"optional\": true\n    },\n    \"luxon\": {\n      \"optional\": true\n    },\n    \"moment\": {\n      \"optional\": true\n    },\n    \"moment-hijri\": {\n      \"optional\": true\n    },\n    \"moment-jalaali\": {\n      \"optional\": true\n    }\n  },\n  \"setupFiles\": [\n    \"<rootDir>/src/setupTests.js\"\n  ],\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"private\": false,\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/x-date-pickers-pro/index.d.ts":"export { LicenseInfo } from '@mui/x-license-pro';\nexport * from '@mui/x-date-pickers';\nexport * from './DateRangePickerDay';\nexport * from './MultiInputDateRangeField';\nexport * from './MultiInputTimeRangeField';\nexport * from './MultiInputDateTimeRangeField';\nexport * from './SingleInputDateRangeField';\nexport * from './SingleInputTimeRangeField';\nexport * from './SingleInputDateTimeRangeField';\nexport type { RangeFieldSection, BaseMultiInputFieldProps, MultiInputFieldSlotTextFieldProps, } from './internals/models/fields';\nexport * from './DateRangeCalendar';\nexport * from './DateRangePicker';\nexport * from './DesktopDateRangePicker';\nexport * from './MobileDateRangePicker';\nexport * from './StaticDateRangePicker';\nexport * from './dateRangeViewRenderers';\nexport type { DateRange, RangePosition } from './internals/models/range';\nexport type { UseDateRangeFieldProps } from './internals/models/dateRange';\nexport * from './models';\n","node_modules/@mui/x-date-pickers-pro/themeAugmentation/props.d.ts":"import { DateRangePickerDayProps } from '../DateRangePickerDay';\nimport { MultiInputDateRangeFieldProps } from '../MultiInputDateRangeField/MultiInputDateRangeField.types';\nimport { SingleInputDateRangeFieldProps } from '../SingleInputDateRangeField/SingleInputDateRangeField.types';\nimport { DateRangeCalendarProps } from '../DateRangeCalendar';\n\nimport { DateRangePickerProps, DateRangePickerToolbarProps } from '../DateRangePicker';\nimport { DesktopDateRangePickerProps } from '../DesktopDateRangePicker';\nimport { MobileDateRangePickerProps } from '../MobileDateRangePicker';\nimport { StaticDateRangePickerProps } from '../StaticDateRangePicker';\nimport { MultiInputDateTimeRangeFieldProps } from '../MultiInputDateTimeRangeField';\nimport { MultiInputTimeRangeFieldProps } from '../MultiInputTimeRangeField';\nimport { SingleInputDateTimeRangeFieldProps } from '../SingleInputDateTimeRangeField';\nimport { SingleInputTimeRangeFieldProps } from '../SingleInputTimeRangeField';\n\nexport interface PickersProComponentsPropsList {\n  MuiDateRangeCalendar: DateRangeCalendarProps<unknown>;\n  MuiDateRangePickerDay: DateRangePickerDayProps<unknown>;\n  MuiDateRangePickerToolbar: DateRangePickerToolbarProps<unknown>;\n\n  // Multi input range fields\n  MuiMultiInputDateRangeField: MultiInputDateRangeFieldProps<unknown>;\n  MuiMultiInputDateTimeRangeField: MultiInputDateTimeRangeFieldProps<unknown>;\n  MuiMultiInputTimeRangeField: MultiInputTimeRangeFieldProps<unknown>;\n\n  // Single input range fields\n  MuiSingleInputDateRangeField: SingleInputDateRangeFieldProps<unknown>;\n  MuiSingleInputDateTimeRangeField: SingleInputDateTimeRangeFieldProps<unknown>;\n  MuiSingleInputTimeRangeField: SingleInputTimeRangeFieldProps<unknown>;\n\n  // Date Range Pickers\n  MuiDateRangePicker: DateRangePickerProps<unknown>;\n  MuiDesktopDateRangePicker: DesktopDateRangePickerProps<unknown>;\n  MuiMobileDateRangePicker: MobileDateRangePickerProps<unknown>;\n  MuiStaticDateRangePicker: StaticDateRangePickerProps<unknown>;\n}\n\ndeclare module '@mui/material/styles' {\n  interface ComponentsPropsList extends PickersProComponentsPropsList {}\n}\n\n// disable automatic export\nexport {};\n","node_modules/@mui/x-date-pickers-pro/themeAugmentation/overrides.d.ts":"import { DateRangePickerDayClassKey } from '../DateRangePickerDay';\nimport { DateRangeCalendarClassKey } from '../DateRangeCalendar';\nimport { DateRangePickerToolbarClassKey } from '../DateRangePicker';\nimport { MultiInputRangeFieldClassKey } from '../models';\n\n// prettier-ignore\nexport interface PickersProComponentNameToClassKey {\n  MuiDateRangeCalendar: DateRangeCalendarClassKey;\n  MuiDateRangePickerDay: DateRangePickerDayClassKey;\n  MuiDateRangePickerToolbar: DateRangePickerToolbarClassKey;\n\n  // Multi input range fields\n  MuiMultiInputDateRangeField: MultiInputRangeFieldClassKey;\n  MuiMultiInputDateTimeRangeField: MultiInputRangeFieldClassKey;\n  MuiMultiInputTimeRangeField: MultiInputRangeFieldClassKey;\n}\n\ndeclare module '@mui/material/styles' {\n  interface ComponentNameToClassKey extends PickersProComponentNameToClassKey {}\n}\n\n// disable automatic export\nexport {};\n","node_modules/@mui/x-date-pickers-pro/themeAugmentation/index.d.ts":"export * from '@mui/x-date-pickers/themeAugmentation';\nexport * from './overrides';\nexport * from './props';\nexport * from './components';\n","node_modules/@mui/x-date-pickers-pro/themeAugmentation/components.d.ts":"import { ComponentsProps, ComponentsOverrides } from '@mui/material/styles';\n\nexport interface PickersProComponents<Theme = unknown> {\n  MuiDateRangeCalendar?: {\n    defaultProps?: ComponentsProps['MuiDateRangeCalendar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDateRangeCalendar'];\n  };\n  MuiDateRangePickerDay?: {\n    defaultProps?: ComponentsProps['MuiDateRangePickerDay'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDateRangePickerDay'];\n  };\n  MuiDateRangePickerToolbar?: {\n    defaultProps?: ComponentsProps['MuiDateRangePickerToolbar'];\n    styleOverrides?: ComponentsOverrides<Theme>['MuiDateRangePickerToolbar'];\n  };\n\n  // Multi input range fields\n  MuiMultiInputDateRangeField?: {\n    defaultProps?: ComponentsProps['MuiMultiInputDateRangeField'];\n    styleOverrides?: ComponentsOverrides['MuiMultiInputDateRangeField'];\n  };\n  MuiMultiInputDateTimeRangeField?: {\n    defaultProps?: ComponentsProps['MuiMultiInputDateTimeRangeField'];\n    styleOverrides?: ComponentsOverrides['MuiMultiInputDateTimeRangeField'];\n  };\n  MuiMultiInputTimeRangeField?: {\n    defaultProps?: ComponentsProps['MuiMultiInputTimeRangeField'];\n    styleOverrides?: ComponentsOverrides['MuiMultiInputTimeRangeField'];\n  };\n\n  // Single input range fields\n  MuiSingleInputDateRangeField?: {\n    defaultProps?: ComponentsProps['MuiSingleInputDateRangeField'];\n  };\n  MuiSingleInputDateTimeRangeField?: {\n    defaultProps?: ComponentsProps['MuiSingleInputDateTimeRangeField'];\n  };\n  MuiSingleInputTimeRangeField?: {\n    defaultProps?: ComponentsProps['MuiSingleInputTimeRangeField'];\n  };\n\n  // Date Range Pickers\n  MuiDateRangePicker?: {\n    defaultProps?: ComponentsProps['MuiDateRangePicker'];\n  };\n  MuiDesktopDateRangePicker?: {\n    defaultProps?: ComponentsProps['MuiDesktopDateRangePicker'];\n  };\n  MuiMobileDateRangePicker?: {\n    defaultProps?: ComponentsProps['MuiMobileDateRangePicker'];\n  };\n  MuiStaticDateRangePicker?: {\n    defaultProps?: ComponentsProps['MuiStaticDateRangePicker'];\n  };\n}\n\ndeclare module '@mui/material/styles' {\n  interface Components<Theme = unknown> extends PickersProComponents<Theme> {}\n}\n","node_modules/@mui/x-date-pickers-pro/models/validation.d.ts":"import { DateTimeValidationError, DateValidationError, TimeValidationError } from '@mui/x-date-pickers/models';\ntype RangeValidation<ItemError extends string | null> = [\n    ItemError | 'invalidRange',\n    ItemError | 'invalidRange'\n];\nexport type DateRangeValidationError = RangeValidation<DateValidationError>;\nexport type TimeRangeValidationError = RangeValidation<TimeValidationError>;\nexport type DateTimeRangeValidationError = RangeValidation<DateTimeValidationError>;\nexport {};\n","node_modules/@mui/x-date-pickers-pro/models/multiInputRangeFieldClasses.d.ts":"export interface MultiInputRangeFieldClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the separator element. */\n    separator: string;\n}\nexport type MultiInputRangeFieldClassKey = keyof MultiInputRangeFieldClasses;\n","node_modules/@mui/x-date-pickers-pro/models/index.d.ts":"export * from './validation';\nexport * from './multiInputRangeFieldClasses';\n","node_modules/@mui/x-date-pickers-pro/StaticDateRangePicker/index.d.ts":"export { StaticDateRangePicker } from './StaticDateRangePicker';\nexport type { StaticDateRangePickerProps, StaticDateRangePickerSlotsComponent, StaticDateRangePickerSlotsComponentsProps, } from './StaticDateRangePicker.types';\n","node_modules/@mui/x-date-pickers-pro/StaticDateRangePicker/StaticDateRangePicker.types.d.ts":"import { MakeOptional, UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { StaticRangeOnlyPickerProps, UseStaticRangePickerSlotsComponent, UseStaticRangePickerSlotsComponentsProps } from '../internals/hooks/useStaticRangePicker';\nimport { BaseDateRangePickerProps, BaseDateRangePickerSlotsComponent, BaseDateRangePickerSlotsComponentsProps } from '../DateRangePicker/shared';\nexport interface StaticDateRangePickerSlotsComponent<TDate> extends BaseDateRangePickerSlotsComponent<TDate>, UseStaticRangePickerSlotsComponent<TDate, 'day'> {\n}\nexport interface StaticDateRangePickerSlotsComponentsProps<TDate> extends BaseDateRangePickerSlotsComponentsProps<TDate>, UseStaticRangePickerSlotsComponentsProps<TDate, 'day'> {\n}\nexport interface StaticDateRangePickerProps<TDate> extends BaseDateRangePickerProps<TDate>, MakeOptional<StaticRangeOnlyPickerProps, 'displayStaticWrapperAs'> {\n    /**\n     * The number of calendars to render.\n     * @default 1 if `displayStaticWrapperAs === 'mobile'`, 2 otherwise.\n     */\n    calendars?: 1 | 2 | 3;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: StaticDateRangePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: StaticDateRangePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<StaticDateRangePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: StaticDateRangePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers-pro/StaticDateRangePicker/StaticDateRangePicker.d.ts":"import * as React from 'react';\nimport { StaticDateRangePickerProps } from './StaticDateRangePicker.types';\ntype StaticDateRangePickerComponent = (<TDate>(props: StaticDateRangePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [StaticDateRangePicker API](https://mui.com/x/api/date-pickers/static-date-range-picker/)\n */\ndeclare const StaticDateRangePicker: StaticDateRangePickerComponent;\nexport { StaticDateRangePicker };\n","node_modules/@mui/x-date-pickers-pro/dateRangeViewRenderers/index.d.ts":"export { renderDateRangeViewCalendar } from './dateRangeViewRenderers';\nexport type { DateRangeViewRendererProps } from './dateRangeViewRenderers';\n","node_modules/@mui/x-date-pickers-pro/dateRangeViewRenderers/dateRangeViewRenderers.d.ts":"import * as React from 'react';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { DateRangeCalendarProps } from '../DateRangeCalendar';\nexport interface DateRangeViewRendererProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends DateRangeCalendarProps<TDate> {\n    view: TView;\n    onViewChange?: (view: TView) => void;\n    views: readonly TView[];\n}\n/**\n * We don't pass all the props down to `DateRangeCalendar`,\n * because otherwise some unwanted props would be passed to the HTML element.\n */\nexport declare const renderDateRangeViewCalendar: <TDate extends unknown>({ value, defaultValue, referenceDate, onChange, className, classes, disableFuture, disablePast, minDate, maxDate, shouldDisableDate, reduceAnimations, onMonthChange, defaultCalendarMonth, rangePosition, defaultRangePosition, onRangePositionChange, calendars, currentMonthCalendarPosition, components, componentsProps, slots, slotProps, loading, renderLoading, disableHighlightToday, readOnly, disabled, showDaysOutsideCurrentMonth, dayOfWeekFormatter, disableAutoMonthSwitching, sx, autoFocus, fixedWeekNumber, disableDragEditing, displayWeekNumber, timezone, }: DateRangeViewRendererProps<TDate, any>) => React.JSX.Element;\n","node_modules/@mui/x-date-pickers-pro/SingleInputTimeRangeField/useSingleInputTimeRangeField.d.ts":"import { UseSingleInputTimeRangeFieldDefaultizedProps, UseSingleInputTimeRangeFieldParams, UseSingleInputTimeRangeFieldProps } from './SingleInputTimeRangeField.types';\nexport declare const useDefaultizedTimeRangeFieldProps: <TDate, AdditionalProps extends {}>(props: UseSingleInputTimeRangeFieldProps<TDate>) => UseSingleInputTimeRangeFieldDefaultizedProps<TDate, AdditionalProps>;\nexport declare const useSingleInputTimeRangeField: <TDate, TChildProps extends {}>({ props: inProps, inputRef, }: UseSingleInputTimeRangeFieldParams<TDate, TChildProps>) => import(\"@mui/x-date-pickers/internals\").UseFieldResponse<Omit<UseSingleInputTimeRangeFieldDefaultizedProps<TDate, TChildProps>, keyof UseSingleInputTimeRangeFieldProps<any>>>;\n","node_modules/@mui/x-date-pickers-pro/SingleInputTimeRangeField/index.d.ts":"export { SingleInputTimeRangeField } from './SingleInputTimeRangeField';\nexport { useSingleInputTimeRangeField as unstable_useSingleInputTimeRangeField } from './useSingleInputTimeRangeField';\nexport type { UseSingleInputTimeRangeFieldProps, UseSingleInputTimeRangeFieldComponentProps, SingleInputTimeRangeFieldProps, } from './SingleInputTimeRangeField.types';\n","node_modules/@mui/x-date-pickers-pro/SingleInputTimeRangeField/SingleInputTimeRangeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport TextField from '@mui/material/TextField';\nimport { FieldsTextFieldProps } from '@mui/x-date-pickers/internals/models/fields';\nimport { UncapitalizeObjectKeys, FieldSlotsComponents, FieldSlotsComponentsProps } from '@mui/x-date-pickers/internals';\nimport { UseTimeRangeFieldDefaultizedProps, UseTimeRangeFieldProps } from '../internals/models';\nexport interface UseSingleInputTimeRangeFieldParams<TDate, TChildProps extends {}> {\n    props: UseSingleInputTimeRangeFieldComponentProps<TDate, TChildProps>;\n    inputRef?: React.Ref<HTMLInputElement>;\n}\nexport interface UseSingleInputTimeRangeFieldProps<TDate> extends UseTimeRangeFieldProps<TDate> {\n}\nexport type UseSingleInputTimeRangeFieldDefaultizedProps<TDate, AdditionalProps extends {}> = UseTimeRangeFieldDefaultizedProps<TDate> & AdditionalProps;\nexport type UseSingleInputTimeRangeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseSingleInputTimeRangeFieldProps<TDate>> & UseSingleInputTimeRangeFieldProps<TDate>;\nexport interface SingleInputTimeRangeFieldProps<TDate> extends UseSingleInputTimeRangeFieldComponentProps<TDate, FieldsTextFieldProps> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: SingleInputTimeRangeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: SingleInputTimeRangeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<SingleInputTimeRangeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: SingleInputTimeRangeFieldSlotsComponentsProps<TDate>;\n}\nexport type SingleInputTimeRangeFieldOwnerState<TDate> = SingleInputTimeRangeFieldProps<TDate>;\nexport interface SingleInputTimeRangeFieldSlotsComponent extends FieldSlotsComponents {\n    /**\n     * Form control with an input to render the value.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n}\nexport interface SingleInputTimeRangeFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    textField?: SlotComponentProps<typeof TextField, {}, SingleInputTimeRangeFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers-pro/SingleInputTimeRangeField/SingleInputTimeRangeField.d.ts":"import * as React from 'react';\nimport { SingleInputTimeRangeFieldProps } from './SingleInputTimeRangeField.types';\ntype DateRangeFieldComponent = (<TDate>(props: SingleInputTimeRangeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n    fieldType?: string;\n};\n/**\n * Demos:\n *\n * - [TimeRangeField](http://mui.com/x/react-date-pickers/time-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [SingleInputTimeRangeField API](https://mui.com/x/api/single-input-time-range-field/)\n */\ndeclare const SingleInputTimeRangeField: DateRangeFieldComponent;\nexport { SingleInputTimeRangeField };\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateRangeField/useSingleInputDateRangeField.d.ts":"import { UseSingleInputDateRangeFieldDefaultizedProps, UseSingleInputDateRangeFieldParams, UseSingleInputDateRangeFieldProps } from './SingleInputDateRangeField.types';\nexport declare const useDefaultizedDateRangeFieldProps: <TDate, AdditionalProps extends {}>(props: UseSingleInputDateRangeFieldProps<TDate>) => UseSingleInputDateRangeFieldDefaultizedProps<TDate, AdditionalProps>;\nexport declare const useSingleInputDateRangeField: <TDate, TChildProps extends {}>({ props: inProps, inputRef, }: UseSingleInputDateRangeFieldParams<TDate, TChildProps>) => import(\"@mui/x-date-pickers/internals\").UseFieldResponse<Omit<UseSingleInputDateRangeFieldDefaultizedProps<TDate, TChildProps>, keyof UseSingleInputDateRangeFieldProps<any>>>;\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateRangeField/index.d.ts":"export { SingleInputDateRangeField } from './SingleInputDateRangeField';\nexport { useSingleInputDateRangeField as unstable_useSingleInputDateRangeField } from './useSingleInputDateRangeField';\nexport type { UseSingleInputDateRangeFieldProps, UseSingleInputDateRangeFieldComponentProps, SingleInputDateRangeFieldProps, } from './SingleInputDateRangeField.types';\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateRangeField/SingleInputDateRangeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport TextField from '@mui/material/TextField';\nimport { FieldsTextFieldProps, UncapitalizeObjectKeys, FieldSlotsComponents, FieldSlotsComponentsProps } from '@mui/x-date-pickers/internals';\nimport { UseDateRangeFieldDefaultizedProps, UseDateRangeFieldProps } from '../internals/models';\nexport interface UseSingleInputDateRangeFieldParams<TDate, TChildProps extends {}> {\n    props: UseSingleInputDateRangeFieldComponentProps<TDate, TChildProps>;\n    inputRef?: React.Ref<HTMLInputElement>;\n}\nexport interface UseSingleInputDateRangeFieldProps<TDate> extends UseDateRangeFieldProps<TDate> {\n}\nexport type UseSingleInputDateRangeFieldDefaultizedProps<TDate, AdditionalProps extends {}> = UseDateRangeFieldDefaultizedProps<TDate> & Omit<AdditionalProps, 'value' | 'defaultValue' | 'onChange'>;\nexport type UseSingleInputDateRangeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseSingleInputDateRangeFieldProps<TDate>> & UseSingleInputDateRangeFieldProps<TDate>;\nexport type SingleInputDateRangeFieldProps<TDate, TChildProps extends {} = FieldsTextFieldProps> = UseSingleInputDateRangeFieldComponentProps<TDate, TChildProps> & {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: SingleInputDateRangeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: SingleInputDateRangeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<SingleInputDateRangeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: SingleInputDateRangeFieldSlotsComponentsProps<TDate>;\n};\nexport type SingleInputDateRangeFieldOwnerState<TDate> = SingleInputDateRangeFieldProps<TDate>;\nexport interface SingleInputDateRangeFieldSlotsComponent extends FieldSlotsComponents {\n    /**\n     * Form control with an input to render the value.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n}\nexport interface SingleInputDateRangeFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    textField?: SlotComponentProps<typeof TextField, {}, SingleInputDateRangeFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateRangeField/SingleInputDateRangeField.d.ts":"import * as React from 'react';\nimport { SingleInputDateRangeFieldProps } from './SingleInputDateRangeField.types';\ntype DateRangeFieldComponent = (<TDate>(props: SingleInputDateRangeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n    fieldType?: string;\n};\n/**\n * Demos:\n *\n * - [DateRangeField](http://mui.com/x/react-date-pickers/date-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [SingleInputDateRangeField API](https://mui.com/x/api/single-input-date-range-field/)\n */\ndeclare const SingleInputDateRangeField: DateRangeFieldComponent;\nexport { SingleInputDateRangeField };\n","node_modules/@mui/x-date-pickers-pro/MultiInputDateTimeRangeField/index.d.ts":"export { MultiInputDateTimeRangeField, getMultiInputDateTimeRangeFieldUtilityClass, multiInputDateTimeRangeFieldClasses, } from './MultiInputDateTimeRangeField';\nexport { useMultiInputDateTimeRangeField as unstable_useMultiInputDateTimeRangeField } from '../internals/hooks/useMultiInputRangeField/useMultiInputDateTimeRangeField';\nexport type { UseMultiInputDateTimeRangeFieldProps, UseMultiInputDateTimeRangeFieldComponentProps, MultiInputDateTimeRangeFieldProps, } from './MultiInputDateTimeRangeField.types';\n","node_modules/@mui/x-date-pickers-pro/MultiInputDateTimeRangeField/MultiInputDateTimeRangeField.types.d.ts":"import * as React from 'react';\nimport { FieldRef } from '@mui/x-date-pickers/models';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport Typography from '@mui/material/Typography';\nimport Stack, { StackProps } from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport { UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { UseDateTimeRangeFieldDefaultizedProps, UseDateTimeRangeFieldProps } from '../internals/models/dateTimeRange';\nimport { RangePosition } from '../internals/models/range';\nimport { RangeFieldSection } from '../internals/models/fields';\nimport { UseMultiInputRangeFieldParams } from '../internals/hooks/useMultiInputRangeField/useMultiInputRangeField.types';\nimport { MultiInputRangeFieldClasses } from '../models';\nexport type UseMultiInputDateTimeRangeFieldParams<TDate, TTextFieldSlotProps extends {}> = UseMultiInputRangeFieldParams<UseMultiInputDateTimeRangeFieldProps<TDate>, TTextFieldSlotProps>;\nexport interface UseMultiInputDateTimeRangeFieldProps<TDate> extends Omit<UseDateTimeRangeFieldProps<TDate>, 'unstableFieldRef' | 'clearable' | 'onClear'> {\n    unstableStartFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n    unstableEndFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n}\nexport type UseMultiInputDateTimeRangeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseMultiInputDateTimeRangeFieldProps<TDate>> & UseMultiInputDateTimeRangeFieldProps<TDate>;\nexport interface MultiInputDateTimeRangeFieldProps<TDate> extends UseMultiInputDateTimeRangeFieldComponentProps<TDate, Omit<StackProps, 'position'>> {\n    autoFocus?: boolean;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<MultiInputRangeFieldClasses>;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MultiInputDateTimeRangeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MultiInputDateTimeRangeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MultiInputDateTimeRangeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MultiInputDateTimeRangeFieldSlotsComponentsProps<TDate>;\n}\nexport type MultiInputDateTimeRangeFieldOwnerState<TDate> = MultiInputDateTimeRangeFieldProps<TDate>;\nexport interface MultiInputDateTimeRangeFieldSlotsComponent {\n    /**\n     * Element rendered at the root.\n     * @default MultiInputDateTimeRangeFieldRoot\n     */\n    Root?: React.ElementType;\n    /**\n     * Form control with an input to render a date and time.\n     * It is rendered twice: once for the start date time and once for the end date time.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n    /**\n     * Element rendered between the two inputs.\n     * @default MultiInputDateTimeRangeFieldSeparator\n     */\n    Separator?: React.ElementType;\n}\nexport interface MultiInputDateTimeRangeFieldSlotsComponentsProps<TDate> {\n    root?: SlotComponentProps<typeof Stack, {}, MultiInputDateTimeRangeFieldOwnerState<TDate>>;\n    textField?: SlotComponentProps<typeof TextField, {}, MultiInputDateTimeRangeFieldOwnerState<TDate> & {\n        position: RangePosition;\n    }>;\n    separator?: SlotComponentProps<typeof Typography, {}, MultiInputDateTimeRangeFieldOwnerState<TDate>>;\n}\nexport type UseMultiInputDateTimeRangeFieldDefaultizedProps<TDate, AdditionalProps extends {}> = UseDateTimeRangeFieldDefaultizedProps<TDate> & Omit<AdditionalProps, 'value' | 'defaultValue' | 'onChange'>;\n","node_modules/@mui/x-date-pickers-pro/MultiInputDateTimeRangeField/MultiInputDateTimeRangeField.d.ts":"import * as React from 'react';\nimport { MultiInputDateTimeRangeFieldProps } from './MultiInputDateTimeRangeField.types';\nimport { MultiInputRangeFieldClasses } from '../models';\nexport declare const multiInputDateTimeRangeFieldClasses: MultiInputRangeFieldClasses;\nexport declare const getMultiInputDateTimeRangeFieldUtilityClass: (slot: string) => string;\ntype MultiInputDateTimeRangeFieldComponent = (<TDate>(props: MultiInputDateTimeRangeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateTimeRangeField](http://mui.com/x/react-date-pickers/date-time-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [MultiInputDateTimeRangeField API](https://mui.com/x/api/multi-input-date-time-range-field/)\n */\ndeclare const MultiInputDateTimeRangeField: MultiInputDateTimeRangeFieldComponent;\nexport { MultiInputDateTimeRangeField };\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateTimeRangeField/useSingleInputDateTimeRangeField.d.ts":"import { UseSingleInputDateTimeRangeFieldDefaultizedProps, UseSingleInputDateTimeRangeFieldParams, UseSingleInputDateTimeRangeFieldProps } from './SingleInputDateTimeRangeField.types';\nexport declare const useDefaultizedTimeRangeFieldProps: <TDate, AdditionalProps extends {}>(props: UseSingleInputDateTimeRangeFieldProps<TDate>) => UseSingleInputDateTimeRangeFieldDefaultizedProps<TDate, AdditionalProps>;\nexport declare const useSingleInputDateTimeRangeField: <TDate, TChildProps extends {}>({ props: inProps, inputRef, }: UseSingleInputDateTimeRangeFieldParams<TDate, TChildProps>) => import(\"@mui/x-date-pickers/internals\").UseFieldResponse<Omit<UseSingleInputDateTimeRangeFieldDefaultizedProps<TDate, TChildProps>, keyof UseSingleInputDateTimeRangeFieldProps<any>>>;\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateTimeRangeField/index.d.ts":"export { SingleInputDateTimeRangeField } from './SingleInputDateTimeRangeField';\nexport { useSingleInputDateTimeRangeField as unstable_useSingleInputDateTimeRangeField } from './useSingleInputDateTimeRangeField';\nexport type { UseSingleInputDateTimeRangeFieldProps, UseSingleInputDateTimeRangeFieldComponentProps, SingleInputDateTimeRangeFieldProps, } from './SingleInputDateTimeRangeField.types';\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateTimeRangeField/SingleInputDateTimeRangeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport TextField from '@mui/material/TextField';\nimport { FieldsTextFieldProps } from '@mui/x-date-pickers/internals/models/fields';\nimport { UncapitalizeObjectKeys, FieldSlotsComponents, FieldSlotsComponentsProps } from '@mui/x-date-pickers/internals';\nimport { UseDateTimeRangeFieldDefaultizedProps, UseDateTimeRangeFieldProps } from '../internals/models';\nexport interface UseSingleInputDateTimeRangeFieldParams<TDate, TChildProps extends {}> {\n    props: UseSingleInputDateTimeRangeFieldComponentProps<TDate, TChildProps>;\n    inputRef?: React.Ref<HTMLInputElement>;\n}\nexport interface UseSingleInputDateTimeRangeFieldProps<TDate> extends UseDateTimeRangeFieldProps<TDate> {\n}\nexport type UseSingleInputDateTimeRangeFieldDefaultizedProps<TDate, AdditionalProps extends {}> = UseDateTimeRangeFieldDefaultizedProps<TDate> & AdditionalProps;\nexport type UseSingleInputDateTimeRangeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseSingleInputDateTimeRangeFieldProps<TDate>> & UseSingleInputDateTimeRangeFieldProps<TDate>;\nexport interface SingleInputDateTimeRangeFieldProps<TDate> extends UseSingleInputDateTimeRangeFieldComponentProps<TDate, FieldsTextFieldProps> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: SingleInputDateTimeRangeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: SingleInputDateTimeRangeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<SingleInputDateTimeRangeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: SingleInputDateTimeRangeFieldSlotsComponentsProps<TDate>;\n}\nexport type SingleInputDateTimeRangeFieldOwnerState<TDate> = SingleInputDateTimeRangeFieldProps<TDate>;\nexport interface SingleInputDateTimeRangeFieldSlotsComponent extends FieldSlotsComponents {\n    /**\n     * Form control with an input to render the value.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n}\nexport interface SingleInputDateTimeRangeFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    textField?: SlotComponentProps<typeof TextField, {}, SingleInputDateTimeRangeFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers-pro/SingleInputDateTimeRangeField/SingleInputDateTimeRangeField.d.ts":"import * as React from 'react';\nimport { SingleInputDateTimeRangeFieldProps } from './SingleInputDateTimeRangeField.types';\ntype DateRangeFieldComponent = (<TDate>(props: SingleInputDateTimeRangeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n    fieldType?: string;\n};\n/**\n * Demos:\n *\n * - [DateTimeRangeField](http://mui.com/x/react-date-pickers/date-time-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [SingleInputDateTimeRangeField API](https://mui.com/x/api/single-input-date-time-range-field/)\n */\ndeclare const SingleInputDateTimeRangeField: DateRangeFieldComponent;\nexport { SingleInputDateTimeRangeField };\n","node_modules/@mui/x-date-pickers-pro/DesktopDateRangePicker/index.d.ts":"export { DesktopDateRangePicker } from './DesktopDateRangePicker';\nexport type { DesktopDateRangePickerProps, DesktopDateRangePickerSlotsComponent, DesktopDateRangePickerSlotsComponentsProps, } from './DesktopDateRangePicker.types';\n","node_modules/@mui/x-date-pickers-pro/DesktopDateRangePicker/DesktopDateRangePicker.types.d.ts":"import { MakeOptional, UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { UseDesktopRangePickerSlotsComponent, UseDesktopRangePickerSlotsComponentsProps, DesktopRangeOnlyPickerProps } from '../internals/hooks/useDesktopRangePicker';\nimport { BaseDateRangePickerProps, BaseDateRangePickerSlotsComponent, BaseDateRangePickerSlotsComponentsProps } from '../DateRangePicker/shared';\nexport interface DesktopDateRangePickerSlotsComponent<TDate> extends BaseDateRangePickerSlotsComponent<TDate>, MakeOptional<UseDesktopRangePickerSlotsComponent<TDate, 'day'>, 'Field'> {\n}\nexport interface DesktopDateRangePickerSlotsComponentsProps<TDate> extends BaseDateRangePickerSlotsComponentsProps<TDate>, UseDesktopRangePickerSlotsComponentsProps<TDate, 'day'> {\n}\nexport interface DesktopDateRangePickerProps<TDate> extends BaseDateRangePickerProps<TDate>, DesktopRangeOnlyPickerProps<TDate> {\n    /**\n     * The number of calendars to render on **desktop**.\n     * @default 2\n     */\n    calendars?: 1 | 2 | 3;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DesktopDateRangePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DesktopDateRangePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DesktopDateRangePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DesktopDateRangePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers-pro/DesktopDateRangePicker/DesktopDateRangePicker.d.ts":"import * as React from 'react';\nimport { DesktopDateRangePickerProps } from './DesktopDateRangePicker.types';\ntype DesktopDateRangePickerComponent = (<TDate>(props: DesktopDateRangePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DesktopDateRangePicker API](https://mui.com/x/api/date-pickers/desktop-date-range-picker/)\n */\ndeclare const DesktopDateRangePicker: DesktopDateRangePickerComponent;\nexport { DesktopDateRangePicker };\n","node_modules/@mui/x-date-pickers-pro/MultiInputTimeRangeField/index.d.ts":"export { MultiInputTimeRangeField, getMultiInputTimeRangeFieldUtilityClass, multiInputTimeRangeFieldClasses, } from './MultiInputTimeRangeField';\nexport { useMultiInputTimeRangeField as unstable_useMultiInputTimeRangeField } from '../internals/hooks/useMultiInputRangeField/useMultiInputTimeRangeField';\nexport type { UseMultiInputTimeRangeFieldProps, UseMultiInputTimeRangeFieldComponentProps, MultiInputTimeRangeFieldProps, } from './MultiInputTimeRangeField.types';\n","node_modules/@mui/x-date-pickers-pro/MultiInputTimeRangeField/MultiInputTimeRangeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport Typography from '@mui/material/Typography';\nimport Stack, { StackProps } from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport { FieldRef } from '@mui/x-date-pickers/models';\nimport { UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { UseTimeRangeFieldDefaultizedProps, UseTimeRangeFieldProps } from '../internals/models/timeRange';\nimport { RangePosition } from '../internals/models/range';\nimport { UseMultiInputRangeFieldParams } from '../internals/hooks/useMultiInputRangeField/useMultiInputRangeField.types';\nimport { RangeFieldSection } from '../internals/models/fields';\nimport { MultiInputRangeFieldClasses } from '../models';\nexport type UseMultiInputTimeRangeFieldParams<TDate, TTextFieldSlotProps extends {}> = UseMultiInputRangeFieldParams<UseMultiInputTimeRangeFieldProps<TDate>, TTextFieldSlotProps>;\nexport interface UseMultiInputTimeRangeFieldProps<TDate> extends Omit<UseTimeRangeFieldProps<TDate>, 'unstableFieldRef' | 'clearable' | 'onClear'> {\n    unstableStartFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n    unstableEndFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n}\nexport type UseMultiInputTimeRangeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseMultiInputTimeRangeFieldProps<TDate>> & UseMultiInputTimeRangeFieldProps<TDate>;\nexport interface MultiInputTimeRangeFieldProps<TDate> extends UseMultiInputTimeRangeFieldComponentProps<TDate, Omit<StackProps, 'position'>> {\n    autoFocus?: boolean;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<MultiInputRangeFieldClasses>;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MultiInputTimeRangeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MultiInputTimeRangeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MultiInputTimeRangeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MultiInputTimeRangeFieldSlotsComponentsProps<TDate>;\n}\nexport type MultiInputTimeRangeFieldOwnerState<TDate> = MultiInputTimeRangeFieldProps<TDate>;\nexport interface MultiInputTimeRangeFieldSlotsComponent {\n    /**\n     * Element rendered at the root.\n     * @default MultiInputTimeRangeFieldRoot\n     */\n    Root?: React.ElementType;\n    /**\n     * Form control with an input to render a time.\n     * It is rendered twice: once for the start time and once for the end time.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n    /**\n     * Element rendered between the two inputs.\n     * @default MultiInputTimeRangeFieldSeparator\n     */\n    Separator?: React.ElementType;\n}\nexport interface MultiInputTimeRangeFieldSlotsComponentsProps<TDate> {\n    root?: SlotComponentProps<typeof Stack, {}, MultiInputTimeRangeFieldOwnerState<TDate>>;\n    textField?: SlotComponentProps<typeof TextField, {}, MultiInputTimeRangeFieldOwnerState<TDate> & {\n        position: RangePosition;\n    }>;\n    separator?: SlotComponentProps<typeof Typography, {}, MultiInputTimeRangeFieldOwnerState<TDate>>;\n}\nexport type UseMultiInputTimeRangeFieldDefaultizedProps<TDate, AdditionalProps extends {}> = UseTimeRangeFieldDefaultizedProps<TDate> & Omit<AdditionalProps, 'value' | 'defaultValue' | 'onChange'>;\n","node_modules/@mui/x-date-pickers-pro/MultiInputTimeRangeField/MultiInputTimeRangeField.d.ts":"import * as React from 'react';\nimport { MultiInputTimeRangeFieldProps } from './MultiInputTimeRangeField.types';\nimport { MultiInputRangeFieldClasses } from '../models';\nexport declare const multiInputTimeRangeFieldClasses: MultiInputRangeFieldClasses;\nexport declare const getMultiInputTimeRangeFieldUtilityClass: (slot: string) => string;\ntype MultiInputTimeRangeFieldComponent = (<TDate>(props: MultiInputTimeRangeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [TimeRangeField](http://mui.com/x/react-date-pickers/time-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [MultiInputTimeRangeField API](https://mui.com/x/api/multi-input-time-range-field/)\n */\ndeclare const MultiInputTimeRangeField: MultiInputTimeRangeFieldComponent;\nexport { MultiInputTimeRangeField };\n","node_modules/@mui/x-date-pickers-pro/MultiInputDateRangeField/index.d.ts":"export { MultiInputDateRangeField, getMultiInputDateRangeFieldUtilityClass, multiInputDateRangeFieldClasses, } from './MultiInputDateRangeField';\nexport { useMultiInputDateRangeField as unstable_useMultiInputDateRangeField } from '../internals/hooks/useMultiInputRangeField/useMultiInputDateRangeField';\nexport type { UseMultiInputDateRangeFieldProps, UseMultiInputDateRangeFieldComponentProps, MultiInputDateRangeFieldProps, } from './MultiInputDateRangeField.types';\n","node_modules/@mui/x-date-pickers-pro/MultiInputDateRangeField/MultiInputDateRangeField.types.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport Typography from '@mui/material/Typography';\nimport Stack, { StackProps } from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport { FieldRef } from '@mui/x-date-pickers/models';\nimport { UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { UseDateRangeFieldProps } from '../internals/models/dateRange';\nimport { RangePosition } from '../internals/models/range';\nimport { UseMultiInputRangeFieldParams } from '../internals/hooks/useMultiInputRangeField/useMultiInputRangeField.types';\nimport { RangeFieldSection } from '../internals/models/fields';\nimport { MultiInputRangeFieldClasses } from '../models';\nexport type UseMultiInputDateRangeFieldParams<TDate, TTextFieldSlotProps extends {}> = UseMultiInputRangeFieldParams<UseMultiInputDateRangeFieldProps<TDate>, TTextFieldSlotProps>;\nexport interface UseMultiInputDateRangeFieldProps<TDate> extends Omit<UseDateRangeFieldProps<TDate>, 'unstableFieldRef' | 'clearable' | 'onClear'> {\n    unstableStartFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n    unstableEndFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n}\nexport type UseMultiInputDateRangeFieldComponentProps<TDate, TChildProps extends {}> = Omit<TChildProps, keyof UseMultiInputDateRangeFieldProps<TDate>> & UseMultiInputDateRangeFieldProps<TDate>;\nexport interface MultiInputDateRangeFieldProps<TDate> extends UseMultiInputDateRangeFieldComponentProps<TDate, Omit<StackProps, 'position'>> {\n    autoFocus?: boolean;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<MultiInputRangeFieldClasses>;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MultiInputDateRangeFieldSlotsComponent;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MultiInputDateRangeFieldSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MultiInputDateRangeFieldSlotsComponent>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MultiInputDateRangeFieldSlotsComponentsProps<TDate>;\n}\nexport type MultiInputDateRangeFieldOwnerState<TDate> = MultiInputDateRangeFieldProps<TDate>;\nexport interface MultiInputDateRangeFieldSlotsComponent {\n    /**\n     * Element rendered at the root.\n     * @default MultiInputDateRangeFieldRoot\n     */\n    Root?: React.ElementType;\n    /**\n     * Form control with an input to render a date.\n     * It is rendered twice: once for the start date and once for the end date.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType;\n    /**\n     * Element rendered between the two inputs.\n     * @default MultiInputDateRangeFieldSeparator\n     */\n    Separator?: React.ElementType;\n}\nexport interface MultiInputDateRangeFieldSlotsComponentsProps<TDate> {\n    root?: SlotComponentProps<typeof Stack, {}, MultiInputDateRangeFieldOwnerState<TDate>>;\n    textField?: SlotComponentProps<typeof TextField, {}, MultiInputDateRangeFieldOwnerState<TDate> & {\n        position: RangePosition;\n    }>;\n    separator?: SlotComponentProps<typeof Typography, {}, MultiInputDateRangeFieldOwnerState<TDate>>;\n}\n","node_modules/@mui/x-date-pickers-pro/MultiInputDateRangeField/MultiInputDateRangeField.d.ts":"import * as React from 'react';\nimport { MultiInputDateRangeFieldProps } from './MultiInputDateRangeField.types';\nimport { MultiInputRangeFieldClasses } from '../models';\nexport declare const multiInputDateRangeFieldClasses: MultiInputRangeFieldClasses;\nexport declare const getMultiInputDateRangeFieldUtilityClass: (slot: string) => string;\ntype MultiInputDateRangeFieldComponent = (<TDate>(props: MultiInputDateRangeFieldProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateRangeField](http://mui.com/x/react-date-pickers/date-range-field/)\n * - [Fields](https://mui.com/x/react-date-pickers/fields/)\n *\n * API:\n *\n * - [MultiInputDateRangeField API](https://mui.com/x/api/multi-input-date-range-field/)\n */\ndeclare const MultiInputDateRangeField: MultiInputDateRangeFieldComponent;\nexport { MultiInputDateRangeField };\n","node_modules/@mui/x-date-pickers-pro/DateRangePicker/shared.d.ts":"import * as React from 'react';\nimport { LocalizedComponent } from '@mui/x-date-pickers/locales';\nimport { DefaultizedProps, BaseDateValidationProps, BasePickerInputProps, PickerViewRendererLookup, UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { DateRangeValidationError } from '../models';\nimport { DateRange } from '../internals/models';\nimport { DateRangeCalendarSlotsComponent, DateRangeCalendarSlotsComponentsProps, ExportedDateRangeCalendarProps } from '../DateRangeCalendar';\nimport { DateRangePickerToolbarProps, ExportedDateRangePickerToolbarProps } from './DateRangePickerToolbar';\nimport { DateRangeViewRendererProps } from '../dateRangeViewRenderers';\nexport interface BaseDateRangePickerSlotsComponent<TDate> extends DateRangeCalendarSlotsComponent<TDate> {\n    /**\n     * Custom component for the toolbar rendered above the views.\n     * @default DateTimePickerToolbar\n     */\n    Toolbar?: React.JSXElementConstructor<DateRangePickerToolbarProps<TDate>>;\n}\nexport interface BaseDateRangePickerSlotsComponentsProps<TDate> extends DateRangeCalendarSlotsComponentsProps<TDate> {\n    toolbar?: ExportedDateRangePickerToolbarProps;\n}\nexport interface BaseDateRangePickerProps<TDate> extends Omit<BasePickerInputProps<DateRange<TDate>, TDate, 'day', DateRangeValidationError>, 'view' | 'views' | 'openTo' | 'onViewChange' | 'orientation'>, ExportedDateRangeCalendarProps<TDate>, BaseDateValidationProps<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: BaseDateRangePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: BaseDateRangePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<BaseDateRangePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: BaseDateRangePickerSlotsComponentsProps<TDate>;\n    /**\n     * Define custom view renderers for each section.\n     * If `null`, the section will only have field editing.\n     * If `undefined`, internally defined view will be the used.\n     */\n    viewRenderers?: Partial<PickerViewRendererLookup<DateRange<TDate>, 'day', DateRangeViewRendererProps<TDate, 'day'>, {}>>;\n}\ntype UseDateRangePickerDefaultizedProps<TDate, Props extends BaseDateRangePickerProps<TDate>> = LocalizedComponent<TDate, DefaultizedProps<Props, keyof BaseDateValidationProps<TDate>>>;\nexport declare function useDateRangePickerDefaultizedProps<TDate, Props extends BaseDateRangePickerProps<TDate>>(props: Props, name: string): UseDateRangePickerDefaultizedProps<TDate, Omit<Props, 'components' | 'componentsProps'>>;\nexport {};\n","node_modules/@mui/x-date-pickers-pro/DateRangePicker/index.d.ts":"export { DateRangePicker } from './DateRangePicker';\nexport type { DateRangePickerProps, DateRangePickerSlotsComponents, DateRangePickerSlotsComponentsProps, } from './DateRangePicker.types';\nexport { DateRangePickerToolbar } from './DateRangePickerToolbar';\nexport type { DateRangePickerToolbarProps } from './DateRangePickerToolbar';\nexport { getDateRangePickerToolbarUtilityClass, dateRangePickerToolbarClasses, } from './dateRangePickerToolbarClasses';\nexport type { DateRangePickerToolbarClasses, DateRangePickerToolbarClassKey, } from './dateRangePickerToolbarClasses';\n","node_modules/@mui/x-date-pickers-pro/DateRangePicker/dateRangePickerToolbarClasses.d.ts":"export interface DateRangePickerToolbarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the container element. */\n    container: string;\n}\nexport type DateRangePickerToolbarClassKey = keyof DateRangePickerToolbarClasses;\nexport declare function getDateRangePickerToolbarUtilityClass(slot: string): string;\nexport declare const dateRangePickerToolbarClasses: DateRangePickerToolbarClasses;\n","node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePickerToolbar.d.ts":"import * as React from 'react';\nimport { BaseToolbarProps, ExportedBaseToolbarProps } from '@mui/x-date-pickers/internals';\nimport { DateRange } from '../internals/models';\nimport { UseRangePositionResponse } from '../internals/hooks/useRangePosition';\nimport { DateRangePickerToolbarClasses } from './dateRangePickerToolbarClasses';\nexport interface DateRangePickerToolbarProps<TDate> extends Omit<BaseToolbarProps<DateRange<TDate>, 'day'>, 'views' | 'view' | 'onViewChange' | 'onChange' | 'isLandscape'>, Pick<UseRangePositionResponse, 'rangePosition' | 'onRangePositionChange'> {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DateRangePickerToolbarClasses>;\n}\nexport interface ExportedDateRangePickerToolbarProps extends ExportedBaseToolbarProps {\n}\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)\n *\n * API:\n *\n * - [DateRangePickerToolbar API](https://mui.com/x/api/date-pickers/date-range-picker-toolbar/)\n */\ndeclare const DateRangePickerToolbar: React.ForwardRefExoticComponent<DateRangePickerToolbarProps<unknown> & React.RefAttributes<HTMLDivElement>>;\nexport { DateRangePickerToolbar };\n","node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.types.d.ts":"import { UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { DesktopDateRangePickerProps, DesktopDateRangePickerSlotsComponent, DesktopDateRangePickerSlotsComponentsProps } from '../DesktopDateRangePicker';\nimport { MobileDateRangePickerProps, MobileDateRangePickerSlotsComponent, MobileDateRangePickerSlotsComponentsProps } from '../MobileDateRangePicker';\nexport interface DateRangePickerSlotsComponents<TDate> extends DesktopDateRangePickerSlotsComponent<TDate>, MobileDateRangePickerSlotsComponent<TDate> {\n}\nexport interface DateRangePickerSlotsComponentsProps<TDate> extends DesktopDateRangePickerSlotsComponentsProps<TDate>, MobileDateRangePickerSlotsComponentsProps<TDate> {\n}\nexport interface DateRangePickerProps<TDate> extends DesktopDateRangePickerProps<TDate>, MobileDateRangePickerProps<TDate> {\n    /**\n     * CSS media query when `Mobile` mode will be changed to `Desktop`.\n     * @default '@media (pointer: fine)'\n     * @example '@media (min-width: 720px)' or theme.breakpoints.up(\"sm\")\n     */\n    desktopModeMediaQuery?: string;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DateRangePickerSlotsComponents<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DateRangePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DateRangePickerSlotsComponents<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DateRangePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers-pro/DateRangePicker/DateRangePicker.d.ts":"import * as React from 'react';\nimport { DateRangePickerProps } from './DateRangePicker.types';\ntype DatePickerComponent = (<TDate>(props: DateRangePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [DateRangePicker API](https://mui.com/x/api/date-pickers/date-range-picker/)\n */\ndeclare const DateRangePicker: DatePickerComponent;\nexport { DateRangePicker };\n","node_modules/@mui/x-date-pickers-pro/MobileDateRangePicker/index.d.ts":"export { MobileDateRangePicker } from './MobileDateRangePicker';\nexport type { MobileDateRangePickerProps, MobileDateRangePickerSlotsComponent, MobileDateRangePickerSlotsComponentsProps, } from './MobileDateRangePicker.types';\n","node_modules/@mui/x-date-pickers-pro/MobileDateRangePicker/MobileDateRangePicker.types.d.ts":"import { MakeOptional, UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { UseMobileRangePickerSlotsComponent, UseMobileRangePickerSlotsComponentsProps, MobileRangeOnlyPickerProps } from '../internals/hooks/useMobileRangePicker';\nimport { BaseDateRangePickerProps, BaseDateRangePickerSlotsComponent, BaseDateRangePickerSlotsComponentsProps } from '../DateRangePicker/shared';\nexport interface MobileDateRangePickerSlotsComponent<TDate> extends BaseDateRangePickerSlotsComponent<TDate>, MakeOptional<UseMobileRangePickerSlotsComponent<TDate, 'day'>, 'Field'> {\n}\nexport interface MobileDateRangePickerSlotsComponentsProps<TDate> extends BaseDateRangePickerSlotsComponentsProps<TDate>, UseMobileRangePickerSlotsComponentsProps<TDate, 'day'> {\n}\nexport interface MobileDateRangePickerProps<TDate> extends BaseDateRangePickerProps<TDate>, MobileRangeOnlyPickerProps<TDate> {\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: MobileDateRangePickerSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: MobileDateRangePickerSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<MobileDateRangePickerSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: MobileDateRangePickerSlotsComponentsProps<TDate>;\n}\n","node_modules/@mui/x-date-pickers-pro/MobileDateRangePicker/MobileDateRangePicker.d.ts":"import * as React from 'react';\nimport { MobileDateRangePickerProps } from './MobileDateRangePicker.types';\ntype MobileDateRangePickerComponent = (<TDate>(props: MobileDateRangePickerProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [Validation](https://mui.com/x/react-date-pickers/validation/)\n *\n * API:\n *\n * - [MobileDateRangePicker API](https://mui.com/x/api/date-pickers/mobile-date-range-picker/)\n */\ndeclare const MobileDateRangePicker: MobileDateRangePickerComponent;\nexport { MobileDateRangePicker };\n","node_modules/@mui/x-date-pickers-pro/DateRangeCalendar/useDragRange.d.ts":"import * as React from 'react';\nimport { MuiPickersAdapter, PickersTimezone } from '@mui/x-date-pickers/models';\nimport { DateRangePosition } from './DateRangeCalendar.types';\nimport { DateRange } from '../internals/models';\ninterface UseDragRangeParams<TDate> {\n    disableDragEditing?: boolean;\n    utils: MuiPickersAdapter<TDate>;\n    setRangeDragDay: (value: TDate | null) => void;\n    setIsDragging: (value: boolean) => void;\n    isDragging: boolean;\n    onDatePositionChange: (position: DateRangePosition) => void;\n    onDrop: (newDate: TDate) => void;\n    dateRange: DateRange<TDate>;\n    timezone: PickersTimezone;\n}\ninterface UseDragRangeEvents {\n    onDragStart?: React.DragEventHandler<HTMLButtonElement>;\n    onDragEnter?: React.DragEventHandler<HTMLButtonElement>;\n    onDragLeave?: React.DragEventHandler<HTMLButtonElement>;\n    onDragOver?: React.DragEventHandler<HTMLButtonElement>;\n    onDragEnd?: React.DragEventHandler<HTMLButtonElement>;\n    onDrop?: React.DragEventHandler<HTMLButtonElement>;\n    onTouchStart?: React.TouchEventHandler<HTMLButtonElement>;\n    onTouchMove?: React.TouchEventHandler<HTMLButtonElement>;\n    onTouchEnd?: React.TouchEventHandler<HTMLButtonElement>;\n}\ninterface UseDragRangeResponse<TDate> extends UseDragRangeEvents {\n    isDragging: boolean;\n    rangeDragDay: TDate | null;\n    draggingDatePosition: DateRangePosition | null;\n}\nexport declare const useDragRange: <TDate>({ disableDragEditing, utils, onDatePositionChange, onDrop, dateRange, timezone, }: Omit<UseDragRangeParams<TDate>, \"isDragging\" | \"setRangeDragDay\" | \"setIsDragging\">) => UseDragRangeResponse<TDate>;\nexport {};\n","node_modules/@mui/x-date-pickers-pro/DateRangeCalendar/index.d.ts":"export { DateRangeCalendar } from './DateRangeCalendar';\nexport type { DateRangeCalendarProps, DateRangeCalendarSlotsComponent, DateRangeCalendarSlotsComponentsProps, ExportedDateRangeCalendarProps, } from './DateRangeCalendar.types';\nexport { getDateRangeCalendarUtilityClass, dateRangeCalendarClasses, } from './dateRangeCalendarClasses';\nexport type { DateRangeCalendarClassKey, DateRangeCalendarClasses, } from './dateRangeCalendarClasses';\n","node_modules/@mui/x-date-pickers-pro/DateRangeCalendar/dateRangeCalendarClasses.d.ts":"export interface DateRangeCalendarClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the container of a month. */\n    monthContainer: string;\n    /** Styles applied to the day calendar container when dragging */\n    dayDragging: string;\n}\nexport type DateRangeCalendarClassKey = keyof DateRangeCalendarClasses;\nexport declare const getDateRangeCalendarUtilityClass: (slot: string) => string;\nexport declare const dateRangeCalendarClasses: DateRangeCalendarClasses;\n","node_modules/@mui/x-date-pickers-pro/DateRangeCalendar/DateRangeCalendar.types.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { Theme } from '@mui/material/styles';\nimport { TimezoneProps } from '@mui/x-date-pickers/models';\nimport { PickersCalendarHeaderSlotsComponent, PickersCalendarHeaderSlotsComponentsProps } from '@mui/x-date-pickers/PickersCalendarHeader';\nimport { BaseDateValidationProps, DefaultizedProps, ExportedDayCalendarProps, DayCalendarSlotsComponent, DayCalendarSlotsComponentsProps, PickersArrowSwitcherSlotsComponent, PickersArrowSwitcherSlotsComponentsProps, PickerSelectionState, DayCalendarProps, ExportedUseViewsOptions, UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { DateRange, DayRangeValidationProps } from '../internals/models';\nimport { DateRangeCalendarClasses } from './dateRangeCalendarClasses';\nimport { DateRangePickerDay, DateRangePickerDayProps } from '../DateRangePickerDay';\nimport { UseRangePositionProps } from '../internals/hooks/useRangePosition';\nexport type DateRangePosition = 'start' | 'end';\nexport interface DateRangeCalendarSlotsComponent<TDate> extends PickersArrowSwitcherSlotsComponent, Omit<DayCalendarSlotsComponent<TDate>, 'Day'>, PickersCalendarHeaderSlotsComponent {\n    /**\n     * Custom component for day in range pickers.\n     * Check the [DateRangePickersDay](https://mui.com/x/api/date-pickers/date-range-picker-day/) component.\n     * @default DateRangePickersDay\n     */\n    Day?: React.ElementType<DateRangePickerDayProps<TDate>>;\n}\nexport interface DateRangeCalendarSlotsComponentsProps<TDate> extends PickersArrowSwitcherSlotsComponentsProps, Omit<DayCalendarSlotsComponentsProps<TDate>, 'day'>, PickersCalendarHeaderSlotsComponentsProps<TDate> {\n    day?: SlotComponentProps<typeof DateRangePickerDay, {}, DayCalendarProps<TDate> & {\n        day: TDate;\n        selected: boolean;\n    }>;\n}\nexport interface ExportedDateRangeCalendarProps<TDate> extends ExportedDayCalendarProps<TDate>, BaseDateValidationProps<TDate>, DayRangeValidationProps<TDate>, TimezoneProps, Pick<ExportedUseViewsOptions<'day'>, 'autoFocus'> {\n    /**\n     * If `true`, after selecting `start` date calendar will not automatically switch to the month of `end` date.\n     * @default false\n     */\n    disableAutoMonthSwitching?: boolean;\n    /**\n     * Default calendar month displayed when `value={[null, null]}`.\n     * @deprecated Consider using `referenceDate` instead.\n     */\n    defaultCalendarMonth?: TDate;\n    /**\n     * If `true`, the picker and text field are disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * Make picker read only.\n     * @default false\n     */\n    readOnly?: boolean;\n    /**\n     * If `true`, disable heavy animations.\n     * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13\n     */\n    reduceAnimations?: boolean;\n    /**\n     * Callback fired on month change.\n     * @template TDate\n     * @param {TDate} month The new month.\n     */\n    onMonthChange?: (month: TDate) => void;\n    /**\n     * Position the current month is rendered in.\n     * @default 1\n     */\n    currentMonthCalendarPosition?: 1 | 2 | 3;\n    /**\n     * If `true`, editing dates by dragging is disabled.\n     * @default false\n     */\n    disableDragEditing?: boolean;\n}\nexport interface DateRangeCalendarProps<TDate> extends ExportedDateRangeCalendarProps<TDate>, UseRangePositionProps {\n    /**\n     * The selected value.\n     * Used when the component is controlled.\n     */\n    value?: DateRange<TDate>;\n    /**\n     * The default selected value.\n     * Used when the component is not controlled.\n     */\n    defaultValue?: DateRange<TDate>;\n    /**\n     * The date used to generate the new value when both `value` and `defaultValue` are empty.\n     * @default The closest valid date using the validation props, except callbacks such as `shouldDisableDate`.\n     */\n    referenceDate?: TDate;\n    /**\n     * Callback fired when the value changes.\n     * @template TDate\n     * @param {DateRange<TDate>} value The new value.\n     * @param {PickerSelectionState | undefined} selectionState Indicates if the date range selection is complete.\n     */\n    onChange?: (value: DateRange<TDate>, selectionState?: PickerSelectionState) => void;\n    /**\n     * The number of calendars to render.\n     * @default 2\n     */\n    calendars?: 1 | 2 | 3;\n    className?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DateRangeCalendarClasses>;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Overridable components.\n     * @default {}\n     * @deprecated Please use `slots`.\n     */\n    components?: DateRangeCalendarSlotsComponent<TDate>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     * @deprecated Please use `slotProps`.\n     */\n    componentsProps?: DateRangeCalendarSlotsComponentsProps<TDate>;\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<DateRangeCalendarSlotsComponent<TDate>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: DateRangeCalendarSlotsComponentsProps<TDate>;\n}\nexport interface DateRangeCalendarOwnerState<TDate> extends DateRangeCalendarProps<TDate> {\n    isDragging: boolean;\n}\nexport type DateRangeCalendarDefaultizedProps<TDate> = DefaultizedProps<DateRangeCalendarProps<TDate>, 'reduceAnimations' | 'calendars' | 'disableDragEditing' | keyof BaseDateValidationProps<TDate>>;\n","node_modules/@mui/x-date-pickers-pro/DateRangeCalendar/DateRangeCalendar.d.ts":"import * as React from 'react';\nimport { DateRangeCalendarProps } from './DateRangeCalendar.types';\ntype DateRangeCalendarComponent = (<TDate>(props: DateRangeCalendarProps<TDate> & React.RefAttributes<HTMLDivElement>) => React.JSX.Element) & {\n    propTypes?: any;\n};\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n * - [DateRangeCalendar](https://mui.com/x/react-date-pickers/date-range-calendar/)\n *\n * API:\n *\n * - [DateRangeCalendar API](https://mui.com/x/api/date-pickers/date-range-calendar/)\n */\ndeclare const DateRangeCalendar: DateRangeCalendarComponent;\nexport { DateRangeCalendar };\n","node_modules/@mui/x-date-pickers-pro/DateRangePickerDay/index.d.ts":"export { DateRangePickerDay } from './DateRangePickerDay';\nexport type { DateRangePickerDayProps } from './DateRangePickerDay';\nexport { getDateRangePickerDayUtilityClass, dateRangePickerDayClasses, } from './dateRangePickerDayClasses';\nexport type { DateRangePickerDayClasses, DateRangePickerDayClassKey, } from './dateRangePickerDayClasses';\n","node_modules/@mui/x-date-pickers-pro/DateRangePickerDay/dateRangePickerDayClasses.d.ts":"export interface DateRangePickerDayClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `isHighlighting=true`. */\n    rangeIntervalDayHighlight: string;\n    /** Styles applied to the root element if `isStartOfHighlighting=true`. */\n    rangeIntervalDayHighlightStart: string;\n    /** Styles applied to the root element if `isEndOfHighlighting=true`. */\n    rangeIntervalDayHighlightEnd: string;\n    /** Styles applied to the preview element. */\n    rangeIntervalPreview: string;\n    /** Styles applied to the root element if `isPreviewing=true`. */\n    rangeIntervalDayPreview: string;\n    /** Styles applied to the root element if `isStartOfPreviewing=true`. */\n    rangeIntervalDayPreviewStart: string;\n    /** Styles applied to the root element if `isEndOfPreviewing=true`. */\n    rangeIntervalDayPreviewEnd: string;\n    /** Styles applied to the root element if `outsideCurrentMonth=true` */\n    outsideCurrentMonth: string;\n    /** Styles applied to the root element if `day` is the start of the month. */\n    startOfMonth: string;\n    /** Styles applied to the root element if `day` is the end of the month. */\n    endOfMonth: string;\n    /** Styles applied to the root element if `day` is the first visible cell of the month. */\n    firstVisibleCell: string;\n    /** Styles applied to the root element if `day` is the last visible cell of the month. */\n    lastVisibleCell: string;\n    /** Styles applied to the root element if it is an empty cell used to fill the week. */\n    hiddenDayFiller: string;\n    /** Styles applied to the day element. */\n    day: string;\n    /** Styles applied to the day element if `isHighlighting=false`. */\n    dayOutsideRangeInterval: string;\n    /** Styles applied to the day element if `selected=false` and `isHighlighting=true`. */\n    dayInsideRangeInterval: string;\n    /** Styles applied to the day element if `selected=false`. */\n    notSelectedDate: string;\n}\nexport type DateRangePickerDayClassKey = keyof DateRangePickerDayClasses;\nexport declare function getDateRangePickerDayUtilityClass(slot: string): string;\nexport declare const dateRangePickerDayClasses: DateRangePickerDayClasses;\n","node_modules/@mui/x-date-pickers-pro/DateRangePickerDay/DateRangePickerDay.d.ts":"import * as React from 'react';\nimport { PickersDayProps } from '@mui/x-date-pickers/PickersDay';\nimport { DateRangePickerDayClasses } from './dateRangePickerDayClasses';\nexport interface DateRangePickerDayProps<TDate> extends Omit<PickersDayProps<TDate>, 'classes' | 'onBlur' | 'onFocus' | 'onKeyDown'> {\n    /**\n     * Set to `true` if the `day` is in a highlighted date range.\n     */\n    isHighlighting: boolean;\n    /**\n     * Set to `true` if the `day` is the end of a highlighted date range.\n     */\n    isEndOfHighlighting: boolean;\n    /**\n     * Set to `true` if the `day` is the start of a highlighted date range.\n     */\n    isStartOfHighlighting: boolean;\n    /**\n     * Set to `true` if the `day` is in a preview date range.\n     */\n    isPreviewing: boolean;\n    /**\n     * Set to `true` if the `day` is the end of a previewing date range.\n     */\n    isEndOfPreviewing: boolean;\n    /**\n     * Set to `true` if the `day` is the start of a previewing date range.\n     */\n    isStartOfPreviewing: boolean;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<DateRangePickerDayClasses>;\n    /**\n     * Indicates if the day should be visually selected.\n     */\n    isVisuallySelected?: boolean;\n}\ntype DateRangePickerDayComponent = <TDate>(props: DateRangePickerDayProps<TDate> & React.RefAttributes<HTMLButtonElement>) => React.JSX.Element;\n/**\n * Demos:\n *\n * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePickerDay API](https://mui.com/x/api/date-pickers/date-range-picker-day/)\n */\nexport declare const DateRangePickerDay: DateRangePickerDayComponent;\nexport {};\n","node_modules/@mui/x-date-pickers-pro/AdapterMoment/index.d.ts":"export { AdapterMoment } from '@mui/x-date-pickers/AdapterMoment';\n","node_modules/@mui/x-date-pickers-pro/AdapterLuxon/index.d.ts":"export { AdapterLuxon } from '@mui/x-date-pickers/AdapterLuxon';\n","node_modules/@mui/x-date-pickers-pro/AdapterDayjs/index.d.ts":"export { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\n","node_modules/@mui/x-date-pickers-pro/AdapterDateFnsV3/index.d.ts":"export { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFnsV3';\n","node_modules/@mui/x-date-pickers-pro/AdapterMomentHijri/index.d.ts":"export { AdapterMomentHijri } from '@mui/x-date-pickers/AdapterMomentHijri';\n","node_modules/@mui/x-date-pickers-pro/AdapterMomentJalaali/index.d.ts":"export { AdapterMomentJalaali } from '@mui/x-date-pickers/AdapterMomentJalaali';\n","node_modules/@mui/x-date-pickers-pro/AdapterDateFnsJalali/index.d.ts":"export { AdapterDateFnsJalali } from '@mui/x-date-pickers/AdapterDateFnsJalali';\n","node_modules/@mui/x-date-pickers-pro/AdapterDateFns/index.d.ts":"export { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';\n","node_modules/@mui/x-date-pickers-pro/internals/utils/valueManagers.d.ts":"import { PickerValueManager, FieldValueManager } from '@mui/x-date-pickers/internals';\nimport { DateRange } from '../models/range';\nimport type { DateRangeValidationError, DateTimeRangeValidationError, TimeRangeValidationError } from '../../models';\nimport { RangeFieldSection } from '../models/fields';\nexport type RangePickerValueManager<TValue = [any, any], TDate = any, TError extends DateRangeValidationError | TimeRangeValidationError | DateTimeRangeValidationError = any> = PickerValueManager<TValue, TDate, TError>;\nexport declare const rangeValueManager: RangePickerValueManager;\nexport declare const rangeFieldValueManager: FieldValueManager<DateRange<any>, any, RangeFieldSection>;\n","node_modules/@mui/x-date-pickers-pro/internals/utils/releaseInfo.d.ts":"export declare const getReleaseInfo: () => any;\n","node_modules/@mui/x-date-pickers-pro/internals/utils/date-utils.d.ts":"import { MuiPickersAdapter } from '@mui/x-date-pickers/models';\nimport { DateRange, NonEmptyDateRange } from '../models/range';\nexport declare const isRangeValid: <TDate>(utils: MuiPickersAdapter<TDate, any>, range: DateRange<TDate> | null) => range is NonEmptyDateRange<TDate>;\nexport declare const isWithinRange: <TDate>(utils: MuiPickersAdapter<TDate, any>, day: TDate, range: DateRange<TDate> | null) => boolean;\nexport declare const isStartOfRange: <TDate>(utils: MuiPickersAdapter<TDate, any>, day: TDate, range: DateRange<TDate> | null) => boolean;\nexport declare const isEndOfRange: <TDate>(utils: MuiPickersAdapter<TDate, any>, day: TDate, range: DateRange<TDate> | null) => boolean;\n","node_modules/@mui/x-date-pickers-pro/internals/utils/date-range-manager.d.ts":"import { MuiPickersAdapter } from '@mui/x-date-pickers/models';\nimport { DateRange, RangePosition } from '../models/range';\ninterface CalculateRangeChangeOptions<TDate> {\n    utils: MuiPickersAdapter<TDate>;\n    range: DateRange<TDate>;\n    newDate: TDate | null;\n    rangePosition: RangePosition;\n    /**\n     * Should allow flipping range `start` and `end` dates if the `newDate` would result in a new range creation.\n     *\n     * It is used to allow dragging range `start` date past `end` date essentially becoming the new `end` date and vice versa.\n     */\n    allowRangeFlip?: boolean;\n}\ninterface CalculateRangeChangeResponse<TDate> {\n    nextSelection: RangePosition;\n    newRange: DateRange<TDate>;\n}\nexport declare function calculateRangeChange<TDate>({ utils, range, newDate: selectedDate, rangePosition, allowRangeFlip, }: CalculateRangeChangeOptions<TDate>): CalculateRangeChangeResponse<TDate>;\nexport declare function calculateRangePreview<TDate>(options: CalculateRangeChangeOptions<TDate>): DateRange<TDate>;\nexport {};\n","node_modules/@mui/x-date-pickers-pro/internals/utils/date-fields-utils.d.ts":"import { RangeFieldSection } from '../models/fields';\nexport declare const splitDateRangeSections: (sections: RangeFieldSection[]) => {\n    startDate: RangeFieldSection[];\n    endDate: RangeFieldSection[];\n};\nexport declare const removeLastSeparator: (dateSections: RangeFieldSection[]) => (RangeFieldSection | {\n    separator: null;\n    dateName: \"end\" | \"start\";\n    value: string;\n    format: string;\n    maxLength: number | null;\n    placeholder: string;\n    type: import(\"@mui/x-date-pickers\").FieldSectionType;\n    contentType: import(\"@mui/x-date-pickers\").FieldSectionContentType;\n    hasLeadingZeros: boolean;\n    hasLeadingZerosInFormat: boolean;\n    hasLeadingZerosInInput: boolean;\n    modified: boolean;\n    start: number;\n    end: number;\n    startInInput: number;\n    endInInput: number;\n    startSeparator: string;\n    endSeparator: string;\n})[];\n","node_modules/@mui/x-date-pickers-pro/internals/models/timeRange.d.ts":"import { BaseTimeValidationProps, TimeValidationProps, DefaultizedProps, MakeOptional, UseFieldInternalProps } from '@mui/x-date-pickers/internals';\nimport { DateRange } from './range';\nimport { TimeRangeValidationError } from '../../models';\nimport { BaseRangeProps } from './dateRange';\nimport { RangeFieldSection } from './fields';\nexport interface UseTimeRangeFieldProps<TDate> extends MakeOptional<UseFieldInternalProps<DateRange<TDate>, TDate, RangeFieldSection, TimeRangeValidationError>, 'format'>, TimeValidationProps<TDate>, BaseTimeValidationProps, BaseRangeProps {\n    /**\n     * 12h/24h view for hour selection clock.\n     * @default `utils.is12HourCycleInCurrentLocale()`\n     */\n    ampm?: boolean;\n}\nexport type UseTimeRangeFieldDefaultizedProps<TDate> = DefaultizedProps<UseTimeRangeFieldProps<TDate>, keyof BaseTimeValidationProps | 'format'>;\n","node_modules/@mui/x-date-pickers-pro/internals/models/rangePickerProps.d.ts":"import * as React from 'react';\n/**\n * Props common to all range non-static pickers.\n * These props are handled by the headless wrappers.\n */\nexport interface BaseRangeNonStaticPickerProps {\n    /**\n     * The label content.\n     * Ignored if the field has several inputs.\n     */\n    label?: React.ReactNode;\n    /**\n     * Pass a ref to the `input` element.\n     * Ignored if the field has several inputs.\n     */\n    inputRef?: React.Ref<HTMLInputElement>;\n    /**\n     * Name attribute used by the `input` element in the Field.\n     * Ignored if the field has several inputs.\n     */\n    name?: string;\n}\n","node_modules/@mui/x-date-pickers-pro/internals/models/range.d.ts":"export type DateRange<TDate> = [TDate | null, TDate | null];\nexport type NonEmptyDateRange<TDate> = [TDate, TDate];\nexport type RangePosition = 'start' | 'end';\n","node_modules/@mui/x-date-pickers-pro/internals/models/index.d.ts":"export * from './dateRange';\nexport * from './range';\nexport * from './dateTimeRange';\nexport * from './timeRange';\nexport * from './fields';\nexport * from './rangePickerProps';\n","node_modules/@mui/x-date-pickers-pro/internals/models/fields.d.ts":"import * as React from 'react';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { BaseFieldProps, FieldsTextFieldProps } from '@mui/x-date-pickers/internals';\nimport { FieldSection } from '@mui/x-date-pickers/models';\nexport interface RangeFieldSection extends FieldSection {\n    dateName: 'start' | 'end';\n}\n/**\n * Props the `textField` slot of the multi input field can receive when used inside a picker.\n */\nexport interface MultiInputFieldSlotTextFieldProps {\n    inputRef?: React.Ref<HTMLInputElement>;\n    disabled?: boolean;\n    readOnly?: boolean;\n    id?: string;\n    label?: React.ReactNode;\n    onKeyDown?: React.KeyboardEventHandler;\n    onFocus?: React.FocusEventHandler;\n    focused?: boolean;\n    InputProps?: Partial<FieldsTextFieldProps['InputProps']>;\n}\n/**\n * Props the `root` slot of the multi input field can receive when used inside a picker.\n */\nexport interface MultiInputFieldSlotRootProps {\n    onBlur?: React.FocusEventHandler;\n}\n/**\n * Props the multi input field can receive when used inside a picker.\n * Only contains what the MUI component are passing to the field, not what users can pass using the `props.slotProps.field`.\n */\nexport interface BaseMultiInputFieldProps<TValue, TDate, TSection extends FieldSection, TError> extends BaseFieldProps<TValue, TDate, TSection, TError> {\n    slots?: {\n        root?: React.ElementType;\n        separator?: React.ElementType;\n        textField?: React.ElementType;\n    };\n    slotProps?: {\n        root?: SlotComponentProps<React.ElementType<MultiInputFieldSlotRootProps>, {}, Record<string, any>>;\n        textField?: SlotComponentProps<React.ElementType<MultiInputFieldSlotTextFieldProps>, {}, {\n            position?: 'start' | 'end';\n        } & Record<string, any>>;\n    };\n}\n","node_modules/@mui/x-date-pickers-pro/internals/models/dateTimeRange.d.ts":"import { BaseDateValidationProps, TimeValidationProps, DefaultizedProps, MakeOptional, UseFieldInternalProps, DateTimeValidationProps } from '@mui/x-date-pickers/internals';\nimport { BaseRangeProps, DayRangeValidationProps } from './dateRange';\nimport { DateRange } from './range';\nimport { DateTimeRangeValidationError } from '../../models';\nimport { RangeFieldSection } from './fields';\nexport interface UseDateTimeRangeFieldProps<TDate> extends MakeOptional<UseFieldInternalProps<DateRange<TDate>, TDate, RangeFieldSection, DateTimeRangeValidationError>, 'format'>, DayRangeValidationProps<TDate>, TimeValidationProps<TDate>, BaseDateValidationProps<TDate>, DateTimeValidationProps<TDate>, BaseRangeProps {\n    /**\n     * 12h/24h view for hour selection clock.\n     * @default `utils.is12HourCycleInCurrentLocale()`\n     */\n    ampm?: boolean;\n}\nexport type UseDateTimeRangeFieldDefaultizedProps<TDate> = DefaultizedProps<UseDateTimeRangeFieldProps<TDate>, keyof BaseDateValidationProps<TDate> | 'format' | 'disableIgnoringDatePartForTimeValidation'>;\n","node_modules/@mui/x-date-pickers-pro/internals/models/dateRange.d.ts":"import { BaseDateValidationProps, DefaultizedProps, MakeOptional, UseFieldInternalProps } from '@mui/x-date-pickers/internals';\nimport { DateRange } from './range';\nimport type { DateRangeValidationError } from '../../models';\nimport { RangeFieldSection } from './fields';\n/**\n * Props used to validate a day value in range pickers.\n */\nexport interface DayRangeValidationProps<TDate> {\n    /**\n     * Disable specific date.\n     *\n     * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.\n     *\n     * @template TDate\n     * @param {TDate} day The date to test.\n     * @param {string} position The date to test, 'start' or 'end'.\n     * @returns {boolean} Returns `true` if the date should be disabled.\n     */\n    shouldDisableDate?: (day: TDate, position: 'start' | 'end') => boolean;\n}\n/**\n * Props used in every range picker.\n */\nexport interface BaseRangeProps {\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n}\nexport interface UseDateRangeFieldProps<TDate> extends MakeOptional<UseFieldInternalProps<DateRange<TDate>, TDate, RangeFieldSection, DateRangeValidationError>, 'format'>, DayRangeValidationProps<TDate>, BaseDateValidationProps<TDate>, BaseRangeProps {\n}\nexport type UseDateRangeFieldDefaultizedProps<TDate> = DefaultizedProps<UseDateRangeFieldProps<TDate>, keyof BaseDateValidationProps<TDate> | 'format'>;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useRangePosition.d.ts":"import * as React from 'react';\nimport { FieldRef } from '@mui/x-date-pickers/models';\nimport { RangePosition } from '../models/range';\nimport { RangeFieldSection } from '../models/fields';\nexport interface UseRangePositionProps {\n    /**\n     * The position in the currently edited date range.\n     * Used when the component position is controlled.\n     */\n    rangePosition?: RangePosition;\n    /**\n     * The initial position in the edited date range.\n     * Used when the component is not controlled.\n     * @default 'start'\n     */\n    defaultRangePosition?: RangePosition;\n    /**\n     * Callback fired when the range position changes.\n     * @param {RangePosition} rangePosition The new range position.\n     */\n    onRangePositionChange?: (rangePosition: RangePosition) => void;\n}\nexport interface UseRangePositionResponse {\n    rangePosition: RangePosition;\n    onRangePositionChange: (newPosition: RangePosition) => void;\n    singleInputFieldRef: React.MutableRefObject<FieldRef<RangeFieldSection> | undefined>;\n}\nexport declare const useRangePosition: (props: UseRangePositionProps) => UseRangePositionResponse;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useEnrichedRangePickerFieldProps.d.ts":"import * as React from 'react';\nimport Stack, { StackProps } from '@mui/material/Stack';\nimport Typography, { TypographyProps } from '@mui/material/Typography';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { SlotComponentProps } from '@mui/base/utils';\nimport { BaseSingleInputFieldProps } from '@mui/x-date-pickers/models';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { PickersInputLocaleText } from '@mui/x-date-pickers/locales';\nimport { BaseFieldProps, UsePickerResponse, WrapperVariant, UncapitalizeObjectKeys, UsePickerProps, FieldSlotsComponents, FieldSlotsComponentsProps } from '@mui/x-date-pickers/internals';\nimport { BaseMultiInputFieldProps, DateRange, RangeFieldSection, RangePosition, UseDateRangeFieldProps } from '../models';\nimport { UseRangePositionResponse } from './useRangePosition';\nexport interface RangePickerFieldSlotsComponent extends FieldSlotsComponents {\n    Field: React.ElementType;\n    /**\n     * Element rendered at the root.\n     * Ignored if the field has only one input.\n     */\n    FieldRoot?: React.ElementType<StackProps>;\n    /**\n     * Element rendered between the two inputs.\n     * Ignored if the field has only one input.\n     */\n    FieldSeparator?: React.ElementType<TypographyProps>;\n    /**\n     * Form control with an input to render a date or time inside the default field.\n     * It is rendered twice: once for the start element and once for the end element.\n     * Receives the same props as `@mui/material/TextField`.\n     * @default TextField from '@mui/material'\n     */\n    TextField?: React.ElementType<TextFieldProps>;\n}\nexport interface RangePickerFieldSlotsComponentsProps<TDate> extends FieldSlotsComponentsProps {\n    field?: SlotComponentProps<React.ElementType<BaseMultiInputFieldProps<DateRange<TDate>, TDate, RangeFieldSection, unknown>>, {}, UsePickerProps<DateRange<TDate>, TDate, any, RangeFieldSection, any, any, any>>;\n    fieldRoot?: SlotComponentProps<typeof Stack, {}, Record<string, any>>;\n    fieldSeparator?: SlotComponentProps<typeof Typography, {}, Record<string, any>>;\n    textField?: SlotComponentProps<typeof TextField, {}, UseDateRangeFieldProps<TDate> & {\n        position?: RangePosition;\n    }>;\n}\nexport interface UseEnrichedRangePickerFieldPropsParams<TDate, TView extends DateOrTimeViewWithMeridiem, TError, FieldProps extends BaseFieldProps<DateRange<TDate>, TDate, RangeFieldSection, TError> = BaseFieldProps<DateRange<TDate>, TDate, RangeFieldSection, TError>> extends Pick<UsePickerResponse<DateRange<TDate>, TView, RangeFieldSection, any>, 'open' | 'actions'>, UseRangePositionResponse {\n    wrapperVariant: WrapperVariant;\n    fieldType: 'single-input' | 'multi-input';\n    readOnly?: boolean;\n    labelId?: string;\n    disableOpenPicker?: boolean;\n    onBlur?: () => void;\n    inputRef?: React.Ref<HTMLInputElement>;\n    label?: React.ReactNode;\n    localeText: PickersInputLocaleText<TDate> | undefined;\n    pickerSlotProps: RangePickerFieldSlotsComponentsProps<TDate> | undefined;\n    pickerSlots: UncapitalizeObjectKeys<RangePickerFieldSlotsComponent> | undefined;\n    fieldProps: FieldProps;\n    anchorRef?: React.Ref<HTMLDivElement>;\n}\nexport declare const useEnrichedRangePickerFieldProps: <TDate, TView extends DateOrTimeViewWithMeridiem, TError>(params: UseEnrichedRangePickerFieldPropsParams<TDate, TView, TError, BaseFieldProps<DateRange<TDate>, TDate, RangeFieldSection, TError>>) => BaseMultiInputFieldProps<DateRange<TDate>, TDate, RangeFieldSection, TError> | BaseSingleInputFieldProps<DateRange<TDate>, TDate, RangeFieldSection, TError>;\n","node_modules/@mui/x-date-pickers-pro/internals/utils/validation/validateTimeRange.d.ts":"import { TimezoneProps } from '@mui/x-date-pickers/models';\nimport { Validator, BaseTimeValidationProps, DefaultizedProps } from '@mui/x-date-pickers/internals';\nimport { DateRange } from '../../models/range';\nimport { TimeRangeValidationError } from '../../../models';\nexport interface TimeRangeComponentValidationProps extends Required<BaseTimeValidationProps>, DefaultizedProps<TimezoneProps, 'timezone'> {\n}\nexport declare const validateTimeRange: Validator<DateRange<any>, any, TimeRangeValidationError, TimeRangeComponentValidationProps>;\n","node_modules/@mui/x-date-pickers-pro/internals/utils/validation/validateDateTimeRange.d.ts":"import { TimezoneProps } from '@mui/x-date-pickers/models';\nimport { Validator, BaseDateValidationProps, TimeValidationProps, DefaultizedProps } from '@mui/x-date-pickers/internals';\nimport { DayRangeValidationProps } from '../../models/dateRange';\nimport { DateRange } from '../../models/range';\nimport { DateTimeRangeValidationError } from '../../../models';\nexport interface DateTimeRangeComponentValidationProps<TDate> extends DayRangeValidationProps<TDate>, TimeValidationProps<TDate>, Required<BaseDateValidationProps<TDate>>, DefaultizedProps<TimezoneProps, 'timezone'> {\n}\nexport declare const validateDateTimeRange: Validator<DateRange<any>, any, DateTimeRangeValidationError, DateTimeRangeComponentValidationProps<any>>;\n","node_modules/@mui/x-date-pickers-pro/internals/utils/validation/validateDateRange.d.ts":"import { TimezoneProps } from '@mui/x-date-pickers/models';\nimport { Validator, BaseDateValidationProps, DefaultizedProps } from '@mui/x-date-pickers/internals';\nimport { DateRange, DayRangeValidationProps } from '../../models';\nimport { DateRangeValidationError } from '../../../models';\nexport interface DateRangeComponentValidationProps<TDate> extends DayRangeValidationProps<TDate>, Required<BaseDateValidationProps<TDate>>, DefaultizedProps<TimezoneProps, 'timezone'> {\n}\nexport declare const validateDateRange: Validator<DateRange<any>, any, DateRangeValidationError, DateRangeComponentValidationProps<any>>;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useStaticRangePicker/useStaticRangePicker.types.d.ts":"import * as React from 'react';\nimport { BasePickerProps, UsePickerParams, ExportedBaseToolbarProps, StaticOnlyPickerProps, UncapitalizeObjectKeys } from '@mui/x-date-pickers/internals';\nimport { ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps } from '@mui/x-date-pickers/PickersLayout';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { DateRange } from '../../models/range';\nimport { UseRangePositionProps } from '../useRangePosition';\nimport { RangeFieldSection } from '../../models/fields';\nexport interface UseStaticRangePickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedPickersLayoutSlotsComponent<DateRange<TDate>, TDate, TView> {\n}\nexport interface UseStaticRangePickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends ExportedPickersLayoutSlotsComponentsProps<DateRange<TDate>, TDate, TView> {\n    toolbar?: ExportedBaseToolbarProps;\n}\nexport interface StaticRangeOnlyPickerProps extends StaticOnlyPickerProps, UseRangePositionProps {\n}\nexport interface UseStaticRangePickerProps<TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UseStaticRangePickerProps<TDate, TView, any, TExternalProps>> extends BasePickerProps<DateRange<TDate>, TDate, TView, TError, TExternalProps, {}>, StaticRangeOnlyPickerProps {\n    /**\n     * Overridable components.\n     * @default {}\n     */\n    slots?: UncapitalizeObjectKeys<UseStaticRangePickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: UseStaticRangePickerSlotsComponentsProps<TDate, TView>;\n}\nexport interface UseStaticRangePickerParams<TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseStaticRangePickerProps<TDate, TView, any, TExternalProps>> extends Pick<UsePickerParams<DateRange<TDate>, TDate, TView, RangeFieldSection, TExternalProps, {}>, 'valueManager' | 'valueType' | 'validator'> {\n    props: TExternalProps;\n    /**\n     * Ref to pass to the root element\n     */\n    ref: React.Ref<HTMLDivElement> | undefined;\n}\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useStaticRangePicker/useStaticRangePicker.d.ts":"import * as React from 'react';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { UseStaticRangePickerParams, UseStaticRangePickerProps } from './useStaticRangePicker.types';\n/**\n * Hook managing all the range static pickers:\n * - StaticDateRangePicker\n */\nexport declare const useStaticRangePicker: <TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseStaticRangePickerProps<TDate, TView, any, TExternalProps>>({ props, ref, ...pickerParams }: UseStaticRangePickerParams<TDate, TView, TExternalProps>) => {\n    renderPicker: () => React.JSX.Element;\n};\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useStaticRangePicker/index.d.ts":"export { useStaticRangePicker } from './useStaticRangePicker';\nexport type { UseStaticRangePickerSlotsComponent, UseStaticRangePickerSlotsComponentsProps, StaticRangeOnlyPickerProps, } from './useStaticRangePicker.types';\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMultiInputRangeField/useMultiInputTimeRangeField.d.ts":"import type { UseMultiInputTimeRangeFieldDefaultizedProps, UseMultiInputTimeRangeFieldParams, UseMultiInputTimeRangeFieldProps } from '../../../MultiInputTimeRangeField/MultiInputTimeRangeField.types';\nimport type { UseMultiInputRangeFieldResponse } from './useMultiInputRangeField.types';\nexport declare const useDefaultizedTimeRangeFieldProps: <TDate, AdditionalProps extends {}>(props: UseMultiInputTimeRangeFieldProps<TDate>) => UseMultiInputTimeRangeFieldDefaultizedProps<TDate, AdditionalProps>;\nexport declare const useMultiInputTimeRangeField: <TDate, TTextFieldSlotProps extends {}>({ sharedProps: inSharedProps, startTextFieldProps, startInputRef, unstableStartFieldRef, endTextFieldProps, endInputRef, unstableEndFieldRef, }: UseMultiInputTimeRangeFieldParams<TDate, TTextFieldSlotProps>) => UseMultiInputRangeFieldResponse<TTextFieldSlotProps>;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMultiInputRangeField/useMultiInputRangeField.types.d.ts":"import * as React from 'react';\nimport { FieldRef } from '@mui/x-date-pickers/models';\nimport { UseFieldResponse } from '@mui/x-date-pickers/internals';\nimport { RangeFieldSection } from '../../models/fields';\nexport interface UseMultiInputRangeFieldParams<TSharedProps extends {}, TTextFieldSlotProps extends {}> {\n    sharedProps: TSharedProps;\n    startTextFieldProps: TTextFieldSlotProps;\n    startInputRef?: React.Ref<HTMLInputElement>;\n    unstableStartFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n    endTextFieldProps: TTextFieldSlotProps;\n    endInputRef?: React.Ref<HTMLInputElement>;\n    unstableEndFieldRef?: React.Ref<FieldRef<RangeFieldSection>>;\n}\nexport interface UseMultiInputRangeFieldResponse<TForwardedProps extends {}> {\n    startDate: UseFieldResponse<TForwardedProps>;\n    endDate: UseFieldResponse<TForwardedProps>;\n}\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMultiInputRangeField/useMultiInputDateTimeRangeField.d.ts":"import type { UseMultiInputDateTimeRangeFieldDefaultizedProps, UseMultiInputDateTimeRangeFieldParams, UseMultiInputDateTimeRangeFieldProps } from '../../../MultiInputDateTimeRangeField/MultiInputDateTimeRangeField.types';\nimport type { UseMultiInputRangeFieldResponse } from './useMultiInputRangeField.types';\nexport declare const useDefaultizedDateTimeRangeFieldProps: <TDate, AdditionalProps extends {}>(props: UseMultiInputDateTimeRangeFieldProps<TDate>) => UseMultiInputDateTimeRangeFieldDefaultizedProps<TDate, AdditionalProps>;\nexport declare const useMultiInputDateTimeRangeField: <TDate, TTextFieldSlotProps extends {}>({ sharedProps: inSharedProps, startTextFieldProps, startInputRef, unstableStartFieldRef, endTextFieldProps, endInputRef, unstableEndFieldRef, }: UseMultiInputDateTimeRangeFieldParams<TDate, TTextFieldSlotProps>) => UseMultiInputRangeFieldResponse<TTextFieldSlotProps>;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMultiInputRangeField/useMultiInputDateRangeField.d.ts":"import { UseMultiInputDateRangeFieldParams } from '../../../MultiInputDateRangeField/MultiInputDateRangeField.types';\nimport type { UseMultiInputRangeFieldResponse } from './useMultiInputRangeField.types';\nexport declare const useMultiInputDateRangeField: <TDate, TTextFieldSlotProps extends {}>({ sharedProps: inSharedProps, startTextFieldProps, startInputRef, unstableStartFieldRef, endTextFieldProps, endInputRef, unstableEndFieldRef, }: UseMultiInputDateRangeFieldParams<TDate, TTextFieldSlotProps>) => UseMultiInputRangeFieldResponse<TTextFieldSlotProps>;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMultiInputRangeField/shared.d.ts":"export declare const excludeProps: <TProps extends {}>(props: TProps, excludedProps: (keyof TProps)[]) => TProps;\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useDesktopRangePicker/useDesktopRangePicker.types.d.ts":"import { UsePickerParams, BasePickerProps, PickersPopperSlotsComponent, PickersPopperSlotsComponentsProps, ExportedBaseToolbarProps, UsePickerViewsProps, UncapitalizeObjectKeys, BaseNonStaticPickerProps, UsePickerValueNonStaticProps, UsePickerViewsNonStaticProps } from '@mui/x-date-pickers/internals';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps } from '@mui/x-date-pickers/PickersLayout';\nimport { DateRange, RangeFieldSection, BaseRangeNonStaticPickerProps } from '../../models';\nimport { UseRangePositionProps, UseRangePositionResponse } from '../useRangePosition';\nimport { RangePickerFieldSlotsComponent, RangePickerFieldSlotsComponentsProps } from '../useEnrichedRangePickerFieldProps';\nexport interface UseDesktopRangePickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersPopperSlotsComponent, ExportedPickersLayoutSlotsComponent<DateRange<TDate>, TDate, TView>, RangePickerFieldSlotsComponent {\n}\nexport interface UseDesktopRangePickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersPopperSlotsComponentsProps, ExportedPickersLayoutSlotsComponentsProps<DateRange<TDate>, TDate, TView>, RangePickerFieldSlotsComponentsProps<TDate> {\n    toolbar?: ExportedBaseToolbarProps;\n}\nexport interface DesktopRangeOnlyPickerProps<TDate> extends BaseNonStaticPickerProps, UsePickerValueNonStaticProps<TDate | null, RangeFieldSection>, UsePickerViewsNonStaticProps, BaseRangeNonStaticPickerProps, UseRangePositionProps {\n    /**\n     * If `true`, the start `input` element is focused during the first mount.\n     */\n    autoFocus?: boolean;\n}\nexport interface UseDesktopRangePickerProps<TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<any, any, TView, any, any>> extends DesktopRangeOnlyPickerProps<TDate>, BasePickerProps<DateRange<TDate>, TDate, TView, TError, TExternalProps, DesktopRangePickerAdditionalViewProps> {\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots: UncapitalizeObjectKeys<UseDesktopRangePickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: UseDesktopRangePickerSlotsComponentsProps<TDate, TView>;\n}\nexport interface DesktopRangePickerAdditionalViewProps extends Pick<UseRangePositionResponse, 'rangePosition' | 'onRangePositionChange'> {\n}\nexport interface UseDesktopRangePickerParams<TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseDesktopRangePickerProps<TDate, TView, any, TExternalProps>> extends Pick<UsePickerParams<DateRange<TDate>, TDate, TView, RangeFieldSection, TExternalProps, DesktopRangePickerAdditionalViewProps>, 'valueManager' | 'valueType' | 'validator'> {\n    props: TExternalProps;\n}\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useDesktopRangePicker/useDesktopRangePicker.d.ts":"import * as React from 'react';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { UseDesktopRangePickerParams, UseDesktopRangePickerProps } from './useDesktopRangePicker.types';\nexport declare const useDesktopRangePicker: <TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseDesktopRangePickerProps<TDate, TView, any, TExternalProps>>({ props, ...pickerParams }: UseDesktopRangePickerParams<TDate, TView, TExternalProps>) => {\n    renderPicker: () => React.JSX.Element;\n};\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useDesktopRangePicker/index.d.ts":"export { useDesktopRangePicker } from './useDesktopRangePicker';\nexport type { UseDesktopRangePickerSlotsComponent, UseDesktopRangePickerSlotsComponentsProps, DesktopRangeOnlyPickerProps, } from './useDesktopRangePicker.types';\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMobileRangePicker/useMobileRangePicker.types.d.ts":"import { UsePickerParams, BasePickerProps, PickersModalDialogSlotsComponent, PickersModalDialogSlotsComponentsProps, ExportedBaseToolbarProps, UsePickerViewsProps, UncapitalizeObjectKeys, BaseNonStaticPickerProps, UsePickerValueNonStaticProps, UsePickerViewsNonStaticProps } from '@mui/x-date-pickers/internals';\nimport { ExportedPickersLayoutSlotsComponent, ExportedPickersLayoutSlotsComponentsProps } from '@mui/x-date-pickers/PickersLayout';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { DateRange, RangeFieldSection, BaseRangeNonStaticPickerProps } from '../../models';\nimport { UseRangePositionProps, UseRangePositionResponse } from '../useRangePosition';\nimport { RangePickerFieldSlotsComponent, RangePickerFieldSlotsComponentsProps } from '../useEnrichedRangePickerFieldProps';\nexport interface UseMobileRangePickerSlotsComponent<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersModalDialogSlotsComponent, ExportedPickersLayoutSlotsComponent<DateRange<TDate>, TDate, TView>, RangePickerFieldSlotsComponent {\n}\nexport interface UseMobileRangePickerSlotsComponentsProps<TDate, TView extends DateOrTimeViewWithMeridiem> extends PickersModalDialogSlotsComponentsProps, ExportedPickersLayoutSlotsComponentsProps<DateRange<TDate>, TDate, TView>, RangePickerFieldSlotsComponentsProps<TDate> {\n    toolbar?: ExportedBaseToolbarProps;\n}\nexport interface MobileRangeOnlyPickerProps<TDate> extends BaseNonStaticPickerProps, UsePickerValueNonStaticProps<TDate | null, RangeFieldSection>, UsePickerViewsNonStaticProps, BaseRangeNonStaticPickerProps, UseRangePositionProps {\n}\nexport interface UseMobileRangePickerProps<TDate, TView extends DateOrTimeViewWithMeridiem, TError, TExternalProps extends UsePickerViewsProps<any, any, TView, any, any>> extends MobileRangeOnlyPickerProps<TDate>, BasePickerProps<DateRange<TDate>, TDate, TView, TError, TExternalProps, MobileRangePickerAdditionalViewProps> {\n    /**\n     * Overridable component slots.\n     * @default {}\n     */\n    slots: UncapitalizeObjectKeys<UseMobileRangePickerSlotsComponent<TDate, TView>>;\n    /**\n     * The props used for each component slot.\n     * @default {}\n     */\n    slotProps?: UseMobileRangePickerSlotsComponentsProps<TDate, TView>;\n}\nexport interface MobileRangePickerAdditionalViewProps extends Pick<UseRangePositionResponse, 'rangePosition' | 'onRangePositionChange'> {\n}\nexport interface UseMobileRangePickerParams<TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseMobileRangePickerProps<TDate, TView, any, TExternalProps>> extends Pick<UsePickerParams<DateRange<TDate>, TDate, TView, RangeFieldSection, TExternalProps, MobileRangePickerAdditionalViewProps>, 'valueManager' | 'valueType' | 'validator'> {\n    props: TExternalProps;\n}\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMobileRangePicker/useMobileRangePicker.d.ts":"import * as React from 'react';\nimport { DateOrTimeViewWithMeridiem } from '@mui/x-date-pickers/internals/models';\nimport { UseMobileRangePickerParams, UseMobileRangePickerProps } from './useMobileRangePicker.types';\nexport declare const useMobileRangePicker: <TDate, TView extends DateOrTimeViewWithMeridiem, TExternalProps extends UseMobileRangePickerProps<TDate, TView, any, TExternalProps>>({ props, ...pickerParams }: UseMobileRangePickerParams<TDate, TView, TExternalProps>) => {\n    renderPicker: () => React.JSX.Element;\n};\n","node_modules/@mui/x-date-pickers-pro/internals/hooks/useMobileRangePicker/index.d.ts":"export { useMobileRangePicker } from './useMobileRangePicker';\nexport type { UseMobileRangePickerSlotsComponent, UseMobileRangePickerSlotsComponentsProps, MobileRangeOnlyPickerProps, } from './useMobileRangePicker.types';\n","node_modules/@mui/x-data-grid/package.json":"{\n  \"name\": \"@mui/x-data-grid\",\n  \"version\": \"6.19.8\",\n  \"description\": \"The community edition of the data grid component (MUI X).\",\n  \"author\": \"MUI Team\",\n  \"main\": \"./node/index.js\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/mui-x/issues\"\n  },\n  \"homepage\": \"https://mui.com/x/react-data-grid/\",\n  \"sideEffects\": false,\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mui\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"material-ui\",\n    \"mui\",\n    \"react-table\",\n    \"table\",\n    \"datatable\",\n    \"data-table\",\n    \"datagrid\",\n    \"data-grid\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/mui-x.git\",\n    \"directory\": \"packages/grid/x-data-grid\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.2\",\n    \"@mui/utils\": \"^5.14.16\",\n    \"clsx\": \"^2.0.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"reselect\": \"^4.1.8\"\n  },\n  \"peerDependencies\": {\n    \"@mui/material\": \"^5.4.1\",\n    \"@mui/system\": \"^5.4.1\",\n    \"react\": \"^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"setupFiles\": [\n    \"<rootDir>/src/setupTests.js\"\n  ],\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"private\": false,\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/x-data-grid/index.d.ts":"import { GridApiCommunity } from './models/api/gridApiCommunity';\nimport { GridInitialStateCommunity, GridStateCommunity } from './models/gridStateCommunity';\nexport { useGridApiContext } from './hooks/utils/useGridApiContext';\nexport { useGridApiRef } from './hooks/utils/useGridApiRef';\nexport { useGridRootProps } from './hooks/utils/useGridRootProps';\nexport * from './DataGrid';\nexport * from './components';\nexport * from './constants';\nexport * from './hooks';\nexport * from './locales';\nexport * from './models';\nexport * from './context';\nexport * from './colDef';\nexport * from './utils';\nexport type { DataGridProps, GridExperimentalFeatures } from './models/props/DataGridProps';\nexport type { GridToolbarExportProps } from './components/toolbar/GridToolbarExport';\nexport type { GridExportFormat, GridExportExtension } from './models/gridExport';\nexport { GridColumnHeaders } from './components/GridColumnHeaders';\n/**\n * Reexportable components.\n */\nexport { GridColumnMenu, GRID_COLUMN_MENU_SLOTS, GRID_COLUMN_MENU_SLOT_PROPS, } from './components/reexportable';\n/**\n * The full grid API.\n * @demos\n *   - [API object](/x/react-data-grid/api-object/)\n */\nexport type GridApi = GridApiCommunity;\n/**\n * The state of `DataGrid`.\n */\nexport type GridState = GridStateCommunity;\n/**\n * The initial state of `DataGrid`.\n */\nexport type GridInitialState = GridInitialStateCommunity;\n","node_modules/@mui/x-data-grid/utils/warning.d.ts":"export declare const buildWarning: (message: string | string[], gravity?: 'warning' | 'error') => () => void;\nexport declare const wrapWithWarningOnCall: <F extends Function>(method: F, message: string | string[]) => F | ((...args: any[]) => any);\n","node_modules/@mui/x-data-grid/utils/utils.d.ts":"export declare function isNumber(value: unknown): value is number;\nexport declare function isFunction(value: any): value is Function;\nexport declare function isObject<TObject = Record<PropertyKey, any>>(value: unknown): value is TObject;\nexport declare function localStorageAvailable(): boolean;\nexport declare function escapeRegExp(value: string): string;\n/**\n * Follows the CSS specification behavior for min and max\n * If min > max, then the min have priority\n */\nexport declare const clamp: (value: number, min: number, max: number) => number;\n/**\n * Based on `fast-deep-equal`\n *\n * MIT License\n *\n * Copyright (c) 2017 Evgeny Poberezkin\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * We only type the public interface to avoid dozens of `as` in the function.\n */\nexport declare function isDeepEqual<T>(actual: any, expected: T): actual is T;\nexport declare function randomNumberBetween(seed: number, min: number, max: number): () => number;\nexport declare function deepClone(obj: Record<string, any>): any;\n","node_modules/@mui/x-data-grid/utils/keyboardUtils.d.ts":"import * as React from 'react';\nexport declare const isEscapeKey: (key: string) => boolean;\nexport declare const isEnterKey: (key: string) => boolean;\nexport declare const isTabKey: (key: string) => boolean;\nexport declare const isSpaceKey: (key: string) => boolean;\nexport declare const isArrowKeys: (key: string) => boolean;\nexport declare const isHomeOrEndKeys: (key: string) => boolean;\nexport declare const isPageKeys: (key: string) => boolean;\nexport declare const isDeleteKeys: (key: string) => boolean;\nexport declare function isPrintableKey(event: React.KeyboardEvent<HTMLElement>): boolean;\nexport declare const GRID_MULTIPLE_SELECTION_KEYS: string[];\nexport declare const GRID_CELL_EXIT_EDIT_MODE_KEYS: string[];\nexport declare const GRID_CELL_EDIT_COMMIT_KEYS: string[];\nexport declare const isMultipleKey: (key: string) => boolean;\nexport declare const isCellEnterEditModeKeys: (event: React.KeyboardEvent<HTMLElement>) => boolean;\nexport declare const isCellExitEditModeKeys: (key: string) => boolean;\nexport declare const isCellEditCommitKeys: (key: string) => boolean;\nexport declare const isNavigationKey: (key: string) => boolean;\nexport declare const isKeyboardEvent: (event: any) => event is React.KeyboardEvent<HTMLElement>;\nexport declare const isHideMenuKey: (key: React.KeyboardEvent['key']) => boolean;\n","node_modules/@mui/x-data-grid/utils/index.d.ts":"export type { OutputSelector } from './createSelector';\n","node_modules/@mui/x-data-grid/utils/getPublicApiRef.d.ts":"/// <reference types=\"react\" />\nimport type { GridPrivateApiCommunity } from '../models/api/gridApiCommunity';\nexport declare function getPublicApiRef<PrivateApi extends GridPrivateApiCommunity>(apiRef: React.MutableRefObject<PrivateApi>): import(\"react\").MutableRefObject<ReturnType<PrivateApi[\"getPublicApi\"]>>;\n","node_modules/@mui/x-data-grid/utils/getGridLocalization.d.ts":"import { Localization as CoreLocalization } from '@mui/material/locale';\nimport { GridLocaleText } from '../models/api/gridLocaleTextApi';\nexport interface Localization {\n    components: {\n        MuiDataGrid: {\n            defaultProps: {\n                localeText: Partial<GridLocaleText>;\n            };\n        };\n    };\n}\nexport declare const getGridLocalization: (gridTranslations: Partial<GridLocaleText>, coreTranslations?: CoreLocalization) => Localization;\n","node_modules/@mui/x-data-grid/utils/fastObjectShallowCompare.d.ts":"export declare function fastObjectShallowCompare<T extends Record<string, any> | null>(a: T, b: T): boolean;\n","node_modules/@mui/x-data-grid/utils/fastMemo.d.ts":"export declare function fastMemo<T>(component: T): T;\n","node_modules/@mui/x-data-grid/utils/exportAs.d.ts":"import { GridExportExtension } from '../models/gridExport';\n/**\n * I have hesitated to use https://github.com/eligrey/FileSaver.js.\n * If we get bug reports that this project solves, we should consider using it.\n *\n * Related resources.\n * https://blog.logrocket.com/programmatic-file-downloads-in-the-browser-9a5186298d5c/\n * https://github.com/mbrn/filefy/blob/ec4ed0b7415d93be7158c23029f2ea1fa0b8e2d9/src/core/BaseBuilder.ts\n * https://unpkg.com/browse/@progress/kendo-file-saver@1.0.7/dist/es/save-as.js\n * https://github.com/ag-grid/ag-grid/blob/9565c219b6210aa85fa833c929d0728f9d163a91/community-modules/csv-export/src/csvExport/downloader.ts\n */\nexport declare function exportAs<ExtraExtensions extends string>(blob: Blob, extension?: GridExportExtension | ExtraExtensions, filename?: string): void;\n","node_modules/@mui/x-data-grid/utils/domUtils.d.ts":"/// <reference types=\"react\" />\nimport { GridRowId } from '../models/gridRows';\nexport declare function isOverflown(element: Element): boolean;\nexport declare function findParentElementFromClassName(elem: Element, className: string): Element | null;\nexport declare function getRowEl(cell?: Element | null): HTMLElement | null;\nexport declare function isGridCellRoot(elem: Element | null): boolean;\nexport declare function isGridHeaderCellRoot(elem: Element | null): boolean;\nexport declare function getGridColumnHeaderElement(root: Element, field: string): HTMLDivElement | null;\nexport declare function getGridRowElement(root: Element, id: GridRowId): HTMLDivElement | null;\nexport declare function getGridCellElement(root: Element, { id, field }: {\n    id: GridRowId;\n    field: string;\n}): HTMLDivElement | null;\nexport declare const getActiveElement: (root?: Document | ShadowRoot) => Element | null;\nexport declare function isEventTargetInPortal(event: React.SyntheticEvent): boolean;\n","node_modules/@mui/x-data-grid/utils/doesSupportPreventScroll.d.ts":"export declare function doesSupportPreventScroll(): boolean;\n","node_modules/@mui/x-data-grid/utils/createSelector.d.ts":"import * as React from 'react';\nimport { Selector, SelectorResultArray } from 'reselect';\nimport type { GridCoreApi } from '../models/api/gridCoreApi';\nexport interface OutputSelector<State, Result> {\n    (apiRef: React.MutableRefObject<{\n        state: State;\n        instanceId: GridCoreApi['instanceId'];\n    }>): Result;\n    (state: State, instanceId?: GridCoreApi['instanceId']): Result;\n    acceptsApiRef: boolean;\n}\ntype StateFromSelector<T> = T extends (first: infer F, ...args: any[]) => any ? F extends {\n    state: infer F2;\n} ? F2 : F : never;\ntype StateFromSelectorList<Selectors extends readonly any[]> = Selectors extends [\n    f: infer F,\n    ...rest: infer R\n] ? StateFromSelector<F> extends StateFromSelectorList<R> ? StateFromSelector<F> : StateFromSelectorList<R> : {};\ntype SelectorArgs<Selectors extends ReadonlyArray<Selector<any>>, Result> = [selectors: [...Selectors], combiner: (...args: SelectorResultArray<Selectors>) => Result] | [...Selectors, (...args: SelectorResultArray<Selectors>) => Result];\ntype CreateSelectorFunction = <Selectors extends ReadonlyArray<Selector<any>>, Result>(...items: SelectorArgs<Selectors, Result>) => OutputSelector<StateFromSelectorList<Selectors>, Result>;\nexport declare const createSelector: CreateSelectorFunction;\nexport declare const createSelectorMemoized: CreateSelectorFunction;\nexport declare const unstable_resetCreateSelectorCache: () => void;\nexport {};\n","node_modules/@mui/x-data-grid/utils/createControllablePromise.d.ts":"export type ControllablePromise<T = unknown> = Promise<T> & {\n    resolve: T extends unknown ? (value?: T) => void : (value: T) => void;\n    reject: (reason?: any) => void;\n};\nexport declare function createControllablePromise(): ControllablePromise<unknown>;\n","node_modules/@mui/x-data-grid/utils/Store.d.ts":"type Listener<T> = (value: T) => void;\nexport declare class Store<T> {\n    value: T;\n    listeners: Set<Listener<T>>;\n    static create<T>(value: T): Store<T>;\n    constructor(value: T);\n    subscribe: (fn: Listener<T>) => () => void;\n    getSnapshot: () => T;\n    update: (value: T) => void;\n}\nexport {};\n","node_modules/@mui/x-data-grid/utils/EventManager.d.ts":"export type EventListener = (...args: any[]) => void;\nexport interface EventListenerOptions {\n    isFirst?: boolean;\n}\ninterface EventListenerCollection {\n    /**\n     * List of listeners to run before the others\n     * They are run in the opposite order of the registration order\n     */\n    highPriority: Map<EventListener, true>;\n    /**\n     * List of events to run after the high priority listeners\n     * They are run in the registration order\n     */\n    regular: Map<EventListener, true>;\n}\nexport declare class EventManager {\n    maxListeners: number;\n    warnOnce: boolean;\n    events: {\n        [eventName: string]: EventListenerCollection;\n    };\n    on(eventName: string, listener: EventListener, options?: EventListenerOptions): void;\n    removeListener(eventName: string, listener: EventListener): void;\n    removeAllListeners(): void;\n    emit(eventName: string, ...args: any[]): void;\n    once(eventName: string, listener: EventListener): void;\n}\nexport {};\n","node_modules/@mui/x-data-grid/themeAugmentation/props.d.ts":"import { ComponentsOverrides, ComponentsProps } from '@mui/material/styles';\nimport { DataGridProps } from '../models/props/DataGridProps';\nexport interface DataGridComponentsPropsList {\n    MuiDataGrid: DataGridProps;\n}\nexport interface DataGridComponents<Theme = unknown> {\n    MuiDataGrid?: {\n        defaultProps?: ComponentsProps['MuiDataGrid'];\n        styleOverrides?: ComponentsOverrides<Theme>['MuiDataGrid'];\n    };\n}\ndeclare module '@mui/material/styles' {\n    interface ComponentsPropsList extends DataGridComponentsPropsList {\n    }\n    interface Components<Theme = unknown> extends DataGridComponents<Theme> {\n    }\n}\n","node_modules/@mui/x-data-grid/themeAugmentation/overrides.d.ts":"import { GridClassKey } from '../constants/gridClasses';\nexport interface DataGridComponentNameToClassKey {\n    MuiDataGrid: GridClassKey;\n}\ndeclare module '@mui/material/styles' {\n    interface ComponentNameToClassKey extends DataGridComponentNameToClassKey {\n    }\n}\n","node_modules/@mui/x-data-grid/themeAugmentation/index.d.ts":"export * from './overrides';\nexport * from './props';\n","node_modules/@mui/x-data-grid/locales/zhTW.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const zhTW: Localization;\n","node_modules/@mui/x-data-grid/locales/zhHK.d.ts":"export declare const zhHK: import(\"../utils/getGridLocalization\").Localization;\n","node_modules/@mui/x-data-grid/locales/zhCN.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const zhCN: Localization;\n","node_modules/@mui/x-data-grid/locales/viVN.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const viVN: Localization;\n","node_modules/@mui/x-data-grid/locales/urPK.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const urPK: Localization;\n","node_modules/@mui/x-data-grid/locales/ukUA.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const ukUA: Localization;\n","node_modules/@mui/x-data-grid/locales/trTR.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const trTR: Localization;\n","node_modules/@mui/x-data-grid/locales/svSE.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const svSE: Localization;\n","node_modules/@mui/x-data-grid/locales/skSK.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const skSK: Localization;\n","node_modules/@mui/x-data-grid/locales/ruRU.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const ruRU: Localization;\n","node_modules/@mui/x-data-grid/locales/roRO.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const roRO: Localization;\n","node_modules/@mui/x-data-grid/locales/ptPT.d.ts":"export declare const ptPT: import(\"../utils/getGridLocalization\").Localization;\n","node_modules/@mui/x-data-grid/locales/ptBR.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const ptBR: Localization;\n","node_modules/@mui/x-data-grid/locales/plPL.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const plPL: Localization;\n","node_modules/@mui/x-data-grid/locales/nlNL.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const nlNL: Localization;\n","node_modules/@mui/x-data-grid/locales/nbNO.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const nbNO: Localization;\n","node_modules/@mui/x-data-grid/locales/koKR.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const koKR: Localization;\n","node_modules/@mui/x-data-grid/locales/jaJP.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const jaJP: Localization;\n","node_modules/@mui/x-data-grid/locales/itIT.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const itIT: Localization;\n","node_modules/@mui/x-data-grid/locales/index.d.ts":"export * from './arSD';\nexport * from './beBY';\nexport * from './bgBG';\nexport * from './csCZ';\nexport * from './daDK';\nexport * from './deDE';\nexport * from './elGR';\nexport * from './enUS';\nexport * from './esES';\nexport * from './faIR';\nexport * from './fiFI';\nexport * from './frFR';\nexport * from './heIL';\nexport * from './huHU';\nexport * from './itIT';\nexport * from './jaJP';\nexport * from './koKR';\nexport * from './nbNO';\nexport * from './nlNL';\nexport * from './plPL';\nexport * from './ptBR';\nexport * from './roRO';\nexport * from './ruRU';\nexport * from './skSK';\nexport * from './svSE';\nexport * from './trTR';\nexport * from './ukUA';\nexport * from './urPK';\nexport * from './viVN';\nexport * from './zhCN';\nexport * from './zhTW';\nexport * from './hrHR';\nexport * from './ptPT';\nexport * from './zhHK';\n","node_modules/@mui/x-data-grid/locales/huHU.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const huHU: Localization;\n","node_modules/@mui/x-data-grid/locales/hrHR.d.ts":"export declare const hrHR: import(\"../utils/getGridLocalization\").Localization;\n","node_modules/@mui/x-data-grid/locales/heIL.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const heIL: Localization;\n","node_modules/@mui/x-data-grid/locales/frFR.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const frFR: Localization;\n","node_modules/@mui/x-data-grid/locales/fiFI.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const fiFI: Localization;\n","node_modules/@mui/x-data-grid/locales/faIR.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const faIR: Localization;\n","node_modules/@mui/x-data-grid/locales/esES.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const esES: Localization;\n","node_modules/@mui/x-data-grid/locales/enUS.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const enUS: Localization;\n","node_modules/@mui/x-data-grid/locales/elGR.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const elGR: Localization;\n","node_modules/@mui/x-data-grid/locales/deDE.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const deDE: Localization;\n","node_modules/@mui/x-data-grid/locales/daDK.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const daDK: Localization;\n","node_modules/@mui/x-data-grid/locales/csCZ.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const csCZ: Localization;\n","node_modules/@mui/x-data-grid/locales/coreLocales.d.ts":"import { Localization as CoreLocalization } from '@mui/material/locale';\nexport declare const beBYCore: CoreLocalization;\nexport declare const urPKCore: CoreLocalization;\n","node_modules/@mui/x-data-grid/locales/bgBG.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const bgBG: Localization;\n","node_modules/@mui/x-data-grid/locales/beBY.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const beBY: Localization;\n","node_modules/@mui/x-data-grid/locales/arSD.d.ts":"import { Localization } from '../utils/getGridLocalization';\nexport declare const arSD: Localization;\n","node_modules/@mui/x-data-grid/material/index.d.ts":"import type { GridIconSlotsComponent } from '../models';\nimport type { GridBaseSlots } from '../models/gridSlotsComponent';\ndeclare const materialSlots: GridBaseSlots & GridIconSlotsComponent;\nexport default materialSlots;\n","node_modules/@mui/x-data-grid/joy/joySlots.d.ts":"import type { UncapitalizeObjectKeys } from '../internals/utils';\nimport type { GridSlotsComponent } from '../models';\ndeclare const joySlots: UncapitalizeObjectKeys<Partial<GridSlotsComponent>>;\nexport default joySlots;\n","node_modules/@mui/x-data-grid/joy/index.d.ts":"import joySlots from './joySlots';\nexport { joySlots as unstable_joySlots };\n","node_modules/@mui/x-data-grid/joy/icons.d.ts":"import { GridIconSlotsComponent } from '../models/gridIconSlotsComponent';\nimport { UncapitalizeObjectKeys } from '../internals/utils';\nexport declare const GridArrowUpwardIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridArrowDownwardIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridKeyboardArrowLeft: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridKeyboardArrowRight: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridExpandMoreIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridFilterListIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridFilterAltIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridSearchIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridMenuIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridCheckCircleIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridColumnIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridSeparatorIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridViewHeadlineIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridTableRowsIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridViewStreamIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridTripleDotsVerticalIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridCloseIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridAddIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridRemoveIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridLoadIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridDragIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridSaveAltIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridCheckIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridMoreVertIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridVisibilityOffIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridViewColumnIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridClearIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridDeleteIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\nexport declare const GridDeleteForeverIcon: import(\"@mui/types\").OverridableComponent<import(\"@mui/joy/SvgIcon\").SvgIconTypeMap<{}, \"svg\">>;\ndeclare const joyIconSlots: UncapitalizeObjectKeys<GridIconSlotsComponent>;\nexport default joyIconSlots;\n","node_modules/@mui/x-data-grid/internals/index.d.ts":"export type { GridBaseColDef, GridStateColDef, GridSingleSelectColDef, } from '../models/colDef/gridColDef';\nexport { GridVirtualScroller } from '../components/virtualization/GridVirtualScroller';\nexport { GridVirtualScrollerContent } from '../components/virtualization/GridVirtualScrollerContent';\nexport { GridVirtualScrollerRenderZone } from '../components/virtualization/GridVirtualScrollerRenderZone';\nexport { GridBaseColumnHeaders } from '../components/columnHeaders/GridBaseColumnHeaders';\nexport { GridColumnHeadersInner } from '../components/columnHeaders/GridColumnHeadersInner';\nexport { DATA_GRID_DEFAULT_SLOTS_COMPONENTS } from '../constants/defaultGridSlotsComponents';\nexport { getGridFilter } from '../components/panel/filterPanel/GridFilterPanel';\nexport { useGridRegisterPipeProcessor } from '../hooks/core/pipeProcessing';\nexport type { GridPipeProcessor } from '../hooks/core/pipeProcessing';\nexport { useGridRegisterStrategyProcessor, GRID_DEFAULT_STRATEGY, } from '../hooks/core/strategyProcessing';\nexport type { GridStrategyProcessor } from '../hooks/core/strategyProcessing';\nexport { useGridInitialization } from '../hooks/core/useGridInitialization';\nexport { unwrapPrivateAPI } from '../hooks/core/useGridApiInitialization';\nexport { useGridClipboard } from '../hooks/features/clipboard/useGridClipboard';\nexport { useGridColumnHeaders } from '../hooks/features/columnHeaders/useGridColumnHeaders';\nexport { unstable_gridHeaderFilteringEditFieldSelector, unstable_gridHeaderFilteringMenuSelector, } from '../hooks/features/headerFiltering/gridHeaderFilteringSelectors';\nexport type { GridSlotsComponentsProps } from '../models/gridSlotsComponentsProps';\nexport type { UseGridColumnHeadersProps, GetHeadersParams, } from '../hooks/features/columnHeaders/useGridColumnHeaders';\nexport { useGridColumnMenu, columnMenuStateInitializer, } from '../hooks/features/columnMenu/useGridColumnMenu';\nexport { useGridColumns, columnsStateInitializer } from '../hooks/features/columns/useGridColumns';\nexport { getTotalHeaderHeight } from '../hooks/features/columns/gridColumnsUtils';\nexport { useGridColumnSpanning } from '../hooks/features/columns/useGridColumnSpanning';\nexport { gridColumnsStateSelector } from '../hooks/features/columns/gridColumnsSelector';\nexport { useGridColumnGrouping, columnGroupsStateInitializer, } from '../hooks/features/columnGrouping/useGridColumnGrouping';\nexport type { GridColumnGroupLookup } from '../hooks/features/columnGrouping/gridColumnGroupsInterfaces';\nexport type { GridColumnRawLookup, GridColumnsRawState, GridHydrateColumnsValue, } from '../hooks/features/columns/gridColumnsInterfaces';\nexport { useGridDensity, densityStateInitializer } from '../hooks/features/density/useGridDensity';\nexport { useGridCsvExport } from '../hooks/features/export/useGridCsvExport';\nexport { useGridPrintExport } from '../hooks/features/export/useGridPrintExport';\nexport { useGridFilter, filterStateInitializer } from '../hooks/features/filter/useGridFilter';\nexport { passFilterLogic } from '../hooks/features/filter/gridFilterUtils';\nexport { isSingleSelectColDef } from '../components/panel/filterPanel/filterPanelUtils';\nexport type { GridAggregatedFilterItemApplier, GridAggregatedFilterItemApplierResult, } from '../hooks/features/filter/gridFilterState';\nexport { useGridFocus, focusStateInitializer } from '../hooks/features/focus/useGridFocus';\nexport { useGridKeyboardNavigation } from '../hooks/features/keyboardNavigation/useGridKeyboardNavigation';\nexport { useGridPagination, paginationStateInitializer, } from '../hooks/features/pagination/useGridPagination';\nexport { useGridPreferencesPanel, preferencePanelStateInitializer, } from '../hooks/features/preferencesPanel/useGridPreferencesPanel';\nexport { useGridEditing, editingStateInitializer } from '../hooks/features/editing/useGridEditing';\nexport { gridEditRowsStateSelector } from '../hooks/features/editing/gridEditingSelectors';\nexport { useGridRows, rowsStateInitializer } from '../hooks/features/rows/useGridRows';\nexport { useGridRowsPreProcessors } from '../hooks/features/rows/useGridRowsPreProcessors';\nexport type { GridRowTreeCreationParams, GridRowTreeCreationValue, GridHydrateRowsValue, GridRowsPartialUpdates, GridRowsPartialUpdateAction, GridTreeDepths, GridRowTreeUpdatedGroupsManager, GridRowTreeUpdateGroupAction, GridPinnedRowsState, } from '../hooks/features/rows/gridRowsInterfaces';\nexport { getTreeNodeDescendants, buildRootGroup } from '../hooks/features/rows/gridRowsUtils';\nexport { useGridRowsMeta, rowsMetaStateInitializer } from '../hooks/features/rows/useGridRowsMeta';\nexport { useGridParamsApi } from '../hooks/features/rows/useGridParamsApi';\nexport { getRowIdFromRowModel, GRID_ID_AUTOGENERATED } from '../hooks/features/rows/gridRowsUtils';\nexport { gridAdditionalRowGroupsSelector, gridPinnedRowsSelector, } from '../hooks/features/rows/gridRowsSelector';\nexport { headerFilteringStateInitializer, useGridHeaderFiltering, } from '../hooks/features/headerFiltering/useGridHeaderFiltering';\nexport { calculatePinnedRowsHeight } from '../hooks/features/rows/gridRowsUtils';\nexport { useGridRowSelection, rowSelectionStateInitializer, } from '../hooks/features/rowSelection/useGridRowSelection';\nexport { useGridRowSelectionPreProcessors } from '../hooks/features/rowSelection/useGridRowSelectionPreProcessors';\nexport { useGridSorting, sortingStateInitializer } from '../hooks/features/sorting/useGridSorting';\nexport type { GridSortingModelApplier } from '../hooks/features/sorting/gridSortingState';\nexport { useGridScroll } from '../hooks/features/scroll/useGridScroll';\nexport { useGridEvents } from '../hooks/features/events/useGridEvents';\nexport { useGridDimensions } from '../hooks/features/dimensions/useGridDimensions';\nexport { useGridStatePersistence } from '../hooks/features/statePersistence/useGridStatePersistence';\nexport type { GridRestoreStatePreProcessingContext } from '../hooks/features/statePersistence/gridStatePersistenceInterface';\nexport { useGridVirtualScroller, getRenderableIndexes, } from '../hooks/features/virtualization/useGridVirtualScroller';\nexport * from '../hooks/features/virtualization';\nexport { useTimeout } from '../hooks/utils/useTimeout';\nexport { useGridVisibleRows, getVisibleRows } from '../hooks/utils/useGridVisibleRows';\nexport { useGridInitializeState } from '../hooks/utils/useGridInitializeState';\nexport type { GridStateInitializer } from '../hooks/utils/useGridInitializeState';\nexport type { GridExperimentalFeatures, DataGridPropsWithoutDefaultValue, DataGridPropsWithDefaultValues, DataGridPropsWithComplexDefaultValueAfterProcessing, DataGridPropsWithComplexDefaultValueBeforeProcessing, } from '../models/props/DataGridProps';\nexport { getColumnsToExport, defaultGetRowsToExport } from '../hooks/features/export/utils';\nexport * from '../utils/createControllablePromise';\nexport { createSelector, createSelectorMemoized, unstable_resetCreateSelectorCache, } from '../utils/createSelector';\nexport { findParentElementFromClassName, getActiveElement, isEventTargetInPortal, } from '../utils/domUtils';\nexport { isNavigationKey } from '../utils/keyboardUtils';\nexport { clamp, isDeepEqual, isNumber, isFunction, isObject } from '../utils/utils';\nexport { buildWarning } from '../utils/warning';\nexport { exportAs } from '../utils/exportAs';\nexport * from '../utils/getPublicApiRef';\nexport type { GridPrivateOnlyApiCommon } from '../models/api/gridApiCommon';\nexport { useGridPrivateApiContext } from '../hooks/utils/useGridPrivateApiContext';\nexport * from '../hooks/utils/useOnMount';\nexport type { GridApiCommunity } from '../models/api/gridApiCommunity';\nexport type { GridApiCaches } from '../models/gridApiCaches';\nexport { serializeCellValue } from '../hooks/features/export/serializers/csvSerializer';\nexport * from '../colDef/utils';\nexport * from './utils';\n","node_modules/@mui/x-data-grid/hooks/index.d.ts":"export * from './features';\nexport * from './utils';\nexport * from './core';\n","node_modules/@mui/x-data-grid/context/index.d.ts":"export * from './GridContextProvider';\n","node_modules/@mui/x-data-grid/context/GridRootPropsContext.d.ts":"import * as React from 'react';\ndeclare const GridRootPropsContext: React.Context<unknown>;\nexport { GridRootPropsContext };\n","node_modules/@mui/x-data-grid/context/GridContextProvider.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../models/api/gridApiCommunity';\ntype GridContextProviderProps = {\n    privateApiRef: React.MutableRefObject<GridPrivateApiCommunity>;\n    props: {};\n    children: React.ReactNode;\n};\nexport declare function GridContextProvider({ privateApiRef, props, children }: GridContextProviderProps): React.JSX.Element;\nexport {};\n","node_modules/@mui/x-data-grid/constants/localeTextConstants.d.ts":"import { GridLocaleText } from '../models/api/gridLocaleTextApi';\nexport declare const GRID_DEFAULT_LOCALE_TEXT: GridLocaleText;\n","node_modules/@mui/x-data-grid/constants/index.d.ts":"export * from './envConstants';\nexport * from './localeTextConstants';\nexport * from './gridClasses';\n","node_modules/@mui/x-data-grid/constants/gridDetailPanelToggleField.d.ts":"export declare const GRID_DETAIL_PANEL_TOGGLE_FIELD = \"__detail_panel_toggle__\";\n","node_modules/@mui/x-data-grid/constants/gridClasses.d.ts":"export interface GridClasses {\n    /**\n     * Styles applied to the root element of the cell with type=\"actions\".\n     */\n    actionsCell: string;\n    /**\n     * Styles applied to the root element of the column header when aggregated.\n     */\n    aggregationColumnHeader: string;\n    /**\n     * Styles applied to the root element of the header when aggregation if `headerAlign=\"left\"`.\n     */\n    'aggregationColumnHeader--alignLeft': string;\n    /**\n     * Styles applied to the root element of the header when aggregation if `headerAlign=\"center\"`.\n     */\n    'aggregationColumnHeader--alignCenter': string;\n    /**\n     * Styles applied to the root element of the header when aggregation if `headerAlign=\"right\"`.\n     */\n    'aggregationColumnHeader--alignRight': string;\n    /**\n     * Styles applied to the aggregation label in the column header when aggregated.\n     */\n    aggregationColumnHeaderLabel: string;\n    /**\n     * Styles applied to the root element if `autoHeight={true}`.\n     */\n    autoHeight: string;\n    /**\n     * Styles applied to the root element while it is being autosized.\n     */\n    autosizing: string;\n    /**\n     * Styles applied to the icon of the boolean cell.\n     */\n    booleanCell: string;\n    /**\n     * Styles applied to the cell element if the cell is editable.\n     */\n    'cell--editable': string;\n    /**\n     * Styles applied to the cell element if the cell is in edit mode.\n     */\n    'cell--editing': string;\n    /**\n     * Styles applied to the cell element if `align=\"center\"`.\n     */\n    'cell--textCenter': string;\n    /**\n     * Styles applied to the cell element if `align=\"left\"`.\n     */\n    'cell--textLeft': string;\n    /**\n     * Styles applied to the cell element if `align=\"right\"`.\n     */\n    'cell--textRight': string;\n    /**\n     * Styles applied to the cell element if the cell has a custom renderer.\n     */\n    'cell--withRenderer': string;\n    /**\n     * Styles applied to the cell element if it is at the top edge of a cell selection range.\n     */\n    'cell--rangeTop': string;\n    /**\n     * Styles applied to the cell element if it is at the bottom edge of a cell selection range.\n     */\n    'cell--rangeBottom': string;\n    /**\n     * Styles applied to the cell element if it is at the left edge of a cell selection range.\n     */\n    'cell--rangeLeft': string;\n    /**\n     * Styles applied to the cell element if it is at the right edge of a cell selection range.\n     */\n    'cell--rangeRight': string;\n    /**\n     * Styles applied to the cell element if it is in a cell selection range.\n     */\n    'cell--selectionMode': string;\n    /**\n     * Styles applied to the cell element.\n     */\n    cell: string;\n    /**\n     * Styles applied to the element that wraps the cell content.\n     */\n    cellContent: string;\n    /**\n     * Styles applied to the cell checkbox element.\n     */\n    cellCheckbox: string;\n    /**\n     * Styles applied to the skeleton cell element.\n     */\n    cellSkeleton: string;\n    /**\n     * Styles applied to the selection checkbox element.\n     */\n    checkboxInput: string;\n    /**\n     * Styles applied to the column header if `headerAlign=\"center\"`.\n     */\n    'columnHeader--alignCenter': string;\n    /**\n     * Styles applied to the column header if `headerAlign=\"left\"`.\n     */\n    'columnHeader--alignLeft': string;\n    /**\n     * Styles applied to the column header if `headerAlign=\"right\"`.\n     */\n    'columnHeader--alignRight': string;\n    /**\n     * Styles applied to the floating column header element when it is dragged.\n     */\n    'columnHeader--dragging': string;\n    /**\n     * Styles applied to the column header if it is being dragged.\n     */\n    'columnHeader--moving': string;\n    /**\n     * Styles applied to the column header if the type of the column is `number`.\n     */\n    'columnHeader--numeric': string;\n    /**\n     * Styles applied to the column header if the column is sortable.\n     */\n    'columnHeader--sortable': string;\n    /**\n     * Styles applied to the column header if the column is sorted.\n     */\n    'columnHeader--sorted': string;\n    /**\n     * Styles applied to the column header if the column has a filter applied to it.\n     */\n    'columnHeader--filtered': string;\n    /**\n     * Styles applied to the column header element.\n     */\n    columnHeader: string;\n    /**\n     * Styles applied to the column group header element.\n     */\n    columnGroupHeader: string;\n    /**\n     * Styles applied to the header checkbox cell element.\n     */\n    columnHeaderCheckbox: string;\n    /**\n     * Styles applied to the column header's draggable container element.\n     */\n    columnHeaderDraggableContainer: string;\n    /**\n     * Styles applied to the row's draggable placeholder element inside the special row reorder cell.\n     */\n    rowReorderCellPlaceholder: string;\n    /**\n     * Styles applied to the column headers wrapper if a column is being dragged.\n     */\n    columnHeaderDropZone: string;\n    /**\n     * Styles applied to the column header's title element;\n     */\n    columnHeaderTitle: string;\n    /**\n     * Styles applied to the column header's title container element.\n     */\n    columnHeaderTitleContainer: string;\n    /**\n     * Styles applied to the column header's title excepted buttons.\n     */\n    columnHeaderTitleContainerContent: string;\n    /**\n     * Styles applied to the column group header cell if not empty.\n     */\n    'columnHeader--filledGroup': string;\n    /**\n     * Styles applied to the empty column group header cell.\n     */\n    'columnHeader--emptyGroup': string;\n    /**\n     * Styles applied to the column group header cell when show column border.\n     */\n    'columnHeader--showColumnBorder': string;\n    /**\n     * Styles applied to the column headers.\n     */\n    columnHeaders: string;\n    /**\n     * Styles applied to the column headers's inner element.\n     */\n    columnHeadersInner: string;\n    /**\n     * Styles applied to the column headers's inner element if there is a horizontal scrollbar.\n     */\n    'columnHeadersInner--scrollable': string;\n    /**\n     * Styles applied to the column header separator if the column is resizable.\n     */\n    'columnSeparator--resizable': string;\n    /**\n     * Styles applied to the column header separator if the column is being resized.\n     */\n    'columnSeparator--resizing': string;\n    /**\n     * Styles applied to the column header separator if the side is \"left\".\n     */\n    'columnSeparator--sideLeft': string;\n    /**\n     * Styles applied to the column header separator if the side is \"right\".\n     */\n    'columnSeparator--sideRight': string;\n    /**\n     * Styles applied to the column header separator element.\n     */\n    columnSeparator: string;\n    /**\n     * Styles applied to the columns panel element.\n     */\n    columnsPanel: string;\n    /**\n     * Styles applied to the columns panel row element.\n     */\n    columnsPanelRow: string;\n    /**\n     * Styles applied to the detail panel element.\n     */\n    detailPanel: string;\n    /**\n     * Styles applied to the detail panels wrapper element.\n     */\n    detailPanels: string;\n    /**\n     * Styles applied to the detail panel toggle cell element.\n     */\n    detailPanelToggleCell: string;\n    /**\n     * Styles applied to the detail panel toggle cell element if expanded.\n     */\n    'detailPanelToggleCell--expanded': string;\n    /**\n     * Styles applied to the root element of the cell inside a footer row.\n     */\n    footerCell: string;\n    /**\n     * Styles applied to the panel element.\n     */\n    panel: string;\n    /**\n     * Styles applied to the panel header element.\n     */\n    panelHeader: string;\n    /**\n     * Styles applied to the panel wrapper element.\n     */\n    panelWrapper: string;\n    /**\n     * Styles applied to the panel content element.\n     */\n    panelContent: string;\n    /**\n     * Styles applied to the panel footer element.\n     */\n    panelFooter: string;\n    /**\n     * Styles applied to the paper element.\n     */\n    paper: string;\n    /**\n     * Styles applied to root of the boolean edit component.\n     */\n    editBooleanCell: string;\n    /**\n     * Styles applied to the root of the filter form component.\n     */\n    filterForm: string;\n    /**\n     * Styles applied to the delete icon of the filter form component.\n     */\n    filterFormDeleteIcon: string;\n    /**\n     * Styles applied to the link operator input of the filter form component.\n     */\n    filterFormLogicOperatorInput: string;\n    /**\n     * Styles applied to the column input of the filter form component.\n     */\n    filterFormColumnInput: string;\n    /**\n     * Styles applied to the operator input of the filter form component.\n     */\n    filterFormOperatorInput: string;\n    /**\n     * Styles applied to the value input of the filter form component.\n     */\n    filterFormValueInput: string;\n    /**\n     * Styles applied to the root of the input component.\n     */\n    editInputCell: string;\n    /**\n     * Styles applied to the filter icon element.\n     */\n    filterIcon: string;\n    /**\n     * Styles applied to the footer container element.\n     */\n    footerContainer: string;\n    /**\n     * Styles applied to the column header icon's container.\n     */\n    iconButtonContainer: string;\n    /**\n     * Styles applied to the column header separator icon element.\n     */\n    iconSeparator: string;\n    /**\n     * Styles applied to the column header filter row.\n     */\n    headerFilterRow: string;\n    /**\n     * Styles applied to the main container element.\n     */\n    main: string;\n    /**\n     * Styles applied to the menu element.\n     */\n    menu: string;\n    /**\n     * Styles applied to the menu icon element.\n     */\n    menuIcon: string;\n    /**\n     * Styles applied to the menu icon button element.\n     */\n    menuIconButton: string;\n    /**\n     * Styles applied to the menu icon element if the menu is open.\n     */\n    menuOpen: string;\n    /**\n     * Styles applied to the menu list element.\n     */\n    menuList: string;\n    /**\n     * Styles applied to the overlay wrapper element.\n     */\n    overlayWrapper: string;\n    /**\n     * Styles applied to the overlay wrapper inner element.\n     */\n    overlayWrapperInner: string;\n    /**\n     * Styles applied to the overlay element.\n     */\n    overlay: string;\n    /**\n     * Styles applied to the virtualization container.\n     */\n    virtualScroller: string;\n    /**\n     * Styles applied to the virtualization content.\n     */\n    virtualScrollerContent: string;\n    /**\n     * Styles applied to the virtualization content when its height is bigger than the virtualization container.\n     */\n    'virtualScrollerContent--overflowed': string;\n    /**\n     * Styles applied to the virtualization render zone.\n     */\n    virtualScrollerRenderZone: string;\n    /**\n     * Styles applied to the pinned columns.\n     */\n    pinnedColumns: string;\n    /**\n     * Styles applied to the left pinned columns.\n     */\n    'pinnedColumns--left': string;\n    /**\n     * Styles applied to the right pinned columns.\n     */\n    'pinnedColumns--right': string;\n    /**\n     * Styles applied to the pinned column headers.\n     */\n    pinnedColumnHeaders: string;\n    /**\n     * Styles applied to the left pinned column headers.\n     */\n    'pinnedColumnHeaders--left': string;\n    /**\n     * Styles applied to the right pinned column headers.\n     */\n    'pinnedColumnHeaders--right': string;\n    /**\n     * Styles applied to the root element.\n     */\n    root: string;\n    /**\n     * Styles applied to the root element if density is \"standard\" (default).\n     */\n    'root--densityStandard': string;\n    /**\n     * Styles applied to the root element if density is \"comfortable\".\n     */\n    'root--densityComfortable': string;\n    /**\n     * Styles applied to the root element if density is \"compact\".\n     */\n    'root--densityCompact': string;\n    /**\n     * Styles applied to the root element when user selection is disabled.\n     */\n    'root--disableUserSelection': string;\n    /**\n     * Styles applied to the row element if the row is editable.\n     */\n    'row--editable': string;\n    /**\n     * Styles applied to the row element if the row is in edit mode.\n     */\n    'row--editing': string;\n    /**\n     * Styles applied to the floating special row reorder cell element when it is dragged.\n     */\n    'row--dragging': string;\n    /**\n     * Styles applied to the last visible row element on every page of the grid.\n     */\n    'row--lastVisible': string;\n    /**\n     * Styles applied to the row if it has dynamic row height.\n     */\n    'row--dynamicHeight': string;\n    /**\n     * Styles applied to the row if its detail panel is open.\n     */\n    'row--detailPanelExpanded': string;\n    /**\n     * Styles applied to the row element.\n     */\n    row: string;\n    /**\n     * Styles applied to the footer row count element to show the total number of rows.\n     * Only works when pagination is disabled.\n     */\n    rowCount: string;\n    /**\n     * Styles applied to the row reorder cell container element.\n     */\n    rowReorderCellContainer: string;\n    /**\n     * Styles applied to the root element of the row reorder cell\n     */\n    rowReorderCell: string;\n    /**\n     * Styles applied to the root element of the row reorder cell when dragging is allowed\n     */\n    'rowReorderCell--draggable': string;\n    /**\n     * Styles applied to both scroll area elements.\n     */\n    scrollArea: string;\n    /**\n     * Styles applied to the left scroll area element.\n     */\n    'scrollArea--left': string;\n    /**\n     * Styles applied to the right scroll area element.\n     */\n    'scrollArea--right': string;\n    /**\n     * Styles applied to the footer selected row count element.\n     */\n    selectedRowCount: string;\n    /**\n     * Styles applied to the sort icon element.\n     */\n    sortIcon: string;\n    /**\n     * Styles applied to the toolbar container element.\n     */\n    toolbarContainer: string;\n    /**\n     * Styles applied to the toolbar filter list element.\n     */\n    toolbarFilterList: string;\n    /**\n     * Styles applied to cells, column header and other elements that have border.\n     * Sets border color only.\n     */\n    withBorderColor: string;\n    /**\n     * Styles applied the cell if `showColumnVerticalBorder={true}`.\n     */\n    'cell--withRightBorder': string;\n    /**\n     * Styles applied the column header if `showColumnVerticalBorder={true}`.\n     */\n    'columnHeader--withRightBorder': string;\n    /**\n     * Styles applied to the root of the grouping column of the tree data.\n     */\n    treeDataGroupingCell: string;\n    /**\n     * Styles applied to the toggle of the grouping cell of the tree data.\n     */\n    treeDataGroupingCellToggle: string;\n    /**\n     * Styles applied to the root element of the grouping criteria cell\n     */\n    groupingCriteriaCell: string;\n    /**\n     * Styles applied to the toggle of the grouping criteria cell\n     */\n    groupingCriteriaCellToggle: string;\n    /**\n     * Styles applied to the pinned rows container.\n     */\n    pinnedRows: string;\n    /**\n     * Styles applied to the top pinned rows container.\n     */\n    'pinnedRows--top': string;\n    /**\n     * Styles applied to the bottom pinned rows container.\n     */\n    'pinnedRows--bottom': string;\n    /**\n     * Styles applied to pinned rows render zones.\n     */\n    pinnedRowsRenderZone: string;\n}\nexport type GridClassKey = keyof GridClasses;\nexport declare function getDataGridUtilityClass(slot: string): string;\nexport declare const gridClasses: Record<keyof GridClasses, string>;\n","node_modules/@mui/x-data-grid/constants/envConstants.d.ts":"export declare const GRID_EXPERIMENTAL_ENABLED = false;\n","node_modules/@mui/x-data-grid/constants/defaultGridSlotsComponents.d.ts":"import { GridSlotsComponent } from '../models';\nexport declare const DATA_GRID_DEFAULT_SLOTS_COMPONENTS: GridSlotsComponent;\n","node_modules/@mui/x-data-grid/models/muiEvent.d.ts":"import * as React from 'react';\nexport type MuiBaseEvent = React.SyntheticEvent<HTMLElement> | DocumentEventMap[keyof DocumentEventMap] | {};\nexport type MuiEvent<E extends MuiBaseEvent = MuiBaseEvent> = E & {\n    defaultMuiPrevented?: boolean;\n};\n","node_modules/@mui/x-data-grid/models/logger.d.ts":"export interface Logger {\n    debug: (...args: any[]) => void;\n    info: (...args: any[]) => void;\n    warn: (...args: any[]) => void;\n    error: (...args: any[]) => void;\n}\n","node_modules/@mui/x-data-grid/models/index.d.ts":"export * from './colDef';\nexport * from './cursorCoordinates';\nexport * from './elementSize';\nexport * from './gridEditRowModel';\nexport * from './gridFeatureMode';\nexport * from './gridFilterItem';\nexport * from './gridFilterModel';\nexport * from './gridPaginationProps';\nexport * from './gridRootContainerRef';\nexport * from './gridRenderContextProps';\nexport * from './gridRows';\nexport * from './gridRowSelectionModel';\nexport * from './params';\nexport * from './gridCellClass';\nexport * from './gridCell';\nexport * from './gridColumnHeaderClass';\nexport * from './api';\nexport * from './gridIconSlotsComponent';\nexport type { GridSlotsComponent, UncapitalizedGridSlotsComponent } from './gridSlotsComponent';\nexport * from './gridSlotsComponentsProps';\nexport * from './gridDensity';\nexport * from './logger';\nexport * from './muiEvent';\nexport * from './events';\nexport * from './gridSortModel';\nexport * from './gridColumnGrouping';\nexport type { GridExportOptions, GridFileExportOptions, GridGetRowsToExportParams, GridCsvGetRowsToExportParams, GridPrintGetRowsToExportParams, GridCsvExportOptions, GridPrintExportOptions, } from './gridExport';\nexport * from './gridFilterOperator';\n","node_modules/@mui/x-data-grid/models/gridStateCommunity.d.ts":"import type { GridColumnMenuState, GridColumnsInitialState, GridColumnsState, GridColumnsGroupingState, GridDensityState, GridFilterInitialState, GridFilterState, GridFocusState, GridPaginationInitialState, GridPaginationState, GridPreferencePanelInitialState, GridPreferencePanelState, GridRowsState, GridSortingInitialState, GridSortingState, GridTabIndexState, GridVirtualizationState } from '../hooks';\nimport type { GridRowsMetaState } from '../hooks/features/rows/gridRowsMetaState';\nimport type { GridEditingState } from './gridEditRowModel';\nimport { GridHeaderFilteringState } from './gridHeaderFilteringModel';\nimport type { GridRowSelectionModel } from './gridRowSelectionModel';\nimport type { GridVisibleRowsLookupState } from '../hooks/features/filter/gridFilterState';\n/**\n * The state of `DataGrid`.\n */\nexport interface GridStateCommunity {\n    rows: GridRowsState;\n    visibleRowsLookup: GridVisibleRowsLookupState;\n    rowsMeta: GridRowsMetaState;\n    editRows: GridEditingState;\n    headerFiltering: GridHeaderFilteringState;\n    pagination: GridPaginationState;\n    columns: GridColumnsState;\n    columnGrouping: GridColumnsGroupingState;\n    columnMenu: GridColumnMenuState;\n    sorting: GridSortingState;\n    focus: GridFocusState;\n    tabIndex: GridTabIndexState;\n    rowSelection: GridRowSelectionModel;\n    filter: GridFilterState;\n    preferencePanel: GridPreferencePanelState;\n    density: GridDensityState;\n    virtualization: GridVirtualizationState;\n}\n/**\n * The initial state of `DataGrid`.\n */\nexport interface GridInitialStateCommunity {\n    pagination?: GridPaginationInitialState;\n    sorting?: GridSortingInitialState;\n    filter?: GridFilterInitialState;\n    columns?: GridColumnsInitialState;\n    preferencePanel?: GridPreferencePanelInitialState;\n}\n","node_modules/@mui/x-data-grid/models/gridSortModel.d.ts":"import { GridRowId, GridTreeNode } from './gridRows';\nexport type GridSortDirection = 'asc' | 'desc' | null | undefined;\nexport interface GridSortCellParams<V = any> {\n    id: GridRowId;\n    field: string;\n    value: V;\n    rowNode: GridTreeNode;\n    api: any;\n}\n/**\n * The type of the sort comparison function.\n */\nexport type GridComparatorFn<V = any> = (v1: V, v2: V, cellParams1: GridSortCellParams<V>, cellParams2: GridSortCellParams<V>) => number;\n/**\n * Object that represents the column sorted data, part of the [[GridSortModel]].\n */\nexport interface GridSortItem {\n    /**\n     * The column field identifier.\n     */\n    field: string;\n    /**\n     * The direction of the column that the grid should sort.\n     */\n    sort: GridSortDirection;\n}\n/**\n * The model used for sorting the grid.\n */\nexport type GridSortModel = GridSortItem[];\n","node_modules/@mui/x-data-grid/models/gridSlotsComponentsProps.d.ts":"import * as React from 'react';\nimport { CheckboxProps } from '@mui/material/Checkbox';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { FormControlProps } from '@mui/material/FormControl';\nimport { SelectProps } from '@mui/material/Select';\nimport { SwitchProps } from '@mui/material/Switch';\nimport { ButtonProps } from '@mui/material/Button';\nimport { IconButtonProps } from '@mui/material/IconButton';\nimport { TooltipProps } from '@mui/material/Tooltip';\nimport type { InputLabelProps } from '@mui/material/InputLabel';\nimport { PopperProps } from '@mui/material/Popper';\nimport { TablePaginationProps } from '@mui/material/TablePagination';\nimport { ChipProps } from '@mui/material/Chip';\nimport { GridToolbarProps } from '../components/toolbar/GridToolbar';\nimport { ColumnHeaderFilterIconButtonProps } from '../components/columnHeaders/GridColumnHeaderFilterIconButton';\nimport { GridColumnMenuProps } from '../components/menu/columnMenu/GridColumnMenuProps';\nimport { GridColumnsPanelProps } from '../components/panel/GridColumnsPanel';\nimport { GridFilterPanelProps } from '../components/panel/filterPanel/GridFilterPanel';\nimport { GridFooterContainerProps } from '../components/containers/GridFooterContainer';\nimport { GridOverlayProps } from '../components/containers/GridOverlay';\nimport { GridPanelProps } from '../components/panel/GridPanel';\nimport type { GridRowProps } from '../components/GridRow';\nimport type { GridCellProps } from '../components/cell/GridCell';\nimport type { GridRowCountProps } from '../components';\nexport interface BaseCheckboxPropsOverrides {\n}\nexport interface BaseTextFieldPropsOverrides {\n}\nexport interface BaseFormControlPropsOverrides {\n}\nexport interface BaseSelectPropsOverrides {\n}\nexport interface BaseSwitchPropsOverrides {\n}\nexport interface BaseButtonPropsOverrides {\n}\nexport interface BaseIconButtonPropsOverrides {\n}\nexport interface BaseTooltipPropsOverrides {\n}\nexport interface BasePopperPropsOverrides {\n}\nexport interface BaseInputLabelPropsOverrides {\n}\nexport interface BaseSelectOptionPropsOverrides {\n}\nexport interface BaseChipPropsOverrides {\n}\nexport interface CellPropsOverrides {\n}\nexport interface ToolbarPropsOverrides {\n}\nexport interface ColumnHeaderFilterIconButtonPropsOverrides {\n}\nexport interface ColumnMenuPropsOverrides {\n}\nexport interface ColumnsPanelPropsOverrides {\n}\nexport interface FilterPanelPropsOverrides {\n}\nexport interface FooterPropsOverrides {\n}\nexport interface FooterRowCountOverrides {\n}\nexport interface PaginationPropsOverrides {\n}\nexport interface LoadingOverlayPropsOverrides {\n}\nexport interface NoResultsOverlayPropsOverrides {\n}\nexport interface NoRowsOverlayPropsOverrides {\n}\nexport interface PanelPropsOverrides {\n}\nexport interface PreferencesPanelPropsOverrides {\n}\nexport interface RowPropsOverrides {\n}\ntype SlotProps<Props, Overrides> = Partial<Props & Overrides>;\n/**\n * Overridable components props dynamically passed to the component at rendering.\n */\nexport interface GridSlotsComponentsProps {\n    baseCheckbox?: SlotProps<CheckboxProps, BaseCheckboxPropsOverrides>;\n    baseTextField?: SlotProps<TextFieldProps, BaseTextFieldPropsOverrides>;\n    baseFormControl?: SlotProps<FormControlProps, BaseFormControlPropsOverrides>;\n    baseSelect?: SlotProps<SelectProps, BaseSelectPropsOverrides>;\n    baseSwitch?: SlotProps<SwitchProps, BaseSwitchPropsOverrides>;\n    baseButton?: SlotProps<ButtonProps, BaseButtonPropsOverrides>;\n    baseIconButton?: SlotProps<IconButtonProps, BaseIconButtonPropsOverrides>;\n    basePopper?: SlotProps<PopperProps, BasePopperPropsOverrides>;\n    baseTooltip?: SlotProps<TooltipProps, BaseTooltipPropsOverrides>;\n    baseInputLabel?: SlotProps<InputLabelProps, BaseInputLabelPropsOverrides>;\n    baseSelectOption?: SlotProps<{\n        native: boolean;\n        value: any;\n        children?: React.ReactNode;\n    }, BaseSelectOptionPropsOverrides>;\n    baseChip?: SlotProps<ChipProps, BaseChipPropsOverrides>;\n    cell?: SlotProps<GridCellProps, CellPropsOverrides>;\n    columnHeaderFilterIconButton?: SlotProps<ColumnHeaderFilterIconButtonProps, ColumnHeaderFilterIconButtonPropsOverrides>;\n    columnMenu?: SlotProps<GridColumnMenuProps, ColumnMenuPropsOverrides>;\n    columnsPanel?: SlotProps<GridColumnsPanelProps, ColumnsPanelPropsOverrides>;\n    filterPanel?: SlotProps<GridFilterPanelProps, FilterPanelPropsOverrides>;\n    footer?: SlotProps<GridFooterContainerProps, FooterPropsOverrides>;\n    footerRowCount?: SlotProps<GridRowCountProps, FooterRowCountOverrides>;\n    loadingOverlay?: SlotProps<GridOverlayProps, LoadingOverlayPropsOverrides>;\n    noResultsOverlay?: SlotProps<GridOverlayProps, NoResultsOverlayPropsOverrides>;\n    noRowsOverlay?: SlotProps<GridOverlayProps, NoRowsOverlayPropsOverrides>;\n    pagination?: SlotProps<TablePaginationProps, PaginationPropsOverrides>;\n    panel?: SlotProps<GridPanelProps, PanelPropsOverrides>;\n    preferencesPanel?: SlotProps<React.HTMLAttributes<HTMLDivElement>, PreferencesPanelPropsOverrides>;\n    row?: SlotProps<GridRowProps, RowPropsOverrides>;\n    toolbar?: SlotProps<GridToolbarProps, ToolbarPropsOverrides>;\n}\nexport {};\n","node_modules/@mui/x-data-grid/models/gridSlotsComponent.d.ts":"import * as React from 'react';\nimport type { UncapitalizeObjectKeys } from '../internals/utils';\nimport type { GridIconSlotsComponent } from './gridIconSlotsComponent';\nexport interface GridBaseSlots {\n    /**\n     * The custom Checkbox component used in the grid for both header and cells.\n     * @default Checkbox\n     */\n    BaseCheckbox: React.JSXElementConstructor<any>;\n    /**\n     * The custom Chip component used in the grid.\n     * @default Chip\n     */\n    BaseChip: React.JSXElementConstructor<any>;\n    /**\n     * The custom InputAdornment component used in the grid.\n     * @default InputAdornment\n     */\n    BaseInputAdornment: React.JSXElementConstructor<any>;\n    /**\n     * The custom TextField component used in the grid.\n     * @default TextField\n     */\n    BaseTextField: React.JSXElementConstructor<any>;\n    /**\n     * The custom FormControl component used in the grid.\n     * @default FormControl\n     */\n    BaseFormControl: React.JSXElementConstructor<any>;\n    /**\n     * The custom Select component used in the grid.\n     * @default Select\n     */\n    BaseSelect: React.JSXElementConstructor<any>;\n    /**\n     * The custom Switch component used in the grid.\n     * @default Switch\n     */\n    BaseSwitch: React.JSXElementConstructor<any>;\n    /**\n     * The custom Button component used in the grid.\n     * @default Button\n     */\n    BaseButton: React.JSXElementConstructor<any>;\n    /**\n     * The custom IconButton component used in the grid.\n     * @default IconButton\n     */\n    BaseIconButton: React.JSXElementConstructor<any>;\n    /**\n     * The custom Tooltip component used in the grid.\n     * @default Tooltip\n     */\n    BaseTooltip: React.JSXElementConstructor<any>;\n    /**\n     * The custom Popper component used in the grid.\n     * @default Popper\n     */\n    BasePopper: React.JSXElementConstructor<any>;\n    /**\n     * The custom InputLabel component used in the grid.\n     * @default InputLabel\n     */\n    BaseInputLabel: React.JSXElementConstructor<any>;\n    /**\n     * The custom SelectOption component used in the grid.\n     * @default MenuItem\n     */\n    BaseSelectOption: React.JSXElementConstructor<any>;\n}\n/**\n * Grid components React prop interface containing all the overridable components.\n */\nexport interface GridSlotsComponent extends GridBaseSlots, GridIconSlotsComponent {\n    /**\n     * The custom Chip component used in the grid.\n     * @default Chip\n     */\n    BaseChip: React.JSXElementConstructor<any>;\n    /**\n     * Component rendered for each cell.\n     * @default GridCell\n     */\n    Cell: React.JSXElementConstructor<any>;\n    /**\n     * Component rendered for each skeleton cell.\n     * @default GridSkeletonCell\n     */\n    SkeletonCell: React.JSXElementConstructor<any>;\n    /**\n     * Filter icon component rendered in each column header.\n     * @default GridColumnHeaderFilterIconButton\n     */\n    ColumnHeaderFilterIconButton: React.JSXElementConstructor<any>;\n    /**\n     * Column menu component rendered by clicking on the 3 dots \"kebab\" icon in column headers.\n     * @default GridColumnMenu\n     */\n    ColumnMenu: React.JSXElementConstructor<any>;\n    /**\n     * Component responsible for rendering the column headers.\n     * @default DataGridColumnHeaders\n     */\n    ColumnHeaders: React.JSXElementConstructor<any>;\n    /**\n     * Footer component rendered at the bottom of the grid viewport.\n     * @default GridFooter\n     */\n    Footer: React.JSXElementConstructor<any>;\n    /**\n     * Row count component rendered in the footer\n     * @default GridRowCount\n     */\n    FooterRowCount: React.JSXElementConstructor<any>;\n    /**\n     * Toolbar component rendered inside the Header component.\n     * @default null\n     */\n    Toolbar: React.JSXElementConstructor<any> | null;\n    /**\n     * PreferencesPanel component rendered inside the Header component.\n     * @default GridPreferencesPanel\n     */\n    PreferencesPanel: React.JSXElementConstructor<any>;\n    /**\n     * Loading overlay component rendered when the grid is in a loading state.\n     * @default GridLoadingOverlay\n     */\n    LoadingOverlay: React.JSXElementConstructor<any>;\n    /**\n     * No results overlay component rendered when the grid has no results after filtering.\n     * @default GridNoResultsOverlay\n     */\n    NoResultsOverlay: React.JSXElementConstructor<any>;\n    /**\n     * No rows overlay component rendered when the grid has no rows.\n     * @default GridNoRowsOverlay\n     */\n    NoRowsOverlay: React.JSXElementConstructor<any>;\n    /**\n     * Pagination component rendered in the grid footer by default.\n     * @default Pagination\n     */\n    Pagination: React.JSXElementConstructor<any> | null;\n    /**\n     * Filter panel component rendered when clicking the filter button.\n     * @default GridFilterPanel\n     */\n    FilterPanel: React.JSXElementConstructor<any>;\n    /**\n     * GridColumns panel component rendered when clicking the columns button.\n     * @default GridColumnsPanel\n     */\n    ColumnsPanel: React.JSXElementConstructor<any>;\n    /**\n     * Panel component wrapping the filters and columns panels.\n     * @default GridPanel\n     */\n    Panel: React.JSXElementConstructor<any>;\n    /**\n     * Component rendered for each row.\n     * @default GridRow\n     */\n    Row: React.JSXElementConstructor<any>;\n}\nexport interface UncapitalizedGridSlotsComponent extends UncapitalizeObjectKeys<GridSlotsComponent> {\n}\n","node_modules/@mui/x-data-grid/models/gridRows.d.ts":"import type { GridKeyValue } from './colDef/gridColDef';\nexport type GridValidRowModel = {\n    [key: string | symbol]: any;\n};\nexport type GridRowsProp<R extends GridValidRowModel = GridValidRowModel> = Readonly<GridRowModel<R>[]>;\n/**\n * The key value object representing the data of a row.\n */\nexport type GridRowModel<R extends GridValidRowModel = GridValidRowModel> = R;\nexport type GridUpdateAction = 'delete';\nexport interface GridRowModelUpdate extends GridRowModel {\n    _action?: GridUpdateAction;\n}\n/**\n * The grid rows total height and row positions.\n */\nexport interface GridRowsMeta {\n    /**\n     * The sum of all grid rows.\n     */\n    totalHeight: number;\n    /**\n     * The grid rows positions.\n     */\n    positions: number[];\n}\nexport interface GridTreeBasicNode {\n    /**\n     * The uniq id of this node.\n     */\n    id: GridRowId;\n    /**\n     * Depth of this node in the tree.\n     */\n    depth: number;\n}\nexport interface GridLeafNode extends GridTreeBasicNode {\n    type: 'leaf';\n    /**\n     * The id of the group containing this node.\n     */\n    parent: GridRowId;\n    /**\n     * The key used to group the children of this row.\n     */\n    groupingKey: GridKeyValue | null;\n}\nexport interface GridBasicGroupNode extends GridTreeBasicNode {\n    type: 'group';\n    /**\n     * The key used to group the children of this row.\n     */\n    groupingKey: GridKeyValue | null;\n    /**\n     * The field used to group the children of this row.\n     * Is `null` if no field has been used to group the children of this row.\n     */\n    groupingField: string | null;\n    /**\n     * The id of the body children nodes.\n     * Only contains the children of type \"group\" and \"leaf\".\n     */\n    children: GridRowId[];\n    /**\n     * The id of the footer child node.\n     */\n    footerId?: GridRowId | null;\n    /**\n     * The id of the children nodes, grouped by grouping field and grouping key.\n     * Only contains the children of type \"group\" and \"leaf\".\n     * Empty for flat tree.\n     */\n    childrenFromPath: GridChildrenFromPathLookup;\n    /**\n     * If `true`, the children of this group are not visible.\n     * @default false\n     */\n    childrenExpanded?: boolean;\n    /**\n     * The id of the group containing this node (null for the root group).\n     */\n    parent: GridRowId | null;\n    /**\n     * If `true`, this row is pinned.\n     * @default false\n     */\n    isPinned?: boolean;\n}\nexport interface GridAutoGeneratedGroupNode extends GridBasicGroupNode {\n    /**\n     * If `true`, this node has been automatically generated by the grid.\n     * In the row grouping, all groups are auto-generated\n     * In the tree data, some groups can be passed in the rows\n     */\n    isAutoGenerated: true;\n}\nexport interface GridDataGroupNode extends GridBasicGroupNode {\n    /**\n     * If `true`, this node has been automatically generated by the grid.\n     * In the row grouping, all groups are auto-generated\n     * In the tree data, some groups can be passed in the rows\n     */\n    isAutoGenerated: false;\n}\nexport type GridGroupNode = GridDataGroupNode | GridAutoGeneratedGroupNode;\nexport type GridChildrenFromPathLookup = {\n    [groupingField: string]: {\n        [groupingKey: string]: GridRowId;\n    };\n};\nexport interface GridFooterNode extends GridTreeBasicNode {\n    type: 'footer';\n    /**\n     * The id of the group containing this node.\n     */\n    parent: GridRowId;\n}\nexport interface GridSkeletonRowNode extends GridTreeBasicNode {\n    type: 'skeletonRow';\n    /**\n     * The id of the group containing this node.\n     * Is always equal to `GRID_ROOT_GROUP_ID`.\n     */\n    parent: GridRowId;\n}\ninterface GridBasicPinnedRowNode extends GridTreeBasicNode {\n    type: 'pinnedRow';\n    /**\n     * The id of the group containing this node.\n     * Is always equal to `GRID_ROOT_GROUP_ID`.\n     */\n    parent: GridRowId;\n}\nexport interface GridDataPinnedRowNode extends GridBasicPinnedRowNode {\n    /**\n     * If `true`, this node has been automatically generated by the grid.\n     */\n    isAutoGenerated: true;\n}\nexport interface GridAutoGeneratedPinnedRowNode extends GridBasicPinnedRowNode {\n    /**\n     * If `true`, this node has been automatically generated by the grid.\n     */\n    isAutoGenerated: false;\n}\nexport type GridPinnedRowNode = GridDataPinnedRowNode | GridAutoGeneratedPinnedRowNode;\nexport type GridTreeNode = GridLeafNode | GridGroupNode | GridFooterNode | GridPinnedRowNode | GridSkeletonRowNode;\nexport type GridTreeNodeWithRender = GridLeafNode | GridGroupNode | GridFooterNode | GridPinnedRowNode;\nexport type GridRowTreeConfig = Record<GridRowId, GridTreeNode>;\n/**\n * The type of Id supported by the grid.\n */\nexport type GridRowId = string | number;\nexport interface GridRowEntry<R extends GridValidRowModel = GridValidRowModel> {\n    /**\n     * The row id.\n     */\n    id: GridRowId;\n    /**\n     * The row model.\n     */\n    model: R;\n}\n/**\n * The function to retrieve the id of a [[GridRowModel]].\n */\nexport type GridRowIdGetter<R extends GridValidRowModel = GridValidRowModel> = (row: R) => GridRowId;\nexport {};\n","node_modules/@mui/x-data-grid/models/gridRowSelectionModel.d.ts":"import { GridRowId } from './gridRows';\nexport type GridInputRowSelectionModel = GridRowId[] | GridRowId;\nexport type GridRowSelectionModel = GridRowId[];\n","node_modules/@mui/x-data-grid/models/gridRootContainerRef.d.ts":"import * as React from 'react';\n/**\n * The ref type of the inner grid root container.\n */\nexport type GridRootContainerRef = React.RefObject<HTMLDivElement>;\n","node_modules/@mui/x-data-grid/models/gridRenderContextProps.d.ts":"/**\n * The object containing the column properties of the rendering state.\n */\nexport interface GridRenderColumnsProps {\n    /**\n     * The index of the first rendered column.\n     */\n    firstColIdx: number;\n    /**\n     * The index of the last rendered column.\n     */\n    lastColIdx: number;\n    /**\n     * The left offset required to position the viewport at the beginning of the first rendered column.\n     */\n    leftEmptyWidth: number;\n    /**\n     * The right offset required to position the viewport to the end of the last rendered column.\n     */\n    rightEmptyWidth: number;\n}\n/**\n * The object containing the row properties of the rendering state.\n */\nexport interface GridRenderRowProps {\n    /**\n     * The rendering zone page calculated from the scroll position.\n     */\n    page: number;\n    /**\n     * The index of the first rendered row.\n     */\n    firstRowIdx: number;\n    /**\n     * The index of the last rendered row.\n     */\n    lastRowIdx: number;\n}\n/**\n * The object containing the pagination properties of the rendering state.\n */\nexport interface GridRenderPaginationProps {\n    /**\n     * The current page if pagination is enabled.\n     */\n    paginationCurrentPage?: number;\n    /**\n     * The page size if pagination is enabled.\n     */\n    pageSize?: number;\n}\n/**\n * The full rendering state.\n */\nexport type GridRenderContextProps = GridRenderColumnsProps & GridRenderRowProps & GridRenderPaginationProps;\n","node_modules/@mui/x-data-grid/models/gridPaginationProps.d.ts":"export interface GridPaginationModel {\n    /**\n     * Set the number of rows in one page.\n     * If some of the rows have children (for instance in the tree data), this number represents the amount of top level rows wanted on each page.\n     * @default 100\n     */\n    pageSize: number;\n    /**\n     * The zero-based index of the current page.\n     * @default 0\n     */\n    page: number;\n}\n","node_modules/@mui/x-data-grid/models/gridIconSlotsComponent.d.ts":"import * as React from 'react';\n/**\n * Set of icons used in the grid component UI.\n * TODO: Differentiate community and pro interface\n */\nexport interface GridIconSlotsComponent {\n    /**\n     * Icon displayed on the boolean cell to represent the true value.\n     * @default GridCheckIcon\n     */\n    BooleanCellTrueIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the boolean cell to represent the false value.\n     * @default GridCloseIcon\n     */\n    BooleanCellFalseIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the side of the column header title to display the filter input component.\n     * @default GridTripleDotsVerticalIcon\n     */\n    ColumnMenuIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the open filter button present in the toolbar by default.\n     * @default GridFilterListIcon\n     */\n    OpenFilterButtonIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the column header menu to show that a filter has been applied to the column.\n     * @default GridFilterAltIcon\n     */\n    ColumnFilteredIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the column menu selector tab.\n     * @default GridColumnIcon\n     */\n    ColumnSelectorIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the side of the column header title when unsorted.\n     * @default GridColumnUnsortedIcon\n     */\n    ColumnUnsortedIcon: React.JSXElementConstructor<any> | null;\n    /**\n     * Icon displayed on the side of the column header title when sorted in ascending order.\n     * @default GridArrowUpwardIcon\n     */\n    ColumnSortedAscendingIcon: React.JSXElementConstructor<any> | null;\n    /**\n     * Icon displayed on the side of the column header title when sorted in descending order.\n     * @default GridArrowDownwardIcon\n     */\n    ColumnSortedDescendingIcon: React.JSXElementConstructor<any> | null;\n    /**\n     * Icon displayed in between two column headers that allows to resize the column header.\n     * @default GridSeparatorIcon\n     */\n    ColumnResizeIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the compact density option in the toolbar.\n     * @default GridViewHeadlineIcon\n     */\n    DensityCompactIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the standard density option in the toolbar.\n     * @default GridTableRowsIcon\n     */\n    DensityStandardIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the \"comfortable\" density option in the toolbar.\n     * @default GridViewStreamIcon\n     */\n    DensityComfortableIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the open export button present in the toolbar by default.\n     * @default GridSaveAltIcon\n     */\n    ExportIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the `actions` column type to open the menu.\n     * @default GridMoreVertIcon\n     */\n    MoreActionsIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the tree data toggling column when the children are collapsed\n     * @default GridKeyboardArrowRight\n     */\n    TreeDataExpandIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the tree data toggling column when the children are expanded\n     * @default GridExpandMoreIcon\n     */\n    TreeDataCollapseIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the grouping column when the children are collapsed\n     * @default GridKeyboardArrowRight\n     */\n    GroupingCriteriaExpandIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the grouping column when the children are expanded\n     * @default GridExpandMoreIcon\n     */\n    GroupingCriteriaCollapseIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the detail panel toggle column when collapsed.\n     * @default GridAddIcon\n     */\n    DetailPanelExpandIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the detail panel toggle column when expanded.\n     * @default GridRemoveIcon\n     */\n    DetailPanelCollapseIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed for deleting the filter from filter panel.\n     * @default GridAddIcon\n     */\n    FilterPanelAddIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed for deleting the filter from filter panel.\n     * @default GridDeleteIcon\n     */\n    FilterPanelDeleteIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed for deleting all the active filters from filter panel.\n     * @default GridDeleteForeverIcon\n     */\n    FilterPanelRemoveAllIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the `reorder` column type to reorder a row.\n     * @default GridDragIcon\n     */\n    RowReorderIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the quick filter input.\n     * @default GridSearchIcon\n     */\n    QuickFilterIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the quick filter reset input.\n     * @default GridCloseIcon\n     */\n    QuickFilterClearIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for hiding column\n     * @default GridVisibilityOffIcon\n     */\n    ColumnMenuHideIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for ascending sort\n     * @default GridArrowUpwardIcon\n     */\n    ColumnMenuSortAscendingIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for descending sort\n     * @default GridArrowDownwardIcon\n     */\n    ColumnMenuSortDescendingIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for filter\n     * @default GridFilterAltIcon\n     */\n    ColumnMenuFilterIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for showing all columns\n     * @default GridViewColumnIcon\n     */\n    ColumnMenuManageColumnsIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for clearing values\n     * @default GridClearIcon\n     */\n    ColumnMenuClearIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the input while processing.\n     * @default GridLoadIcon\n     */\n    LoadIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed on the column reorder button.\n     * @default GridDragIcon\n     */\n    ColumnReorderIcon: React.JSXElementConstructor<any>;\n}\n","node_modules/@mui/x-data-grid/models/gridHeaderFilteringModel.d.ts":"import { GridColDef } from './colDef';\nexport type GridHeaderFilteringState = {\n    editing: GridColDef['field'] | null;\n    menuOpen: GridColDef['field'] | null;\n};\n","node_modules/@mui/x-data-grid/models/gridFilterOperator.d.ts":"import * as React from 'react';\nimport { GridFilterItem } from './gridFilterItem';\nimport { GridCellParams } from './params/gridCellParams';\nimport type { GridColDef } from './colDef/gridColDef';\nimport type { GridValidRowModel } from './gridRows';\nimport type { GridApiCommunity } from './api/gridApiCommunity';\ntype ApplyFilterFnLegacy<R extends GridValidRowModel = any, V = any, F = V> = (params: GridCellParams<R, V, F>) => boolean;\ntype ApplyFilterFnV7<R extends GridValidRowModel = any, V = any, F = V> = (value: V, row: R, column: GridColDef<R, V, F>, apiRef: React.MutableRefObject<GridApiCommunity>) => boolean;\nexport type GetApplyFilterFnV7<R extends GridValidRowModel = any, V = any, F = V> = (filterItem: GridFilterItem, column: GridColDef<R, V, F>) => null | ApplyFilterFnV7<R, V, F>;\nexport type GetApplyFilterFnLegacy<R extends GridValidRowModel = any, V = any, F = V> = (filterItem: GridFilterItem, column: GridColDef<R, V, F>) => null | ApplyFilterFnLegacy<R, V, F>;\n/**\n * Filter operator definition interface.\n * @demos\n *   - [Custom filter operator](/x/react-data-grid/filtering/customization/#create-a-custom-operator)\n */\nexport interface GridFilterOperator<R extends GridValidRowModel = any, V = any, F = V> {\n    /**\n     * The label of the filter operator.\n     */\n    label?: string;\n    /**\n     * The label of the filter shown in header filter row.\n     */\n    headerLabel?: string;\n    /**\n     * The name of the filter operator.\n     * It will be matched with the `operator` property of the filter items.\n     */\n    value: string;\n    /**\n     * The callback that generates a filtering function for a given filter item and column.\n     * This function can return `null` to skip filtering for this item and column.\n     * @param {GridFilterItem} filterItem The filter item with which we want to filter the column.\n     * @param {GridColDef} column The column from which we want to filter the rows.\n     * @returns {null | ApplyFilterFnLegacy} The function to call to check if a row pass this filter item or not.\n     */\n    getApplyFilterFn: GetApplyFilterFnLegacy<R, V, F>;\n    /**\n     * The callback that generates a filtering function for a given filter item and column.\n     * This function can return `null` to skip filtering for this item and column.\n     * This function uses the more performant v7 API.\n     * @param {GridFilterItem} filterItem The filter item with which we want to filter the column.\n     * @param {GridColDef} column The column from which we want to filter the rows.\n     * @returns {null | ApplyFilterFnV7} The function to call to check if a row pass this filter item or not.\n     */\n    getApplyFilterFnV7?: GetApplyFilterFnV7<R, V, F>;\n    /**\n     * The input component to render in the filter panel for this filter operator.\n     */\n    InputComponent?: React.JSXElementConstructor<any>;\n    /**\n     * The props to pass to the input component in the filter panel for this filter operator.\n     */\n    InputComponentProps?: Record<string, any>;\n    /**\n     * Converts the value of a filter item to a human-readable form.\n     * @param {GridFilterItem['value']} value The filter item value.\n     * @returns {string} The value formatted to be displayed in the UI of filter button tooltip.\n     */\n    getValueAsString?: (value: GridFilterItem['value']) => string;\n    /**\n     * If `false`, filter operator doesn't require user-entered value to work.\n     * Usually should be set to `false` for filter operators that don't have `InputComponent` (for example `isEmpty`)\n     * @default true\n     */\n    requiresFilterValue?: boolean;\n}\nexport {};\n","node_modules/@mui/x-data-grid/models/gridFilterModel.d.ts":"import { GridFilterItem, GridLogicOperator } from './gridFilterItem';\n/**\n * Model describing the filters to apply to the grid.\n * @demos\n *   - [Pass filters to the grid](/x/react-data-grid/filtering/#pass-filters-to-the-data-grid)\n */\nexport interface GridFilterModel {\n    /**\n     * @default []\n     */\n    items: GridFilterItem[];\n    /**\n     * - `GridLogicOperator.And`: the row must pass all the filter items.\n     * - `GridLogicOperator.Or`: the row must pass at least on filter item.\n     * @default `GridLogicOperator.Or`\n     */\n    logicOperator?: GridLogicOperator;\n    /**\n     * values used to quick filter rows\n     * @default `[]`\n     */\n    quickFilterValues?: any[];\n    /**\n     * - `GridLogicOperator.And`: the row must pass all the values.\n     * - `GridLogicOperator.Or`: the row must pass at least one value.\n     * @default `GridLogicOperator.And`\n     */\n    quickFilterLogicOperator?: GridLogicOperator;\n    /**\n     * If `true`, the quick filter will skip cell values from hidden columns.\n     * @default false\n     */\n    quickFilterExcludeHiddenColumns?: boolean;\n}\n","node_modules/@mui/x-data-grid/models/gridFilterItem.d.ts":"/**\n * Filter item definition interface.\n * @demos\n *   - [Custom filter operator](/x/react-data-grid/filtering/customization/#create-a-custom-operator)\n */\nexport interface GridFilterItem {\n    /**\n     * Must be unique.\n     * Only useful when the model contains several items.\n     */\n    id?: number | string;\n    /**\n     * The column from which we want to filter the rows.\n     */\n    field: string;\n    /**\n     * The filtering value.\n     * The operator filtering function will decide for each row if the row values is correct compared to this value.\n     */\n    value?: any;\n    /**\n     * The name of the operator we want to apply.\n     */\n    operator: string;\n}\ndeclare enum GridLogicOperator {\n    And = \"and\",\n    Or = \"or\"\n}\nexport { GridLogicOperator };\n","node_modules/@mui/x-data-grid/models/gridFeatureMode.d.ts":"export type GridFeatureMode = 'client' | 'server';\n","node_modules/@mui/x-data-grid/models/gridExport.d.ts":"import * as React from 'react';\nimport { GridRowId } from './gridRows';\nimport type { GridApiCommon } from './api';\nimport type { GridApiCommunity } from './api/gridApiCommunity';\n/**\n * The options applicable to any export format.\n */\nexport interface GridExportOptions {\n    /**\n     * The columns exported.\n     * This should only be used if you want to restrict the columns exports.\n     */\n    fields?: string[];\n    /**\n     * If `true`, the hidden columns will also be exported.\n     * @default false\n     */\n    allColumns?: boolean;\n}\n/**\n * The options applicable to any document export format (CSV and Excel).\n */\nexport interface GridFileExportOptions<Api extends GridApiCommon = GridApiCommunity> extends GridExportOptions {\n    /**\n     * The string used as the file name.\n     * @default `document.title`\n     */\n    fileName?: string;\n    /**\n     * If `true`, the first row of the file will include the headers of the grid.\n     * @default true\n     */\n    includeHeaders?: boolean;\n    /**\n     * Function that returns the list of row ids to export on the order they should be exported.\n     * @param {GridGetRowsToExportParams} params With all properties from [[GridGetRowsToExportParams]].\n     * @returns {GridRowId[]} The list of row ids to export.\n     */\n    getRowsToExport?: (params: GridGetRowsToExportParams<Api>) => GridRowId[];\n}\nexport interface GridGetRowsToExportParams<Api extends GridApiCommon = GridApiCommunity> {\n    /**\n     * The API of the grid.\n     */\n    apiRef: React.MutableRefObject<Api>;\n}\nexport interface GridCsvGetRowsToExportParams<Api extends GridApiCommon = GridApiCommunity> extends GridGetRowsToExportParams<Api> {\n}\nexport interface GridPrintGetRowsToExportParams<Api extends GridApiCommon = GridApiCommunity> extends GridGetRowsToExportParams<Api> {\n}\n/**\n * The options to apply on the CSV export.\n * @demos\n *   - [CSV export](/x/react-data-grid/export/#csv-export)\n */\nexport interface GridCsvExportOptions extends GridFileExportOptions {\n    /**\n     * The character used to separate fields.\n     * @default ','\n     */\n    delimiter?: string;\n    /**\n     * The string used as the file name.\n     * @default `document.title`\n     */\n    fileName?: string;\n    /**\n     * If `true`, the UTF-8 Byte Order Mark (BOM) prefixes the exported file.\n     * This can allow Excel to automatically detect file encoding as UTF-8.\n     * @default false\n     */\n    utf8WithBom?: boolean;\n    /**\n     * If `true`, the CSV will include the column headers and column groups.\n     * Use `includeColumnGroupsHeaders` to control whether the column groups are included.\n     * @default true\n     */\n    includeHeaders?: boolean;\n    /**\n     * If `true`, the CSV will include the column groups.\n     * @see See {@link https://mui.com/x/react-data-grid/column-groups/ column groups docs} for more details.\n     * @default true\n     */\n    includeColumnGroupsHeaders?: boolean;\n    /**\n     * Function that returns the list of row ids to export on the order they should be exported.\n     * @param {GridCsvGetRowsToExportParams} params With all properties from [[GridCsvGetRowsToExportParams]].\n     * @returns {GridRowId[]} The list of row ids to export.\n     */\n    getRowsToExport?: (params: GridCsvGetRowsToExportParams) => GridRowId[];\n    /**\n     * @ignore\n     * If `false`, the quotes will not be appended to the cell value.\n     * @default true\n     */\n    shouldAppendQuotes?: boolean;\n}\n/**\n * The options to apply on the Print export.\n * @demos\n *   - [Print export](/x/react-data-grid/export/#print-export)\n */\nexport interface GridPrintExportOptions extends GridExportOptions {\n    /**\n     * The value to be used as the print window title.\n     * @default The title of the page.\n     */\n    fileName?: string;\n    /**\n     * If `true`, the toolbar is removed for when printing.\n     * @default false\n     */\n    hideToolbar?: boolean;\n    /**\n     * If `true`, the footer is removed for when printing.\n     * @default false\n     */\n    hideFooter?: boolean;\n    /**\n     * If `true`, the selection checkboxes will be included when printing.\n     * @default false\n     */\n    includeCheckboxes?: boolean;\n    /**\n     * If `false`, all <style> and <link type=\"stylesheet\" /> tags from the <head> will not be copied\n     * to the print window.\n     * @default true\n     */\n    copyStyles?: boolean;\n    /**\n     * One or more classes passed to the print window.\n     */\n    bodyClassName?: string;\n    /**\n     * Provide Print specific styles to the print window.\n     */\n    pageStyle?: string | Function;\n    /**\n     * Function that returns the list of row ids to export in the order they should be exported.\n     * @param {GridPrintGetRowsToExportParams} params With all properties from [[GridPrintGetRowsToExportParams]].\n     * @returns {GridRowId[]} The list of row ids to export.\n     */\n    getRowsToExport?: (params: GridPrintGetRowsToExportParams) => GridRowId[];\n}\n/**\n * Available export formats.\n */\nexport type GridExportFormat = 'csv' | 'print';\n/**\n * Available export extensions.\n */\nexport type GridExportExtension = 'csv';\n","node_modules/@mui/x-data-grid/models/gridEditRowModel.d.ts":"import type { GridEditCellMeta } from './api/gridEditingApi';\nexport interface GridEditCellProps<V = any> {\n    value?: V | undefined;\n    isValidating?: boolean;\n    isProcessingProps?: boolean;\n    changeReason?: GridEditCellMeta['changeReason'];\n    [prop: string]: any;\n}\nexport type GridEditRowProps = {\n    [field: string]: GridEditCellProps;\n};\nexport type GridEditingState = {\n    [rowId: string]: GridEditRowProps;\n};\nexport type GridEditMode = 'cell' | 'row';\ndeclare enum GridEditModes {\n    Cell = \"cell\",\n    Row = \"row\"\n}\ndeclare enum GridCellModes {\n    Edit = \"edit\",\n    View = \"view\"\n}\ndeclare enum GridRowModes {\n    Edit = \"edit\",\n    View = \"view\"\n}\nexport { GridEditModes, GridCellModes, GridRowModes };\n","node_modules/@mui/x-data-grid/models/gridDensity.d.ts":"/**\n * Available densities.\n */\nexport type GridDensity = 'compact' | 'standard' | 'comfortable';\n","node_modules/@mui/x-data-grid/models/gridColumnSpanning.d.ts":"export type GridColumnIndex = number;\nexport type GridCellColSpanInfo = {\n    spannedByColSpan: true;\n    rightVisibleCellIndex: GridColumnIndex;\n    leftVisibleCellIndex: GridColumnIndex;\n} | {\n    spannedByColSpan: false;\n    cellProps: {\n        colSpan: number;\n        width: number;\n    };\n};\n","node_modules/@mui/x-data-grid/models/gridColumnHeaderClass.d.ts":"import { GridColumnHeaderParams } from './params/gridColumnHeaderParams';\n/**\n * A function used to process headerClassName params.\n */\nexport type GridColumnHeaderClassFn = (params: GridColumnHeaderParams) => string;\n/**\n * The union type representing the [[GridColDef]] column header class type.\n */\nexport type GridColumnHeaderClassNamePropType = string | GridColumnHeaderClassFn;\n","node_modules/@mui/x-data-grid/models/gridColumnGrouping.d.ts":"/// <reference types=\"react\" />\nimport { GridColDef } from './colDef';\nimport type { GridColumnGroupHeaderParams } from './params/gridColumnGroupHeaderParams';\nexport interface GridLeafColumn {\n    field: GridColDef['field'];\n}\nexport type GridColumnNode = GridColumnGroup | GridLeafColumn;\nexport declare function isLeaf(node: GridColumnNode): node is GridLeafColumn;\n/**\n * A function used to process headerClassName params.\n */\nexport type GridColumnGroupHeaderClassFn = (params: GridColumnGroupHeaderParams) => string;\n/**\n * The union type representing the [[GridColDef]] column header class type.\n */\nexport type GridColumnGroupHeaderClassNamePropType = string | GridColumnGroupHeaderClassFn;\nexport interface GridColumnGroup extends Pick<GridColDef, 'headerName' | 'description' | 'headerAlign'> {\n    /**\n     * A unique string identifying the group.\n     */\n    groupId: string;\n    /**\n     * The groups and columns included in this group.\n     */\n    children: GridColumnNode[];\n    /**\n     * If `true`, allows reordering columns outside of the group.\n     * @default false\n     */\n    freeReordering?: boolean;\n    /**\n     * Allows to render a component in the column group header cell.\n     * @param {GridColumnGroupHeaderParams} params Object containing parameters for the renderer.\n     * @returns {React.ReactNode} The element to be rendered.\n     */\n    renderHeaderGroup?: (params: GridColumnGroupHeaderParams) => React.ReactNode;\n    /**\n     * Class name that will be added in the column group header cell.\n     */\n    headerClassName?: GridColumnGroupHeaderClassNamePropType;\n}\nexport type GridColumnGroupingModel = GridColumnGroup[];\n","node_modules/@mui/x-data-grid/models/gridCellClass.d.ts":"import { GridValidRowModel } from './gridRows';\nimport { GridCellParams } from './params/gridCellParams';\n/**\n * A function used to process cellClassName params.\n */\nexport type GridCellClassFn<R extends GridValidRowModel = any, V = unknown> = (params: GridCellParams<R, V>) => string;\n/**\n * The union type representing the [[GridColDef]] cell class type.\n */\nexport type GridCellClassNamePropType<R extends GridValidRowModel = any, V = unknown> = string | GridCellClassFn<R, V>;\n","node_modules/@mui/x-data-grid/models/gridCell.d.ts":"import type { GridColDef } from './colDef';\nimport { GridRowId } from './gridRows';\n/**\n * The mode of the cell.\n */\nexport type GridCellMode = 'edit' | 'view';\n/**\n * The mode of the row.\n */\nexport type GridRowMode = 'edit' | 'view';\n/**\n * The coordinates of cell represented by their row and column indexes.\n */\nexport interface GridCellIndexCoordinates {\n    colIndex: number;\n    rowIndex: number;\n}\n/**\n * The coordinates of a cell represented by their row ID and column field.\n */\nexport interface GridCellCoordinates {\n    id: GridRowId;\n    field: GridColDef['field'];\n}\n/**\n * The coordinates of column header represented by their row and column indexes.\n */\nexport interface GridColumnHeaderIndexCoordinates {\n    colIndex: number;\n}\n","node_modules/@mui/x-data-grid/models/gridApiCaches.d.ts":"import { GridRowsInternalCache } from '../hooks/features/rows/gridRowsInterfaces';\nexport interface GridApiCaches {\n    rows: GridRowsInternalCache;\n}\n","node_modules/@mui/x-data-grid/models/elementSize.d.ts":"/**\n * The size of a container.\n */\nexport interface ElementSize {\n    /**\n     * The height of a container or HTMLElement.\n     */\n    height: number;\n    /**\n     * The width of a container or HTMLElement.\n     */\n    width: number;\n}\n","node_modules/@mui/x-data-grid/models/cursorCoordinates.d.ts":"export interface CursorCoordinates {\n    x: number;\n    y: number;\n}\n","node_modules/@mui/x-data-grid/models/controlStateItem.d.ts":"import { GridCallbackDetails } from './api/gridCallbackDetails';\nimport type { GridEventLookup, GridControlledStateEventLookup } from './events';\nimport type { OutputSelector } from '../utils/createSelector';\nimport { GridStateCommunity } from './gridStateCommunity';\nexport interface GridControlStateItem<State extends GridStateCommunity, E extends keyof GridControlledStateEventLookup> {\n    stateId: string;\n    propModel?: GridEventLookup[E]['params'];\n    stateSelector: OutputSelector<{\n        state: State;\n        instanceId: string;\n    }, GridControlledStateEventLookup[E]['params']> | ((state: State) => GridControlledStateEventLookup[E]['params']);\n    propOnChange?: (model: GridControlledStateEventLookup[E]['params'], details: GridCallbackDetails) => void;\n    changeEvent: E;\n}\n","node_modules/@mui/x-data-grid/DataGrid/useDataGridProps.d.ts":"import { DataGridProcessedProps, DataGridProps, DataGridPropsWithDefaultValues } from '../models/props/DataGridProps';\nimport { GridValidRowModel } from '../models';\n/**\n * The default values of `DataGridPropsWithDefaultValues` to inject in the props of DataGrid.\n */\nexport declare const DATA_GRID_PROPS_DEFAULT_VALUES: DataGridPropsWithDefaultValues;\nexport declare const useDataGridProps: <R extends GridValidRowModel>(inProps: DataGridProps<R>) => DataGridProcessedProps<R>;\n","node_modules/@mui/x-data-grid/DataGrid/useDataGridComponent.d.ts":"/// <reference types=\"react\" />\nimport { DataGridProcessedProps } from '../models/props/DataGridProps';\nimport { GridApiCommunity, GridPrivateApiCommunity } from '../models/api/gridApiCommunity';\nexport declare const useDataGridComponent: (inputApiRef: React.MutableRefObject<GridApiCommunity> | undefined, props: DataGridProcessedProps) => import(\"react\").MutableRefObject<GridPrivateApiCommunity>;\n","node_modules/@mui/x-data-grid/DataGrid/index.d.ts":"export * from './DataGrid';\nexport { DATA_GRID_PROPS_DEFAULT_VALUES } from './useDataGridProps';\n","node_modules/@mui/x-data-grid/DataGrid/DataGrid.d.ts":"import * as React from 'react';\nimport { DataGridProps } from '../models/props/DataGridProps';\nimport { GridValidRowModel } from '../models/gridRows';\ninterface DataGridComponent {\n    <R extends GridValidRowModel = any>(props: DataGridProps<R> & React.RefAttributes<HTMLDivElement>): React.JSX.Element;\n    propTypes?: any;\n}\n/**\n * Demos:\n * - [DataGrid](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGrid API](https://mui.com/x/api/data-grid/data-grid/)\n */\nexport declare const DataGrid: DataGridComponent;\n/**\n * Remove at v7\n * @deprecated\n */\nexport declare const SUBMIT_FILTER_STROKE_TIME: number;\n/**\n * Remove at v7\n * @deprecated\n */\nexport declare const SUBMIT_FILTER_DATE_STROKE_TIME: number;\nexport {};\n","node_modules/@mui/x-data-grid/components/reexportable.d.ts":"export { GridColumnMenu, GRID_COLUMN_MENU_SLOTS, GRID_COLUMN_MENU_SLOT_PROPS, } from './menu/columnMenu/GridColumnMenu';\n","node_modules/@mui/x-data-grid/components/index.d.ts":"export * from './base';\nexport * from './cell';\nexport * from './containers';\nexport * from './columnHeaders';\nexport * from './columnSelection';\nexport * from '../material/icons';\nexport * from './menu';\nexport * from './panel';\nexport * from './toolbar';\nexport * from './GridApiContext';\nexport * from './GridFooter';\nexport * from './GridHeader';\nexport * from './GridLoadingOverlay';\nexport * from './GridNoRowsOverlay';\nexport * from './GridPagination';\nexport * from './GridRowCount';\nexport * from './GridRow';\nexport * from './GridSelectedRowCount';\n","node_modules/@mui/x-data-grid/components/GridSelectedRowCount.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ninterface SelectedRowCountProps {\n    selectedRowCount: number;\n}\ndeclare const GridSelectedRowCount: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & SelectedRowCountProps & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridSelectedRowCount };\n","node_modules/@mui/x-data-grid/components/GridRowCount.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ninterface RowCountProps {\n    rowCount: number;\n    visibleRowCount: number;\n}\nexport type GridRowCountProps = React.HTMLAttributes<HTMLDivElement> & RowCountProps & {\n    sx?: SxProps<Theme>;\n};\ndeclare const GridRowCount: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & RowCountProps & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridRowCount };\n","node_modules/@mui/x-data-grid/components/GridRow.d.ts":"import * as React from 'react';\nimport { GridRowId, GridRowModel } from '../models/gridRows';\nimport { GridStateColDef } from '../models/colDef/gridColDef';\nexport interface GridRowProps extends React.HTMLAttributes<HTMLDivElement> {\n    rowId: GridRowId;\n    selected: boolean;\n    /**\n     * Index of the row in the whole sorted and filtered dataset.\n     * If some rows above have expanded children, this index also take those children into account.\n     */\n    index: number;\n    rowHeight: number | 'auto';\n    containerWidth: number;\n    firstColumnToRender: number;\n    lastColumnToRender: number;\n    visibleColumns: GridStateColDef[];\n    renderedColumns: GridStateColDef[];\n    position: 'left' | 'center' | 'right';\n    /**\n     * Determines which cell has focus.\n     * If `null`, no cell in this row has focus.\n     */\n    focusedCell: string | null;\n    /**\n     * Determines which cell should be tabbable by having tabIndex=0.\n     * If `null`, no cell in this row is in the tab sequence.\n     */\n    tabbableCell: string | null;\n    row?: GridRowModel;\n    isLastVisible?: boolean;\n    focusedCellColumnIndexNotInRange?: number;\n    isNotVisible?: boolean;\n    onClick?: React.MouseEventHandler<HTMLDivElement>;\n    onDoubleClick?: React.MouseEventHandler<HTMLDivElement>;\n    onMouseEnter?: React.MouseEventHandler<HTMLDivElement>;\n    onMouseLeave?: React.MouseEventHandler<HTMLDivElement>;\n    [x: string]: any;\n}\ndeclare const MemoizedGridRow: React.ForwardRefExoticComponent<Omit<GridRowProps, \"ref\"> & React.RefAttributes<HTMLDivElement>>;\nexport { MemoizedGridRow as GridRow };\n","node_modules/@mui/x-data-grid/components/GridPagination.d.ts":"import * as React from 'react';\nimport { TablePaginationProps } from '@mui/material/TablePagination';\ninterface GridPaginationOwnProps {\n    component?: React.ElementType;\n}\ndeclare const GridPagination: React.ForwardRefExoticComponent<Omit<Partial<Omit<TablePaginationProps, \"component\">> & GridPaginationOwnProps, \"ref\"> & React.RefAttributes<unknown>>;\nexport { GridPagination };\n","node_modules/@mui/x-data-grid/components/GridNoRowsOverlay.d.ts":"import * as React from 'react';\ndeclare const GridNoRowsOverlay: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: import(\"@mui/system\").SxProps<import(\"@mui/system\").Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridNoRowsOverlay };\n","node_modules/@mui/x-data-grid/components/GridNoResultsOverlay.d.ts":"import * as React from 'react';\nexport declare const GridNoResultsOverlay: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: import(\"@mui/system\").SxProps<import(\"@mui/system\").Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\n","node_modules/@mui/x-data-grid/components/GridLoadingOverlay.d.ts":"import * as React from 'react';\ndeclare const GridLoadingOverlay: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: import(\"@mui/system\").SxProps<import(\"@mui/system\").Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridLoadingOverlay };\n","node_modules/@mui/x-data-grid/components/GridHeader.d.ts":"import * as React from 'react';\nexport declare function GridHeader(): React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/GridFooter.d.ts":"import * as React from 'react';\ndeclare const GridFooter: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: import(\"@mui/system\").SxProps<import(\"@mui/system\").Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridFooter };\n","node_modules/@mui/x-data-grid/components/GridColumnHeaders.d.ts":"import * as React from 'react';\nimport { UseGridColumnHeadersProps } from '../hooks/features/columnHeaders/useGridColumnHeaders';\ninterface GridColumnHeadersProps extends React.HTMLAttributes<HTMLDivElement>, Omit<UseGridColumnHeadersProps, 'innerRef'> {\n    innerRef?: React.Ref<HTMLDivElement>;\n}\ndeclare const MemoizedGridColumnHeaders: React.ForwardRefExoticComponent<GridColumnHeadersProps & React.RefAttributes<HTMLDivElement>>;\nexport { MemoizedGridColumnHeaders as GridColumnHeaders };\n","node_modules/@mui/x-data-grid/components/GridApiContext.d.ts":"import * as React from 'react';\nexport declare const GridApiContext: React.Context<unknown>;\n","node_modules/@mui/x-data-grid/components/DataGridVirtualScroller.d.ts":"import * as React from 'react';\ndeclare const DataGridVirtualScroller: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;\nexport { DataGridVirtualScroller };\n","node_modules/@mui/x-data-grid/colDef/utils.d.ts":"import * as React from 'react';\nimport { GridApiCommunity } from '../models/api/gridApiCommunity';\nimport { GetApplyFilterFnV7, GetApplyFilterFnLegacy, GridFilterOperator } from '../models';\nimport { GetApplyQuickFilterFnV7, GetApplyQuickFilterFnLegacy } from '../models/colDef/gridColDef';\n/**\n * A global API ref, for v7-to-legacy converter\n */\nexport declare const GLOBAL_API_REF: {\n    current: React.MutableRefObject<GridApiCommunity> | null;\n};\n/**\n * A tagger to determine if the filter is internal or custom user-supplied.\n * To be a valid internal filter, the v7 function *must* be defined/redefined at\n * the same time as the legacy one.\n * https://github.com/mui/mui-x/pull/9254#discussion_r1231095551\n */\nexport declare function tagInternalFilter<T>(fn: T): T;\nexport declare function isInternalFilter(fn: Function | undefined): boolean;\nexport declare function convertFilterV7ToLegacy(fn: GetApplyFilterFnV7): GetApplyFilterFnLegacy;\nexport declare function convertLegacyOperators(ops: Omit<GridFilterOperator, 'getApplyFilterFn'>[]): GridFilterOperator[];\nexport declare function convertQuickFilterV7ToLegacy(fn: GetApplyQuickFilterFnV7): GetApplyQuickFilterFnLegacy<any, any, any>;\n","node_modules/@mui/x-data-grid/colDef/index.d.ts":"export * from './gridActionsColDef';\nexport * from './gridBooleanColDef';\nexport * from './gridCheckboxSelectionColDef';\nexport * from './gridDateColDef';\nexport * from './gridNumericColDef';\nexport * from './gridSingleSelectColDef';\nexport * from './gridStringColDef';\nexport * from './gridBooleanOperators';\nexport * from './gridDateOperators';\nexport * from './gridNumericOperators';\nexport * from './gridSingleSelectOperators';\nexport * from './gridStringOperators';\nexport * from './gridDefaultColumnTypes';\n","node_modules/@mui/x-data-grid/colDef/gridStringOperators.d.ts":"import type { GridApplyQuickFilterV7 } from '../models/colDef/gridColDef';\nimport { GridFilterOperator } from '../models/gridFilterOperator';\nexport declare const getGridStringQuickFilterFn: (value: any) => GridApplyQuickFilterV7 | null;\nexport declare const getGridStringOperators: (disableTrim?: boolean) => GridFilterOperator<any, number | string | null, any>[];\n","node_modules/@mui/x-data-grid/colDef/gridStringColDef.d.ts":"import { GridColTypeDef } from '../models/colDef/gridColDef';\n/**\n * TODO: Move pro and premium properties outside of this Community file\n */\nexport declare const GRID_STRING_COL_DEF: GridColTypeDef<any, any>;\n","node_modules/@mui/x-data-grid/colDef/gridSingleSelectOperators.d.ts":"import { GridFilterOperator } from '../models/gridFilterOperator';\nexport declare const getGridSingleSelectOperators: () => GridFilterOperator[];\n","node_modules/@mui/x-data-grid/colDef/gridSingleSelectColDef.d.ts":"import { GridSingleSelectColDef } from '../models/colDef/gridColDef';\nexport declare const GRID_SINGLE_SELECT_COL_DEF: Omit<GridSingleSelectColDef, 'field'>;\n","node_modules/@mui/x-data-grid/colDef/gridNumericOperators.d.ts":"import { GridFilterOperator } from '../models/gridFilterOperator';\nimport type { GridApplyQuickFilterV7 } from '../models/colDef/gridColDef';\nexport declare const getGridNumericQuickFilterFn: (value: any) => GridApplyQuickFilterV7 | null;\nexport declare const getGridNumericOperators: () => GridFilterOperator<any, number | string | null, any>[];\n","node_modules/@mui/x-data-grid/colDef/gridNumericColDef.d.ts":"import { GridColTypeDef } from '../models/colDef/gridColDef';\nexport declare const GRID_NUMERIC_COL_DEF: GridColTypeDef<number | string | null, string>;\n","node_modules/@mui/x-data-grid/colDef/gridDefaultColumnTypes.d.ts":"import { GridColumnTypesRecord } from '../models/colDef/gridColumnTypesRecord';\nexport declare const DEFAULT_GRID_COL_TYPE_KEY = \"__default__\";\nexport declare const getGridDefaultColumnTypes: () => GridColumnTypesRecord;\n","node_modules/@mui/x-data-grid/colDef/gridDateOperators.d.ts":"import { GridFilterOperator } from '../models/gridFilterOperator';\nexport declare const getGridDateOperators: (showTime?: boolean) => GridFilterOperator<any, Date, any>[];\n","node_modules/@mui/x-data-grid/colDef/gridDateColDef.d.ts":"import { GridColTypeDef } from '../models/colDef/gridColDef';\nimport { GridValueFormatterParams } from '../models/params/gridCellParams';\nexport declare function gridDateFormatter({ value, field, id }: GridValueFormatterParams<Date>): string;\nexport declare function gridDateTimeFormatter({ value, field, id }: GridValueFormatterParams<Date>): string;\nexport declare const GRID_DATE_COL_DEF: GridColTypeDef<Date, string>;\nexport declare const GRID_DATETIME_COL_DEF: GridColTypeDef<Date, string>;\n","node_modules/@mui/x-data-grid/colDef/gridCheckboxSelectionColDef.d.ts":"import { GridColDef } from '../models/colDef/gridColDef';\nexport declare const GRID_CHECKBOX_SELECTION_FIELD = \"__check__\";\nexport declare const GRID_CHECKBOX_SELECTION_COL_DEF: GridColDef;\n","node_modules/@mui/x-data-grid/colDef/gridBooleanOperators.d.ts":"import { GridFilterOperator } from '../models/gridFilterOperator';\nexport declare const getGridBooleanOperators: () => GridFilterOperator<any, boolean | null, any>[];\n","node_modules/@mui/x-data-grid/colDef/gridBooleanColDef.d.ts":"import { GridColTypeDef } from '../models/colDef/gridColDef';\nexport declare const GRID_BOOLEAN_COL_DEF: GridColTypeDef<boolean | null, any>;\n","node_modules/@mui/x-data-grid/colDef/gridActionsColDef.d.ts":"import { GridColTypeDef } from '../models/colDef/gridColDef';\nexport declare const GRID_ACTIONS_COLUMN_TYPE = \"actions\";\nexport declare const GRID_ACTIONS_COL_DEF: GridColTypeDef;\n","node_modules/@mui/x-data-grid/utils/cleanupTracking/TimerBasedCleanupTracking.d.ts":"/// <reference types=\"node\" />\nimport { CleanupTracking, UnregisterToken, UnsubscribeFn } from './CleanupTracking';\nexport declare class TimerBasedCleanupTracking implements CleanupTracking {\n    timeouts?: Map<number, NodeJS.Timeout> | undefined;\n    cleanupTimeout: number;\n    constructor(timeout?: number);\n    register(object: any, unsubscribe: UnsubscribeFn, unregisterToken: UnregisterToken): void;\n    unregister(unregisterToken: UnregisterToken): void;\n    reset(): void;\n}\n","node_modules/@mui/x-data-grid/utils/cleanupTracking/FinalizationRegistryBasedCleanupTracking.d.ts":"import { CleanupTracking, UnsubscribeFn, UnregisterToken } from './CleanupTracking';\nexport declare class FinalizationRegistryBasedCleanupTracking implements CleanupTracking {\n    registry: FinalizationRegistry<UnsubscribeFn>;\n    register(object: any, unsubscribe: UnsubscribeFn, unregisterToken: UnregisterToken): void;\n    unregister(unregisterToken: UnregisterToken): void;\n    reset(): void;\n}\n","node_modules/@mui/x-data-grid/utils/cleanupTracking/CleanupTracking.d.ts":"export type UnregisterToken = {\n    cleanupToken: number;\n};\nexport type UnsubscribeFn = () => void;\nexport interface CleanupTracking {\n    register(object: any, unsubscribe: UnsubscribeFn, unregisterToken: UnregisterToken): void;\n    unregister(unregisterToken: UnregisterToken): void;\n    reset(): void;\n}\n","node_modules/@mui/x-data-grid/material/icons/index.d.ts":"export declare const GridArrowUpwardIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridArrowDownwardIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridKeyboardArrowRight: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridExpandMoreIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridFilterListIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridFilterAltIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridSearchIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridMenuIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridCheckCircleIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridColumnIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridSeparatorIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridViewHeadlineIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridTableRowsIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridViewStreamIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridTripleDotsVerticalIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridCloseIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridAddIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridRemoveIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridLoadIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridDragIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridSaveAltIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridCheckIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridMoreVertIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridVisibilityOffIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridViewColumnIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridClearIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridDeleteIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridDeleteForeverIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n","node_modules/@mui/x-data-grid/material/icons/GridColumnUnsortedIcon.d.ts":"import { SvgIconProps } from '@mui/material/SvgIcon';\nimport * as React from 'react';\nimport { GridSortDirection } from '../../models/gridSortModel';\ninterface GridColumnUnsortedIconProps extends SvgIconProps {\n    sortingOrder: GridSortDirection[];\n}\nexport declare const GridColumnUnsortedIcon: React.NamedExoticComponent<GridColumnUnsortedIconProps>;\nexport {};\n","node_modules/@mui/x-data-grid/internals/utils/useProps.d.ts":"import { GridSlotsComponentsProps } from '../../models/gridSlotsComponentsProps';\nimport { GridSlotsComponent } from '../../models';\ninterface WithComponents {\n    components?: Partial<GridSlotsComponent>;\n    componentsProps?: GridSlotsComponentsProps;\n}\nexport declare function useProps<T extends WithComponents>(allProps: T): readonly [Partial<GridSlotsComponent> | undefined, GridSlotsComponentsProps | undefined, Omit<T, \"components\" | \"componentsProps\">];\nexport {};\n","node_modules/@mui/x-data-grid/internals/utils/slotsMigration.d.ts":"export type UncapitalizeObjectKeys<T extends object> = {\n    [K in keyof T as K extends string ? Uncapitalize<K> : K]: T[K];\n};\nexport declare const uncapitalizeObjectKeys: <TInputType extends object>(capitalizedObject: TInputType) => UncapitalizeObjectKeys<TInputType> | undefined;\n","node_modules/@mui/x-data-grid/internals/utils/index.d.ts":"export * from './computeSlots';\nexport * from './slotsMigration';\nexport * from './useProps';\n","node_modules/@mui/x-data-grid/internals/utils/computeSlots.d.ts":"import { UncapitalizeObjectKeys } from './slotsMigration';\nexport declare function computeSlots<SlotComponents extends object>({ defaultSlots, slots, components, }: {\n    defaultSlots: UncapitalizeObjectKeys<SlotComponents>;\n    slots?: UncapitalizeObjectKeys<Partial<SlotComponents>>;\n    components?: Partial<SlotComponents>;\n}): UncapitalizeObjectKeys<SlotComponents>;\n","node_modules/@mui/x-data-grid/hooks/features/index.d.ts":"export * from './columnMenu';\nexport * from './columns';\nexport * from './columnGrouping';\nexport * from './density';\nexport * from './filter';\nexport * from './focus';\nexport * from './pagination';\nexport * from './preferencesPanel';\nexport * from './rows';\nexport * from './rowSelection';\nexport * from './sorting';\nexport * from './dimensions';\nexport * from './statePersistence';\nexport * from './headerFiltering';\nexport * from './virtualization';\n","node_modules/@mui/x-data-grid/hooks/utils/useTimeout.d.ts":"declare class Timeout {\n    static create(): Timeout;\n    currentId: number;\n    start(delay: number, fn: Function): void;\n    clear: () => void;\n    disposeEffect: () => () => void;\n}\nexport declare function useTimeout(): Timeout;\nexport {};\n","node_modules/@mui/x-data-grid/hooks/utils/useOnMount.d.ts":"import * as React from 'react';\nexport declare function useOnMount(fn: React.EffectCallback): void;\n","node_modules/@mui/x-data-grid/hooks/utils/useLazyRef.d.ts":"import * as React from 'react';\nexport declare function useLazyRef<T, U>(init: (arg?: U) => T, initArg?: U): React.MutableRefObject<T>;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridVisibleRows.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\nimport type { GridApiCommon, GridRowEntry } from '../../models';\nexport declare const getVisibleRows: <Api extends GridApiCommon<any, any>>(apiRef: React.MutableRefObject<Api>, props: Pick<DataGridProcessedProps, 'pagination' | 'paginationMode'>) => {\n    rows: GridRowEntry<import(\"../../models\").GridValidRowModel>[];\n    range: {\n        firstRowIndex: number;\n        lastRowIndex: number;\n    } | null;\n};\n/**\n * Computes the list of rows that are reachable by scroll.\n * Depending on whether pagination is enabled, it will return the rows in the current page.\n * - If the pagination is disabled or in server mode, it equals all the visible rows.\n * - If the row tree has several layers, it contains up to `state.pageSize` top level rows and all their descendants.\n * - If the row tree is flat, it only contains up to `state.pageSize` rows.\n */\nexport declare const useGridVisibleRows: <Api extends GridApiCommon<any, any>>(apiRef: React.MutableRefObject<Api>, props: Pick<DataGridProcessedProps, 'pagination' | 'paginationMode'>) => {\n    rows: GridRowEntry<import(\"../../models\").GridValidRowModel>[];\n    range: {\n        firstRowIndex: number;\n        lastRowIndex: number;\n    } | null;\n};\n","node_modules/@mui/x-data-grid/hooks/utils/useGridSelector.d.ts":"import * as React from 'react';\nimport { GridApiCommon } from '../../models/api/gridApiCommon';\nimport { OutputSelector } from '../../utils/createSelector';\nimport { fastObjectShallowCompare } from '../../utils/fastObjectShallowCompare';\nexport declare const objectShallowCompare: typeof fastObjectShallowCompare;\nexport declare const useGridSelector: <Api extends GridApiCommon<any, any>, T>(apiRef: React.MutableRefObject<Api>, selector: OutputSelector<Api[\"state\"], T> | ((state: Api[\"state\"]) => T), equals?: (a: T, b: T) => boolean) => T;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridRootProps.d.ts":"import type { DataGridProcessedProps } from '../../models/props/DataGridProps';\nexport declare const useGridRootProps: () => DataGridProcessedProps<any>;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridPrivateApiContext.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nimport { GridPrivateApiCommunity } from '../../models/api/gridApiCommunity';\nexport declare const GridPrivateApiContext: React.Context<unknown>;\nexport declare function useGridPrivateApiContext<PrivateApi extends GridPrivateApiCommon = GridPrivateApiCommunity>(): React.MutableRefObject<PrivateApi>;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridNativeEventListener.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nexport declare const useGridNativeEventListener: <PrivateApi extends GridPrivateApiCommon, K extends keyof HTMLElementEventMap>(apiRef: React.MutableRefObject<PrivateApi>, ref: React.MutableRefObject<HTMLDivElement | null> | (() => HTMLElement | undefined | null), eventName: K, handler?: ((event: HTMLElementEventMap[K]) => any) | undefined, options?: AddEventListenerOptions) => void;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridLogger.d.ts":"import * as React from 'react';\nimport { Logger } from '../../models/logger';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nexport declare function useGridLogger<PrivateApi extends GridPrivateApiCommon>(privateApiRef: React.MutableRefObject<PrivateApi>, name: string): Logger;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridInitializeState.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nimport { GridPrivateApiCommunity } from '../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\ntype DeepPartial<T> = {\n    [P in keyof T]?: DeepPartial<T[P]>;\n};\nexport type GridStateInitializer<P extends Partial<DataGridProcessedProps> = DataGridProcessedProps, PrivateApi extends GridPrivateApiCommon = GridPrivateApiCommunity> = (state: DeepPartial<PrivateApi['state']>, props: P, privateApiRef: React.MutableRefObject<PrivateApi>) => DeepPartial<PrivateApi['state']>;\nexport declare const useGridInitializeState: <P extends Partial<DataGridProcessedProps<any>>, PrivateApi extends GridPrivateApiCommon = GridPrivateApiCommunity>(initializer: GridStateInitializer<P, PrivateApi>, privateApiRef: React.MutableRefObject<PrivateApi>, props: P) => void;\nexport {};\n","node_modules/@mui/x-data-grid/hooks/utils/useGridAriaAttributes.d.ts":"export declare const useGridAriaAttributes: () => {\n    role: string;\n    'aria-colcount': number;\n    'aria-rowcount': number;\n    'aria-multiselectable': boolean;\n};\n","node_modules/@mui/x-data-grid/hooks/utils/useGridApiRef.d.ts":"import * as React from 'react';\nimport { GridApiCommon } from '../../models';\nimport { GridApiCommunity } from '../../models/api/gridApiCommunity';\n/**\n * Hook that instantiate a [[GridApiRef]].\n */\nexport declare const useGridApiRef: <Api extends GridApiCommon<any, any> = GridApiCommunity>() => React.MutableRefObject<Api>;\n","node_modules/@mui/x-data-grid/hooks/utils/useGridApiMethod.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\ntype GetPublicApiType<PrivateApi> = PrivateApi extends {\n    getPublicApi: () => infer PublicApi;\n} ? PublicApi : never;\nexport declare function useGridApiMethod<PrivateApi extends GridPrivateApiCommon, PublicApi extends GetPublicApiType<PrivateApi>, PrivateOnlyApi extends Omit<PrivateApi, keyof PublicApi>, V extends 'public' | 'private', T extends V extends 'public' ? Partial<PublicApi> : Partial<PrivateOnlyApi>>(privateApiRef: React.MutableRefObject<PrivateApi>, apiMethods: T, visibility: V): void;\nexport {};\n","node_modules/@mui/x-data-grid/hooks/utils/useGridApiEventHandler.d.ts":"import * as React from 'react';\nimport { GridEventListener, GridEvents } from '../../models/events';\nimport { CleanupTracking } from '../../utils/cleanupTracking/CleanupTracking';\nimport { EventListenerOptions } from '../../utils/EventManager';\nimport type { GridApiCommon } from '../../models';\n/**\n * Signal to the underlying logic what version of the public component API\n * of the data grid is exposed.\n */\ndeclare enum GridSignature {\n    DataGrid = \"DataGrid\",\n    DataGridPro = \"DataGridPro\"\n}\ninterface RegistryContainer {\n    registry: CleanupTracking | null;\n}\nexport declare function createUseGridApiEventHandler(registryContainer: RegistryContainer): <Api extends GridApiCommon<any, any>, E extends keyof import(\"../../models\").GridEventLookup>(apiRef: React.MutableRefObject<Api>, eventName: E, handler?: GridEventListener<E> | undefined, options?: EventListenerOptions) => void;\nexport declare const unstable_resetCleanupTracking: () => void;\nexport declare const useGridApiEventHandler: <Api extends GridApiCommon<any, any>, E extends keyof import(\"../../models\").GridEventLookup>(apiRef: React.MutableRefObject<Api>, eventName: E, handler?: GridEventListener<E> | undefined, options?: EventListenerOptions) => void;\nexport declare function useGridApiOptionHandler<Api extends GridApiCommon, E extends GridEvents>(apiRef: React.MutableRefObject<Api>, eventName: E, handler?: GridEventListener<E>): void;\nexport { GridSignature };\n","node_modules/@mui/x-data-grid/hooks/utils/useGridApiContext.d.ts":"import * as React from 'react';\nimport { GridApiCommon } from '../../models/api/gridApiCommon';\nimport { GridApiCommunity } from '../../models/api/gridApiCommunity';\nexport declare function useGridApiContext<Api extends GridApiCommon = GridApiCommunity>(): React.MutableRefObject<Api>;\n","node_modules/@mui/x-data-grid/hooks/utils/useFirstRender.d.ts":"export declare const useFirstRender: (callback: () => void) => void;\n","node_modules/@mui/x-data-grid/hooks/utils/index.d.ts":"export * from './useGridApiEventHandler';\nexport * from './useGridApiMethod';\nexport * from './useGridLogger';\nexport { useGridSelector } from './useGridSelector';\nexport * from './useGridNativeEventListener';\nexport * from './useFirstRender';\n","node_modules/@mui/x-data-grid/models/props/DataGridProps.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nimport { CommonProps } from '@mui/material/OverridableComponent';\nimport { GridDensity } from '../gridDensity';\nimport { GridEditMode } from '../gridEditRowModel';\nimport { GridFeatureMode } from '../gridFeatureMode';\nimport { Logger } from '../logger';\nimport { GridSortDirection, GridSortModel } from '../gridSortModel';\nimport { GridSlotsComponent } from '../gridSlotsComponent';\nimport { GridRowIdGetter, GridRowsProp, GridValidRowModel } from '../gridRows';\nimport { GridEventListener } from '../events';\nimport { GridCallbackDetails, GridLocaleText } from '../api';\nimport { GridApiCommunity } from '../api/gridApiCommunity';\nimport type { GridColDef } from '../colDef/gridColDef';\nimport { GridClasses } from '../../constants/gridClasses';\nimport { GridRowHeightParams, GridRowHeightReturnValue, GridRowParams, GridRowSpacing, GridRowSpacingParams, GridRowClassNameParams } from '../params';\nimport { GridCellParams } from '../params/gridCellParams';\nimport { GridFilterModel } from '../gridFilterModel';\nimport { GridInputRowSelectionModel, GridRowSelectionModel } from '../gridRowSelectionModel';\nimport { GridInitialStateCommunity } from '../gridStateCommunity';\nimport { GridSlotsComponentsProps } from '../gridSlotsComponentsProps';\nimport { GridColumnVisibilityModel } from '../../hooks/features/columns/gridColumnsInterfaces';\nimport { GridCellModesModel, GridRowModesModel } from '../api/gridEditingApi';\nimport { GridColumnGroupingModel } from '../gridColumnGrouping';\nimport { GridPaginationModel } from '../gridPaginationProps';\nimport { UncapitalizeObjectKeys } from '../../internals/utils';\nexport interface GridExperimentalFeatures {\n    /**\n     * Enables the column grouping.\n     */\n    columnGrouping: boolean;\n    /**\n     * Emits a warning if the cell receives focus without also syncing the focus state.\n     * Only works if NODE_ENV=test.\n     */\n    warnIfFocusStateIsNotSynced: boolean;\n    /**\n     * Enables accessibility improvements that will be enabled by default in v7.\n     * If you rely on the v6 ARIA attributes (e.g. for CSS selectors), this might be a breaking change.\n     * @default false\n     */\n    ariaV7: boolean;\n}\n/**\n * The props users can give to the `DataGrid` component.\n */\nexport type DataGridProps<R extends GridValidRowModel = any> = Omit<Partial<DataGridPropsWithDefaultValues> & DataGridPropsWithComplexDefaultValueBeforeProcessing & DataGridPropsWithoutDefaultValue<R>, DataGridForcedPropsKey> & {\n    pagination?: true;\n};\n/**\n * The props of the `DataGrid` component after the pre-processing phase.\n */\nexport interface DataGridProcessedProps<R extends GridValidRowModel = any> extends DataGridPropsWithDefaultValues, DataGridPropsWithComplexDefaultValueAfterProcessing, Omit<DataGridPropsWithoutDefaultValue<R>, 'componentsProps'> {\n}\n/**\n * The props of the `DataGrid` component after the pre-processing phase that the user should not be able to override.\n * Those are usually used in feature-hook for which the pro-plan has more advanced features (eg: multi-sorting, multi-filtering, ...).\n */\nexport type DataGridForcedPropsKey = 'checkboxSelectionVisibleOnly' | 'disableMultipleColumnsFiltering' | 'disableMultipleColumnsSorting' | 'disableMultipleRowSelection' | 'disableColumnReorder' | 'disableColumnResize' | 'keepColumnPositionIfDraggedOutside' | 'throttleRowsMs' | 'hideFooterRowCount' | 'pagination' | 'signature';\n/**\n * The `DataGrid` options with a default value that must be merged with the value given through props.\n */\nexport interface DataGridPropsWithComplexDefaultValueAfterProcessing {\n    slots: UncapitalizeObjectKeys<GridSlotsComponent>;\n    localeText: GridLocaleText;\n}\n/**\n * The `DataGrid` options with a default value that must be merged with the value given through props.\n */\nexport interface DataGridPropsWithComplexDefaultValueBeforeProcessing {\n    /**\n     * Overridable components.\n     * @deprecated Use `slots` instead.\n     */\n    components?: Partial<GridSlotsComponent>;\n    /**\n     * Overridable components.\n     */\n    slots?: UncapitalizeObjectKeys<Partial<GridSlotsComponent>>;\n    /**\n     * Set the locale text of the Data Grid.\n     * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/v6.19.4/packages/grid/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.\n     */\n    localeText?: Partial<GridLocaleText>;\n}\n/**\n * The `DataGrid` options with a default value overridable through props\n * None of the entry of this interface should be optional, they all have default values and `DataGridProps` already applies a `Partial<DataGridSimpleOptions>` for the public interface\n * The controlled model do not have a default value at the prop processing level, so they must be defined in `DataGridOtherProps`\n * TODO: add multiSortKey\n */\nexport interface DataGridPropsWithDefaultValues {\n    /**\n     * If `true`, the Data Grid height is dynamic and follow the number of rows in the Data Grid.\n     * @default false\n     */\n    autoHeight: boolean;\n    /**\n     * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.\n     * @default false\n     */\n    autoPageSize: boolean;\n    /**\n     * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.\n     * @default false\n     */\n    checkboxSelection: boolean;\n    /**\n     * If `true`, the \"Select All\" header checkbox selects only the rows on the current page. To be used in combination with `checkboxSelection`.\n     * It only works if the pagination is enabled.\n     * @default false\n     */\n    checkboxSelectionVisibleOnly: boolean;\n    /**\n     * Number of extra columns to be rendered before/after the visible slice.\n     * @default 3\n     */\n    columnBuffer: number;\n    /**\n     * Number of extra rows to be rendered before/after the visible slice.\n     * @default 3\n     */\n    rowBuffer: number;\n    /**\n     * If `false`, the row selection mode is disabled.\n     * @default true\n     */\n    rowSelection: boolean;\n    /**\n     * Number of rows from the `rowBuffer` that can be visible before a new slice is rendered.\n     * @default 3\n     */\n    rowThreshold: number;\n    /**\n     * Number of rows from the `columnBuffer` that can be visible before a new slice is rendered.\n     * @default 3\n     */\n    columnThreshold: number;\n    /**\n     * Set the density of the Data Grid.\n     * @default \"standard\"\n     */\n    density: GridDensity;\n    /**\n     * If `true`, column filters are disabled.\n     * @default false\n     */\n    disableColumnFilter: boolean;\n    /**\n     * If `true`, the column menu is disabled.\n     * @default false\n     */\n    disableColumnMenu: boolean;\n    /**\n     * If `true`, hiding/showing columns is disabled.\n     * @default false\n     */\n    disableColumnSelector: boolean;\n    /**\n     * If `true`, the density selector is disabled.\n     * @default false\n     */\n    disableDensitySelector: boolean;\n    /**\n     * If `true`, `eval()` is not used for performance optimization.\n     * @default false\n     */\n    disableEval: boolean;\n    /**\n     * If `true`, filtering with multiple columns is disabled.\n     * @default false\n     */\n    disableMultipleColumnsFiltering: boolean;\n    /**\n     * If `true`, multiple selection using the Ctrl or CMD key is disabled.\n     * @default false\n     */\n    disableMultipleRowSelection: boolean;\n    /**\n     * If `true`, sorting with multiple columns is disabled.\n     * @default false\n     */\n    disableMultipleColumnsSorting: boolean;\n    /**\n     * If `true`, the selection on click on a row or cell is disabled.\n     * @default false\n     */\n    disableRowSelectionOnClick: boolean;\n    /**\n     * If `true`, the virtualization is disabled.\n     * @default false\n     */\n    disableVirtualization: boolean;\n    /**\n     * Controls whether to use the cell or row editing.\n     * @default \"cell\"\n     */\n    editMode: GridEditMode;\n    /**\n     * Filtering can be processed on the server or client-side.\n     * Set it to 'server' if you would like to handle filtering on the server-side.\n     * @default \"client\"\n     */\n    filterMode: GridFeatureMode;\n    /**\n     * The milliseconds delay to wait after a keystroke before triggering filtering.\n     * @default 150\n     */\n    filterDebounceMs: number;\n    /**\n     * Sets the height in pixel of the column headers in the Data Grid.\n     * @default 56\n     */\n    columnHeaderHeight: number;\n    /**\n     * If `true`, the footer component is hidden.\n     * @default false\n     */\n    hideFooter: boolean;\n    /**\n     * If `true`, the pagination component in the footer is hidden.\n     * @default false\n     */\n    hideFooterPagination: boolean;\n    /**\n     * If `true`, the row count in the footer is hidden.\n     * It has no effect if the pagination is enabled.\n     * @default false\n     */\n    hideFooterRowCount: boolean;\n    /**\n     * If `true`, the selected row count in the footer is hidden.\n     * @default false\n     */\n    hideFooterSelectedRowCount: boolean;\n    /**\n     * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.\n     * E.g. when filter value is `cafe`, the rows with `café` will be visible.\n     * @default false\n     */\n    ignoreDiacritics: boolean;\n    /**\n     * If `true`, the selection model will retain selected rows that do not exist.\n     * Useful when using server side pagination and row selections need to be retained\n     * when changing pages.\n     * @default false\n     */\n    keepNonExistentRowsSelected: boolean;\n    /**\n     * Pass a custom logger in the components that implements the [[Logger]] interface.\n     * @default console\n     */\n    logger: Logger;\n    /**\n     * Allows to pass the logging level or false to turn off logging.\n     * @default \"error\" (\"warn\" in dev mode)\n     */\n    logLevel: keyof Logger | false;\n    /**\n     * If `true`, pagination is enabled.\n     * @default false\n     */\n    pagination: boolean;\n    /**\n     * Pagination can be processed on the server or client-side.\n     * Set it to 'client' if you would like to handle the pagination on the client-side.\n     * Set it to 'server' if you would like to handle the pagination on the server-side.\n     * @default \"client\"\n     */\n    paginationMode: GridFeatureMode;\n    /**\n     * Sets the height in pixel of a row in the Data Grid.\n     * @default 52\n     */\n    rowHeight: number;\n    /**\n     * Select the pageSize dynamically using the component UI.\n     * @default [25, 50, 100]\n     */\n    pageSizeOptions: ReadonlyArray<number | {\n        value: number;\n        label: string;\n    }>;\n    /**\n     * Sets the type of space between rows added by `getRowSpacing`.\n     * @default \"margin\"\n     */\n    rowSpacingType: 'margin' | 'border';\n    /**\n     * If `true`, the vertical borders of the cells are displayed.\n     * @default false\n     */\n    showCellVerticalBorder: boolean;\n    /**\n     * If `true`, the right border of the column headers are displayed.\n     * @default false\n     */\n    showColumnVerticalBorder: boolean;\n    /**\n     * The order of the sorting sequence.\n     * @default ['asc', 'desc', null]\n     */\n    sortingOrder: readonly GridSortDirection[];\n    /**\n     * Sorting can be processed on the server or client-side.\n     * Set it to 'client' if you would like to handle sorting on the client-side.\n     * Set it to 'server' if you would like to handle sorting on the server-side.\n     * @default \"client\"\n     */\n    sortingMode: GridFeatureMode;\n    /**\n     * If positive, the Data Grid will throttle updates coming from `apiRef.current.updateRows` and `apiRef.current.setRows`.\n     * It can be useful if you have a high update rate but do not want to do heavy work like filtering / sorting or rendering on each  individual update.\n     * @default 0\n     */\n    throttleRowsMs: number;\n    /**\n     * If `true`, reordering columns is disabled.\n     * @default false\n     */\n    disableColumnReorder: boolean;\n    /**\n     * If `true`, resizing columns is disabled.\n     * @default false\n     */\n    disableColumnResize: boolean;\n    /**\n     * If `true`, moving the mouse pointer outside the Data Grid before releasing the mouse button\n     * in a column re-order action will not cause the column to jump back to its original position.\n     * @default false\n     */\n    keepColumnPositionIfDraggedOutside: boolean;\n    /**\n     * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.\n     * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.\n     * @default false\n     */\n    unstable_ignoreValueFormatterDuringExport: boolean | {\n        csvExport?: boolean;\n        clipboardExport?: boolean;\n    };\n    /**\n     * The character used to separate cell values when copying to the clipboard.\n     * @default '\\t'\n     */\n    clipboardCopyCellDelimiter: string;\n    /**\n     * The milliseconds delay to wait after measuring the row height before recalculating row positions.\n     * Setting it to a lower value could be useful when using dynamic row height,\n     * but might reduce performance when displaying a large number of rows.\n     * @default 166\n     */\n    rowPositionsDebounceMs: number;\n}\n/**\n * The `DataGrid` props with no default value.\n */\nexport interface DataGridPropsWithoutDefaultValue<R extends GridValidRowModel = any> extends CommonProps {\n    /**\n     * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.\n     */\n    apiRef?: React.MutableRefObject<GridApiCommunity>;\n    /**\n     * Forwarded props for the Data Grid root element.\n     * @ignore - do not document.\n     */\n    forwardedProps?: Record<string, unknown>;\n    /**\n     * Signal to the underlying logic what version of the public component API\n     * of the Data Grid is exposed [[GridSignature]].\n     * @ignore - do not document.\n     */\n    signature?: string;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<GridClasses>;\n    /**\n     * Set the total number of rows, if it is different from the length of the value `rows` prop.\n     * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.\n     */\n    rowCount?: number;\n    /**\n     * Override the height/width of the Data Grid inner scrollbar.\n     */\n    scrollbarSize?: number;\n    /**\n     * Function that applies CSS classes dynamically on cells.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @returns {string} The CSS class to apply to the cell.\n     */\n    getCellClassName?: (params: GridCellParams<any, R>) => string;\n    /**\n     * Function that applies CSS classes dynamically on rows.\n     * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].\n     * @returns {string} The CSS class to apply to the row.\n     */\n    getRowClassName?: (params: GridRowClassNameParams<R>) => string;\n    /**\n     * Function that sets the row height per row.\n     * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n     * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If \"auto\" then the row height is calculated based on the content.\n     */\n    getRowHeight?: (params: GridRowHeightParams) => GridRowHeightReturnValue;\n    /**\n     * Function that returns the estimated height for a row.\n     * Only works if dynamic row height is used.\n     * Once the row height is measured this value is discarded.\n     * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].\n     * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.\n     */\n    getEstimatedRowHeight?: (params: GridRowHeightParams) => number | null;\n    /**\n     * Function that allows to specify the spacing between rows.\n     * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].\n     * @returns {GridRowSpacing} The row spacing values.\n     */\n    getRowSpacing?: (params: GridRowSpacingParams) => GridRowSpacing;\n    /**\n     * Function that returns the element to render in row detail.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @returns {React.JSX.Element} The row detail element.\n     */\n    getDetailPanelContent?: (params: GridRowParams<R>) => React.ReactNode;\n    /**\n     * Callback fired when a cell is rendered, returns true if the cell is editable.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @returns {boolean} A boolean indicating if the cell is editable.\n     */\n    isCellEditable?: (params: GridCellParams<any, R>) => boolean;\n    /**\n     * Determines if a row can be selected.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @returns {boolean} A boolean indicating if the cell is selectable.\n     */\n    isRowSelectable?: (params: GridRowParams<R>) => boolean;\n    /**\n     * Callback fired when the cell turns to edit mode.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n     */\n    onCellEditStart?: GridEventListener<'cellEditStart'>;\n    /**\n     * Callback fired when the cell turns to view mode.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n     */\n    onCellEditStop?: GridEventListener<'cellEditStop'>;\n    /**\n     * Callback fired when the row changes are committed.\n     * @param {GridRowId} id The row id.\n     * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n     */\n    onRowEditCommit?: GridEventListener<'rowEditCommit'>;\n    /**\n     * Callback fired when the row turns to edit mode.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.\n     */\n    onRowEditStart?: GridEventListener<'rowEditStart'>;\n    /**\n     * Callback fired when the row turns to view mode.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.\n     */\n    onRowEditStop?: GridEventListener<'rowEditStop'>;\n    /**\n     * Callback fired when any cell is clicked.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onCellClick?: GridEventListener<'cellClick'>;\n    /**\n     * Callback fired when a double click event comes from a cell element.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onCellDoubleClick?: GridEventListener<'cellDoubleClick'>;\n    /**\n     * Callback fired when a keydown event comes from a cell element.\n     * @param {GridCellParams} params With all properties from [[GridCellParams]].\n     * @param {MuiEvent<React.KeyboardEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onCellKeyDown?: GridEventListener<'cellKeyDown'>;\n    /**\n     * Callback fired when a click event comes from a column header element.\n     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnHeaderClick?: GridEventListener<'columnHeaderClick'>;\n    /**\n     * Callback fired when a double click event comes from a column header element.\n     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnHeaderDoubleClick?: GridEventListener<'columnHeaderDoubleClick'>;\n    /**\n     * Callback fired when a mouseover event comes from a column header element.\n     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnHeaderOver?: GridEventListener<'columnHeaderOver'>;\n    /**\n     * Callback fired when a mouseout event comes from a column header element.\n     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnHeaderOut?: GridEventListener<'columnHeaderOut'>;\n    /**\n     * Callback fired when a mouse enter event comes from a column header element.\n     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnHeaderEnter?: GridEventListener<'columnHeaderEnter'>;\n    /**\n     * Callback fired when a mouse leave event comes from a column header element.\n     * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnHeaderLeave?: GridEventListener<'columnHeaderLeave'>;\n    /**\n     * Callback fired when a column is reordered.\n     * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnOrderChange?: GridEventListener<'columnOrderChange'>;\n    /**\n     * Callback fired when a row is clicked.\n     * Not called if the target clicked is an interactive element added by the built-in columns.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onRowClick?: GridEventListener<'rowClick'>;\n    /**\n     * Callback fired when a double click event comes from a row container element.\n     * @param {GridRowParams} params With all properties from [[RowParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onRowDoubleClick?: GridEventListener<'rowDoubleClick'>;\n    /**\n     * Callback fired when the Data Grid is resized.\n     * @param {ElementSize} containerSize With all properties from [[ElementSize]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onResize?: GridEventListener<'debouncedResize'>;\n    /**\n     * Callback fired when the state of the Data Grid is updated.\n     * @param {GridState} state The new state.\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     * @ignore - do not document.\n     */\n    onStateChange?: GridEventListener<'stateChange'>;\n    /**\n     * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.\n     */\n    paginationModel?: GridPaginationModel;\n    /**\n     * Callback fired when the pagination model has changed.\n     * @param {GridPaginationModel} model Updated pagination model.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onPaginationModelChange?: (model: GridPaginationModel, details: GridCallbackDetails) => void;\n    /**\n     * Callback fired when the preferences panel is closed.\n     * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onPreferencePanelClose?: GridEventListener<'preferencePanelClose'>;\n    /**\n     * Callback fired when the preferences panel is opened.\n     * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onPreferencePanelOpen?: GridEventListener<'preferencePanelOpen'>;\n    /**\n     * Callback fired when the menu is opened.\n     * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onMenuOpen?: GridEventListener<'menuOpen'>;\n    /**\n     * Callback fired when the menu is closed.\n     * @param {GridMenuParams} params With all properties from [[GridMenuParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onMenuClose?: GridEventListener<'menuClose'>;\n    /**\n     * Controls the modes of the cells.\n     */\n    cellModesModel?: GridCellModesModel;\n    /**\n     * Callback fired when the `cellModesModel` prop changes.\n     * @param {GridCellModesModel} cellModesModel Object containing which cells are in \"edit\" mode.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onCellModesModelChange?: (cellModesModel: GridCellModesModel, details: GridCallbackDetails) => void;\n    /**\n     * Controls the modes of the rows.\n     */\n    rowModesModel?: GridRowModesModel;\n    /**\n     * Callback fired when the `rowModesModel` prop changes.\n     * @param {GridRowModesModel} rowModesModel Object containing which rows are in \"edit\" mode.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onRowModesModelChange?: (rowModesModel: GridRowModesModel, details: GridCallbackDetails) => void;\n    /**\n     * Set the filter model of the Data Grid.\n     */\n    filterModel?: GridFilterModel;\n    /**\n     * Callback fired when the Filter model changes before the filters are applied.\n     * @param {GridFilterModel} model With all properties from [[GridFilterModel]].\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onFilterModelChange?: (model: GridFilterModel, details: GridCallbackDetails<'filter'>) => void;\n    /**\n     * Sets the row selection model of the Data Grid.\n     */\n    rowSelectionModel?: GridInputRowSelectionModel;\n    /**\n     * Callback fired when the selection state of one or multiple rows changes.\n     * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onRowSelectionModelChange?: (rowSelectionModel: GridRowSelectionModel, details: GridCallbackDetails) => void;\n    /**\n     * Set the column visibility model of the Data Grid.\n     * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].\n     */\n    columnVisibilityModel?: GridColumnVisibilityModel;\n    /**\n     * Callback fired when the column visibility model changes.\n     * @param {GridColumnVisibilityModel} model The new model.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnVisibilityModelChange?: (model: GridColumnVisibilityModel, details: GridCallbackDetails) => void;\n    /**\n     * Set the sort model of the Data Grid.\n     */\n    sortModel?: GridSortModel;\n    /**\n     * Callback fired when the sort model changes before a column is sorted.\n     * @param {GridSortModel} model With all properties from [[GridSortModel]].\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onSortModelChange?: (model: GridSortModel, details: GridCallbackDetails) => void;\n    /**\n     * The label of the Data Grid.\n     */\n    'aria-label'?: string;\n    /**\n     * The id of the element containing a label for the Data Grid.\n     */\n    'aria-labelledby'?: string;\n    /**\n     * Set of columns of type [[GridColDef[]]].\n     */\n    columns: readonly GridColDef<R>[];\n    /**\n     * Return the id of a given [[GridRowModel]].\n     */\n    getRowId?: GridRowIdGetter<R>;\n    /**\n     * If `true`, a  loading overlay is displayed.\n     */\n    loading?: boolean;\n    /**\n     * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).\n     */\n    nonce?: string;\n    /**\n     * Set of rows of type [[GridRowsProp]].\n     */\n    rows: GridRowsProp<R>;\n    /**\n     * The initial state of the DataGrid.\n     * The data in it will be set in the state on initialization but will not be controlled.\n     * If one of the data in `initialState` is also being controlled, then the control state wins.\n     */\n    initialState?: GridInitialStateCommunity;\n    /**\n     * Overridable components props dynamically passed to the component at rendering.\n     */\n    slotProps?: GridSlotsComponentsProps;\n    /**\n     * Overridable components props dynamically passed to the component at rendering.\n     * @deprecated Use the `slotProps` prop instead.\n     */\n    componentsProps?: GridSlotsComponentsProps;\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Unstable features, breaking changes might be introduced.\n     * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n     */\n    experimentalFeatures?: Partial<GridExperimentalFeatures>;\n    /**\n     * Callback called before updating a row with new values in the row and cell editing.\n     * @template R\n     * @param {R} newRow Row object with the new values.\n     * @param {R} oldRow Row object with the old values.\n     * @returns {Promise<R> | R} The final values to update the row.\n     */\n    processRowUpdate?: (newRow: R, oldRow: R) => Promise<R> | R;\n    /**\n     * Callback called when `processRowUpdate` throws an error or rejects.\n     * @param {any} error The error thrown.\n     */\n    onProcessRowUpdateError?: (error: any) => void;\n    columnGroupingModel?: GridColumnGroupingModel;\n    /**\n     * Callback called when the data is copied to the clipboard.\n     * @param {string} data The data copied to the clipboard.\n     */\n    onClipboardCopy?: GridEventListener<'clipboardCopy'>;\n}\n","node_modules/@mui/x-data-grid/hooks/core/useGridStateInitialization.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\nimport type { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nexport declare const useGridStateInitialization: <PrivateApi extends GridPrivateApiCommon>(apiRef: React.MutableRefObject<PrivateApi>, props: Pick<DataGridProcessedProps, 'signature'>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/useGridLoggerFactory.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\nexport declare const useGridLoggerFactory: (apiRef: React.MutableRefObject<GridPrivateApiCommon>, props: Pick<DataGridProcessedProps, 'logger' | 'logLevel'>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/useGridLocaleText.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\nexport declare const useGridLocaleText: (apiRef: React.MutableRefObject<GridPrivateApiCommon>, props: Pick<DataGridProcessedProps, 'localeText'>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/useGridInitialization.d.ts":"import * as React from 'react';\nimport type { GridApiCommon, GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\n/**\n * Initialize the technical pieces of the DataGrid (logger, state, ...) that any DataGrid implementation needs\n */\nexport declare const useGridInitialization: <PrivateApi extends GridPrivateApiCommon, Api extends GridApiCommon<any, any>>(inputApiRef: React.MutableRefObject<Api> | undefined, props: DataGridProcessedProps) => React.MutableRefObject<PrivateApi>;\n","node_modules/@mui/x-data-grid/hooks/core/useGridApiInitialization.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\nimport type { GridApiCommon, GridPrivateApiCommon } from '../../models/api/gridApiCommon';\nexport declare function unwrapPrivateAPI<PrivateApi extends GridPrivateApiCommon, Api extends GridApiCommon>(publicApi: Api): PrivateApi;\nexport declare function useGridApiInitialization<PrivateApi extends GridPrivateApiCommon, Api extends GridApiCommon>(inputApiRef: React.MutableRefObject<Api> | undefined, props: Pick<DataGridProcessedProps, 'signature'>): React.MutableRefObject<PrivateApi>;\n","node_modules/@mui/x-data-grid/hooks/core/index.d.ts":"export type { GridPipeProcessingLookup } from './pipeProcessing';\n","node_modules/@mui/x-data-grid/models/events/index.d.ts":"export * from './gridEventListener';\nexport * from './gridEventPublisher';\nexport * from './gridEventLookup';\n","node_modules/@mui/x-data-grid/models/events/gridEventPublisher.d.ts":"import { MuiBaseEvent } from '../muiEvent';\nimport { GridEventLookup, GridEvents } from './gridEventLookup';\ntype PublisherArgsNoEvent<E extends GridEvents, T extends {\n    params: any;\n}> = [E, T['params']];\ntype PublisherArgsRequiredEvent<E extends GridEvents, T extends {\n    params: any;\n    event: MuiBaseEvent;\n}> = [E, T['params'], T['event']];\ntype PublisherArgsOptionalEvent<E extends GridEvents, T extends {\n    params: any;\n    event: MuiBaseEvent;\n}> = PublisherArgsRequiredEvent<E, T> | PublisherArgsNoEvent<E, T>;\ntype PublisherArgsEvent<E extends GridEvents, T extends {\n    params: any;\n    event: MuiBaseEvent;\n}> = {} extends T['event'] ? PublisherArgsOptionalEvent<E, T> : PublisherArgsRequiredEvent<E, T>;\ntype PublisherArgsParams<E extends GridEvents, T extends {\n    params: any;\n}> = [E, T['params']];\ntype PublisherArgsNoParams<E extends GridEvents> = [E];\ntype GridEventPublisherArg<E extends GridEvents, T> = T extends {\n    params: any;\n    event: MuiBaseEvent;\n} ? PublisherArgsEvent<E, T> : T extends {\n    params: any;\n} ? PublisherArgsParams<E, T> : PublisherArgsNoParams<E>;\nexport type GridEventPublisher = <E extends GridEvents>(...params: GridEventPublisherArg<E, GridEventLookup[E]>) => void;\nexport {};\n","node_modules/@mui/x-data-grid/models/events/gridEventLookup.d.ts":"import * as React from 'react';\nimport type { GridColumnHeaderParams, GridColumnOrderChangeParams, GridColumnResizeParams, GridHeaderSelectionCheckboxParams, GridMenuParams, GridPreferencePanelParams, GridRenderedRowsIntervalChangeParams, GridRowParams, GridRowSelectionCheckboxParams, GridScrollParams, GridColumnGroupHeaderParams } from '../params';\nimport { GridCellEditStartParams, GridCellEditStopParams } from '../params/gridEditCellParams';\nimport { GridCellParams } from '../params/gridCellParams';\nimport type { GridFilterModel } from '../gridFilterModel';\nimport type { GridSortModel } from '../gridSortModel';\nimport type { GridRowSelectionModel } from '../gridRowSelectionModel';\nimport type { ElementSize } from '../elementSize';\nimport type { MuiBaseEvent } from '../muiEvent';\nimport type { GridGroupNode, GridRowId } from '../gridRows';\nimport type { GridColumnVisibilityModel } from '../../hooks/features/columns';\nimport type { GridStrategyProcessorName } from '../../hooks/core/strategyProcessing';\nimport { GridRowEditStartParams, GridRowEditStopParams } from '../params/gridRowParams';\nimport { GridCellModesModel, GridRowModesModel } from '../api/gridEditingApi';\nimport { GridPaginationModel } from '../gridPaginationProps';\nexport interface GridRowEventLookup {\n    /**\n     * Fired when a row is clicked.\n     * Not fired if the cell clicked is from an interactive column (actions, checkbox, etc).\n     */\n    rowClick: {\n        params: GridRowParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a row is double-clicked.\n     */\n    rowDoubleClick: {\n        params: GridRowParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the mouse enters the row. Called with a [[GridRowParams]] object.\n     */\n    rowMouseEnter: {\n        params: GridRowParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the mouse leaves the row. Called with a [[GridRowParams]] object.\n     */\n    rowMouseLeave: {\n        params: GridRowParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * @ignore - do not document.\n     */\n    rowMouseOut: {\n        params: GridRowParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * @ignore - do not document.\n     */\n    rowMouseOver: {\n        params: GridRowParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the user starts dragging a row. It's mapped to the `dragstart` DOM event.\n     * @ignore - do not document.\n     */\n    rowDragStart: {\n        params: GridRowParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired while an element or text selection is dragged over the row.\n     * It's mapped to the `dragover` DOM event.\n     * @ignore - do not document.\n     */\n    rowDragOver: {\n        params: GridRowParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the dragging of a row ends.\n     * @ignore - do not document.\n     */\n    rowDragEnd: {\n        params: GridRowParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n}\nexport interface GridColumnHeaderEventLookup {\n    /**\n     * Fired when a column header is clicked\n     */\n    columnHeaderClick: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a column header is double-clicked.\n     */\n    columnHeaderDoubleClick: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mouseover` event happens in a column header.\n     * @ignore - do not document.\n     */\n    columnHeaderOver: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mouseout` event happens in a column header.\n     * @ignore - do not document.\n     */\n    columnHeaderOut: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mouseenter` event happens in a column header.\n     * @ignore - do not document.\n     */\n    columnHeaderEnter: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mouseleave` event happens in a column header.\n     * @ignore - do not document.*\n     */\n    columnHeaderLeave: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a key is pressed in a column header. It's mapped do the `keydown` DOM event.\n     */\n    columnHeaderKeyDown: {\n        params: GridColumnHeaderParams;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a column header gains focus.\n     * @ignore - do not document.\n     */\n    columnHeaderFocus: {\n        params: GridColumnHeaderParams;\n        event: React.FocusEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a column header loses focus.\n     * @ignore - do not document.\n     */\n    columnHeaderBlur: {\n        params: GridColumnHeaderParams;\n        event: React.FocusEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the user starts dragging a column header. It's mapped to the `dragstart` DOM event.\n     * @ignore - do not document.\n     */\n    columnHeaderDragStart: {\n        params: GridColumnHeaderParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the dragged column header enters a valid drop target.\n     * It's mapped to the `dragend` DOM event.\n     * @ignore - do not document.\n     */\n    columnHeaderDragEnter: {\n        params: GridColumnHeaderParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired while an element or text selection is dragged over the column header.\n     * It's mapped to the `dragover` DOM event.\n     * @ignore - do not document.\n     */\n    columnHeaderDragOver: {\n        params: GridColumnHeaderParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the dragging of a column header ends.\n     * @ignore - do not document.\n     */\n    columnHeaderDragEnd: {\n        params: GridColumnHeaderParams;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `dblclick` DOM event happens in the column header separator.\n     * @ignore - do not document.\n     */\n    columnSeparatorDoubleClick: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mousedown` DOM event happens in the column header separator.\n     * @ignore - do not document.\n     */\n    columnSeparatorMouseDown: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the index of a column changes.\n     * @ignore - do not document.\n     */\n    columnIndexChange: {\n        params: GridColumnOrderChangeParams;\n    };\n}\nexport interface GridHeaderFilterEventLookup {\n    /**\n     * Fired when a column header filter is clicked\n     * @ignore - do not document.\n     */\n    headerFilterClick: {\n        params: GridColumnHeaderParams;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a key is pressed in a column header filter. It's mapped to the `keydown` DOM event.\n     * @ignore - do not document.\n     */\n    headerFilterKeyDown: {\n        params: GridColumnHeaderParams;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a mouse is pressed in a column header filter. It's mapped to the `mousedown` DOM event.\n     * @ignore - do not document.\n     */\n    headerFilterMouseDown: {\n        params: GridColumnHeaderParams;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a column header filter is blurred.\n     * @ignore - do not document.\n     */\n    headerFilterBlur: {\n        params: GridColumnHeaderParams;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n}\nexport interface GridColumnGroupHeaderEventLookup {\n    /**\n     * Fired when a key is pressed in a column group header. It's mapped do the `keydown` DOM event.\n     */\n    columnGroupHeaderKeyDown: {\n        params: GridColumnGroupHeaderParams;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a column group header gains focus.\n     * @ignore - do not document.\n     */\n    columnGroupHeaderFocus: {\n        params: GridColumnGroupHeaderParams;\n        event: React.FocusEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a column group header loses focus.\n     * @ignore - do not document.\n     */\n    columnGroupHeaderBlur: {\n        params: GridColumnGroupHeaderParams;\n        event: React.FocusEvent<HTMLElement>;\n    };\n}\nexport interface GridCellEventLookup {\n    /**\n     * Fired when a cell is clicked.\n     */\n    cellClick: {\n        params: GridCellParams<any>;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a cell is double-clicked.\n     */\n    cellDoubleClick: {\n        params: GridCellParams<any>;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mousedown` event happens in a cell.\n     */\n    cellMouseDown: {\n        params: GridCellParams<any>;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mouseup` event happens in a cell.\n     */\n    cellMouseUp: {\n        params: GridCellParams<any>;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `mouseover` event happens in a cell.\n     */\n    cellMouseOver: {\n        params: GridCellParams<any>;\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `keydown` event happens in a cell.\n     */\n    cellKeyDown: {\n        params: GridCellParams<any>;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when a `keyup` event happens in a cell.\n     */\n    cellKeyUp: {\n        params: GridCellParams<any>;\n        event: React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the dragged cell enters a valid drop target. It's mapped to the `dragend` DOM event.\n     * @ignore - do not document.\n     */\n    cellDragEnter: {\n        params: GridCellParams<any>;\n        event: React.DragEvent<HTMLElement>;\n    };\n    /**\n     * Fired while an element or text selection is dragged over the cell.\n     * It's mapped to the `dragover` DOM event.\n     * @ignore - do not document.\n     */\n    cellDragOver: {\n        params: GridCellParams<any>;\n        event: React.DragEvent<HTMLElement>;\n    };\n}\nexport interface GridControlledStateEventLookup {\n    /**\n     * Fired when the pagination model changes.\n     */\n    paginationModelChange: {\n        params: GridPaginationModel;\n    };\n    /**\n     * Fired when the filter model changes.\n     */\n    filterModelChange: {\n        params: GridFilterModel;\n    };\n    /**\n     * Fired when the sort model changes.\n     */\n    sortModelChange: {\n        params: GridSortModel;\n    };\n    /**\n     * Fired when the selection state of one or multiple rows changes.\n     */\n    rowSelectionChange: {\n        params: GridRowSelectionModel;\n    };\n    /**\n     * Fired when the column visibility model changes.\n     */\n    columnVisibilityModelChange: {\n        params: GridColumnVisibilityModel;\n    };\n}\nexport interface GridControlledStateReasonLookup {\n    filter: 'upsertFilterItem' | 'upsertFilterItems' | 'deleteFilterItem' | 'changeLogicOperator' | 'restoreState';\n    pagination: 'setPaginationModel' | 'stateRestorePreProcessing';\n}\nexport interface GridEventLookup extends GridRowEventLookup, GridColumnHeaderEventLookup, GridHeaderFilterEventLookup, GridColumnGroupHeaderEventLookup, GridCellEventLookup, GridControlledStateEventLookup {\n    /**\n     * Fired when the grid is unmounted.\n     */\n    unmount: {};\n    /**\n     * Fired when the state of the grid is updated.\n     */\n    stateChange: {\n        params: any;\n    };\n    /**\n     * Fired when the grid is resized.\n     */\n    resize: {\n        params: ElementSize;\n    };\n    /**\n     * Fired when the inner size of the viewport changes. Called with an [[ElementSize]] object.\n     */\n    viewportInnerSizeChange: {\n        params: ElementSize;\n    };\n    /**\n     * Fired when the grid is resized with a debounced time of 60ms.\n     */\n    debouncedResize: {\n        params: ElementSize;\n    };\n    /**\n     * Fired when a processor of the active strategy changes.\n     * @ignore - do not document.\n     */\n    activeStrategyProcessorChange: {\n        params: GridStrategyProcessorName;\n    };\n    /**\n     * Fired when the callback to decide if a strategy is available or not changes.\n     * @ignore - do not document.\n     */\n    strategyAvailabilityChange: {};\n    /**\n     * Fired when the columns state is changed.\n     */\n    columnsChange: {\n        params: string[];\n    };\n    /**\n     * Fired when the width of a column is changed.\n     */\n    columnWidthChange: {\n        params: GridColumnResizeParams;\n        event: MouseEvent | {};\n    };\n    /**\n     * Fired when the user starts resizing a column.\n     */\n    columnResizeStart: {\n        params: {\n            field: string;\n        };\n        event: React.MouseEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the user stops resizing a column.\n     */\n    columnResizeStop: {\n        params: null;\n        event: MouseEvent;\n    };\n    /**\n     * Fired during the resizing of a column.\n     */\n    columnResize: {\n        params: GridColumnResizeParams;\n        event: MouseEvent;\n    };\n    /**\n     * Fired when the user ends reordering a column.\n     */\n    columnOrderChange: {\n        params: GridColumnOrderChangeParams;\n    };\n    /**\n     * Fired when the rows are updated.\n     * @ignore - do not document.\n     */\n    rowsSet: {};\n    /**\n     * Fired when the filtered rows are updated\n     * @ignore - do not document.\n     */\n    filteredRowsSet: {};\n    /**\n     * Fired when the sorted rows are updated\n     * @ignore - do not document\n     */\n    sortedRowsSet: {};\n    /**\n     * Fired when the expansion of a row is changed. Called with a [[GridGroupNode]] object.\n     */\n    rowExpansionChange: {\n        params: GridGroupNode;\n    };\n    /**\n     * Fired when the rendered rows index interval changes. Called with a [[GridRenderedRowsIntervalChangeParams]] object.\n     */\n    renderedRowsIntervalChange: {\n        params: GridRenderedRowsIntervalChangeParams;\n    };\n    /**\n     * Fired when the mode of a cell changes.\n     * @ignore - do not document\n     */\n    cellModeChange: {\n        params: GridCellParams<any>;\n    };\n    /**\n     * Fired when the model that controls the cell modes changes.\n     */\n    cellModesModelChange: {\n        params: GridCellModesModel;\n    };\n    /**\n     * Fired when the model that controls the row modes changes.\n     */\n    rowModesModelChange: {\n        params: GridRowModesModel;\n    };\n    /**\n     * Fired when the cell turns to edit mode.\n     */\n    cellEditStart: {\n        params: GridCellEditStartParams;\n        event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the cell turns back to view mode.\n     */\n    cellEditStop: {\n        params: GridCellEditStopParams;\n        event: MuiBaseEvent;\n    };\n    /**\n     * Fired when the row turns to edit mode.\n     */\n    rowEditStart: {\n        params: GridRowEditStartParams;\n        event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the row turns back to view mode.\n     */\n    rowEditStop: {\n        params: GridRowEditStopParams;\n        event: MuiBaseEvent;\n    };\n    /**\n     * Fired when the props of the edit input are committed.\n     */\n    rowEditCommit: {\n        params: GridRowId;\n        event: MuiBaseEvent;\n    };\n    /**\n     * Fired when a cell gains focus.\n     * @ignore - do not document.\n     */\n    cellFocusIn: {\n        params: GridCellParams<any>;\n    };\n    /**\n     * Fired when a cell loses focus.\n     * @ignore - do not document.\n     */\n    cellFocusOut: {\n        params: GridCellParams<any>;\n        event: MuiBaseEvent;\n    };\n    /**\n     * Fired during the scroll of the grid viewport.\n     */\n    scrollPositionChange: {\n        params: GridScrollParams;\n        event: React.UIEvent | MuiBaseEvent;\n    };\n    /**\n     * Fired when the content size used by the `GridVirtualScroller` changes.\n     * @ignore - do not document.\n     */\n    virtualScrollerContentSizeChange: {};\n    /**\n     * Fired when the content is scrolled by the mouse wheel.\n     * It's attached to the \"mousewheel\" event.\n     * @ignore - do not document.\n     */\n    virtualScrollerWheel: {\n        params: {};\n        event: React.WheelEvent;\n    };\n    /**\n     * Fired when the content is moved using a touch device.\n     * It's attached to the \"touchmove\" event.\n     * @ignore - do not document.\n     */\n    virtualScrollerTouchMove: {\n        params: {};\n        event: React.TouchEvent;\n    };\n    /**\n     * Fired when the value of the selection checkbox of the header is changed.\n     */\n    headerSelectionCheckboxChange: {\n        params: GridHeaderSelectionCheckboxParams;\n    };\n    /**\n     * Fired when the value of the selection checkbox of a row is changed.\n     */\n    rowSelectionCheckboxChange: {\n        params: GridRowSelectionCheckboxParams;\n        event: React.ChangeEvent<HTMLElement>;\n    };\n    /**\n     * Fired when the data is copied to the clipboard.\n     */\n    clipboardCopy: {\n        params: string;\n    };\n    /**\n     * Fired when the preference panel is closed.\n     */\n    preferencePanelClose: {\n        params: GridPreferencePanelParams;\n    };\n    /**\n     * Fired when the preference panel is opened.\n     */\n    preferencePanelOpen: {\n        params: GridPreferencePanelParams;\n    };\n    /**\n     * Fired when the menu is opened.\n     */\n    menuOpen: {\n        params: GridMenuParams;\n    };\n    /**\n     * Fired when the grid menu is closed.\n     */\n    menuClose: {\n        params: GridMenuParams;\n    };\n}\nexport type GridEvents = keyof GridEventLookup;\n","node_modules/@mui/x-data-grid/models/events/gridEventListener.d.ts":"import { MuiBaseEvent, MuiEvent } from '../muiEvent';\nimport { GridCallbackDetails } from '../api/gridCallbackDetails';\nimport { GridEventLookup, GridEvents } from './gridEventLookup';\nexport type GridEventListener<E extends GridEvents> = (params: GridEventLookup[E] extends {\n    params: any;\n} ? GridEventLookup[E]['params'] : undefined, event: GridEventLookup[E] extends {\n    event: MuiBaseEvent;\n} ? MuiEvent<GridEventLookup[E]['event']> : MuiEvent<{}>, details: GridCallbackDetails) => void;\n","node_modules/@mui/x-data-grid/models/params/index.d.ts":"export * from './gridColumnHeaderParams';\nexport * from './gridColumnGroupHeaderParams';\nexport * from './gridColumnOrderChangeParams';\nexport * from './gridColumnResizeParams';\nexport * from './gridEditCellParams';\nexport * from './gridRowParams';\nexport * from './gridScrollParams';\nexport * from './gridRowSelectionCheckboxParams';\nexport * from './gridHeaderSelectionCheckboxParams';\nexport * from './gridValueOptionsParams';\nexport * from './gridCellParams';\nexport * from './gridPreferencePanelParams';\nexport * from './gridMenuParams';\nexport * from './gridRenderedRowsIntervalChangeParams';\n","node_modules/@mui/x-data-grid/models/params/gridValueOptionsParams.d.ts":"import { GridRowId, GridValidRowModel } from '../gridRows';\n/**\n * Object passed as parameter of the valueOptions function for singleSelect column.\n */\nexport interface GridValueOptionsParams<R extends GridValidRowModel = any> {\n    /**\n     * The field of the column to which options will be provided\n     */\n    field: string;\n    /**\n     * The grid row id.\n     */\n    id?: GridRowId;\n    /**\n     * The row model of the row that the current cell belongs to.\n     */\n    row?: R;\n}\n","node_modules/@mui/x-data-grid/models/params/gridScrollParams.d.ts":"export interface GridRenderContext {\n    firstRowIndex: number;\n    lastRowIndex: number;\n    firstColumnIndex: number;\n    lastColumnIndex: number;\n}\nexport interface GridScrollParams {\n    left: number;\n    top: number;\n    renderContext?: GridRenderContext;\n}\nexport type GridScrollFn = (v: GridScrollParams) => void;\n","node_modules/@mui/x-data-grid/models/params/gridRowSelectionCheckboxParams.d.ts":"import { GridRowId } from '../gridRows';\nexport interface GridRowSelectionCheckboxParams {\n    value: boolean;\n    id: GridRowId;\n}\n","node_modules/@mui/x-data-grid/models/params/gridRowParams.d.ts":"import { GridValidRowModel, GridRowEntry, GridRowId } from '../gridRows';\nimport type { GridColDef } from '../colDef/gridColDef';\n/**\n * Object passed as parameter in the row callbacks.\n * @demos\n *   - [Master detail](/x/react-data-grid/master-detail/)\n */\nexport interface GridRowParams<R extends GridValidRowModel = any> {\n    /**\n     * The grid row id.\n     */\n    id: GridRowId;\n    /**\n     * The row model of the row that the current cell belongs to.\n     */\n    row: R;\n    /**\n     * All grid columns.\n     */\n    columns: GridColDef[];\n}\ninterface GridRowVisibilityParams {\n    /**\n     * Whether this row is the first visible or not.\n     */\n    isFirstVisible: boolean;\n    /**\n     * Whether this row is the last visible or not.\n     */\n    isLastVisible: boolean;\n    /**\n     * Index of the row in the current page.\n     * If the pagination is disabled, it will be the index relative to all filtered rows.\n     */\n    indexRelativeToCurrentPage: number;\n}\n/**\n * Object passed as parameter in the row `getRowClassName` callback prop.\n * @demos\n *   - [Styling rows](/x/react-data-grid/style/#styling-rows)\n */\nexport interface GridRowClassNameParams<R extends GridValidRowModel = any> extends GridRowParams<R>, GridRowVisibilityParams {\n}\n/**\n * Object passed as parameter in the row `getRowHeight` callback prop.\n */\nexport interface GridRowHeightParams extends GridRowEntry {\n    /**\n     * The grid current density factor.\n     */\n    densityFactor: number;\n}\n/**\n * The getRowHeight return value.\n */\nexport type GridRowHeightReturnValue = number | null | undefined | 'auto';\ndeclare enum GridRowEditStartReasons {\n    enterKeyDown = \"enterKeyDown\",\n    cellDoubleClick = \"cellDoubleClick\",\n    printableKeyDown = \"printableKeyDown\",\n    deleteKeyDown = \"deleteKeyDown\"\n}\n/**\n * Params passed to the `rowEditStart` event.\n */\nexport interface GridRowEditStartParams<R extends GridValidRowModel = any> extends GridRowParams<R> {\n    /**\n     * Which field triggered this event.\n     */\n    field?: string;\n    /**\n     * The reason for this event to be triggered.\n     */\n    reason?: GridRowEditStartReasons;\n    /**\n     * If the reason is related to a keyboard event, it contains which key was pressed.\n     * @deprecated No longer needed.\n     */\n    key?: string;\n}\ndeclare enum GridRowEditStopReasons {\n    rowFocusOut = \"rowFocusOut\",\n    escapeKeyDown = \"escapeKeyDown\",\n    enterKeyDown = \"enterKeyDown\",\n    tabKeyDown = \"tabKeyDown\",\n    shiftTabKeyDown = \"shiftTabKeyDown\"\n}\nexport interface GridRowEditStopParams<R extends GridValidRowModel = any> extends GridRowParams<R> {\n    /**\n     * Which field triggered this event.\n     */\n    field?: string;\n    /**\n     * The reason for this event to be triggered.\n     */\n    reason?: GridRowEditStopReasons;\n}\n/**\n * Object passed as parameter in the row `getRowSpacing` callback prop.\n * @demos\n *   - [Row spacing](/x/react-data-grid/row-height/#row-spacing)\n */\nexport interface GridRowSpacingParams extends GridRowEntry, GridRowVisibilityParams {\n}\n/**\n * The getRowSpacing return value.\n */\nexport interface GridRowSpacing {\n    top?: number;\n    bottom?: number;\n}\nexport { GridRowEditStartReasons, GridRowEditStopReasons };\n","node_modules/@mui/x-data-grid/models/params/gridRenderedRowsIntervalChangeParams.d.ts":"export interface GridRenderedRowsIntervalChangeParams {\n    /**\n     * The index of the first row to render.\n     */\n    firstRowToRender: number;\n    /**\n     * The index of the last row to render.\n     */\n    lastRowToRender: number;\n}\n","node_modules/@mui/x-data-grid/models/params/gridPreferencePanelParams.d.ts":"import { GridPreferencePanelState } from '../../hooks/features/preferencesPanel/gridPreferencePanelState';\nexport interface GridPreferencePanelParams extends Omit<GridPreferencePanelState, 'open'> {\n}\n","node_modules/@mui/x-data-grid/models/params/gridMenuParams.d.ts":"export interface GridMenuParams {\n    /**\n     * The element that opens the menu.\n     */\n    target: HTMLElement | null;\n}\n","node_modules/@mui/x-data-grid/models/params/gridHeaderSelectionCheckboxParams.d.ts":"export interface GridHeaderSelectionCheckboxParams {\n    value: boolean;\n}\n","node_modules/@mui/x-data-grid/models/params/gridEditCellParams.d.ts":"import { GridRowId, GridValidRowModel } from '../gridRows';\nimport { GridCellParams } from './gridCellParams';\n/**\n * Params passed to `apiRef.current.setEditCellValue`.\n */\nexport interface GridEditCellValueParams {\n    /**\n     * The row id.\n     */\n    id: GridRowId;\n    /**\n     * The field.\n     */\n    field: string;\n    /**\n     * The new value for the cell.\n     */\n    value: any;\n    /**\n     * The debounce time in milliseconds.\n     */\n    debounceMs?: number;\n    /**\n     * TBD\n     */\n    unstable_skipValueParser?: boolean;\n}\ndeclare enum GridCellEditStartReasons {\n    enterKeyDown = \"enterKeyDown\",\n    cellDoubleClick = \"cellDoubleClick\",\n    printableKeyDown = \"printableKeyDown\",\n    deleteKeyDown = \"deleteKeyDown\",\n    pasteKeyDown = \"pasteKeyDown\"\n}\n/**\n * Params passed to the `cellEditStart` event.\n */\nexport interface GridCellEditStartParams<R extends GridValidRowModel = any, V = any, F = V> extends GridCellParams<R, V, F> {\n    /**\n     * The reason for this event to be triggered.\n     */\n    reason?: GridCellEditStartReasons;\n    /**\n     * If the reason is related to a keyboard event, it contains which key was pressed.\n     * @deprecated No longer needed.\n     */\n    key?: string;\n}\ndeclare enum GridCellEditStopReasons {\n    cellFocusOut = \"cellFocusOut\",\n    escapeKeyDown = \"escapeKeyDown\",\n    enterKeyDown = \"enterKeyDown\",\n    tabKeyDown = \"tabKeyDown\",\n    shiftTabKeyDown = \"shiftTabKeyDown\"\n}\n/**\n * Params passed to the `cellEditStop event.\n */\nexport interface GridCellEditStopParams<R extends GridValidRowModel = any, V = any, F = V> extends GridCellParams<R, V, F> {\n    /**\n     * The reason for this event to be triggered.\n     */\n    reason?: GridCellEditStopReasons;\n}\nexport { GridCellEditStartReasons, GridCellEditStopReasons };\n","node_modules/@mui/x-data-grid/models/params/gridColumnResizeParams.d.ts":"import type { GridStateColDef } from '../colDef/gridColDef';\n/**\n * Object passed as parameter of the column resize event.\n * TODO: Move to `x-data-grid-pro` folder\n */\nexport interface GridColumnResizeParams {\n    /**\n     * The HTMLElement column header element.\n     */\n    element?: HTMLElement | null;\n    /**\n     * The column of the current header component.\n     */\n    colDef: GridStateColDef;\n    /**\n     * The width of the column.\n     */\n    width: number;\n}\n","node_modules/@mui/x-data-grid/models/params/gridColumnOrderChangeParams.d.ts":"import type { GridColDef } from '../colDef/gridColDef';\n/**\n * Object passed as parameter of the column order change event.\n */\nexport interface GridColumnOrderChangeParams {\n    /**\n     * The column of the current header component.\n     */\n    column: GridColDef;\n    /**\n     * The target column index.\n     */\n    targetIndex: number;\n    /**\n     * The old column index.\n     */\n    oldIndex: number;\n}\n","node_modules/@mui/x-data-grid/models/params/gridColumnHeaderParams.d.ts":"import type { GridStateColDef } from '../colDef/gridColDef';\nimport { GridValidRowModel } from '../gridRows';\n/**\n * Object passed as parameter in the column [[GridColDef]] header renderer.\n */\nexport interface GridColumnHeaderParams<R extends GridValidRowModel = GridValidRowModel, V = any, F = V> {\n    /**\n     * The column field of the column that triggered the event\n     */\n    field: string;\n    /**\n     * The column of the current header component.\n     */\n    colDef: GridStateColDef<R, V, F>;\n}\n","node_modules/@mui/x-data-grid/models/params/gridColumnGroupHeaderParams.d.ts":"import { GridColumnGroup } from '../gridColumnGrouping';\n/**\n * Object passed as parameter in the column group header renderer.\n */\nexport interface GridColumnGroupHeaderParams extends Pick<GridColumnGroup, 'headerName' | 'description'> {\n    /**\n     * A unique string identifying the group.\n     */\n    groupId: GridColumnGroup['groupId'] | null;\n    /**\n     * The number parent the group have.\n     */\n    depth: number;\n    /**\n     * The maximal depth among visible columns.\n     */\n    maxDepth: number;\n    /**\n     * The column fields included in the group (including nested ones).\n     */\n    fields: string[];\n    /**\n     * The column index (0 based).\n     */\n    colIndex: number;\n    /**\n     * Indicate if the group is the last one for the given depth.\n     */\n    isLastColumn: boolean;\n}\n","node_modules/@mui/x-data-grid/models/params/gridCellParams.d.ts":"import * as React from 'react';\nimport { GridCellMode } from '../gridCell';\nimport { GridRowId, GridRowModel, GridTreeNode, GridTreeNodeWithRender, GridValidRowModel } from '../gridRows';\nimport type { GridStateColDef } from '../colDef/gridColDef';\nimport { GridEditCellProps } from '../gridEditRowModel';\nimport { GridApiCommunity } from '../api/gridApiCommunity';\n/**\n * Object passed as parameter in the column [[GridColDef]] cell renderer.\n */\nexport interface GridCellParams<R extends GridValidRowModel = any, V = unknown, F = V, N extends GridTreeNode = GridTreeNode> {\n    /**\n     * The grid row id.\n     */\n    id: GridRowId;\n    /**\n     * The column field of the cell that triggered the event.\n     */\n    field: string;\n    /**\n     * The cell value.\n     * If the column has `valueGetter`, use `params.row` to directly access the fields.\n     */\n    value?: V | undefined;\n    /**\n     * The cell value formatted with the column valueFormatter.\n     */\n    formattedValue?: F | undefined;\n    /**\n     * The row model of the row that the current cell belongs to.\n     */\n    row: GridRowModel<R>;\n    /**\n     * The node of the row that the current cell belongs to.\n     */\n    rowNode: N;\n    /**\n     * The column of the row that the current cell belongs to.\n     */\n    colDef: GridStateColDef;\n    /**\n     * If true, the cell is editable.\n     */\n    isEditable?: boolean;\n    /**\n     * The mode of the cell.\n     */\n    cellMode: GridCellMode;\n    /**\n     * If true, the cell is the active element.\n     */\n    hasFocus: boolean;\n    /**\n     * the tabIndex value.\n     */\n    tabIndex: 0 | -1;\n}\nexport interface FocusElement {\n    focus(): void;\n}\n/**\n * GridCellParams containing api.\n */\nexport interface GridRenderCellParams<R extends GridValidRowModel = any, V = any, F = V, N extends GridTreeNodeWithRender = GridTreeNodeWithRender> extends GridCellParams<R, V, F, N> {\n    /**\n     * GridApi that let you manipulate the grid.\n     */\n    api: GridApiCommunity;\n    /**\n     * A ref allowing to set imperative focus.\n     * It can be passed to the element that should receive focus.\n     * @ignore - do not document.\n     */\n    focusElementRef?: React.Ref<FocusElement>;\n}\n/**\n * GridEditCellProps containing api.\n */\nexport interface GridRenderEditCellParams<R extends GridValidRowModel = any, V = any, F = V, N extends GridTreeNodeWithRender = GridTreeNodeWithRender> extends GridCellParams<R, V, F, N>, GridEditCellProps<V> {\n    /**\n     * GridApi that let you manipulate the grid.\n     */\n    api: GridApiCommunity;\n}\n/**\n * Parameters passed to `colDef.valueGetter`.\n */\nexport interface GridValueGetterParams<R extends GridValidRowModel = any, V = any, N extends GridTreeNodeWithRender = GridTreeNodeWithRender> extends Omit<GridCellParams<R, V, any, N>, 'formattedValue' | 'isEditable'> {\n    /**\n     * GridApi that let you manipulate the grid.\n     */\n    api: GridApiCommunity;\n    /**\n     * The default value for the cell that the `valueGetter` is overriding.\n     */\n    value: GridCellParams<R, V, any>['value'];\n}\n/**\n * Object passed as parameter in the column [[GridColDef]] value setter callback.\n */\nexport interface GridValueSetterParams<R extends GridValidRowModel = any, V = any> {\n    /**\n     * The new cell value.\n     */\n    value: V;\n    /**\n     * The row that is being edited.\n     */\n    row: R;\n}\n/**\n * Object passed as parameter in the column [[GridColDef]] value formatter callback.\n */\nexport interface GridValueFormatterParams<V = any> {\n    /**\n     * The grid row id.\n     * It is not available when the value formatter is called by the filter panel.\n     */\n    id?: GridRowId;\n    /**\n     * The column field of the cell that triggered the event.\n     */\n    field: string;\n    /**\n     * The cell value, if the column has valueGetter it is the value returned by it.\n     */\n    value: V;\n    /**\n     * GridApi that let you manipulate the grid.\n     */\n    api: GridApiCommunity;\n}\n/**\n * Object passed as parameter in the column [[GridColDef]] edit cell props change callback.\n */\nexport interface GridPreProcessEditCellProps<V = any, R extends GridValidRowModel = any> {\n    /**\n     * The grid row id.\n     */\n    id: GridRowId;\n    /**\n     * The row that is being edited.\n     */\n    row: GridRowModel<R>;\n    /**\n     * The edit cell props.\n     */\n    props: GridEditCellProps<V>;\n    /**\n     * Whether the new value is different from the stored value or not.\n     */\n    hasChanged?: boolean;\n    /**\n     * Object containing the props of the other fields.\n     * Only available for row editing and when using the new editing API.\n     */\n    otherFieldsProps?: Record<string, GridEditCellProps<V>>;\n}\n","node_modules/@mui/x-data-grid/models/colDef/index.d.ts":"export type { GridAlignment, ValueOptions, GridKeyValue, GridColDef, GridColTypeDef, GridColumnsMeta, GridSingleSelectColDef, GridActionsColDef, } from './gridColDef';\nexport * from './gridColType';\nexport * from './gridColumnTypesRecord';\n","node_modules/@mui/x-data-grid/models/colDef/gridColumnTypesRecord.d.ts":"import { GridColTypeDef } from './gridColDef';\nimport { GridColType } from './gridColType';\nexport type GridColumnTypesRecord = Record<GridColType, GridColTypeDef>;\n","node_modules/@mui/x-data-grid/models/colDef/gridColType.d.ts":"type LiteralUnion<LiteralType, BaseType> = LiteralType | (BaseType & Record<never, never>);\nexport type GridNativeColTypes = 'string' | 'number' | 'date' | 'dateTime' | 'boolean' | 'singleSelect' | 'actions';\nexport type GridColType = LiteralUnion<GridNativeColTypes, string>;\nexport {};\n","node_modules/@mui/x-data-grid/models/colDef/gridColDef.d.ts":"import * as React from 'react';\nimport { GridCellClassNamePropType } from '../gridCellClass';\nimport { GridColumnHeaderClassNamePropType } from '../gridColumnHeaderClass';\nimport type { GridFilterOperator } from '../gridFilterOperator';\nimport { GridCellParams, GridRenderCellParams, GridRenderEditCellParams, GridValueFormatterParams, GridValueGetterParams, GridValueSetterParams, GridPreProcessEditCellProps } from '../params/gridCellParams';\nimport { GridColumnHeaderParams } from '../params/gridColumnHeaderParams';\nimport { GridComparatorFn, GridSortDirection } from '../gridSortModel';\nimport { GridColType } from './gridColType';\nimport { GridRowParams } from '../params/gridRowParams';\nimport { GridValueOptionsParams } from '../params/gridValueOptionsParams';\nimport { GridActionsCellItemProps } from '../../components/cell/GridActionsCellItem';\nimport { GridEditCellProps } from '../gridEditRowModel';\nimport type { GridValidRowModel } from '../gridRows';\nimport { GridApiCommunity } from '../api/gridApiCommunity';\n/**\n * Alignment used in position elements in Cells.\n */\nexport type GridAlignment = 'left' | 'right' | 'center';\nexport type ValueOptions = string | number | {\n    value: any;\n    label: string;\n} | Record<string, any>;\n/**\n * Value that can be used as a key for grouping rows\n */\nexport type GridKeyValue = string | number | boolean;\nexport type GridApplyQuickFilterV7<R extends GridValidRowModel = GridValidRowModel, V = any> = (value: V, row: R, column: GridColDef, apiRef: React.MutableRefObject<GridApiCommunity>) => boolean;\nexport type GetApplyQuickFilterFnLegacy<R extends GridValidRowModel = GridValidRowModel, V = any, F = V> = (value: any, colDef: GridStateColDef, apiRef: React.MutableRefObject<GridApiCommunity>) => null | ((params: GridCellParams<R, V, F>) => boolean);\nexport type GetApplyQuickFilterFnV7<R extends GridValidRowModel = GridValidRowModel, V = any> = (value: any, colDef: GridStateColDef, apiRef: React.MutableRefObject<GridApiCommunity>) => null | GridApplyQuickFilterV7<R, V>;\n/**\n * Column Definition base interface.\n */\nexport interface GridBaseColDef<R extends GridValidRowModel = GridValidRowModel, V = any, F = V> {\n    /**\n     * The column identifier. It's used to map with [[GridRowModel]] values.\n     */\n    field: string;\n    /**\n     * The title of the column rendered in the column header cell.\n     */\n    headerName?: string;\n    /**\n     * The description of the column rendered as tooltip if the column header name is not fully displayed.\n     */\n    description?: string;\n    /**\n     * Set the width of the column.\n     * @default 100\n     */\n    width?: number;\n    /**\n     * If set, it indicates that a column has fluid width. Range [0, ∞).\n     */\n    flex?: number;\n    /**\n     * Sets the minimum width of a column.\n     * @default 50\n     */\n    minWidth?: number;\n    /**\n     * Sets the maximum width of a column.\n     * @default Infinity\n     */\n    maxWidth?: number;\n    /**\n     * If `false`, removes the buttons for hiding this column.\n     * @default true\n     */\n    hideable?: boolean;\n    /**\n     * If `true`, the column is sortable.\n     * @default true\n     */\n    sortable?: boolean;\n    /**\n     * The order of the sorting sequence.\n     */\n    sortingOrder?: GridSortDirection[];\n    /**\n     * If `true`, the column is resizable.\n     * @default true\n     */\n    resizable?: boolean;\n    /**\n     * If `true`, the cells of the column are editable.\n     * @default false\n     */\n    editable?: boolean;\n    /**\n     * If `true`, the rows can be grouped based on this column values (pro-plan only).\n     * Only available in DataGridPremium.\n     * TODO: Use module augmentation to move it to `@mui/x-data-grid-premium` (need to modify how we handle column types default values).\n     * @default true\n     */\n    groupable?: boolean;\n    /**\n     * If `false`, the menu items for column pinning menu will not be rendered.\n     * Only available in DataGridPro.\n     * TODO: Use module augmentation to move it to `@mui/x-data-grid-pro` (need to modify how we handle column types default values).\n     * @default true\n     */\n    pinnable?: boolean;\n    /**\n     * A comparator function used to sort rows.\n     */\n    sortComparator?: GridComparatorFn<V>;\n    /**\n     * The type of the column.\n     * @default 'string'\n     * @see See {@link https://mui.com/x/react-data-grid/column-definition/#column-types column types docs} for more details.\n     */\n    type?: GridColType;\n    /**\n     * Allows to align the column values in cells.\n     */\n    align?: GridAlignment;\n    /**\n     * Function that allows to get a specific data instead of field to render in the cell.\n     * @template R, V\n     * @param {GridValueGetterParams<R, any>} params Object containing parameters for the getter.\n     * @returns {V} The cell value.\n     */\n    valueGetter?: (params: GridValueGetterParams<R, any>) => V;\n    /**\n     * Function that allows to customize how the entered value is stored in the row.\n     * It only works with cell/row editing.\n     * @template R, V\n     * @param {GridValueSetterParams<R, V>} params Object containing parameters for the setter.\n     * @returns {R} The row with the updated field.\n     */\n    valueSetter?: (params: GridValueSetterParams<R, V>) => R;\n    /**\n     * Function that allows to apply a formatter before rendering its value.\n     * @template V, F\n     * @param {GridValueFormatterParams<V>} params Object containing parameters for the formatter.\n     * @returns {F} The formatted value.\n     */\n    valueFormatter?: (params: GridValueFormatterParams<V>) => F;\n    /**\n     * Function that takes the user-entered value and converts it to a value used internally.\n     * @template R, V, F\n     * @param {F | undefined} value The user-entered value.\n     * @param {GridCellParams<R, V, F>} params The params when called before saving the value.\n     * @returns {V} The converted value to use internally.\n     */\n    valueParser?: (value: F | undefined, params?: GridCellParams<R, V, F>) => V;\n    /**\n     * Class name that will be added in cells for that column.\n     */\n    cellClassName?: GridCellClassNamePropType<R, V>;\n    /**\n     * Allows to override the component rendered as cell for this column.\n     * @template R, V, F\n     * @param {GridRenderCellParams<R, V, F>} params Object containing parameters for the renderer.\n     * @returns {React.ReactNode} The element to be rendered.\n     */\n    renderCell?: (params: GridRenderCellParams<R, V, F>) => React.ReactNode;\n    /**\n     * Allows to override the component rendered in edit cell mode for this column.\n     * @param {GridRenderEditCellParams} params Object containing parameters for the renderer.\n     * @returns {React.ReactNode} The element to be rendered.\n     */\n    renderEditCell?: (params: GridRenderEditCellParams<R, V, F>) => React.ReactNode;\n    /**\n     * Callback fired when the edit props of the cell changes.\n     * It allows to process the props that saved into the state.\n     * @param {GridPreProcessEditCellProps} params Object containing parameters of the cell being edited.\n     * @returns {GridEditCellProps | Promise<GridEditCellProps>} The new edit cell props.\n     */\n    preProcessEditCellProps?: (params: GridPreProcessEditCellProps) => GridEditCellProps | Promise<GridEditCellProps>;\n    /**\n     * Class name that will be added in the column header cell.\n     */\n    headerClassName?: GridColumnHeaderClassNamePropType;\n    /**\n     * Allows to render a component in the column header cell.\n     * @template R, V, F\n     * @param {GridColumnHeaderParams<R, V, F>} params Object containing parameters for the renderer.\n     * @returns {React.ReactNode} The element to be rendered.\n     */\n    renderHeader?: (params: GridColumnHeaderParams<R, V, F>) => React.ReactNode;\n    /**\n     * Header cell element alignment.\n     */\n    headerAlign?: GridAlignment;\n    /**\n     * Toggle the visibility of the sort icons.\n     * @default false\n     */\n    hideSortIcons?: boolean;\n    /**\n     * If `true`, the column menu is disabled for this column.\n     * @default false\n     */\n    disableColumnMenu?: boolean;\n    /**\n     * If `true`, the column is filterable.\n     * @default true\n     */\n    filterable?: boolean;\n    /**\n     * Allows setting the filter operators for this column.\n     */\n    filterOperators?: GridFilterOperator<R, V, F>[];\n    /**\n     * The callback that generates a filtering function for a given quick filter value.\n     * This function can return `null` to skip filtering for this value and column.\n     * @param {any} value The value with which we want to filter the column.\n     * @param {GridStateColDef} colDef The column from which we want to filter the rows.\n     * @param {React.MutableRefObject<GridApiCommunity>} apiRef Deprecated: The API of the grid.\n     * @returns {null | ((params: GridCellParams) => boolean)} The function to call to check if a row pass this filter value or not.\n     */\n    getApplyQuickFilterFn?: GetApplyQuickFilterFnLegacy<R, V, F>;\n    /**\n     * The callback that generates a filtering function for a given quick filter value.\n     * This function can return `null` to skip filtering for this value and column.\n     * @param {any} value The value with which we want to filter the column.\n     * @param {GridStateColDef} colDef The column from which we want to filter the rows.\n     * @param {React.MutableRefObject<GridApiCommunity>} apiRef Deprecated: The API of the grid.\n     * @returns {null | GridApplyQuickFilterV7} The function to call to check if a row pass this filter value or not.\n     */\n    getApplyQuickFilterFnV7?: GetApplyQuickFilterFnV7<R, V>;\n    /**\n     * If `true`, this column cannot be reordered.\n     * @default false\n     */\n    disableReorder?: boolean;\n    /**\n     * If `true`, this column will not be included in exports.\n     * @default false\n     */\n    disableExport?: boolean;\n    /**\n     * Number of columns a cell should span.\n     * @default 1\n     */\n    colSpan?: number | ((params: GridCellParams<R, V, F>) => number | undefined);\n}\n/**\n * Column Definition interface used for columns with the `actions` type.\n * @demos\n *   - [Special column properties](/x/react-data-grid/column-definition/#special-properties)\n */\nexport interface GridActionsColDef<R extends GridValidRowModel = any, V = any, F = V> extends GridBaseColDef<R, V, F> {\n    /**\n     * The type of the column.\n     * @default 'actions'\n     */\n    type: 'actions';\n    /**\n     * Function that returns the actions to be shown.\n     * @param {GridRowParams} params The params for each row.\n     * @returns {React.ReactElement<GridActionsCellItemProps>[]} An array of [[GridActionsCell]] elements.\n     */\n    getActions: (params: GridRowParams<R>) => React.ReactElement<GridActionsCellItemProps>[];\n}\n/**\n * Column Definition interface used for columns with the `singleSelect` type.\n * @demos\n *   - [Special column properties](/x/react-data-grid/column-definition/#special-properties)\n */\nexport interface GridSingleSelectColDef<R extends GridValidRowModel = any, V = any, F = V> extends GridBaseColDef<R, V, F> {\n    /**\n     * The type of the column.\n     * @default 'singleSelect'\n     */\n    type: 'singleSelect';\n    /**\n     * To be used in combination with `type: 'singleSelect'`. This is an array (or a function returning an array) of the possible cell values and labels.\n     */\n    valueOptions?: Array<ValueOptions> | ((params: GridValueOptionsParams<R>) => Array<ValueOptions>);\n    /**\n     * Used to determine the label displayed for a given value option.\n     * @param {ValueOptions} value The current value option.\n     * @returns {string} The text to be displayed.\n     */\n    getOptionLabel?: (value: ValueOptions) => string;\n    /**\n     * Used to determine the value used for a value option.\n     * @param {ValueOptions} value The current value option.\n     * @returns {string} The value to be used.\n     */\n    getOptionValue?: (value: ValueOptions) => any;\n}\n/**\n * Column Definition interface.\n * @demos\n *   - [Column definition](/x/react-data-grid/column-definition/)\n */\nexport type GridColDef<R extends GridValidRowModel = any, V = any, F = V> = GridBaseColDef<R, V, F> | GridActionsColDef<R, V, F> | GridSingleSelectColDef<R, V, F>;\nexport type GridColTypeDef<V = any, F = V> = Omit<GridBaseColDef<any, V, F>, 'field'>;\nexport type GridStateColDef<R extends GridValidRowModel = any, V = any, F = V> = GridColDef<R, V, F> & {\n    computedWidth: number;\n    /**\n     * If `true`, it means that at least one of the dimension's property of this column has been modified since the last time the column prop has changed.\n     */\n    hasBeenResized?: boolean;\n};\n/**\n * Meta Info about columns.\n */\nexport interface GridColumnsMeta {\n    totalWidth: number;\n    positions: number[];\n}\n","node_modules/@mui/x-data-grid/material/components/MUISelectOption.d.ts":"import * as React from 'react';\nimport type { GridSlotsComponentsProps } from '../../models/gridSlotsComponentsProps';\nexport default function MUISelectOption({ native, ...props }: NonNullable<GridSlotsComponentsProps['baseSelectOption']>): React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/panel/index.d.ts":"export * from './GridColumnsPanel';\nexport * from './GridPanel';\nexport * from './GridPanelContent';\nexport * from './GridPanelFooter';\nexport * from './GridPanelHeader';\nexport * from './GridPanelWrapper';\nexport * from './GridPreferencesPanel';\nexport * from './filterPanel';\n","node_modules/@mui/x-data-grid/components/panel/GridPreferencesPanel.d.ts":"import * as React from 'react';\nexport declare const GridPreferencesPanel: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & React.RefAttributes<HTMLDivElement>>;\n","node_modules/@mui/x-data-grid/components/panel/GridPanelWrapper.d.ts":"import * as React from 'react';\nimport { TrapFocusProps } from '@mui/material/Unstable_TrapFocus';\nimport { Theme } from '@mui/material/styles';\nimport { MUIStyledCommonProps } from '@mui/system';\nexport interface GridPanelWrapperProps extends React.PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>, MUIStyledCommonProps<Theme> {\n    slotProps?: {\n        TrapFocus?: TrapFocusProps;\n    };\n}\ndeclare const GridPanelWrapper: React.ForwardRefExoticComponent<GridPanelWrapperProps & React.RefAttributes<HTMLDivElement>>;\nexport { GridPanelWrapper };\n","node_modules/@mui/x-data-grid/components/panel/GridPanelHeader.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ndeclare function GridPanelHeader(props: React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n}): React.JSX.Element;\ndeclare namespace GridPanelHeader {\n    var propTypes: any;\n}\nexport { GridPanelHeader };\n","node_modules/@mui/x-data-grid/components/panel/GridPanelFooter.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ndeclare function GridPanelFooter(props: React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n}): React.JSX.Element;\ndeclare namespace GridPanelFooter {\n    var propTypes: any;\n}\nexport { GridPanelFooter };\n","node_modules/@mui/x-data-grid/components/panel/GridPanelContent.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ndeclare function GridPanelContent(props: React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n}): React.JSX.Element;\ndeclare namespace GridPanelContent {\n    var propTypes: any;\n}\nexport { GridPanelContent };\n","node_modules/@mui/x-data-grid/components/panel/GridPanel.d.ts":"import * as React from 'react';\nimport type { DataGridProcessedProps } from '../../models/props/DataGridProps';\ntype OwnerState = DataGridProcessedProps;\nexport interface GridPanelClasses {\n    /** Styles applied to the root element. */\n    panel: string;\n    /** Styles applied to the paper element. */\n    paper: string;\n}\nexport interface GridPanelProps extends Partial<React.ComponentProps<typeof GridPanelRoot>> {\n    children?: React.ReactNode;\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes?: Partial<GridPanelClasses>;\n    open: boolean;\n}\nexport declare const gridPanelClasses: Record<keyof GridPanelClasses, string>;\ndeclare const GridPanelRoot: import(\"@emotion/styled\").StyledComponent<Pick<Omit<import(\"@mui/base\").PopperProps, \"direction\"> & {\n    component?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;\n    components?: {\n        Root?: React.ElementType<any, keyof React.JSX.IntrinsicElements> | undefined;\n    } | undefined;\n    componentsProps?: {\n        root?: import(\"@mui/base\").SlotComponentProps<\"div\", import(\"@mui/base\").PopperRootSlotPropsOverrides, import(\"@mui/base\").PopperOwnProps> | undefined;\n    } | undefined;\n    sx?: import(\"@mui/material/styles\").SxProps<import(\"@mui/material/styles\").Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>, \"hidden\" | \"color\" | \"content\" | \"style\" | \"open\" | \"translate\" | \"container\" | \"transition\" | \"slot\" | \"title\" | \"defaultChecked\" | \"defaultValue\" | \"suppressContentEditableWarning\" | \"suppressHydrationWarning\" | \"accessKey\" | \"autoFocus\" | \"className\" | \"contentEditable\" | \"contextMenu\" | \"dir\" | \"draggable\" | \"id\" | \"lang\" | \"nonce\" | \"spellCheck\" | \"tabIndex\" | \"radioGroup\" | \"role\" | \"about\" | \"datatype\" | \"inlist\" | \"prefix\" | \"property\" | \"rel\" | \"resource\" | \"rev\" | \"typeof\" | \"vocab\" | \"autoCapitalize\" | \"autoCorrect\" | \"autoSave\" | \"itemProp\" | \"itemScope\" | \"itemType\" | \"itemID\" | \"itemRef\" | \"results\" | \"security\" | \"unselectable\" | \"inputMode\" | \"is\" | \"aria-activedescendant\" | \"aria-atomic\" | \"aria-autocomplete\" | \"aria-braillelabel\" | \"aria-brailleroledescription\" | \"aria-busy\" | \"aria-checked\" | \"aria-colcount\" | \"aria-colindex\" | \"aria-colindextext\" | \"aria-colspan\" | \"aria-controls\" | \"aria-current\" | \"aria-describedby\" | \"aria-description\" | \"aria-details\" | \"aria-disabled\" | \"aria-dropeffect\" | \"aria-errormessage\" | \"aria-expanded\" | \"aria-flowto\" | \"aria-grabbed\" | \"aria-haspopup\" | \"aria-hidden\" | \"aria-invalid\" | \"aria-keyshortcuts\" | \"aria-label\" | \"aria-labelledby\" | \"aria-level\" | \"aria-live\" | \"aria-modal\" | \"aria-multiline\" | \"aria-multiselectable\" | \"aria-orientation\" | \"aria-owns\" | \"aria-placeholder\" | \"aria-posinset\" | \"aria-pressed\" | \"aria-readonly\" | \"aria-relevant\" | \"aria-required\" | \"aria-roledescription\" | \"aria-rowcount\" | \"aria-rowindex\" | \"aria-rowindextext\" | \"aria-rowspan\" | \"aria-selected\" | \"aria-setsize\" | \"aria-sort\" | \"aria-valuemax\" | \"aria-valuemin\" | \"aria-valuenow\" | \"aria-valuetext\" | \"children\" | \"dangerouslySetInnerHTML\" | \"onCopy\" | \"onCopyCapture\" | \"onCut\" | \"onCutCapture\" | \"onPaste\" | \"onPasteCapture\" | \"onCompositionEnd\" | \"onCompositionEndCapture\" | \"onCompositionStart\" | \"onCompositionStartCapture\" | \"onCompositionUpdate\" | \"onCompositionUpdateCapture\" | \"onFocus\" | \"onFocusCapture\" | \"onBlur\" | \"onBlurCapture\" | \"onChange\" | \"onChangeCapture\" | \"onBeforeInput\" | \"onBeforeInputCapture\" | \"onInput\" | \"onInputCapture\" | \"onReset\" | \"onResetCapture\" | \"onSubmit\" | \"onSubmitCapture\" | \"onInvalid\" | \"onInvalidCapture\" | \"onLoad\" | \"onLoadCapture\" | \"onError\" | \"onErrorCapture\" | \"onKeyDown\" | \"onKeyDownCapture\" | \"onKeyPress\" | \"onKeyPressCapture\" | \"onKeyUp\" | \"onKeyUpCapture\" | \"onAbort\" | \"onAbortCapture\" | \"onCanPlay\" | \"onCanPlayCapture\" | \"onCanPlayThrough\" | \"onCanPlayThroughCapture\" | \"onDurationChange\" | \"onDurationChangeCapture\" | \"onEmptied\" | \"onEmptiedCapture\" | \"onEncrypted\" | \"onEncryptedCapture\" | \"onEnded\" | \"onEndedCapture\" | \"onLoadedData\" | \"onLoadedDataCapture\" | \"onLoadedMetadata\" | \"onLoadedMetadataCapture\" | \"onLoadStart\" | \"onLoadStartCapture\" | \"onPause\" | \"onPauseCapture\" | \"onPlay\" | \"onPlayCapture\" | \"onPlaying\" | \"onPlayingCapture\" | \"onProgress\" | \"onProgressCapture\" | \"onRateChange\" | \"onRateChangeCapture\" | \"onResize\" | \"onResizeCapture\" | \"onSeeked\" | \"onSeekedCapture\" | \"onSeeking\" | \"onSeekingCapture\" | \"onStalled\" | \"onStalledCapture\" | \"onSuspend\" | \"onSuspendCapture\" | \"onTimeUpdate\" | \"onTimeUpdateCapture\" | \"onVolumeChange\" | \"onVolumeChangeCapture\" | \"onWaiting\" | \"onWaitingCapture\" | \"onAuxClick\" | \"onAuxClickCapture\" | \"onClick\" | \"onClickCapture\" | \"onContextMenu\" | \"onContextMenuCapture\" | \"onDoubleClick\" | \"onDoubleClickCapture\" | \"onDrag\" | \"onDragCapture\" | \"onDragEnd\" | \"onDragEndCapture\" | \"onDragEnter\" | \"onDragEnterCapture\" | \"onDragExit\" | \"onDragExitCapture\" | \"onDragLeave\" | \"onDragLeaveCapture\" | \"onDragOver\" | \"onDragOverCapture\" | \"onDragStart\" | \"onDragStartCapture\" | \"onDrop\" | \"onDropCapture\" | \"onMouseDown\" | \"onMouseDownCapture\" | \"onMouseEnter\" | \"onMouseLeave\" | \"onMouseMove\" | \"onMouseMoveCapture\" | \"onMouseOut\" | \"onMouseOutCapture\" | \"onMouseOver\" | \"onMouseOverCapture\" | \"onMouseUp\" | \"onMouseUpCapture\" | \"onSelect\" | \"onSelectCapture\" | \"onTouchCancel\" | \"onTouchCancelCapture\" | \"onTouchEnd\" | \"onTouchEndCapture\" | \"onTouchMove\" | \"onTouchMoveCapture\" | \"onTouchStart\" | \"onTouchStartCapture\" | \"onPointerDown\" | \"onPointerDownCapture\" | \"onPointerMove\" | \"onPointerMoveCapture\" | \"onPointerUp\" | \"onPointerUpCapture\" | \"onPointerCancel\" | \"onPointerCancelCapture\" | \"onPointerEnter\" | \"onPointerEnterCapture\" | \"onPointerLeave\" | \"onPointerLeaveCapture\" | \"onPointerOver\" | \"onPointerOverCapture\" | \"onPointerOut\" | \"onPointerOutCapture\" | \"onGotPointerCapture\" | \"onGotPointerCaptureCapture\" | \"onLostPointerCapture\" | \"onLostPointerCaptureCapture\" | \"onScroll\" | \"onScrollCapture\" | \"onWheel\" | \"onWheelCapture\" | \"onAnimationStart\" | \"onAnimationStartCapture\" | \"onAnimationEnd\" | \"onAnimationEndCapture\" | \"onAnimationIteration\" | \"onAnimationIterationCapture\" | \"onTransitionEnd\" | \"onTransitionEndCapture\" | \"component\" | \"sx\" | \"components\" | \"slotProps\" | \"slots\" | \"placement\" | \"disablePortal\" | \"modifiers\" | \"anchorEl\" | \"keepMounted\" | \"popperOptions\" | \"popperRef\" | \"componentsProps\" | keyof React.RefAttributes<HTMLDivElement>> & import(\"@mui/system\").MUIStyledCommonProps<import(\"@mui/material/styles\").Theme> & {\n    ownerState: OwnerState;\n}, {}, {}>;\ndeclare const GridPanel: React.ForwardRefExoticComponent<Omit<GridPanelProps, \"ref\"> & React.RefAttributes<HTMLDivElement>>;\nexport { GridPanel };\n","node_modules/@mui/x-data-grid/components/panel/GridColumnsPanel.d.ts":"import * as React from 'react';\nimport { GridPanelWrapperProps } from './GridPanelWrapper';\nimport type { GridColDef } from '../../models/colDef/gridColDef';\nexport interface GridColumnsPanelProps extends GridPanelWrapperProps {\n    sort?: 'asc' | 'desc';\n    searchPredicate?: (column: GridColDef, searchValue: string) => boolean;\n    /**\n     * If `true`, the column search field will be focused automatically.\n     * If `false`, the first column switch input will be focused automatically.\n     * This helps to avoid input keyboard panel to popup automatically on touch devices.\n     * @default true\n     */\n    autoFocusSearchField?: boolean;\n    /**\n     * If `true`, the `Hide all` button will not be displayed.\n     * @default false\n     */\n    disableHideAllButton?: boolean;\n    /**\n     * If `true`, the `Show all` button will be disabled\n     * @default false\n     */\n    disableShowAllButton?: boolean;\n    /**\n     * Returns the list of togglable columns.\n     * If used, only those columns will be displayed in the panel\n     * which are passed as the return value of the function.\n     * @param {GridColDef[]} columns The `ColDef` list of all columns.\n     * @returns {GridColDef['field'][]} The list of togglable columns' field names.\n     */\n    getTogglableColumns?: (columns: GridColDef[]) => GridColDef['field'][];\n}\ndeclare function GridColumnsPanel(props: GridColumnsPanelProps): React.JSX.Element;\ndeclare namespace GridColumnsPanel {\n    var propTypes: any;\n}\nexport { GridColumnsPanel };\n","node_modules/@mui/x-data-grid/components/toolbar/index.d.ts":"export * from './GridToolbar';\nexport * from './GridToolbarColumnsButton';\nexport * from './GridToolbarDensitySelector';\nexport type { GridExportDisplayOptions, GridExportMenuItemProps, GridCsvExportMenuItemProps, GridPrintExportMenuItemProps, } from './GridToolbarExport';\nexport { GridCsvExportMenuItem, GridPrintExportMenuItem, GridToolbarExport, } from './GridToolbarExport';\nexport * from './GridToolbarFilterButton';\nexport * from './GridToolbarExportContainer';\nexport * from './GridToolbarQuickFilter';\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbarQuickFilter.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { GridFilterModel } from '../../models/gridFilterModel';\nexport type GridToolbarQuickFilterProps = TextFieldProps & {\n    /**\n     * Function responsible for parsing text input in an array of independent values for quick filtering.\n     * @param {string} input The value entered by the user\n     * @returns {any[]} The array of value on which quick filter is applied\n     * @default (searchText: string) => searchText\n     *   .split(' ')\n     *   .filter((word) => word !== '')\n     */\n    quickFilterParser?: (input: string) => any[];\n    /**\n     * Function responsible for formatting values of quick filter in a string when the model is modified\n     * @param {any[]} values The new values passed to the quick filter model\n     * @returns {string} The string to display in the text field\n     * @default (values: string[]) => values.join(' ')\n     */\n    quickFilterFormatter?: (values: NonNullable<GridFilterModel['quickFilterValues']>) => string;\n    /**\n     * The debounce time in milliseconds.\n     * @default 150\n     */\n    debounceMs?: number;\n};\ndeclare function GridToolbarQuickFilter(props: GridToolbarQuickFilterProps): React.JSX.Element;\ndeclare namespace GridToolbarQuickFilter {\n    var propTypes: any;\n}\n/**\n * Demos:\n * - [Filtering - overview](https://mui.com/x/react-data-grid/filtering/)\n * - [Filtering - quick filter](https://mui.com/x/react-data-grid/filtering/quick-filter/)\n *\n * API:\n * - [GridToolbarQuickFilter API](https://mui.com/x/api/data-grid/grid-toolbar-quick-filter/)\n */\nexport { GridToolbarQuickFilter };\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbarFilterButton.d.ts":"import * as React from 'react';\nimport { ButtonProps } from '@mui/material/Button';\nimport { TooltipProps } from '@mui/material/Tooltip';\nexport interface GridToolbarFilterButtonProps extends Omit<TooltipProps, 'title' | 'children' | 'componentsProps'> {\n    /**\n     * The props used for each slot inside.\n     * @default {}\n     */\n    componentsProps?: {\n        button?: ButtonProps;\n    };\n}\ndeclare const GridToolbarFilterButton: React.ForwardRefExoticComponent<Omit<GridToolbarFilterButtonProps, \"ref\"> & React.RefAttributes<HTMLButtonElement>>;\nexport { GridToolbarFilterButton };\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExportContainer.d.ts":"import * as React from 'react';\nimport { ButtonProps } from '@mui/material/Button';\nexport declare const GridToolbarExportContainer: React.ForwardRefExoticComponent<Omit<ButtonProps, \"ref\"> & React.RefAttributes<HTMLButtonElement>>;\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbarExport.d.ts":"import * as React from 'react';\nimport { ButtonProps } from '@mui/material/Button';\nimport { GridCsvExportOptions, GridPrintExportOptions } from '../../models/gridExport';\nexport interface GridExportDisplayOptions {\n    /**\n     * If `true`, this export option will be removed from the GridToolbarExport menu.\n     * @default false\n     */\n    disableToolbarButton?: boolean;\n}\nexport interface GridExportMenuItemProps<Options extends {}> {\n    hideMenu?: () => void;\n    options?: Options & GridExportDisplayOptions;\n}\nexport type GridCsvExportMenuItemProps = GridExportMenuItemProps<GridCsvExportOptions>;\nexport type GridPrintExportMenuItemProps = GridExportMenuItemProps<GridPrintExportOptions>;\nexport interface GridToolbarExportProps extends ButtonProps {\n    csvOptions?: GridCsvExportOptions & GridExportDisplayOptions;\n    printOptions?: GridPrintExportOptions & GridExportDisplayOptions;\n    [key: string]: any;\n}\nexport declare function GridCsvExportMenuItem(props: GridCsvExportMenuItemProps): React.JSX.Element;\nexport declare function GridPrintExportMenuItem(props: GridPrintExportMenuItemProps): React.JSX.Element;\ndeclare const GridToolbarExport: React.ForwardRefExoticComponent<Omit<GridToolbarExportProps, \"ref\"> & React.RefAttributes<HTMLButtonElement>>;\nexport { GridToolbarExport };\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbarDensitySelector.d.ts":"import * as React from 'react';\nimport { ButtonProps } from '@mui/material/Button';\nexport declare const GridToolbarDensitySelector: React.ForwardRefExoticComponent<Omit<ButtonProps, \"ref\"> & React.RefAttributes<HTMLButtonElement>>;\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbarColumnsButton.d.ts":"import * as React from 'react';\nimport { ButtonProps } from '@mui/material/Button';\nexport declare const GridToolbarColumnsButton: React.ForwardRefExoticComponent<Omit<ButtonProps, \"ref\"> & React.RefAttributes<HTMLButtonElement>>;\n","node_modules/@mui/x-data-grid/components/toolbar/GridToolbar.d.ts":"import * as React from 'react';\nimport { GridToolbarContainerProps } from '../containers/GridToolbarContainer';\nimport { GridToolbarExportProps } from './GridToolbarExport';\nimport { GridToolbarQuickFilterProps } from './GridToolbarQuickFilter';\nexport interface GridToolbarProps extends GridToolbarContainerProps, Omit<GridToolbarExportProps, 'color'> {\n    /**\n     * Show the quick filter component.\n     * @default false\n     */\n    showQuickFilter?: boolean;\n    /**\n     * Props passed to the quick filter component.\n     */\n    quickFilterProps?: GridToolbarQuickFilterProps;\n}\ndeclare const GridToolbar: React.ForwardRefExoticComponent<Omit<GridToolbarProps, \"ref\"> & React.RefAttributes<HTMLDivElement>>;\nexport { GridToolbar };\n","node_modules/@mui/x-data-grid/models/api/index.d.ts":"import type { GridEditingApi } from './gridEditingApi';\nexport * from './gridParamsApi';\nexport type { GridCoreApi } from './gridCoreApi';\nexport * from './gridColumnApi';\nexport * from './gridDensityApi';\nexport * from './gridRowApi';\nexport type { GridRowsMetaApi } from './gridRowsMetaApi';\nexport * from './gridRowSelectionApi';\nexport * from './gridSortApi';\nexport type { GridStateApi } from './gridStateApi';\nexport * from './gridLocaleTextApi';\nexport * from './gridCsvExportApi';\nexport type { GridFocusApi } from './gridFocusApi';\nexport * from './gridFilterApi';\nexport * from './gridColumnMenuApi';\nexport * from './gridPreferencesPanelApi';\nexport * from './gridPrintExportApi';\nexport * from './gridCallbackDetails';\nexport * from './gridScrollApi';\nexport * from './gridVirtualizationApi';\nexport type { GridApiCommon } from './gridApiCommon';\nexport type { GridEditingApi, GridCellModesModel, GridRowModesModel } from './gridEditingApi';\nexport type GridEditRowApi = GridEditingApi;\n","node_modules/@mui/x-data-grid/models/api/gridVirtualizationApi.d.ts":"import { GridRenderContext } from '../params';\nexport interface GridVirtualizationApi {\n    /**\n     * Enable/disable virtualization.\n     * @param {boolean} enabled The enabled value for virtualization\n     */\n    unstable_setVirtualization: (enabled: boolean) => void;\n    /**\n     * Enable/disable column virtualization.\n     * @param {boolean} enabled The enabled value for column virtualization\n     */\n    unstable_setColumnVirtualization: (enabled: boolean) => void;\n}\nexport interface GridVirtualizationPrivateApi {\n    /**\n     * Get the current grid rendering context.\n     * @returns {GridRenderContext} The `GridRenderContext`.\n     */\n    getRenderContext: () => GridRenderContext;\n}\n","node_modules/@mui/x-data-grid/models/api/gridStateApi.d.ts":"import { GridStateCommunity } from '../gridStateCommunity';\nimport { GridControlledStateEventLookup, GridControlledStateReasonLookup } from '../events';\nimport { GridControlStateItem } from '../controlStateItem';\nexport interface GridStateApi<State extends GridStateCommunity> {\n    /**\n     * Property that contains the whole state of the grid.\n     */\n    state: State;\n    /**\n     * Forces the grid to rerender. It's often used after a state update.\n     */\n    forceUpdate: () => void;\n    /**\n     * Sets the whole state of the grid.\n     * @param {GridState | (oldState: GridState) => GridState} state The new state or the callback creating the new state.\n     * @param {string} reason The reason for this change to happen.\n     * @returns {boolean} Has the state been updated.\n     * @ignore - do not document.\n     */\n    setState: <S extends State, K extends keyof GridControlledStateReasonLookup>(state: S | ((previousState: S) => S), reason?: GridControlledStateReasonLookup[K]) => boolean;\n}\nexport interface GridStatePrivateApi<State extends GridStateCommunity> {\n    /**\n     * Updates a single sub-state.\n     * Publishes the `xxxChange` event and calls the `onXXXChange` prop.\n     * @param {K} key Which key of the state to update.\n     * @param {(oldState: GridState) => GridState} state The new state of the sub-state to update.\n     * @param {GridControlledStateReasonLookup[K]} reason The reason to pass to the callback prop and event.\n     * @returns {boolean} `true` if the state has been successfully updated.\n     */\n    updateControlState: <K extends keyof GridControlledStateReasonLookup>(key: K, state: (oldState: State[K]) => State[K], reason?: GridControlledStateReasonLookup[K]) => boolean;\n    /**\n     * Updates a control state that binds the model, the onChange prop, and the grid state together.\n     * @param {GridControlStateItem>} controlState The [[GridControlStateItem]] to be registered.\n     */\n    registerControlState: <E extends keyof GridControlledStateEventLookup>(controlState: GridControlStateItem<State, E>) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridSortApi.d.ts":"import { GridColDef } from '../colDef/gridColDef';\nimport { GridRowId, GridRowModel } from '../gridRows';\nimport { GridSortDirection, GridSortModel } from '../gridSortModel';\n/**\n * The sort API interface that is available in the grid [[apiRef]].\n */\nexport interface GridSortApi {\n    /**\n     * Returns the sort model currently applied to the grid.\n     * @returns {GridSortModel} The `GridSortModel`.\n     */\n    getSortModel: () => GridSortModel;\n    /**\n     * Applies the current sort model to the rows.\n     */\n    applySorting: () => void;\n    /**\n     * Updates the sort model and triggers the sorting of rows.\n     * @param {GridSortModel} model The `GridSortModel` to be applied.\n     */\n    setSortModel: (model: GridSortModel) => void;\n    /**\n     * Sorts a column.\n     * @param {GridColDef} column The [[GridColDef]] of the column to be sorted.\n     * @param {GridSortDirection} direction The direction to be sorted. By default, the next in the `sortingOrder` prop.\n     * @param {boolean} allowMultipleSorting Whether to keep the existing [[GridSortItem]]. Default is `false`.\n     */\n    sortColumn: (column: GridColDef, direction?: GridSortDirection, allowMultipleSorting?: boolean) => void;\n    /**\n     * Returns all rows sorted according to the active sort model.\n     * @returns {GridRowModel[]} The sorted [[GridRowModel]] objects.\n     */\n    getSortedRows: () => GridRowModel[];\n    /**\n     * Returns all row ids sorted according to the active sort model.\n     * @returns {GridRowId[]} The sorted [[GridRowId]] values.\n     */\n    getSortedRowIds: () => GridRowId[];\n    /**\n     * Gets the `GridRowId` of a row at a specific index.\n     * The index is based on the sorted but unfiltered row list.\n     * @param {number} index The index of the row\n     * @returns {GridRowId} The `GridRowId` of the row.\n     */\n    getRowIdFromRowIndex: (index: number) => GridRowId;\n}\n","node_modules/@mui/x-data-grid/models/api/gridScrollApi.d.ts":"import { GridCellIndexCoordinates } from '../gridCell';\nimport { GridScrollParams } from '../params/gridScrollParams';\n/**\n * The scroll API interface that is available in the grid [[apiRef]].\n */\nexport interface GridScrollApi {\n    /**\n     * Triggers the viewport to scroll to the given positions (in pixels).\n     * @param {GridScrollParams} params An object containing the `left` or `top` position to scroll.\n     */\n    scroll: (params: Partial<GridScrollParams>) => void;\n    /**\n     * Returns the current scroll position.\n     * @returns {GridScrollParams} The scroll positions.\n     */\n    getScrollPosition: () => GridScrollParams;\n    /**\n     * Triggers the viewport to scroll to the cell at indexes given by `params`.\n     * Returns `true` if the grid had to scroll to reach the target.\n     * @param {GridCellIndexCoordinates} params The indexes where the cell is.\n     * @returns {boolean} Returns `true` if the index was outside of the viewport and the grid had to scroll to reach the target.\n     */\n    scrollToIndexes: (params: Partial<GridCellIndexCoordinates>) => boolean;\n}\n","node_modules/@mui/x-data-grid/models/api/gridRowsMetaApi.d.ts":"import { GridRowId } from '../gridRows';\n/**\n * The Row Meta API interface that is available in the grid `apiRef`.\n */\nexport interface GridRowsMetaApi {\n    /**\n     * Gets base row height without considering additional height a row may take.\n     * @param {GridRowId} id The id of the row.\n     * @returns {number} The target row height.\n     * @ignore - do not document.\n     */\n    unstable_getRowHeight: (id: GridRowId) => number;\n    /**\n     * Gets all sizes that compose the total height that the given row takes.\n     * @param {GridRowId} id The id of the row.\n     * @returns {Record<string, number>} The object containing the sizes.\n     * @ignore - do not document.\n     */\n    unstable_getRowInternalSizes: (id: GridRowId) => Record<string, number> | undefined;\n    /**\n     * Updates the base height of a row.\n     * @param {GridRowId} id The id of the row.\n     * @param {number} height The new height.\n     * @ignore - do not document.\n     */\n    unstable_setRowHeight: (id: GridRowId, height: number) => void;\n    /**\n     * Stores the row height measurement and triggers an hydration, if needed.\n     * @param {GridRowId} id The id of the row.\n     * @param {number} height The new height.\n     * @param {string} position The position to it the row belongs to.\n     * @ignore - do not document.\n     */\n    unstable_storeRowHeightMeasurement: (id: GridRowId, height: number, position: 'left' | 'center' | 'right') => void;\n    /**\n     * Updates the index of the last row measured.\n     * @param {number} index The row index.\n     * @ignore - do not document.\n     */\n    unstable_setLastMeasuredRowIndex: (index: number) => void;\n    /**\n     * Forces the recalculation of the heights of all rows.\n     */\n    resetRowHeights: () => void;\n}\nexport interface GridRowsMetaPrivateApi {\n    /**\n     * Determines if the height of a row is \"auto\".\n     * @param {GridRowId} id The id of the row.\n     * @returns {boolean} True if the row height is \"auto\", false otherwise.\n     */\n    rowHasAutoHeight: (id: GridRowId) => boolean;\n    /**\n     * Returns the index of the last row measured.\n     * The value considers only the rows reachable by scroll, e.g. first row has index=0 in all pages.\n     * @returns {number} The index of the last measured row.\n     */\n    getLastMeasuredRowIndex: () => number;\n}\n","node_modules/@mui/x-data-grid/models/api/gridRowSelectionApi.d.ts":"import { GridRowId, GridRowModel } from '../gridRows';\n/**\n * The selection API interface that is available in the grid [[apiRef]].\n */\nexport interface GridRowSelectionApi {\n    /**\n     * Change the selection state of a row.\n     * @param {GridRowId} id The id of the row.\n     * @param {boolean} isSelected Pass `false` to unselect a row. Default is `true`.\n     * @param {boolean} resetSelection Whether to reset the already selected rows or not. Default is `false`.\n     */\n    selectRow: (id: GridRowId, isSelected?: boolean, resetSelection?: boolean) => void;\n    /**\n     * Determines if a row is selected or not.\n     * @param {GridRowId} id The id of the row.\n     * @returns {boolean} A boolean indicating if the row is selected.\n     */\n    isRowSelected: (id: GridRowId) => boolean;\n    /**\n     * Determines if a row can be selected or not.\n     * @param {GridRowId} id The id of the row.\n     * @returns {boolean} A boolean indicating if the row can be selected.\n     */\n    isRowSelectable: (id: GridRowId) => boolean;\n    /**\n     * Returns an array of the selected rows.\n     * @returns {Map<GridRowId, GridRowModel>} A `Map` with the selected rows.\n     */\n    getSelectedRows: () => Map<GridRowId, GridRowModel>;\n    /**\n     * Updates the selected rows to be those passed to the `rowIds` argument.\n     * Any row already selected will be unselected.\n     * @param {GridRowId[]} rowIds The row ids to select.\n     */\n    setRowSelectionModel: (rowIds: GridRowId[]) => void;\n}\nexport interface GridRowMultiSelectionApi {\n    /**\n     * Change the selection state of multiple rows.\n     * @param {GridRowId[]} ids The row ids.\n     * @param {boolean} isSelected The new selection state. Default is `true`.\n     * @param {boolean} resetSelection Whether to reset the already selected rows or not. Default is `false`.\n     */\n    selectRows: (ids: GridRowId[], isSelected?: boolean, resetSelection?: boolean) => void;\n    /**\n     * Change the selection state of all the selectable rows in a range.\n     * @param {Object} range The range of rows to select.\n     * @param {GridRowId} range.startId The first row id.\n     * @param {GridRowId} range.endId The last row id.\n     * @param {boolean} isSelected The new selection state. Default is `true`.\n     * @param {boolean} resetSelection Whether to reset the selected rows outside of the range or not. Default is `false`.\n     */\n    selectRowRange: (range: {\n        startId: GridRowId;\n        endId: GridRowId;\n    }, isSelected?: boolean, resetSelection?: boolean) => void;\n}\nexport interface GridMultiSelectionApi {\n    /**\n     * Change the selection state of multiple rows.\n     * @param {GridRowId[]} ids The row ids.\n     * @param {boolean} isSelected The new selection state. Default is `true`.\n     * @param {boolean} resetSelection Whether to reset the already selected rows or not. Default is `false`.\n     */\n    selectRows: (ids: GridRowId[], isSelected?: boolean, resetSelection?: boolean) => void;\n    /**\n     * Change the selection state of all the selectable rows in a range.\n     * @param {Object} range The range of rows to select.\n     * @param {GridRowId} range.startId The first row id.\n     * @param {GridRowId} range.endId The last row id.\n     * @param {boolean} isSelected The new selection state. Default is `true`.\n     * @param {boolean} resetSelection Whether to reset the selected rows outside of the range or not. Default is `false`.\n     */\n    selectRowRange: (range: {\n        startId: GridRowId;\n        endId: GridRowId;\n    }, isSelected?: boolean, resetSelection?: boolean) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridRowApi.d.ts":"import { GridRowModel, GridRowId, GridRowModelUpdate, GridValidRowModel, GridTreeNode } from '../gridRows';\nexport interface GridRowGroupChildrenGetterParams {\n    /**\n     * The row id of the group\n     */\n    groupId: GridRowId;\n    /**\n     * If `true`, the method will not return the generated rows generated by the grid (aggregation footers, groups, ...)\n     * @default true\n     */\n    skipAutoGeneratedRows?: boolean;\n    /**\n     * If `true`, the method will only return the rows that are matching the current filters\n     * @default false\n     */\n    applyFiltering?: boolean;\n    /**\n     * If `true`, the method will order the returned rows according to the current sorting rules\n     * @default false\n     */\n    applySorting?: boolean;\n}\n/**\n * The Row API interface that is available in the grid `apiRef`.\n */\nexport interface GridRowApi {\n    /**\n     * Gets the full set of rows as [[Map<GridRowId, GridRowModel>]].\n     * @returns {Map<GridRowId, GridRowModel>} The full set of rows.\n     */\n    getRowModels: () => Map<GridRowId, GridRowModel>;\n    /**\n     * Gets the total number of rows in the grid.\n     * @returns {number} The number of rows.\n     */\n    getRowsCount: () => number;\n    /**\n     * Gets the list of row ids.\n     * TODO rows v6: Rename or remove ?\n     * @returns {GridRowId[]} A list of ids.\n     */\n    getAllRowIds: () => GridRowId[];\n    /**\n     * Sets a new set of rows.\n     * @param {GridRowModel[]} rows The new rows.\n     */\n    setRows: (rows: GridRowModel[]) => void;\n    /**\n     * Allows to update, insert and delete rows.\n     * @param {GridRowModelUpdate[]} updates An array of rows with an `action` specifying what to do.\n     */\n    updateRows: (updates: GridRowModelUpdate[]) => void;\n    /**\n     * Gets the row data with a given id.\n     * @param {GridRowId} id The id of the row.\n     * @returns {GridRowModel} The row data.\n     */\n    getRow: <R extends GridValidRowModel = any>(id: GridRowId) => R | null;\n    /**\n     * Gets the ID of a row given its data.\n     * @param {GridRowModel} row The row data.\n     * @returns {GridRowId} The id of the row.\n     */\n    getRowId: <R extends GridValidRowModel = any>(row: R) => GridRowId;\n    /**\n     * Gets the row node from the internal tree structure.\n     * TODO rows v6: Rename `getTreeNode`\n     * @param {GridRowId} id The id of the row.\n     * @returns {GridTreeNode} The tree node.\n     */\n    getRowNode: <N extends GridTreeNode>(id: GridRowId) => N | null;\n    /**\n     * Gets the index of a row relative to the rows that are reachable by scroll.\n     * @param {GridRowId} id The row id.\n     * @returns {number} The index of the row.\n     */\n    getRowIndexRelativeToVisibleRows: (id: GridRowId) => number;\n    /**\n     * Replace a set of rows with new rows.\n     * @param {number} firstRowToReplace The index of the first row to be replaced.\n     * @param {GridRowModel[]} newRows The new rows.\n     */\n    unstable_replaceRows: (firstRowToReplace: number, newRows: GridRowModel[]) => void;\n}\nexport interface GridRowProApi {\n    /**\n     * Moves a row from its original position to the position given by `targetIndex`.\n     * @param {GridRowId} rowId The row id\n     * @param {number} targetIndex The new position (0-based).\n     */\n    setRowIndex: (rowId: GridRowId, targetIndex: number) => void;\n    /**\n     * Gets the rows of a grouping criteria.\n     * Only contains the rows provided to the grid, not the rows automatically generated by it.\n     * @param {GridRowGroupChildrenGetterParams} params Object containing parameters for the getter.\n     * @returns {GridRowId[]} The id of each row in the grouping criteria.\n     */\n    getRowGroupChildren: (params: GridRowGroupChildrenGetterParams) => GridRowId[];\n    /**\n     * Expand or collapse a row children.\n     * @param {GridRowId} id the ID of the row to expand or collapse.\n     * @param {boolean} isExpanded A boolean indicating if the row must be expanded or collapsed.\n     */\n    setRowChildrenExpansion: (id: GridRowId, isExpanded: boolean) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridPrintExportApi.d.ts":"import { GridPrintExportOptions } from '../gridExport';\n/**\n * The Print export API interface that is available in the grid [[apiRef]].\n */\nexport interface GridPrintExportApi {\n    /**\n     * Print the grid's data.\n     * @param {GridPrintExportOptions} options The options to apply on the export.\n     */\n    exportDataAsPrint: (options?: GridPrintExportOptions) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridPreferencesPanelApi.d.ts":"import { GridPreferencePanelsValue } from '../../hooks/features/preferencesPanel/gridPreferencePanelsValue';\n/**\n * The preferences panel API interface that is available in the grid [[apiRef]].\n */\nexport interface GridPreferencesPanelApi {\n    /**\n     * Displays the preferences panel. The `newValue` argument controls the content of the panel.\n     * @param {GridPreferencePanelsValue} newValue The panel to open. Use `\"filters\"` or `\"columns\"`.\n     * @param {string} panelId The unique panel id\n     * @param {string} labelId The unique button id\n     */\n    showPreferences: (newValue: GridPreferencePanelsValue, panelId?: string, labelId?: string) => void;\n    /**\n     * Hides the preferences panel.\n     */\n    hidePreferences: () => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridParamsApi.d.ts":"import { GridColDef } from '../colDef';\nimport { GridValidRowModel, GridRowId, GridTreeNode, GridRowModel } from '../gridRows';\nimport { GridCellParams } from '../params/gridCellParams';\nimport { GridColumnHeaderParams } from '../params/gridColumnHeaderParams';\nimport { GridRowParams } from '../params/gridRowParams';\nexport interface GridParamsApi {\n    /**\n     * Gets the value of a cell at the given `id` and `field`.\n     * @template V\n     * @param {GridRowId} id The id of the row.\n     * @param {string} field The column field.\n     * @returns {v} The cell value.\n     */\n    getCellValue: <V extends any = any>(id: GridRowId, field: string) => V;\n    /**\n     * Gets the cell value.\n     * Use it instead of `getCellValue` for better performance if you have `row` and `colDef`.\n     * @template V\n     * @param {GridRowModel} row The row model.\n     * @param {GridColDef} colDef The column definition.\n     * @returns {v} The cell value.\n     * @ignore - do not document\n     */\n    getRowValue: <V extends any = any>(row: GridRowModel, colDef: GridColDef) => V;\n    /**\n     * Gets the cell formatted value\n     * Use it instead of `getCellParams` for better performance if you only need the formatted value.\n     * @template V\n     * @param {GridRowModel} row The row model.\n     * @param {GridColDef} colDef The column definition.\n     * @returns {v} The cell value.\n     * @ignore - do not document\n     */\n    getRowFormattedValue: <V extends any = any>(row: GridRowModel, colDef: GridColDef) => V;\n    /**\n     * Gets the underlying DOM element for a cell at the given `id` and `field`.\n     * @param {GridRowId} id The id of the row.\n     * @param {string} field The column field.\n     * @returns {HTMLDivElement | null} The DOM element or `null`.\n     */\n    getCellElement: (id: GridRowId, field: string) => HTMLDivElement | null;\n    /**\n     * Gets the [[GridCellParams]] object that is passed as argument in events.\n     * @param {GridRowId} id The id of the row.\n     * @param {string} field The column field.\n     * @returns {GridCellParams} The cell params.\n     */\n    getCellParams: <R extends GridValidRowModel = any, V = unknown, F = V, N extends GridTreeNode = GridTreeNode>(id: GridRowId, field: string) => GridCellParams<R, V, F, N>;\n    /**\n     * Gets the [[GridRowParams]] object that is passed as argument in events.\n     * @param {GridRowId} id The id of the row.\n     * @param {string} field The column field.\n     * @returns {GridRowParams} The row params.\n     */\n    getRowParams: (id: GridRowId) => GridRowParams;\n    /**\n     * Gets the underlying DOM element for a row at the given `id`.\n     * @param {GridRowId} id The id of the row.\n     * @returns {HTMLDivElement | null} The DOM element or `null`.\n     */\n    getRowElement: (id: GridRowId) => HTMLDivElement | null;\n    /**\n     * Gets the underlying DOM element for the column header with the given `field`.\n     * @param {string} field The column field.\n     * @returns {HTMLDivElement | null} The DOM element or `null`.\n     */\n    getColumnHeaderElement: (field: string) => HTMLDivElement | null;\n    /**\n     * Gets the [[GridColumnHeaderParams]] object that is passed as argument in events.\n     * @param {string} field The column field.\n     * @returns {GridColumnHeaderParams} The cell params.\n     */\n    getColumnHeaderParams: (field: string) => GridColumnHeaderParams;\n}\n","node_modules/@mui/x-data-grid/models/api/gridLoggerApi.d.ts":"import { Logger } from '../logger';\n/**\n * The logger API interface that is available in the grid `apiRef`.\n */\nexport interface GridLoggerApi {\n    /**\n     * @param {string} name The name of the logger\n     * @returns {Logger} Instance of the logger\n     */\n    getLogger: (name: string) => Logger;\n}\n","node_modules/@mui/x-data-grid/models/api/gridLocaleTextApi.d.ts":"import * as React from 'react';\nimport { ComponentsPropsList } from '@mui/material/styles';\nimport { GridColDef } from '../colDef';\n/**\n * Set the types of the texts in the grid.\n */\nexport interface GridLocaleText {\n    noRowsLabel: string;\n    noResultsOverlayLabel: string;\n    toolbarDensity: React.ReactNode;\n    toolbarDensityLabel: string;\n    toolbarDensityCompact: string;\n    toolbarDensityStandard: string;\n    toolbarDensityComfortable: string;\n    toolbarColumns: React.ReactNode;\n    toolbarColumnsLabel: string;\n    toolbarFilters: React.ReactNode;\n    toolbarFiltersLabel: string;\n    toolbarFiltersTooltipHide: React.ReactNode;\n    toolbarFiltersTooltipShow: React.ReactNode;\n    toolbarFiltersTooltipActive: (count: number) => React.ReactNode;\n    toolbarQuickFilterPlaceholder: string;\n    toolbarQuickFilterLabel: string;\n    toolbarQuickFilterDeleteIconLabel: string;\n    toolbarExport: React.ReactNode;\n    toolbarExportLabel: string;\n    toolbarExportCSV: React.ReactNode;\n    toolbarExportPrint: React.ReactNode;\n    toolbarExportExcel: string;\n    columnsPanelTextFieldLabel: string;\n    columnsPanelTextFieldPlaceholder: string;\n    columnsPanelDragIconLabel: string;\n    columnsPanelShowAllButton: React.ReactNode;\n    columnsPanelHideAllButton: React.ReactNode;\n    filterPanelAddFilter: React.ReactNode;\n    filterPanelRemoveAll: React.ReactNode;\n    filterPanelDeleteIconLabel: string;\n    filterPanelLogicOperator: string;\n    filterPanelOperator: React.ReactNode;\n    filterPanelOperatorAnd: React.ReactNode;\n    filterPanelOperatorOr: React.ReactNode;\n    filterPanelColumns: React.ReactNode;\n    filterPanelInputLabel: string;\n    filterPanelInputPlaceholder: string;\n    filterOperatorContains: string;\n    filterOperatorEquals: string;\n    filterOperatorStartsWith: string;\n    filterOperatorEndsWith: string;\n    filterOperatorIs: string;\n    filterOperatorNot: string;\n    filterOperatorAfter: string;\n    filterOperatorOnOrAfter: string;\n    filterOperatorBefore: string;\n    filterOperatorOnOrBefore: string;\n    filterOperatorIsEmpty: string;\n    filterOperatorIsNotEmpty: string;\n    filterOperatorIsAnyOf: string;\n    'filterOperator=': string;\n    'filterOperator!=': string;\n    'filterOperator>': string;\n    'filterOperator>=': string;\n    'filterOperator<': string;\n    'filterOperator<=': string;\n    headerFilterOperatorContains: string;\n    headerFilterOperatorEquals: string;\n    headerFilterOperatorStartsWith: string;\n    headerFilterOperatorEndsWith: string;\n    headerFilterOperatorIs: string;\n    headerFilterOperatorNot: string;\n    headerFilterOperatorAfter: string;\n    headerFilterOperatorOnOrAfter: string;\n    headerFilterOperatorBefore: string;\n    headerFilterOperatorOnOrBefore: string;\n    headerFilterOperatorIsEmpty: string;\n    headerFilterOperatorIsNotEmpty: string;\n    headerFilterOperatorIsAnyOf: string;\n    'headerFilterOperator=': string;\n    'headerFilterOperator!=': string;\n    'headerFilterOperator>': string;\n    'headerFilterOperator>=': string;\n    'headerFilterOperator<': string;\n    'headerFilterOperator<=': string;\n    filterValueAny: string;\n    filterValueTrue: string;\n    filterValueFalse: string;\n    columnMenuLabel: string;\n    columnMenuShowColumns: React.ReactNode;\n    columnMenuManageColumns: React.ReactNode;\n    columnMenuFilter: React.ReactNode;\n    columnMenuHideColumn: React.ReactNode;\n    columnMenuUnsort: React.ReactNode;\n    columnMenuSortAsc: React.ReactNode | ((colDef: GridColDef) => React.ReactNode);\n    columnMenuSortDesc: React.ReactNode | ((colDef: GridColDef) => React.ReactNode);\n    columnHeaderFiltersTooltipActive: (count: number) => React.ReactNode;\n    columnHeaderFiltersLabel: string;\n    columnHeaderSortIconLabel: string;\n    footerRowSelected: (count: number) => React.ReactNode;\n    footerTotalRows: React.ReactNode;\n    footerTotalVisibleRows: (visibleCount: number, totalCount: number) => React.ReactNode;\n    checkboxSelectionHeaderName: string;\n    checkboxSelectionSelectAllRows: string;\n    checkboxSelectionUnselectAllRows: string;\n    checkboxSelectionSelectRow: string;\n    checkboxSelectionUnselectRow: string;\n    booleanCellTrueLabel: string;\n    booleanCellFalseLabel: string;\n    actionsCellMore: string;\n    pinToLeft: string;\n    pinToRight: string;\n    unpin: string;\n    treeDataGroupingHeaderName: string;\n    treeDataExpand: string;\n    treeDataCollapse: string;\n    groupingColumnHeaderName: string;\n    groupColumn: (name: string) => string;\n    unGroupColumn: (name: string) => string;\n    detailPanelToggle: string;\n    expandDetailPanel: string;\n    collapseDetailPanel: string;\n    rowReorderingHeaderName: string;\n    aggregationMenuItemHeader: string;\n    aggregationFunctionLabelSum: string;\n    aggregationFunctionLabelAvg: string;\n    aggregationFunctionLabelMin: string;\n    aggregationFunctionLabelMax: string;\n    aggregationFunctionLabelSize: string;\n    MuiTablePagination: Omit<ComponentsPropsList['MuiTablePagination'], 'page' | 'count' | 'onChangePage' | 'rowsPerPage' | 'onPageChange'>;\n}\nexport type GridTranslationKeys = keyof GridLocaleText;\n/**\n * The grid locale text API [[apiRef]].\n */\nexport interface GridLocaleTextApi {\n    /**\n     * Returns the translation for the `key`.\n     * @param {T} key One of the keys in [[GridLocaleText]].\n     * @returns {GridLocaleText[T]} The translated value.\n     */\n    getLocaleText: <T extends GridTranslationKeys>(key: T) => GridLocaleText[T];\n}\n","node_modules/@mui/x-data-grid/models/api/gridHeaderFilteringApi.d.ts":"import { GridColDef } from '../colDef';\nimport { GridHeaderFilteringState } from '../gridHeaderFilteringModel';\nexport interface GridHeaderFilteringPrivateApi {\n    /**\n     * Internal function to set the header filter state.\n     * @param {Partial<GridHeaderFilteringState>} headerFilterState The field to be edited.\n     * @ignore - do not document.\n     */\n    setHeaderFilterState: (headerFilterState: Partial<GridHeaderFilteringState>) => void;\n}\nexport interface GridHeaderFilteringApi {\n    /**\n     * Puts the cell corresponding to the given row id and field into edit mode.\n     * @param {GridColDef['field']} field The field of the header filter to put in edit mode.\n     */\n    startHeaderFilterEditMode: (field: GridColDef['field']) => void;\n    /**\n     * Stops the edit mode for the current field.\n     */\n    stopHeaderFilterEditMode: () => void;\n    /**\n     * Opens the header filter menu for the given field.\n     * @param {GridColDef['field']} field The field of the header filter to open menu for.\n     */\n    showHeaderFilterMenu: (field: GridColDef['field']) => void;\n    /**\n     * Hides the header filter menu.\n     */\n    hideHeaderFilterMenu: () => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridFocusApi.d.ts":"import { GridRowId } from '../gridRows';\nimport { MuiBaseEvent } from '../muiEvent';\nimport { GridColumnGroupIdentifier } from '../../hooks/features/focus';\nexport interface GridFocusApi {\n    /**\n     * Sets the focus to the cell at the given `id` and `field`.\n     * @param {GridRowId} id The row id.\n     * @param {string} field The column field.\n     */\n    setCellFocus: (id: GridRowId, field: string) => void;\n    /**\n     * Sets the focus to the column header at the given `field`.\n     * @param {string} field The column field.\n     * @param {string} event The event that triggers the action.\n     */\n    setColumnHeaderFocus: (field: string, event?: MuiBaseEvent) => void;\n    /**\n     * Sets the focus to the column header filter at the given `field`.\n     * @param {string} field The column field.\n     * @param {string} event The event that triggers the action.\n     */\n    setColumnHeaderFilterFocus: (field: string, event?: MuiBaseEvent) => void;\n}\nexport interface GridFocusPrivateApi {\n    /**\n     * Sets the focus to the column group header at the given `field` and given depth.\n     * @param {string} field The column field.\n     * @param {number} depth The group depth.\n     * @param {object} event The event that triggers the action.\n     */\n    setColumnGroupHeaderFocus: (field: string, depth: number, event?: MuiBaseEvent) => void;\n    /**\n     * Gets the focus to the column group header at the given `field` and given depth.\n     * @returns {GridColumnGroupIdentifier | null} focused\n     */\n    getColumnGroupHeaderFocus: () => GridColumnGroupIdentifier | null;\n    /**\n     * Moves the focus to the cell situated at the given direction.\n     * If field is the last and direction=right, the focus goes to the next row.\n     * If field is the first and direction=left, the focus goes to the previous row.\n     * @param {GridRowId} id The base row id.\n     * @param {string} field The base column field.\n     * @param {'below' | 'right' | 'left'} direction Which direction is the next cell to focus.\n     */\n    moveFocusToRelativeCell: (id: GridRowId, field: string, direction: 'below' | 'right' | 'left') => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridFilterApi.d.ts":"import { GridFilterModel } from '../gridFilterModel';\nimport { GridFilterItem, GridLogicOperator } from '../gridFilterItem';\nimport { GridControlledStateReasonLookup } from '../events';\nimport { DataGridProcessedProps } from '../props/DataGridProps';\n/**\n * The filter API interface that is available in the grid [[apiRef]].\n */\nexport interface GridFilterApi {\n    /**\n     * Shows the filter panel. If `targetColumnField` is given, a filter for this field is also added.\n     * @param {string} targetColumnField The column field to add a filter.\n     * @param {string} panelId The unique panel id\n     * @param {string} labelId The unique button id\n     */\n    showFilterPanel: (targetColumnField?: string, panelId?: string, labelId?: string) => void;\n    /**\n     * Hides the filter panel.\n     */\n    hideFilterPanel: () => void;\n    /**\n     * Updates or inserts a [[GridFilterItem]].\n     * @param {GridFilterItem} item The filter to update.\n     */\n    upsertFilterItem: (item: GridFilterItem) => void;\n    /**\n     * Updates or inserts many [[GridFilterItem]].\n     * @param {GridFilterItem[]} items The filters to update.\n     */\n    upsertFilterItems: (items: GridFilterItem[]) => void;\n    /**\n     * Applies all filters on all rows.\n     * @ignore - do not document.\n     */\n    unstable_applyFilters: () => void;\n    /**\n     * Deletes a [[GridFilterItem]].\n     * @param {GridFilterItem} item The filter to delete.\n     */\n    deleteFilterItem: (item: GridFilterItem) => void;\n    /**\n     * Changes the [[GridLogicOperator]] used to connect the filters.\n     * @param {GridLogicOperator} operator The new logic operator. It can be: `\"and\"` or `\"or`\".\n     */\n    setFilterLogicOperator: (operator: GridLogicOperator) => void;\n    /**\n     * Sets the filter model to the one given by `model`.\n     * @param {GridFilterModel} model The new filter model.\n     * @param {string} reason The reason for the model to have changed.\n     */\n    setFilterModel: (model: GridFilterModel, reason?: GridControlledStateReasonLookup['filter']) => void;\n    /**\n     * Set the quick filter values to the one given by `values`\n     * @param {any[]} values The list of element to quick filter\n     */\n    setQuickFilterValues: (values: any[]) => void;\n    /**\n     * Returns the value of the `ignoreDiacritics` prop.\n     */\n    ignoreDiacritics: DataGridProcessedProps['ignoreDiacritics'];\n}\n","node_modules/@mui/x-data-grid/models/api/gridEditingApi.d.ts":"import { GridCellMode, GridRowMode } from '../gridCell';\nimport { GridCellModes, GridRowModes } from '../gridEditRowModel';\nimport { GridRowId, GridRowModel } from '../gridRows';\nimport { GridCellParams } from '../params/gridCellParams';\nimport { GridEditCellValueParams } from '../params/gridEditCellParams';\nimport { MuiBaseEvent } from '../muiEvent';\nexport type GridCellModesModelProps = ({\n    mode: GridCellModes.View;\n} & Omit<GridStopCellEditModeParams, 'id' | 'field'>) | ({\n    mode: GridCellModes.Edit;\n} & Omit<GridStartCellEditModeParams, 'id' | 'field'>);\nexport type GridCellModesModel = Record<GridRowId, Record<string, GridCellModesModelProps>>;\nexport type GridRowModesModelProps = ({\n    mode: GridRowModes.View;\n} & Omit<GridStopRowEditModeParams, 'id' | 'field'>) | ({\n    mode: GridRowModes.Edit;\n} & Omit<GridStartRowEditModeParams, 'id' | 'field'>);\nexport type GridRowModesModel = Record<GridRowId, GridRowModesModelProps>;\nexport interface GridEditCellMeta {\n    changeReason?: 'debouncedSetEditCellValue' | 'setEditCellValue';\n}\nexport interface GridEditingSharedApi {\n    /**\n     * Controls if a cell is editable.\n     * @param {GridCellParams} params The cell params.\n     * @returns {boolean} A boolean value determining if the cell is editable.\n     */\n    isCellEditable: (params: GridCellParams) => boolean;\n    /**\n     * Sets the value of the edit cell.\n     * Commonly used inside the edit cell component.\n     * @param {GridEditCellValueParams} params Contains the id, field and value to set.\n     * @param {React.SyntheticEvent} event The event to pass forward.\n     * @returns {Promise<boolean> | void} A promise with the validation status.\n     */\n    setEditCellValue: (params: GridEditCellValueParams, event?: MuiBaseEvent) => Promise<boolean> | void;\n    /**\n     * Returns the row with the values that were set by editing the cells.\n     * In row editing, `field` is ignored and all fields are considered.\n     * @param {GridRowId} id The row id being edited.\n     * @param {string} field The field being edited.\n     * @returns {GridRowModel} The row with edited values.\n     */\n    getRowWithUpdatedValues: (id: GridRowId, field: string) => GridRowModel;\n    /**\n     * Gets the meta information for the edit cell.\n     * @param {GridRowId} id The row id being edited.\n     * @param {string} field The field being edited.\n     * @ignore - do not document.\n     */\n    unstable_getEditCellMeta: (id: GridRowId, field: string) => GridEditCellMeta | null;\n}\nexport interface GridEditingSharedPrivateApi {\n    /**\n     * Immediately updates the value of the cell, without waiting for the debounce.\n     * @param {GridRowId} id The row id.\n     * @param {string} field The field to update. If not passed, updates all fields in the given row id.\n     */\n    runPendingEditCellValueMutation: (id: GridRowId, field?: string) => void;\n}\n/**\n * Params passed to `apiRef.current.startCellEditMode`.\n */\nexport interface GridStartCellEditModeParams {\n    /**\n     * The row id.\n     */\n    id: GridRowId;\n    /**\n     * The field.\n     */\n    field: string;\n    /**\n     * If `true`, the value will be deleted before entering the edit mode.\n     */\n    deleteValue?: boolean;\n    /**\n     * The initial value for the field.\n     * If `deleteValue` is also true, this value is not used.\n     * @deprecated No longer needed.\n     */\n    initialValue?: any;\n}\n/**\n * Params passed to `apiRef.current.stopCellEditMode`.\n */\nexport interface GridStopCellEditModeParams {\n    /**\n     * The row id.\n     */\n    id: GridRowId;\n    /**\n     * The field.\n     */\n    field: string;\n    /**\n     * Whether or not to ignore the modifications made on this cell.\n     * @default false\n     */\n    ignoreModifications?: boolean;\n    /**\n     * To which cell to move focus after finishing editing.\n     * @default \"none\"\n     */\n    cellToFocusAfter?: 'none' | 'below' | 'right' | 'left';\n}\n/**\n * Params passed to `apiRef.current.startRowEditMode`.\n */\nexport interface GridStartRowEditModeParams {\n    /**\n     * The row id.\n     */\n    id: GridRowId;\n    /**\n     * The field to put focus.\n     */\n    fieldToFocus?: string;\n    /**\n     * If `true`, the value in `fieldToFocus` will be deleted before entering the edit mode.\n     */\n    deleteValue?: boolean;\n    /**\n     * The initial value for the given `fieldToFocus`.\n     * If `deleteValue` is also true, this value is not used.\n     * @deprecated No longer needed.\n     */\n    initialValue?: string;\n}\n/**\n * Params passed to `apiRef.current.stopRowEditMode`.\n */\nexport interface GridStopRowEditModeParams {\n    /**\n     * The row id.\n     */\n    id: GridRowId;\n    /**\n     * Whether or not to ignore the modifications made on this cell.\n     * @default false\n     */\n    ignoreModifications?: boolean;\n    /**\n     * The field that has focus when the editing is stopped.\n     * Used to calculate which cell to move the focus to after finishing editing.\n     */\n    field?: string;\n    /**\n     * To which cell to move focus after finishing editing.\n     * Only works if the field is also specified, otherwise focus stay in the same cell.\n     * @default \"none\"\n     */\n    cellToFocusAfter?: 'none' | 'below' | 'right' | 'left';\n}\n/**\n * The cell editing API interface.\n */\nexport interface GridCellEditingApi extends GridEditingSharedApi {\n    /**\n     * Gets the mode of a cell.\n     * @param {GridRowId} id The id of the row.\n     * @param {string} field The field to get the mode.\n     * @returns {GridCellMode} Returns `\"edit\"` or `\"view\"`.\n     */\n    getCellMode: (id: GridRowId, field: string) => GridCellMode;\n    /**\n     * Puts the cell corresponding to the given row id and field into edit mode.\n     * @param {GridStartCellEditModeParams} params The row id and field of the cell to edit.\n     */\n    startCellEditMode(params: GridStartCellEditModeParams): void;\n    /**\n     * Puts the cell corresponding to the given row id and field into view mode and updates the original row with the new value stored.\n     * If `params.ignoreModifications` is `true` it will discard the modifications made.\n     * @param {GridStopCellEditModeParams} params The row id and field of the cell to stop editing.\n     */\n    stopCellEditMode(params: GridStopCellEditModeParams): void;\n}\nexport interface GridCellEditingPrivateApi extends GridEditingSharedPrivateApi {\n    /**\n     * Updates the value of a cell being edited.\n     * Don't call this method directly, prefer `setEditCellValue`.\n     * @param {GridCommitCellChangeParams} params Object with the new value and id and field to update.\n     * @returns {Promise<boolean>} Resolves with `true` when the new value is valid.\n     */\n    setCellEditingEditCellValue: (params: GridEditCellValueParams) => Promise<boolean>;\n    /**\n     * Returns the row with the new value that was set by editing the cell.\n     * @param {GridRowId} id The row id being edited.\n     * @param {string} field The field being edited.\n     * @returns {GridRowModel} The data model of the row.\n     */\n    getRowWithUpdatedValuesFromCellEditing: (id: GridRowId, field: string) => GridRowModel;\n}\n/**\n * The row editing API interface.\n */\nexport interface GridRowEditingApi extends GridEditingSharedApi {\n    /**\n     * Gets the mode of a row.\n     * @param {GridRowId} id The id of the row.\n     * @returns {GridRowMode} Returns `\"edit\"` or `\"view\"`.\n     */\n    getRowMode: (id: GridRowId) => GridRowMode;\n    /**\n     * Puts the row corresponding to the given id into edit mode.\n     * @param {GridStartCellEditModeParams} params The row id edit.\n     */\n    startRowEditMode(params: GridStartRowEditModeParams): void;\n    /**\n     * Puts the row corresponding to the given id and into view mode and updates the original row with the new values stored.\n     * If `params.ignoreModifications` is `true` it will discard the modifications made.\n     * @param {GridStopCellEditModeParams} params The row id and field of the cell to stop editing.\n     */\n    stopRowEditMode(params: GridStopRowEditModeParams): void;\n}\nexport interface GridRowEditingPrivateApi extends GridEditingSharedPrivateApi {\n    /**\n     * Updates the value of a cell being edited.\n     * Don't call this method directly, prefer `setEditCellValue`.\n     * @param {GridCommitCellChangeParams} params Object with the new value and id and field to update.\n     * @returns {Promise<boolean>} Resolves with `true` when all values in the row are valid.\n     */\n    setRowEditingEditCellValue: (params: GridEditCellValueParams) => Promise<boolean>;\n    /**\n     * Returns the row with the values that were set by editing all cells.\n     * @param {GridRowId} id The row id being edited.\n     * @returns {GridRowModel} The data model of the row.\n     */\n    getRowWithUpdatedValuesFromRowEditing: (id: GridRowId) => GridRowModel;\n}\n/**\n * The editing API interface that is available in the grid `apiRef`.\n */\nexport interface GridEditingApi extends GridCellEditingApi, GridRowEditingApi {\n}\n/**\n * The private editing API interface that is available in the grid `privateApiRef`.\n */\nexport interface GridEditingPrivateApi extends GridCellEditingPrivateApi, GridRowEditingPrivateApi {\n}\n","node_modules/@mui/x-data-grid/models/api/gridDensityApi.d.ts":"import * as React from 'react';\nimport { GridDensity } from '../gridDensity';\nexport interface GridDensityOption {\n    icon: React.ReactElement;\n    label: string;\n    value: GridDensity;\n}\n/**\n * The density API interface that is available in the grid `apiRef`.\n */\nexport interface GridDensityApi {\n    /**\n     * Sets the density of the grid.\n     * @param {string} density Can be: `\"compact\"`, `\"standard\"`, `\"comfortable\"`.\n     */\n    setDensity: (density: GridDensity) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridCsvExportApi.d.ts":"import { GridCsvExportOptions } from '../gridExport';\n/**\n * The CSV export API interface that is available in the grid [[apiRef]].\n */\nexport interface GridCsvExportApi {\n    /**\n     * Returns the grid data as a CSV string.\n     * This method is used internally by `exportDataAsCsv`.\n     * @param {GridCsvExportOptions} options The options to apply on the export.\n     * @returns {string} The data in the CSV format.\n     */\n    getDataAsCsv: (options?: GridCsvExportOptions) => string;\n    /**\n     * Downloads and exports a CSV of the grid's data.\n     * @param {GridCsvExportOptions} options The options to apply on the export.\n     */\n    exportDataAsCsv: (options?: GridCsvExportOptions) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridCoreApi.d.ts":"import * as React from 'react';\nimport { GridEventPublisher, GridEventListener, GridEvents } from '../events';\nimport { Store } from '../../utils/Store';\nimport { EventManager, EventListenerOptions } from '../../utils/EventManager';\nimport { GridApiCaches } from '../gridApiCaches';\nimport type { GridApiCommon, GridPrivateApiCommon } from './gridApiCommon';\nimport type { DataGridProcessedProps } from '../props/DataGridProps';\n/**\n * The core API interface that is available in the grid `apiRef`.\n */\nexport interface GridCoreApi {\n    /**\n     * The React ref of the grid root container div element.\n     * @ignore - do not document.\n     */\n    rootElementRef?: React.RefObject<HTMLDivElement>;\n    /**\n     * Registers a handler for an event.\n     * @param {string} event The name of the event.\n     * @param {function} handler The handler to be called.\n     * @param {object} options Additional options for this listener.\n     * @returns {function} A function to unsubscribe from this event.\n     */\n    subscribeEvent: <E extends GridEvents>(event: E, handler: GridEventListener<E>, options?: EventListenerOptions) => () => void;\n    /**\n     * Emits an event.\n     * @param {GridEvents} name The name of the event.\n     * @param {any} params Arguments to be passed to the handlers.\n     * @param {MuiEvent<MuiBaseEvent>} event The event object to pass forward.\n     */\n    publishEvent: GridEventPublisher;\n    /**\n     * Unique identifier for each component instance in a page.\n     * @ignore - do not document.\n     */\n    instanceId: {\n        id: number;\n    };\n    /**\n     * The pub/sub store containing a reference to the public state.\n     * @ignore - do not document.\n     */\n    store: Store<GridApiCommon['state']>;\n}\nexport interface GridCorePrivateApi<GridPublicApi extends GridApiCommon, GridPrivateApi extends GridPrivateApiCommon, GridProps extends DataGridProcessedProps> {\n    /**\n     * The caches used by hooks and state initializers.\n     */\n    caches: GridApiCaches;\n    /**\n     * Registers a method on the public or private API.\n     * @param {'public' | 'private'} visibility The visibility of the methods.\n     * @param {Partial<GridApiRef>} methods The methods to register.\n     */\n    /**\n     * The generic event emitter manager.\n     */\n    eventManager: EventManager;\n    /**\n     * The React ref of the grid virtual scroller container element.\n     */\n    virtualScrollerRef?: React.RefObject<HTMLDivElement>;\n    /**\n     * The React ref of the grid main container div element.\n     */\n    mainElementRef?: React.RefObject<HTMLDivElement>;\n    register: <V extends 'public' | 'private', T extends V extends 'public' ? Partial<GridPublicApi> : Partial<Omit<GridPrivateApi, keyof GridPublicApi>>>(visibility: V, methods: T) => void;\n    /**\n     * Returns the public API.\n     * Can be useful on a feature hook if we want to pass the `apiRef` to a callback.\n     * Do not use it to access the public method in private parts of the codebase.\n     * @returns {GridPublicApi} The public api.\n     */\n    getPublicApi: () => GridPublicApi;\n    /**\n     * Allows to access the root props outside of the React component.\n     * Do not use in React components - use the `useGridRootProps` hook instead.\n     */\n    rootProps: GridProps;\n    /**\n     * The React ref of the grid column container virtualized div element.\n     */\n    columnHeadersContainerElementRef?: React.RefObject<HTMLDivElement>;\n    /**\n     * The React ref of the grid header filter row element.\n     */\n    headerFiltersElementRef?: React.RefObject<HTMLDivElement>;\n    /**\n     * The React ref of the grid column headers container element.\n     */\n    columnHeadersElementRef?: React.RefObject<HTMLDivElement>;\n}\n","node_modules/@mui/x-data-grid/models/api/gridColumnSpanning.d.ts":"import { GridStateColDef } from '../colDef/gridColDef';\nimport { GridColumnIndex, GridCellColSpanInfo } from '../gridColumnSpanning';\nimport { GridRowId } from '../gridRows';\n/**\n * The Column Spanning API interface that is available in the grid `apiRef`.\n */\nexport interface GridColumnSpanningApi {\n    /**\n     * Returns cell colSpan info.\n     * @param {GridRowId} rowId The row id\n     * @param {number} columnIndex The column index (0-based)\n     * @returns {GridCellColSpanInfo|undefined} Cell colSpan info\n     * @ignore - do not document.\n     */\n    unstable_getCellColSpanInfo: (rowId: GridRowId, columnIndex: GridColumnIndex) => GridCellColSpanInfo | undefined;\n}\nexport interface GridColumnSpanningPrivateApi {\n    /**\n     * Calculate column spanning for each cell in the row\n     * @param {Object} options The options to apply on the calculation.\n     * @param {GridRowId} options.rowId The row id\n     * @param {number} options.minFirstColumn First visible column index\n     * @param {number} options.maxLastColumn Last visible column index\n     * @param {GridStateColDef[]} options.columns List of columns to calculate colSpan for\n     */\n    calculateColSpan: (options: {\n        rowId: GridRowId;\n        minFirstColumn: number;\n        maxLastColumn: number;\n        columns: GridStateColDef[];\n    }) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridColumnMenuApi.d.ts":"/**\n * The column menu API interface that is available in the grid [[apiRef]].\n */\nexport interface GridColumnMenuApi {\n    /**\n     * Display the column menu under the `field` column.\n     * @param {string} field The column to display the menu.\n     */\n    showColumnMenu: (field: string) => void;\n    /**\n     * Hides the column menu that is open.\n     */\n    hideColumnMenu: () => void;\n    /**\n     * Toggles the column menu under the `field` column.\n     * @param {string} field The field name to toggle the column menu.\n     */\n    toggleColumnMenu: (field: string) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridColumnGroupingApi.d.ts":"import { GridColumnGroupLookup } from '../../hooks/features/columnGrouping/gridColumnGroupsInterfaces';\nimport { GridColumnGroup } from '../gridColumnGrouping';\n/**\n * The column grouping API interface that is available in the grid [[apiRef]].\n */\nexport interface GridColumnGroupingApi {\n    /**\n     * Returns the id of the groups leading to the requested column.\n     * The array is ordered by increasing depth (the last element is the direct parent of the column).\n     * @param {string} field The field of of the column requested.\n     * @returns {string[]} The id of the groups leading to the requested column.\n     */\n    unstable_getColumnGroupPath: (field: string) => GridColumnGroup['groupId'][];\n    /**\n     * Returns the column group lookup.\n     * @returns {GridColumnGroupLookup} The column group lookup.\n     */\n    unstable_getAllGroupDetails: () => GridColumnGroupLookup;\n}\n","node_modules/@mui/x-data-grid/models/api/gridColumnApi.d.ts":"import { GridColDef, GridStateColDef } from '../colDef/gridColDef';\nimport type { GridColumnVisibilityModel } from '../../hooks/features/columns/gridColumnsInterfaces';\n/**\n * The column API interface that is available in the grid [[apiRef]].\n * TODO: Differentiate interfaces based on the plan\n */\nexport interface GridColumnApi {\n    /**\n     * Returns the [[GridColDef]] for the given `field`.\n     * @param {string} field The column field.\n     * @returns {{GridStateColDef}} The [[GridStateColDef]].\n     */\n    getColumn: (field: string) => GridStateColDef;\n    /**\n     * Returns an array of [[GridColDef]] containing all the column definitions.\n     * @returns {GridStateColDef[]} An array of [[GridStateColDef]].\n     */\n    getAllColumns: () => GridStateColDef[];\n    /**\n     * Returns the currently visible columns.\n     * @returns {GridStateColDef[]} An array of [[GridStateColDef]].\n     */\n    getVisibleColumns: () => GridStateColDef[];\n    /**\n     * Returns the index position of a column. By default, only the visible columns are considered.\n     * Pass `false` to `useVisibleColumns` to consider all columns.\n     * @param {string} field The column field.\n     * @param {boolean} useVisibleColumns Determines if all columns or the visible ones should be considered. Default is `true`.\n     * @returns {number} The index position.\n     */\n    getColumnIndex: (field: string, useVisibleColumns?: boolean) => number;\n    /**\n     * Returns the left-position of a column relative to the inner border of the grid.\n     * @param {string} field The column field.\n     * @returns {number} The position in pixels.\n     */\n    getColumnPosition: (field: string) => number;\n    /**\n     * Updates the definition of multiple columns at the same time.\n     * @param {GridColDef[]} cols The new column [[GridColDef]] objects.\n     */\n    updateColumns: (cols: GridColDef[]) => void;\n    /**\n     * Sets the column visibility model to the one given by `model`.\n     * @param {GridColumnVisibilityModel} model The new visible columns model.\n     */\n    setColumnVisibilityModel: (model: GridColumnVisibilityModel) => void;\n    /**\n     * Changes the visibility of the column referred by `field`.\n     * @param {string} field The column to change visibility.\n     * @param {boolean} isVisible Pass `true` to show the column, or `false` to hide it. Default is `false`\n     */\n    setColumnVisibility: (field: string, isVisible: boolean) => void;\n    /**\n     * Updates the width of a column.\n     * @param {string} field The column field.\n     * @param {number} width The new width.\n     */\n    setColumnWidth: (field: string, width: number) => void;\n    /**\n     * Gets the index of a column relative to the columns that are reachable by scroll.\n     * @param {string} field The column field.\n     * @returns {number} The index of the column.\n     */\n    getColumnIndexRelativeToVisibleColumns: (field: string) => number;\n}\nexport interface GridColumnReorderApi {\n    /**\n     * Moves a column from its original position to the position given by `targetIndexPosition`.\n     * @param {string} field The field name\n     * @param {number} targetIndexPosition The new position (0-based).\n     */\n    setColumnIndex: (field: string, targetIndexPosition: number) => void;\n}\n","node_modules/@mui/x-data-grid/models/api/gridCallbackDetails.d.ts":"import { GridControlledStateReasonLookup } from '../events/gridEventLookup';\n/**\n * Additional details passed to the callbacks\n */\nexport interface GridCallbackDetails<K extends keyof GridControlledStateReasonLookup = any> {\n    /**\n     * The reason for this callback to have been called.\n     */\n    reason?: GridControlledStateReasonLookup[K];\n}\n","node_modules/@mui/x-data-grid/models/api/gridApiCommunity.d.ts":"import type { GridInitialStateCommunity, GridStateCommunity } from '../gridStateCommunity';\nimport type { DataGridProcessedProps } from '../props/DataGridProps';\nimport type { GridApiCommon, GridPrivateOnlyApiCommon } from './gridApiCommon';\nimport type { GridColumnReorderApi } from './gridColumnApi';\nimport { GridRowProApi } from './gridRowApi';\nimport { GridRowMultiSelectionApi } from './gridRowSelectionApi';\n/**\n * The api of `DataGrid`.\n */\nexport interface GridApiCommunity extends GridApiCommon<GridStateCommunity, GridInitialStateCommunity> {\n}\nexport interface GridPrivateApiCommunity extends GridApiCommunity, GridPrivateOnlyApiCommon<GridApiCommunity, GridPrivateApiCommunity, DataGridProcessedProps>, GridRowMultiSelectionApi, GridColumnReorderApi, GridRowProApi {\n}\n","node_modules/@mui/x-data-grid/models/api/gridApiCommon.d.ts":"import { GridColumnApi } from './gridColumnApi';\nimport { GridColumnMenuApi } from './gridColumnMenuApi';\nimport { GridCoreApi, GridCorePrivateApi } from './gridCoreApi';\nimport { GridCsvExportApi } from './gridCsvExportApi';\nimport { GridDensityApi } from './gridDensityApi';\nimport { GridEditingApi, GridEditingPrivateApi } from './gridEditingApi';\nimport { GridFilterApi } from './gridFilterApi';\nimport { GridFocusApi, GridFocusPrivateApi } from './gridFocusApi';\nimport { GridLocaleTextApi } from './gridLocaleTextApi';\nimport type { GridParamsApi } from './gridParamsApi';\nimport { GridPreferencesPanelApi } from './gridPreferencesPanelApi';\nimport { GridPrintExportApi } from './gridPrintExportApi';\nimport { GridRowApi } from './gridRowApi';\nimport { GridRowsMetaApi, GridRowsMetaPrivateApi } from './gridRowsMetaApi';\nimport { GridRowSelectionApi } from './gridRowSelectionApi';\nimport { GridSortApi } from './gridSortApi';\nimport { GridStateApi, GridStatePrivateApi } from './gridStateApi';\nimport { GridLoggerApi } from './gridLoggerApi';\nimport { GridScrollApi } from './gridScrollApi';\nimport { GridVirtualizationApi, GridVirtualizationPrivateApi } from './gridVirtualizationApi';\nimport type { GridPipeProcessingApi, GridPipeProcessingPrivateApi } from '../../hooks/core/pipeProcessing';\nimport { GridColumnSpanningApi, GridColumnSpanningPrivateApi } from './gridColumnSpanning';\nimport type { GridStrategyProcessingApi } from '../../hooks/core/strategyProcessing';\nimport type { GridDimensionsApi, GridDimensionsPrivateApi } from '../../hooks/features/dimensions/gridDimensionsApi';\nimport type { GridPaginationApi } from '../../hooks/features/pagination';\nimport type { GridStatePersistenceApi } from '../../hooks/features/statePersistence';\nimport { GridColumnGroupingApi } from './gridColumnGroupingApi';\nimport type { GridInitialStateCommunity, GridStateCommunity } from '../gridStateCommunity';\nimport { GridHeaderFilteringApi, GridHeaderFilteringPrivateApi } from './gridHeaderFilteringApi';\nimport type { DataGridProcessedProps } from '../props/DataGridProps';\nexport interface GridApiCommon<GridState extends GridStateCommunity = any, GridInitialState extends GridInitialStateCommunity = any> extends GridCoreApi, GridPipeProcessingApi, GridDensityApi, GridDimensionsApi, GridRowApi, GridRowsMetaApi, GridEditingApi, GridParamsApi, GridColumnApi, GridRowSelectionApi, GridSortApi, GridPaginationApi, GridCsvExportApi, GridFocusApi, GridFilterApi, GridColumnMenuApi, GridPreferencesPanelApi, GridPrintExportApi, GridVirtualizationApi, GridLocaleTextApi, GridScrollApi, GridColumnSpanningApi, GridStateApi<GridState>, GridStatePersistenceApi<GridInitialState>, GridColumnGroupingApi, GridHeaderFilteringApi {\n}\nexport interface GridPrivateOnlyApiCommon<Api extends GridApiCommon, PrivateApi extends GridPrivateApiCommon, Props extends DataGridProcessedProps> extends GridCorePrivateApi<Api, PrivateApi, Props>, GridStatePrivateApi<PrivateApi['state']>, GridPipeProcessingPrivateApi, GridStrategyProcessingApi, GridColumnSpanningPrivateApi, GridRowsMetaPrivateApi, GridDimensionsPrivateApi, GridEditingPrivateApi, GridLoggerApi, GridFocusPrivateApi, GridHeaderFilteringPrivateApi, GridVirtualizationPrivateApi {\n}\nexport interface GridPrivateApiCommon extends GridApiCommon, GridPrivateOnlyApiCommon<GridApiCommon, GridPrivateApiCommon, DataGridProcessedProps> {\n}\n","node_modules/@mui/x-data-grid/components/menu/index.d.ts":"export * from './columnMenu';\nexport * from './GridMenu';\n","node_modules/@mui/x-data-grid/components/menu/GridMenu.d.ts":"import * as React from 'react';\nimport { GrowProps } from '@mui/material/Grow';\nimport { PopperProps } from '@mui/material/Popper';\ntype MenuPosition = 'bottom-end' | 'bottom-start' | 'bottom' | 'left-end' | 'left-start' | 'left' | 'right-end' | 'right-start' | 'right' | 'top-end' | 'top-start' | 'top' | undefined;\nexport interface GridMenuProps extends Omit<PopperProps, 'onKeyDown' | 'children'> {\n    open: boolean;\n    target: HTMLElement | null;\n    onClose: (event?: Event) => void;\n    position?: MenuPosition;\n    onExited?: GrowProps['onExited'];\n    children: React.ReactNode;\n}\ndeclare function GridMenu(props: GridMenuProps): React.JSX.Element;\ndeclare namespace GridMenu {\n    var propTypes: any;\n}\nexport { GridMenu };\n","node_modules/@mui/x-data-grid/components/containers/index.d.ts":"export * from './GridRoot';\nexport * from './GridFooterContainer';\nexport * from './GridOverlay';\nexport * from './GridToolbarContainer';\n","node_modules/@mui/x-data-grid/components/containers/GridToolbarContainer.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\nexport type GridToolbarContainerProps = React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n};\ndeclare const GridToolbarContainer: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridToolbarContainer };\n","node_modules/@mui/x-data-grid/components/containers/GridRootStyles.d.ts":"/// <reference types=\"react\" />\nimport { Theme } from '@mui/material/styles';\nimport { DataGridProcessedProps } from '../../models/props/DataGridProps';\nexport type OwnerState = DataGridProcessedProps;\nexport declare const GridRootStyles: import(\"@emotion/styled\").StyledComponent<import(\"@mui/system\").MUIStyledCommonProps<Theme> & {\n    ownerState: OwnerState;\n}, Pick<import(\"react\").DetailedHTMLProps<import(\"react\").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof import(\"react\").ClassAttributes<HTMLDivElement> | keyof import(\"react\").HTMLAttributes<HTMLDivElement>>, {}>;\n","node_modules/@mui/x-data-grid/components/containers/GridRoot.d.ts":"import * as React from 'react';\nimport { SxProps } from '@mui/system';\nimport { Theme } from '@mui/material/styles';\nexport interface GridRootProps extends React.HTMLAttributes<HTMLDivElement> {\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n}\ndeclare const GridRoot: React.ForwardRefExoticComponent<GridRootProps & React.RefAttributes<HTMLDivElement>>;\nexport { GridRoot };\n","node_modules/@mui/x-data-grid/components/containers/GridOverlay.d.ts":"import * as React from 'react';\nimport { Theme, SxProps } from '@mui/system';\nexport type GridOverlayProps = React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n};\ndeclare const GridOverlay: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridOverlay };\n","node_modules/@mui/x-data-grid/components/containers/GridMainContainer.d.ts":"import * as React from 'react';\nexport declare const GridMainContainer: React.ForwardRefExoticComponent<{\n    children?: React.ReactNode;\n} & React.RefAttributes<HTMLDivElement>>;\n","node_modules/@mui/x-data-grid/components/containers/GridFooterContainer.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\nexport type GridFooterContainerProps = React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme>;\n};\ndeclare const GridFooterContainer: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridFooterContainer };\n","node_modules/@mui/x-data-grid/components/columnHeaders/index.d.ts":"export * from './GridColumnHeaderItem';\nexport * from './GridColumnHeaderSeparator';\nexport * from './GridColumnHeaderSortIcon';\nexport * from './GridColumnHeaderFilterIconButton';\nexport * from './GridColumnHeaderTitle';\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridIconButtonContainer.d.ts":"import * as React from 'react';\nexport type GridIconButtonContainerProps = React.HTMLAttributes<HTMLDivElement>;\nexport declare const GridIconButtonContainer: React.ForwardRefExoticComponent<GridIconButtonContainerProps & React.RefAttributes<HTMLDivElement>>;\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridGenericColumnHeaderItem.d.ts":"import * as React from 'react';\nimport { GridStateColDef } from '../../models/colDef/gridColDef';\nimport { GridSortDirection } from '../../models/gridSortModel';\nimport { GridColumnHeaderSeparatorProps } from './GridColumnHeaderSeparator';\nimport { GridColumnGroup } from '../../models/gridColumnGrouping';\ninterface GridGenericColumnHeaderItemProps extends Pick<GridStateColDef, 'headerClassName' | 'description' | 'resizable'> {\n    classes: Record<'root' | 'draggableContainer' | 'titleContainer' | 'titleContainerContent', string>;\n    colIndex: number;\n    columnMenuOpen: boolean;\n    height: number;\n    isResizing: boolean;\n    sortDirection: GridSortDirection;\n    sortIndex?: number;\n    filterItemsCounter?: number;\n    hasFocus?: boolean;\n    tabIndex: 0 | -1;\n    disableReorder?: boolean;\n    separatorSide?: GridColumnHeaderSeparatorProps['side'];\n    headerComponent?: React.ReactNode;\n    elementId: GridStateColDef['field'] | GridColumnGroup['groupId'];\n    isDraggable: boolean;\n    width: number;\n    columnMenuIconButton?: React.ReactNode;\n    columnMenu?: React.ReactNode;\n    columnTitleIconButtons?: React.ReactNode;\n    label: string;\n    draggableContainerProps?: Partial<React.HTMLProps<HTMLDivElement>>;\n    columnHeaderSeparatorProps?: Partial<GridColumnHeaderSeparatorProps>;\n}\ndeclare const GridGenericColumnHeaderItem: React.ForwardRefExoticComponent<GridGenericColumnHeaderItemProps & React.RefAttributes<unknown>>;\nexport { GridGenericColumnHeaderItem };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeadersInner.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ninterface GridColumnHeadersInnerProps extends React.HTMLAttributes<HTMLDivElement> {\n    isDragging: boolean;\n    sx?: SxProps<Theme>;\n}\nexport declare const GridColumnHeadersInner: React.ForwardRefExoticComponent<GridColumnHeadersInnerProps & React.RefAttributes<HTMLDivElement>>;\nexport {};\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderTitle.d.ts":"import * as React from 'react';\nexport interface GridColumnHeaderTitleProps {\n    label: string;\n    columnWidth: number;\n    description?: React.ReactNode;\n}\ndeclare function GridColumnHeaderTitle(props: GridColumnHeaderTitleProps): React.JSX.Element;\ndeclare namespace GridColumnHeaderTitle {\n    var propTypes: any;\n}\nexport { GridColumnHeaderTitle };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSortIcon.d.ts":"import * as React from 'react';\nimport { GridSortDirection } from '../../models/gridSortModel';\nexport interface GridColumnHeaderSortIconProps {\n    direction: GridSortDirection;\n    index: number | undefined;\n    sortingOrder: readonly GridSortDirection[];\n}\ndeclare function GridColumnHeaderSortIconRaw(props: GridColumnHeaderSortIconProps): React.JSX.Element | null;\ndeclare namespace GridColumnHeaderSortIconRaw {\n    var propTypes: any;\n}\ndeclare const GridColumnHeaderSortIcon: React.MemoExoticComponent<typeof GridColumnHeaderSortIconRaw>;\nexport { GridColumnHeaderSortIcon };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderSeparator.d.ts":"import * as React from 'react';\ndeclare enum GridColumnHeaderSeparatorSides {\n    Left = \"left\",\n    Right = \"right\"\n}\nexport interface GridColumnHeaderSeparatorProps extends React.HTMLAttributes<HTMLDivElement> {\n    resizable: boolean;\n    resizing: boolean;\n    height: number;\n    side?: GridColumnHeaderSeparatorSides;\n}\ndeclare function GridColumnHeaderSeparatorRaw(props: GridColumnHeaderSeparatorProps): React.JSX.Element;\ndeclare namespace GridColumnHeaderSeparatorRaw {\n    var propTypes: any;\n}\ndeclare const GridColumnHeaderSeparator: React.MemoExoticComponent<typeof GridColumnHeaderSeparatorRaw>;\nexport { GridColumnHeaderSeparator, GridColumnHeaderSeparatorSides };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderItem.d.ts":"import * as React from 'react';\nimport { GridStateColDef } from '../../models/colDef/gridColDef';\nimport { GridSortDirection } from '../../models/gridSortModel';\nimport { GridColumnHeaderSeparatorProps } from './GridColumnHeaderSeparator';\ninterface GridColumnHeaderItemProps {\n    colIndex: number;\n    colDef: GridStateColDef;\n    columnMenuOpen: boolean;\n    headerHeight: number;\n    isDragging: boolean;\n    isResizing: boolean;\n    sortDirection: GridSortDirection;\n    sortIndex?: number;\n    filterItemsCounter?: number;\n    hasFocus?: boolean;\n    tabIndex: 0 | -1;\n    disableReorder?: boolean;\n    separatorSide?: GridColumnHeaderSeparatorProps['side'];\n}\ndeclare function GridColumnHeaderItem(props: GridColumnHeaderItemProps): React.JSX.Element;\ndeclare namespace GridColumnHeaderItem {\n    var propTypes: any;\n}\nexport { GridColumnHeaderItem };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnHeaderFilterIconButton.d.ts":"import * as React from 'react';\nimport { GridColumnHeaderParams } from '../../models/params/gridColumnHeaderParams';\nexport interface ColumnHeaderFilterIconButtonProps {\n    field: string;\n    counter?: number;\n    onClick?: (params: GridColumnHeaderParams, event: React.MouseEvent<HTMLButtonElement>) => void;\n}\ndeclare function GridColumnHeaderFilterIconButton(props: ColumnHeaderFilterIconButtonProps): React.JSX.Element | null;\ndeclare namespace GridColumnHeaderFilterIconButton {\n    var propTypes: any;\n}\nexport { GridColumnHeaderFilterIconButton };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridColumnGroupHeader.d.ts":"import * as React from 'react';\ninterface GridColumnGroupHeaderProps {\n    groupId: string | null;\n    width: number;\n    fields: string[];\n    colIndex: number;\n    isLastColumn: boolean;\n    depth: number;\n    maxDepth: number;\n    height: number;\n    hasFocus?: boolean;\n    tabIndex: 0 | -1;\n}\ndeclare function GridColumnGroupHeader(props: GridColumnGroupHeaderProps): React.JSX.Element;\nexport { GridColumnGroupHeader };\n","node_modules/@mui/x-data-grid/components/columnHeaders/GridBaseColumnHeaders.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ninterface GridBaseColumnHeadersProps extends React.HTMLAttributes<HTMLDivElement> {\n    sx?: SxProps<Theme>;\n}\nexport declare const GridBaseColumnHeaders: React.ForwardRefExoticComponent<GridBaseColumnHeadersProps & React.RefAttributes<HTMLDivElement>>;\nexport {};\n","node_modules/@mui/x-data-grid/components/columnHeaders/ColumnHeaderMenuIcon.d.ts":"import * as React from 'react';\nimport { GridStateColDef } from '../../models/colDef/gridColDef';\nexport interface ColumnHeaderMenuIconProps {\n    colDef: GridStateColDef;\n    columnMenuId: string;\n    columnMenuButtonId: string;\n    open: boolean;\n    iconButtonRef: React.RefObject<HTMLButtonElement>;\n}\nexport declare const ColumnHeaderMenuIcon: React.MemoExoticComponent<(props: ColumnHeaderMenuIconProps) => React.JSX.Element>;\n","node_modules/@mui/x-data-grid/components/base/index.d.ts":"export * from './GridBody';\nexport * from './GridFooterPlaceholder';\nexport * from './GridOverlays';\n","node_modules/@mui/x-data-grid/components/base/GridOverlays.d.ts":"import * as React from 'react';\nexport declare function GridOverlays(): React.JSX.Element | null;\n","node_modules/@mui/x-data-grid/components/base/GridFooterPlaceholder.d.ts":"import * as React from 'react';\nexport declare function GridFooterPlaceholder(): React.JSX.Element | null;\n","node_modules/@mui/x-data-grid/components/base/GridBody.d.ts":"import * as React from 'react';\ninterface GridBodyProps {\n    children?: React.ReactNode;\n    ColumnHeadersProps?: Record<string, any>;\n    VirtualScrollerComponent: React.JSXElementConstructor<React.HTMLAttributes<HTMLDivElement> & {\n        ref: React.Ref<HTMLDivElement>;\n    }>;\n}\ndeclare function GridBody(props: GridBodyProps): React.JSX.Element;\ndeclare namespace GridBody {\n    var propTypes: any;\n}\nexport { GridBody };\n","node_modules/@mui/x-data-grid/components/cell/index.d.ts":"export { GridCell } from './GridCell';\nexport type { GridCellProps } from './GridCell';\nexport * from './GridBooleanCell';\nexport * from './GridEditBooleanCell';\nexport * from './GridEditDateCell';\nexport * from './GridEditInputCell';\nexport * from './GridEditSingleSelectCell';\nexport * from './GridActionsCell';\nexport * from './GridActionsCellItem';\nexport * from './GridSkeletonCell';\n","node_modules/@mui/x-data-grid/components/cell/GridSkeletonCell.d.ts":"import * as React from 'react';\nexport interface GridSkeletonCellProps {\n    width: number;\n    contentWidth: number;\n    field: string;\n    align: string;\n}\ndeclare function GridSkeletonCell(props: React.HTMLAttributes<HTMLDivElement> & GridSkeletonCellProps): React.JSX.Element;\ndeclare namespace GridSkeletonCell {\n    var propTypes: any;\n}\nexport { GridSkeletonCell };\n","node_modules/@mui/x-data-grid/components/cell/GridEditSingleSelectCell.d.ts":"import * as React from 'react';\nimport { SelectProps, SelectChangeEvent } from '@mui/material/Select';\nimport { GridRenderEditCellParams } from '../../models/params/gridCellParams';\nimport { GridSingleSelectColDef } from '../../models/colDef/gridColDef';\nexport interface GridEditSingleSelectCellProps extends GridRenderEditCellParams, Omit<SelectProps, 'id' | 'tabIndex' | 'value'>, Pick<GridSingleSelectColDef, 'getOptionLabel' | 'getOptionValue'> {\n    /**\n     * Callback called when the value is changed by the user.\n     * @param {SelectChangeEvent<any>} event The event source of the callback.\n     * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n     */\n    onValueChange?: (event: SelectChangeEvent<any>, newValue: any) => Promise<void> | void;\n    /**\n     * If true, the select opens by default.\n     */\n    initialOpen?: boolean;\n}\ndeclare function GridEditSingleSelectCell(props: GridEditSingleSelectCellProps): React.JSX.Element | null;\ndeclare namespace GridEditSingleSelectCell {\n    var propTypes: any;\n}\nexport { GridEditSingleSelectCell };\nexport declare const renderEditSingleSelectCell: (params: GridEditSingleSelectCellProps) => React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/cell/GridEditInputCell.d.ts":"import * as React from 'react';\nimport { InputBaseProps } from '@mui/material/InputBase';\nimport { GridRenderEditCellParams } from '../../models/params/gridCellParams';\nexport interface GridEditInputCellProps extends GridRenderEditCellParams, Omit<InputBaseProps, 'id' | 'value' | 'tabIndex' | 'ref'> {\n    debounceMs?: number;\n    /**\n     * Callback called when the value is changed by the user.\n     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n     * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n     */\n    onValueChange?: (event: React.ChangeEvent<HTMLInputElement>, newValue: string) => Promise<void> | void;\n}\ndeclare const GridEditInputCell: React.ForwardRefExoticComponent<Omit<GridEditInputCellProps, \"ref\"> & React.RefAttributes<HTMLInputElement>>;\nexport { GridEditInputCell };\nexport declare const renderEditInputCell: (params: GridEditInputCellProps) => React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/cell/GridEditDateCell.d.ts":"import * as React from 'react';\nimport { InputBaseProps } from '@mui/material/InputBase';\nimport { GridRenderEditCellParams } from '../../models/params/gridCellParams';\nexport interface GridEditDateCellProps extends GridRenderEditCellParams, Omit<InputBaseProps, 'id' | 'value' | 'tabIndex'> {\n    /**\n     * Callback called when the value is changed by the user.\n     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n     * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n     */\n    onValueChange?: (event: React.ChangeEvent<HTMLInputElement>, newValue: Date | null) => Promise<void> | void;\n}\ndeclare function GridEditDateCell(props: GridEditDateCellProps): React.JSX.Element;\ndeclare namespace GridEditDateCell {\n    var propTypes: any;\n}\nexport { GridEditDateCell };\nexport declare const renderEditDateCell: (params: GridRenderEditCellParams) => React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/cell/GridEditBooleanCell.d.ts":"import * as React from 'react';\nimport { GridRenderEditCellParams } from '../../models/params/gridCellParams';\nexport interface GridEditBooleanCellProps extends GridRenderEditCellParams, Omit<React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>, 'id' | 'tabIndex'> {\n    /**\n     * Callback called when the value is changed by the user.\n     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n     * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.\n     * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`\n     */\n    onValueChange?: (event: React.ChangeEvent<HTMLInputElement>, newValue: boolean) => Promise<void> | void;\n}\ndeclare function GridEditBooleanCell(props: GridEditBooleanCellProps): React.JSX.Element;\ndeclare namespace GridEditBooleanCell {\n    var propTypes: any;\n}\nexport { GridEditBooleanCell };\nexport declare const renderEditBooleanCell: (params: GridEditBooleanCellProps) => React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/cell/GridCell.d.ts":"import * as React from 'react';\nimport { GridRowId, GridCellMode, GridEditCellProps } from '../../models';\nimport { GridColDef, GridAlignment } from '../../models/colDef/gridColDef';\ntype GridCellV7Props = {\n    align: GridAlignment;\n    className?: string;\n    colIndex: number;\n    column: GridColDef;\n    rowId: GridRowId;\n    height: number | 'auto';\n    showRightBorder?: boolean;\n    width: number;\n    colSpan?: number;\n    disableDragEvents?: boolean;\n    isNotVisible?: boolean;\n    editCellState: GridEditCellProps<any> | null;\n    onClick?: React.MouseEventHandler<HTMLDivElement>;\n    onDoubleClick?: React.MouseEventHandler<HTMLDivElement>;\n    onMouseDown?: React.MouseEventHandler<HTMLDivElement>;\n    onMouseUp?: React.MouseEventHandler<HTMLDivElement>;\n    onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;\n    onDragEnter?: React.DragEventHandler<HTMLDivElement>;\n    onDragOver?: React.DragEventHandler<HTMLDivElement>;\n    [x: string]: any;\n};\ntype GridCellWrapperProps = GridCellV7Props;\nexport type GridCellProps<V = any, F = V> = GridCellWrapperProps & {\n    field: string;\n    formattedValue?: F;\n    hasFocus?: boolean;\n    isEditable?: boolean;\n    isSelected?: boolean;\n    value?: V;\n    cellMode?: GridCellMode;\n    children: React.ReactNode;\n    tabIndex: 0 | -1;\n};\ndeclare const GridCell: React.ForwardRefExoticComponent<Omit<GridCellProps<any, any>, \"ref\"> & React.RefAttributes<HTMLDivElement>>;\ndeclare const MemoizedCellWrapper: React.ForwardRefExoticComponent<Omit<GridCellV7Props, \"ref\"> & React.RefAttributes<HTMLDivElement>>;\nexport { MemoizedCellWrapper as GridCellWrapper, GridCell };\ndeclare const MemoizedGridCellV7: React.ForwardRefExoticComponent<Omit<GridCellV7Props, \"ref\"> & React.RefAttributes<HTMLDivElement>>;\nexport { MemoizedGridCellV7 as GridCellV7 };\n","node_modules/@mui/x-data-grid/components/cell/GridBooleanCell.d.ts":"import * as React from 'react';\nimport { SvgIconProps } from '@mui/material/SvgIcon';\nimport { GridRenderCellParams } from '../../models/params/gridCellParams';\nimport { GridColDef } from '../../models/colDef/gridColDef';\ninterface GridBooleanCellProps extends GridRenderCellParams, Omit<SvgIconProps, 'tabIndex' | 'id'> {\n}\ndeclare function GridBooleanCellRaw(props: GridBooleanCellProps): React.JSX.Element;\ndeclare namespace GridBooleanCellRaw {\n    var propTypes: any;\n}\ndeclare const GridBooleanCell: React.MemoExoticComponent<typeof GridBooleanCellRaw>;\nexport { GridBooleanCell };\nexport declare const renderBooleanCell: GridColDef['renderCell'];\n","node_modules/@mui/x-data-grid/components/cell/GridActionsCellItem.d.ts":"import * as React from 'react';\nimport { IconButtonProps } from '@mui/material/IconButton';\nimport { MenuItemProps } from '@mui/material/MenuItem';\ninterface GridActionsCellItemCommonProps {\n    label: string;\n    icon?: React.ReactElement;\n    /** from https://mui.com/material-ui/api/button-base/#ButtonBase-prop-component */\n    component?: React.ElementType;\n}\nexport type GridActionsCellItemProps = GridActionsCellItemCommonProps & (({\n    showInMenu?: false;\n    icon: React.ReactElement;\n} & Omit<IconButtonProps, 'component'>) | ({\n    showInMenu: true;\n    /**\n     * If false, the menu will not close when this item is clicked.\n     * @default true\n     */\n    closeMenuOnClick?: boolean;\n    closeMenu?: () => void;\n} & Omit<MenuItemProps, 'component'>));\ndeclare const GridActionsCellItem: React.ForwardRefExoticComponent<(Omit<GridActionsCellItemCommonProps & {\n    showInMenu?: false | undefined;\n    icon: React.ReactElement;\n} & Omit<IconButtonProps, \"component\">, \"ref\"> | Omit<GridActionsCellItemCommonProps & {\n    showInMenu: true;\n    /**\n     * If false, the menu will not close when this item is clicked.\n     * @default true\n     */\n    closeMenuOnClick?: boolean | undefined;\n    closeMenu?: (() => void) | undefined;\n} & Omit<MenuItemProps, \"component\">, \"ref\">) & React.RefAttributes<HTMLElement>>;\nexport { GridActionsCellItem };\n","node_modules/@mui/x-data-grid/components/cell/GridActionsCell.d.ts":"import * as React from 'react';\nimport { GridRenderCellParams } from '../../models/params/gridCellParams';\nimport { GridMenuProps } from '../menu/GridMenu';\ninterface GridActionsCellProps extends Omit<GridRenderCellParams, 'api'> {\n    api?: GridRenderCellParams['api'];\n    position?: GridMenuProps['position'];\n}\ndeclare function GridActionsCell(props: GridActionsCellProps): React.JSX.Element;\ndeclare namespace GridActionsCell {\n    var propTypes: any;\n}\nexport { GridActionsCell };\nexport declare const renderActionsCell: (params: GridRenderCellParams) => React.JSX.Element;\n","node_modules/@mui/x-data-grid/components/columnSelection/index.d.ts":"export * from './GridCellCheckboxRenderer';\nexport * from './GridHeaderCheckbox';\n","node_modules/@mui/x-data-grid/components/columnSelection/GridHeaderCheckbox.d.ts":"import * as React from 'react';\nimport type { GridColumnHeaderParams } from '../../models/params/gridColumnHeaderParams';\ndeclare const GridHeaderCheckbox: React.ForwardRefExoticComponent<GridColumnHeaderParams<import(\"../../models/gridRows\").GridValidRowModel, any, any> & React.RefAttributes<HTMLInputElement>>;\nexport { GridHeaderCheckbox };\n","node_modules/@mui/x-data-grid/components/columnSelection/GridCellCheckboxRenderer.d.ts":"import * as React from 'react';\nimport type { GridRenderCellParams } from '../../models/params/gridCellParams';\ndeclare const GridCellCheckboxForwardRef: React.ForwardRefExoticComponent<GridRenderCellParams<any, any, any, import(\"../..\").GridTreeNodeWithRender> & React.RefAttributes<HTMLInputElement>>;\nexport { GridCellCheckboxForwardRef };\nexport declare const GridCellCheckboxRenderer: React.ForwardRefExoticComponent<GridRenderCellParams<any, any, any, import(\"../..\").GridTreeNodeWithRender> & React.RefAttributes<HTMLInputElement>>;\n","node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerRenderZone.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ndeclare const GridVirtualScrollerRenderZone: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridVirtualScrollerRenderZone };\n","node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScrollerContent.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ndeclare const GridVirtualScrollerContent: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridVirtualScrollerContent };\n","node_modules/@mui/x-data-grid/components/virtualization/GridVirtualScroller.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/system';\ndeclare const GridVirtualScroller: React.ForwardRefExoticComponent<React.HTMLAttributes<HTMLDivElement> & {\n    sx?: SxProps<Theme> | undefined;\n} & React.RefAttributes<HTMLDivElement>>;\nexport { GridVirtualScroller };\n","node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualization.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\ntype RootProps = Pick<DataGridProcessedProps, 'disableVirtualization'>;\nexport type GridVirtualizationState = {\n    enabled: boolean;\n    enabledForColumns: boolean;\n};\nexport declare const virtualizationStateInitializer: GridStateInitializer<RootProps>;\nexport declare function useGridVirtualization(apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: RootProps): void;\nexport {};\n","node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.d.ts":"import * as React from 'react';\nimport { GridRenderContext, GridRowEntry } from '../../../models';\nimport { GridRowId, GridRowModel } from '../../../models/gridRows';\nexport declare function binarySearch(offset: number, positions: number[], sliceStart?: number, sliceEnd?: number): number;\nexport declare const getRenderableIndexes: ({ firstIndex, lastIndex, buffer, minFirstIndex, maxLastIndex, }: {\n    firstIndex: number;\n    lastIndex: number;\n    buffer: number;\n    minFirstIndex: number;\n    maxLastIndex: number;\n}) => number[];\nexport declare const areRenderContextsEqual: (context1: GridRenderContext, context2: GridRenderContext) => boolean;\ninterface UseGridVirtualScrollerProps {\n    ref: React.Ref<HTMLDivElement>;\n    renderZoneMinColumnIndex?: number;\n    renderZoneMaxColumnIndex?: number;\n    onRenderZonePositioning?: (params: {\n        top: number;\n        left: number;\n    }) => void;\n    getRowProps?: (id: GridRowId, model: GridRowModel) => any;\n}\nexport declare const useGridVirtualScroller: (props: UseGridVirtualScrollerProps) => {\n    renderContext: GridRenderContext | null;\n    updateRenderZonePosition: (nextRenderContext: GridRenderContext) => void;\n    getRows: (params?: {\n        renderContext: GridRenderContext | null;\n        position?: string | undefined;\n        minFirstColumn?: number | undefined;\n        maxLastColumn?: number | undefined;\n        availableSpace?: number | null | undefined;\n        rows?: GridRowEntry<import(\"../../../models\").GridValidRowModel>[] | undefined;\n        rowIndexOffset?: number | undefined;\n        onRowRender?: ((rowId: GridRowId) => void) | undefined;\n    }) => React.JSX.Element[] | null;\n    getRootProps: (inputProps?: {\n        style?: object;\n    }) => {\n        style: React.CSSProperties;\n        role: string;\n        ref: ((instance: HTMLDivElement | null) => void) | null;\n        onScroll: (event: React.UIEvent) => void;\n        onWheel: (event: React.WheelEvent) => void;\n        onTouchMove: (event: React.TouchEvent) => void;\n    };\n    getContentProps: ({ style }?: {\n        style?: object | undefined;\n    }) => {\n        style: React.CSSProperties;\n        role: string;\n    };\n    getRenderZoneProps: () => {\n        ref: React.RefObject<HTMLDivElement>;\n        role: string;\n    };\n};\nexport {};\n","node_modules/@mui/x-data-grid/hooks/features/virtualization/index.d.ts":"export * from './useGridVirtualization';\nexport * from './gridVirtualizationSelectors';\n","node_modules/@mui/x-data-grid/hooks/features/virtualization/gridVirtualizationSelectors.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\n/**\n * Get the columns state\n * @category Virtualization\n */\nexport declare const gridVirtualizationSelector: (state: GridStateCommunity) => import(\"./useGridVirtualization\").GridVirtualizationState;\n/**\n * Get the enabled state for virtualization\n * @category Virtualization\n */\nexport declare const gridVirtualizationEnabledSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, boolean>;\n/**\n * Get the enabled state for virtualization\n * @category Virtualization\n */\nexport declare const gridVirtualizationColumnEnabledSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, boolean>;\n","node_modules/@mui/x-data-grid/hooks/features/statePersistence/useGridStatePersistence.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nexport declare const useGridStatePersistence: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/statePersistence/index.d.ts":"export type { GridStatePersistenceApi, GridExportStateParams, } from './gridStatePersistenceInterface';\n","node_modules/@mui/x-data-grid/hooks/features/statePersistence/gridStatePersistenceInterface.d.ts":"import { GridInitialStateCommunity } from '../../../models/gridStateCommunity';\nexport interface GridStatePersistenceApi<InitialState extends GridInitialStateCommunity> {\n    /**\n     * Generates a serializable object containing the exportable parts of the DataGrid state.\n     * These values can then be passed to the `initialState` prop or injected using the `restoreState` method.\n     * @param {GridExportStateParams} params With all properties from [[GridExportStateParams]]\n     * @returns {GridInitialState} The exported state.\n     */\n    exportState: (params?: GridExportStateParams) => InitialState;\n    /**\n     * Inject the given values into the state of the DataGrid.\n     * @param {GridInitialState} stateToRestore The exported state to restore.\n     */\n    restoreState: (stateToRestore: InitialState) => void;\n}\nexport interface GridRestoreStatePreProcessingValue {\n    /**\n     * Functions to run after the state has been updated but before re-rendering.\n     * This is usually used to apply derived states like `applyFilters` or `applySorting`\n     */\n    callbacks: (() => void)[];\n}\n/**\n * Object passed as parameter in the `exportState()` grid API method.\n * @demos\n *   - [Restore state with `apiRef`](/x/react-data-grid/state/#restore-the-state-with-apiref)\n */\nexport interface GridExportStateParams {\n    /**\n     * By default, the grid exports all the models.\n     * You can switch this property to `true` to only exports models that are either controlled, initialized or modified.\n     * For instance, with this property, if you don't control or initialize the `filterModel` and you did not apply any filter, the model won't be exported.\n     * Note that the column dimensions are not a model. The grid only exports the dimensions of the modified columns even when `exportOnlyDirtyModels` is false.\n     * @default false\n     */\n    exportOnlyDirtyModels?: boolean;\n}\nexport interface GridRestoreStatePreProcessingContext<I extends GridInitialStateCommunity> {\n    stateToRestore: I;\n}\n","node_modules/@mui/x-data-grid/hooks/features/sorting/useGridSorting.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const sortingStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'sortModel' | 'initialState' | 'disableMultipleColumnsSorting'>>;\n/**\n * @requires useGridRows (event)\n * @requires useGridColumns (event)\n */\nexport declare const useGridSorting: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'initialState' | 'sortModel' | 'onSortModelChange' | 'sortingOrder' | 'sortingMode' | 'disableMultipleColumnsSorting'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/sorting/index.d.ts":"export * from './gridSortingSelector';\nexport type { GridSortingState, GridSortingInitialState } from './gridSortingState';\nexport { gridDateComparator, gridNumberComparator, gridStringOrNumberComparator, } from './gridSortingUtils';\n","node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingUtils.d.ts":"import * as React from 'react';\nimport { GridSortingModelApplier } from './gridSortingState';\nimport { GridApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridComparatorFn, GridSortDirection, GridSortModel } from '../../../models/gridSortModel';\nexport declare const sanitizeSortModel: (model: GridSortModel, disableMultipleColumnsSorting: boolean) => GridSortModel;\nexport declare const mergeStateWithSortModel: (sortModel: GridSortModel, disableMultipleColumnsSorting: boolean) => (state: GridStateCommunity) => GridStateCommunity;\n/**\n * Generates a method to easily sort a list of rows according to the current sort model.\n * @param {GridSortModel} sortModel The model with which we want to sort the rows.\n * @param {React.MutableRefObject<GridApiCommunity>} apiRef The API of the grid.\n * @returns {GridSortingModelApplier | null} A method that generates a list of sorted row ids from a list of rows according to the current sort model. If `null`, we consider that the rows should remain in the order there were provided.\n */\nexport declare const buildAggregatedSortingApplier: (sortModel: GridSortModel, apiRef: React.MutableRefObject<GridApiCommunity>) => GridSortingModelApplier | null;\nexport declare const getNextGridSortDirection: (sortingOrder: readonly GridSortDirection[], current?: GridSortDirection) => GridSortDirection;\nexport declare const gridStringOrNumberComparator: GridComparatorFn;\nexport declare const gridNumberComparator: GridComparatorFn;\nexport declare const gridDateComparator: GridComparatorFn;\n","node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingState.d.ts":"import { GridRowId, GridTreeNode } from '../../../models/gridRows';\nimport { GridSortModel } from '../../../models/gridSortModel';\nexport interface GridSortingState {\n    sortedRows: GridRowId[];\n    sortModel: GridSortModel;\n}\nexport interface GridSortingInitialState {\n    sortModel?: GridSortModel;\n}\nexport type GridSortingModelApplier = (rowList: GridTreeNode[]) => GridRowId[];\nexport interface GridSortingMethodParams {\n    sortRowList: GridSortingModelApplier | null;\n}\nexport type GridSortingMethodValue = GridRowId[];\n","node_modules/@mui/x-data-grid/hooks/features/sorting/gridSortingSelector.d.ts":"import { GridSortDirection, GridSortModel } from '../../../models/gridSortModel';\nimport { GridStateCommunity } from '../../../models/gridStateCommunity';\n/**\n * Get the id of the rows after the sorting process.\n * @category Sorting\n */\nexport declare const gridSortedRowIdsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridRowId[]>;\n/**\n * Get the id and the model of the rows after the sorting process.\n * @category Sorting\n */\nexport declare const gridSortedRowEntriesSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    id: import(\"../../..\").GridRowId;\n    model: import(\"../../..\").GridValidRowModel;\n}[]>;\n/**\n * Get the current sorting model.\n * @category Sorting\n */\nexport declare const gridSortModelSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, GridSortModel>;\nexport type GridSortColumnLookup = Record<string, {\n    sortDirection: GridSortDirection;\n    sortIndex?: number;\n}>;\n/**\n * @category Sorting\n * @ignore - do not document.\n */\nexport declare const gridSortColumnLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, GridSortColumnLookup>;\n","node_modules/@mui/x-data-grid/hooks/features/scroll/useGridScroll.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\n/**\n * @requires useGridPagination (state) - can be after, async only\n * @requires useGridColumns (state) - can be after, async only\n * @requires useGridRows (state) - can be after, async only\n * @requires useGridRowsMeta (state) - can be after, async only\n * @requires useGridFilter (state)\n * @requires useGridColumnSpanning (method)\n */\nexport declare const useGridScroll: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'pagination'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nexport declare const useGridRowsPreProcessors: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const rowsMetaStateInitializer: GridStateInitializer;\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\nexport declare const useGridRowsMeta: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'getRowHeight' | 'getEstimatedRowHeight' | 'getRowSpacing' | 'pagination' | 'paginationMode' | 'rowHeight' | 'rowPositionsDebounceMs'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const rowsStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'rows' | 'rowCount' | 'getRowId' | 'loading'>>;\nexport declare const useGridRows: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'rows' | 'getRowId' | 'rowCount' | 'throttleRowsMs' | 'signature' | 'pagination' | 'paginationMode' | 'loading'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/rows/useGridParamsApi.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nexport declare class MissingRowIdError extends Error {\n}\n/**\n * @requires useGridColumns (method)\n * @requires useGridRows (method)\n * @requires useGridFocus (state)\n * @requires useGridEditing (method)\n * TODO: Impossible priority - useGridEditing also needs to be after useGridParamsApi\n * TODO: Impossible priority - useGridFocus also needs to be after useGridParamsApi\n */\nexport declare function useGridParamsApi(apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'getRowId'>): void;\n","node_modules/@mui/x-data-grid/hooks/features/rows/index.d.ts":"export * from './gridRowsMetaSelector';\nexport * from './gridRowsMetaState';\nexport { gridRowCountSelector, gridRowsLoadingSelector, gridTopLevelRowCountSelector, gridRowsLookupSelector, gridRowsDataRowIdToIdLookupSelector, gridRowTreeSelector, gridRowGroupingNameSelector, gridRowTreeDepthsSelector, gridRowMaximumTreeDepthSelector, gridDataRowIdsSelector, } from './gridRowsSelector';\nexport type { GridRowsState, GridRowIdToModelLookup } from './gridRowsInterfaces';\nexport { GRID_ROOT_GROUP_ID, checkGridRowIdIsValid } from './gridRowsUtils';\n","node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsUtils.d.ts":"import * as React from 'react';\nimport { GridAutoGeneratedGroupNode, GridAutoGeneratedPinnedRowNode, GridFooterNode, GridGroupNode, GridRowId, GridRowIdGetter, GridRowModel, GridRowModelUpdate, GridRowTreeConfig, GridSkeletonRowNode, GridTreeNode } from '../../../models';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridApiCommunity, GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridRowsInternalCache, GridRowsState, GridRowTreeCreationParams } from './gridRowsInterfaces';\nexport declare const GRID_ROOT_GROUP_ID: GridRowId;\nexport declare const GRID_ID_AUTOGENERATED: unique symbol;\nexport declare const buildRootGroup: () => GridGroupNode;\n/**\n * A helper function to check if the id provided is valid.\n * @param {GridRowId} id Id as [[GridRowId]].\n * @param {GridRowModel | Partial<GridRowModel>} row Row as [[GridRowModel]].\n * @param {string} detailErrorMessage A custom error message to display for invalid IDs\n */\nexport declare function checkGridRowIdIsValid(id: GridRowId, row: GridRowModel | Partial<GridRowModel>, detailErrorMessage?: string): void;\nexport declare const getRowIdFromRowModel: (rowModel: GridRowModel, getRowId?: GridRowIdGetter, detailErrorMessage?: string) => GridRowId;\nexport declare const createRowsInternalCache: ({ rows, getRowId, loading, rowCount, }: Pick<DataGridProcessedProps, 'rows' | 'getRowId' | 'loading' | 'rowCount'>) => GridRowsInternalCache;\nexport declare const getTopLevelRowCount: ({ tree, rowCountProp, }: {\n    tree: GridRowTreeConfig;\n    rowCountProp: DataGridProcessedProps['rowCount'];\n}) => number;\nexport declare const getRowsStateFromCache: ({ apiRef, rowCountProp, loadingProp, previousTree, previousTreeDepths, }: Pick<GridRowTreeCreationParams, \"previousTree\" | \"previousTreeDepths\"> & {\n    apiRef: React.MutableRefObject<GridPrivateApiCommunity>;\n    rowCountProp: number | undefined;\n    loadingProp: boolean | undefined;\n}) => GridRowsState;\nexport declare const isAutoGeneratedRow: (rowNode: GridTreeNode) => rowNode is GridAutoGeneratedGroupNode | GridFooterNode | GridSkeletonRowNode | GridAutoGeneratedPinnedRowNode;\nexport declare const getTreeNodeDescendants: (tree: GridRowTreeConfig, parentId: GridRowId, skipAutoGeneratedRows: boolean) => GridRowId[];\nexport declare const updateCacheWithNewRows: ({ previousCache, getRowId, updates, }: {\n    previousCache: GridRowsInternalCache;\n    getRowId: DataGridProcessedProps['getRowId'];\n    updates: GridRowModelUpdate[];\n}) => GridRowsInternalCache;\nexport declare function calculatePinnedRowsHeight(apiRef: React.MutableRefObject<GridApiCommunity>): {\n    top: number;\n    bottom: number;\n};\nexport declare function getMinimalContentHeight(apiRef: React.MutableRefObject<GridApiCommunity>, rowHeight: number): string;\n","node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const gridRowCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\nexport declare const gridRowsLoadingSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, boolean | undefined>;\nexport declare const gridTopLevelRowCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\nexport declare const gridRowsLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridRowsInterfaces\").GridRowIdToModelLookup<import(\"../../..\").GridValidRowModel>>;\nexport declare const gridRowsDataRowIdToIdLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridRowsInterfaces\").GridRowIdToIdLookup>;\nexport declare const gridRowTreeSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridRowTreeConfig>;\nexport declare const gridRowGroupingNameSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, string>;\nexport declare const gridRowTreeDepthsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridRowsInterfaces\").GridTreeDepths>;\nexport declare const gridRowMaximumTreeDepthSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\nexport declare const gridDataRowIdsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridRowId[]>;\n/**\n * @ignore - do not document.\n */\nexport declare const gridAdditionalRowGroupsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    pinnedRows?: import(\"./gridRowsInterfaces\").GridPinnedRowsState | undefined;\n} | undefined>;\n/**\n * @ignore - do not document.\n */\nexport declare const gridPinnedRowsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    bottom: {\n        id: import(\"../../..\").GridRowId;\n        model: import(\"../../..\").GridValidRowModel;\n    }[] | undefined;\n    top: {\n        id: import(\"../../..\").GridRowId;\n        model: import(\"../../..\").GridValidRowModel;\n    }[] | undefined;\n}>;\n/**\n * @ignore - do not document.\n */\nexport declare const gridPinnedRowsCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n","node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaState.d.ts":"/**\n * The grid rows total height and row positions.\n */\nexport interface GridRowsMetaState {\n    /**\n     * The sum of all visible grid rows in the current rows.\n     */\n    currentPageTotalHeight: number;\n    /**\n     * The grid rows positions.\n     */\n    positions: number[];\n}\n","node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsMetaSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const gridRowsMetaSelector: (state: GridStateCommunity) => import(\"./gridRowsMetaState\").GridRowsMetaState;\n","node_modules/@mui/x-data-grid/hooks/features/rows/gridRowsInterfaces.d.ts":"import { GridRowEntry, GridRowId, GridRowTreeConfig, GridValidRowModel } from '../../../models/gridRows';\nimport type { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nexport interface GridRowsInternalCache {\n    /**\n     * The rows as they were the last time all the rows have been updated at once\n     * It is used to avoid processing several time the same set of rows\n     */\n    rowsBeforePartialUpdates: DataGridProcessedProps['rows'];\n    /**\n     * The value of the `loading` prop since the last time that the rows state was updated.\n     */\n    loadingPropBeforePartialUpdates: DataGridProcessedProps['loading'];\n    /**\n     * The value of the `rowCount` prop since the last time that the rows state was updated.\n     */\n    rowCountPropBeforePartialUpdates: DataGridProcessedProps['rowCount'];\n    /**\n     * Lookup containing the latest model at all time (even those not stored in the state yet).\n     */\n    dataRowIdToModelLookup: GridRowIdToModelLookup;\n    /**\n     * Lookup containing the latest ids at all time (even those not stored in the state yet).\n     */\n    dataRowIdToIdLookup: GridRowIdToIdLookup;\n    /**\n     * List of updates (partial or full) applied since the last time the state was synced with the cache.\n     * It is used to build the tree.\n     * If the update is a full update, we rebuild the tree from scratch.\n     * If the update is a partial update, we only modify the impacted nodes.\n     */\n    updates: GridRowsPartialUpdates | GridRowsFullUpdate;\n}\nexport interface GridRowsState {\n    /**\n     * Name of the algorithm used to group the rows\n     * It is useful to decide which filtering / sorting algorithm to apply, to avoid applying tree-data filtering on a grouping-by-column dataset for instance.\n     */\n    groupingName: string;\n    tree: GridRowTreeConfig;\n    /**\n     * Amount of nodes at each depth (including auto-generated ones)\n     */\n    treeDepths: GridTreeDepths;\n    dataRowIds: GridRowId[];\n    /**\n     * Matches the value of the `loading` prop.\n     */\n    loading?: boolean;\n    /**\n     * Amount of data rows provided to the grid.\n     * Includes the filtered and collapsed rows.\n     * Does not include the auto-generated rows (auto generated groups and footers).\n     */\n    totalRowCount: number;\n    /**\n     * Amount of top level rows.\n     * Includes the filtered rows and the auto-generated root footer if any.\n     * Does not include the rows of depth > 0 (rows inside a group).\n     */\n    totalTopLevelRowCount: number;\n    dataRowIdToModelLookup: GridRowIdToModelLookup;\n    dataRowIdToIdLookup: GridRowIdToIdLookup;\n    additionalRowGroups?: {\n        pinnedRows?: GridPinnedRowsState;\n    };\n}\nexport interface GridRowTreeCreationParams {\n    previousTree: GridRowTreeConfig | null;\n    previousTreeDepths: GridTreeDepths | null;\n    updates: GridRowsPartialUpdates | GridRowsFullUpdate;\n    dataRowIdToIdLookup: GridRowIdToIdLookup;\n    dataRowIdToModelLookup: GridRowIdToModelLookup;\n}\nexport type GridRowTreeUpdateGroupAction = 'removeChildren' | 'insertChildren' | 'modifyChildren';\nexport type GridRowTreeUpdatedGroupsValue = {\n    [groupId: GridRowId]: {\n        [action in GridRowTreeUpdateGroupAction]?: boolean;\n    };\n};\nexport type GridRowTreeUpdatedGroupsManager = {\n    value: GridRowTreeUpdatedGroupsValue;\n    addAction: (groupId: GridRowId, action: GridRowTreeUpdateGroupAction) => void;\n};\nexport type GridRowTreeCreationValue = Pick<GridRowsState, 'groupingName' | 'tree' | 'treeDepths' | 'dataRowIds'> & {\n    updatedGroupsManager?: GridRowTreeUpdatedGroupsManager;\n};\nexport type GridHydrateRowsValue = Pick<GridRowsState, 'tree' | 'treeDepths' | 'dataRowIds' | 'dataRowIdToIdLookup' | 'dataRowIdToModelLookup' | 'additionalRowGroups'>;\nexport type GridRowsPartialUpdateAction = 'insert' | 'modify' | 'remove';\nexport type GridRowIdToModelLookup<R extends GridValidRowModel = GridValidRowModel> = Record<string, R>;\nexport type GridRowIdToIdLookup = Record<string, GridRowId>;\nexport type GridTreeDepths = {\n    [depth: number]: number;\n};\nexport interface GridRowsFullUpdate {\n    type: 'full';\n    rows: GridRowId[];\n}\nexport interface GridRowsPartialUpdates {\n    type: 'partial';\n    actions: {\n        [action in GridRowsPartialUpdateAction]: GridRowId[];\n    };\n    idToActionLookup: {\n        [id: GridRowId]: GridRowsPartialUpdateAction | undefined;\n    };\n}\nexport interface GridPinnedRowsState {\n    top?: GridRowEntry[];\n    bottom?: GridRowEntry[];\n}\n","node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelectionPreProcessors.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nexport declare const useGridRowSelectionPreProcessors: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: DataGridProcessedProps) => void;\n","node_modules/@mui/x-data-grid/hooks/features/rowSelection/useGridRowSelection.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const rowSelectionStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'rowSelectionModel' | 'rowSelection'>>;\n/**\n * @requires useGridRows (state, method) - can be after\n * @requires useGridParamsApi (method) - can be after\n * @requires useGridFocus (state) - can be after\n * @requires useGridKeyboardNavigation (`cellKeyDown` event must first be consumed by it)\n */\nexport declare const useGridRowSelection: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'checkboxSelection' | 'rowSelectionModel' | 'onRowSelectionModelChange' | 'disableMultipleRowSelection' | 'disableRowSelectionOnClick' | 'isRowSelectable' | 'checkboxSelectionVisibleOnly' | 'pagination' | 'paginationMode' | 'classes' | 'keepNonExistentRowsSelected' | 'rowSelection' | 'signature'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/rowSelection/index.d.ts":"export * from './gridRowSelectionSelector';\n","node_modules/@mui/x-data-grid/hooks/features/rowSelection/gridRowSelectionSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridRowId } from '../../../models/gridRows';\nexport declare const gridRowSelectionStateSelector: (state: GridStateCommunity) => import(\"../../..\").GridRowSelectionModel;\nexport declare const selectedGridRowsCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\nexport declare const selectedGridRowsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, Map<GridRowId, import(\"../../../models/gridRows\").GridValidRowModel>>;\nexport declare const selectedIdsLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, Record<GridRowId, GridRowId>>;\n","node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/useGridPreferencesPanel.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const preferencePanelStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'initialState'>>;\n/**\n * TODO: Add a single `setPreferencePanel` method to avoid multiple `setState`\n */\nexport declare const useGridPreferencesPanel: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'initialState'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/index.d.ts":"export * from './gridPreferencePanelSelector';\nexport * from './gridPreferencePanelState';\nexport * from './gridPreferencePanelsValue';\n","node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelsValue.d.ts":"declare enum GridPreferencePanelsValue {\n    filters = \"filters\",\n    columns = \"columns\"\n}\nexport { GridPreferencePanelsValue };\n","node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelState.d.ts":"import { GridPreferencePanelsValue } from './gridPreferencePanelsValue';\nexport interface GridPreferencePanelState {\n    open: boolean;\n    panelId?: string;\n    labelId?: string;\n    /**\n     * Tab currently opened.\n     * @default GridPreferencePanelsValue.filter\n     * TODO v6: Remove the default behavior\n     */\n    openedPanelValue?: GridPreferencePanelsValue;\n}\nexport type GridPreferencePanelInitialState = GridPreferencePanelState;\n","node_modules/@mui/x-data-grid/hooks/features/preferencesPanel/gridPreferencePanelSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const gridPreferencePanelStateSelector: (state: GridStateCommunity) => import(\"./gridPreferencePanelState\").GridPreferencePanelState;\n","node_modules/@mui/x-data-grid/hooks/features/pagination/useGridPagination.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nimport { GridPaginationState } from './gridPaginationInterfaces';\nimport { GridPaginationModel } from '../../../models/gridPaginationProps';\nexport declare const paginationStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'paginationModel' | 'rowCount' | 'initialState' | 'autoPageSize' | 'signature'>>;\nexport declare const mergeStateWithPaginationModel: (rowCount: number, signature: DataGridProcessedProps['signature'], paginationModelProp?: GridPaginationModel) => (paginationState: GridPaginationState) => {\n    paginationModel: GridPaginationModel;\n};\n/**\n * @requires useGridFilter (state)\n * @requires useGridDimensions (event) - can be after\n */\nexport declare const useGridPagination: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'paginationModel' | 'onPaginationModelChange' | 'autoPageSize' | 'rowCount' | 'initialState' | 'paginationMode' | 'signature' | 'rowHeight'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/pagination/index.d.ts":"export * from './gridPaginationSelector';\nexport type { GridPaginationApi, GridPaginationState, GridPaginationInitialState, } from './gridPaginationInterfaces';\n","node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationUtils.d.ts":"import { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nexport declare const defaultPageSize: (autoPageSize: boolean) => 0 | 100;\nexport declare const getPageCount: (rowCount: number, pageSize: number) => number;\nexport declare const noRowCountInServerMode: () => void;\nexport declare const getDefaultGridPaginationModel: (autoPageSize: boolean) => {\n    page: number;\n    pageSize: number;\n};\nexport declare const getValidPage: (page: number, pageCount?: number) => number;\nexport declare const throwIfPageSizeExceedsTheLimit: (pageSize: number, signatureProp: DataGridProcessedProps['signature']) => void;\n","node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\n/**\n * @category Pagination\n * @ignore - do not document.\n */\nexport declare const gridPaginationSelector: (state: GridStateCommunity) => import(\"./gridPaginationInterfaces\").GridPaginationState;\n/**\n * Get the pagination model\n * @category Pagination\n */\nexport declare const gridPaginationModelSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridPaginationModel>;\n/**\n * Get the index of the page to render if the pagination is enabled\n * @category Pagination\n */\nexport declare const gridPageSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n/**\n * Get the maximum amount of rows to display on a single page if the pagination is enabled\n * @category Pagination\n */\nexport declare const gridPageSizeSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n/**\n * Get the amount of pages needed to display all the rows if the pagination is enabled\n * @category Pagination\n */\nexport declare const gridPageCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n/**\n * Get the index of the first and the last row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport declare const gridPaginationRowRangeSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    firstRowIndex: number;\n    lastRowIndex: number;\n} | null>;\n/**\n * Get the id and the model of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport declare const gridPaginatedVisibleSortedGridRowEntriesSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    id: import(\"../../..\").GridRowId;\n    model: import(\"../../..\").GridValidRowModel;\n}[]>;\n/**\n * Get the id of each row to include in the current page if the pagination is enabled.\n * @category Pagination\n */\nexport declare const gridPaginatedVisibleSortedGridRowIdsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridRowId[]>;\n","node_modules/@mui/x-data-grid/hooks/features/pagination/gridPaginationInterfaces.d.ts":"import { GridPaginationModel } from '../../../models/gridPaginationProps';\nexport interface GridPaginationState {\n    paginationModel: GridPaginationModel;\n}\nexport interface GridPaginationInitialState {\n    paginationModel?: Partial<GridPaginationModel>;\n}\n/**\n * The pagination API interface that is available in the grid `apiRef`.\n */\nexport interface GridPaginationApi {\n    /**\n     * Sets the displayed page to the value given by `page`.\n     * @param {number} page The new page number.\n     */\n    setPage: (page: number) => void;\n    /**\n     * Sets the number of displayed rows to the value given by `pageSize`.\n     * @param {number} pageSize The new number of displayed rows.\n     */\n    setPageSize: (pageSize: number) => void;\n    /**\n     * Sets the `paginationModel` to a new value.\n     * @param {GridPaginationModel} model The new model value.\n     */\n    setPaginationModel: (model: GridPaginationModel) => void;\n}\n","node_modules/@mui/x-data-grid/hooks/features/keyboardNavigation/useGridKeyboardNavigation.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\n/**\n * @requires useGridSorting (method) - can be after\n * @requires useGridFilter (state) - can be after\n * @requires useGridColumns (state, method) - can be after\n * @requires useGridDimensions (method) - can be after\n * @requires useGridFocus (method) - can be after\n * @requires useGridScroll (method) - can be after\n * @requires useGridColumnSpanning (method) - can be after\n */\nexport declare const useGridKeyboardNavigation: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'pagination' | 'paginationMode' | 'getRowId' | 'experimentalFeatures' | 'signature'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/headerFiltering/useGridHeaderFiltering.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const headerFilteringStateInitializer: GridStateInitializer;\nexport declare const useGridHeaderFiltering: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'signature'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/headerFiltering/index.d.ts":"export * from './gridHeaderFilteringSelectors';\n","node_modules/@mui/x-data-grid/hooks/features/headerFiltering/gridHeaderFilteringSelectors.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const unstable_gridHeaderFilteringStateSelector: (state: GridStateCommunity) => import(\"../../../models/gridHeaderFilteringModel\").GridHeaderFilteringState;\nexport declare const unstable_gridHeaderFilteringEditFieldSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, string | null>;\nexport declare const unstable_gridHeaderFilteringMenuSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, string | null>;\n","node_modules/@mui/x-data-grid/hooks/features/focus/useGridFocus.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const focusStateInitializer: GridStateInitializer;\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridRows (method)\n * @requires useGridEditing (event)\n */\nexport declare const useGridFocus: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'pagination' | 'paginationMode'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/focus/index.d.ts":"export * from './gridFocusStateSelector';\nexport * from './gridFocusState';\n","node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusStateSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridFocusState, GridTabIndexState } from './gridFocusState';\nexport declare const gridFocusStateSelector: (state: GridStateCommunity) => GridFocusState;\nexport declare const gridFocusCellSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridCellCoordinates | null>;\nexport declare const gridFocusColumnHeaderSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridFocusState\").GridColumnIdentifier | null>;\nexport declare const unstable_gridFocusColumnHeaderFilterSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridFocusState\").GridColumnIdentifier | null>;\nexport declare const unstable_gridFocusColumnGroupHeaderSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridFocusState\").GridColumnGroupIdentifier | null>;\nexport declare const gridTabIndexStateSelector: (state: GridStateCommunity) => GridTabIndexState;\nexport declare const gridTabIndexCellSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridCellCoordinates | null>;\nexport declare const gridTabIndexColumnHeaderSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridFocusState\").GridColumnIdentifier | null>;\nexport declare const unstable_gridTabIndexColumnHeaderFilterSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridFocusState\").GridColumnIdentifier | null>;\nexport declare const unstable_gridTabIndexColumnGroupHeaderSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridFocusState\").GridColumnGroupIdentifier | null>;\n","node_modules/@mui/x-data-grid/hooks/features/focus/gridFocusState.d.ts":"import { GridCellCoordinates } from '../../../models/gridCell';\nexport type GridColumnIdentifier = {\n    field: string;\n};\nexport type GridColumnGroupIdentifier = {\n    field: string;\n    depth: number;\n};\nexport interface GridFocusState {\n    cell: GridCellCoordinates | null;\n    columnHeader: GridColumnIdentifier | null;\n    columnHeaderFilter: GridColumnIdentifier | null;\n    columnGroupHeader: GridColumnGroupIdentifier | null;\n}\nexport interface GridTabIndexState {\n    cell: GridCellCoordinates | null;\n    columnHeader: GridColumnIdentifier | null;\n    columnHeaderFilter: GridColumnIdentifier | null;\n    columnGroupHeader: GridColumnGroupIdentifier | null;\n}\n","node_modules/@mui/x-data-grid/hooks/features/filter/useGridFilter.d.ts":"import * as React from 'react';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const filterStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'filterModel' | 'initialState' | 'disableMultipleColumnsFiltering'>>;\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n * @requires useGridRows (event)\n */\nexport declare const useGridFilter: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'rows' | 'initialState' | 'filterModel' | 'getRowId' | 'onFilterModelChange' | 'filterMode' | 'disableMultipleColumnsFiltering' | 'slots' | 'slotProps' | 'disableColumnFilter' | 'disableEval' | 'ignoreDiacritics'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/filter/index.d.ts":"export type { GridFilterState, GridFilterInitialState } from './gridFilterState';\nexport { getDefaultGridFilterModel } from './gridFilterState';\nexport * from './gridFilterSelector';\n","node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.d.ts":"import * as React from 'react';\nimport { GridFilterItem, GridFilterModel } from '../../../models';\nimport type { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridAggregatedFilterItemApplier, GridFilterItemResult, GridQuickFilterValueResult } from './gridFilterState';\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operator.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\nexport declare const cleanFilterItem: (item: GridFilterItem, apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => GridFilterItem;\nexport declare const sanitizeFilterModel: (model: GridFilterModel, disableMultipleColumnsFiltering: boolean, apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => GridFilterModel;\nexport declare const mergeStateWithFilterModel: (filterModel: GridFilterModel, disableMultipleColumnsFiltering: boolean, apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => (filteringState: GridStateCommunity['filter']) => GridStateCommunity['filter'];\nexport declare const removeDiacritics: (value: unknown) => unknown;\nexport declare const buildAggregatedFilterApplier: (filterModel: GridFilterModel, apiRef: React.MutableRefObject<GridPrivateApiCommunity>, disableEval: boolean) => GridAggregatedFilterItemApplier;\ntype FilterCache = {\n    cleanedFilterItems?: GridFilterItem[];\n};\nexport declare const passFilterLogic: (allFilterItemResults: (null | GridFilterItemResult)[], allQuickFilterResults: (null | GridQuickFilterValueResult)[], filterModel: GridFilterModel, apiRef: React.MutableRefObject<GridPrivateApiCommunity>, cache: FilterCache) => boolean;\nexport {};\n","node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterState.d.ts":"import { GridFilterItem } from '../../../models/gridFilterItem';\nimport { GridFilterModel } from '../../../models/gridFilterModel';\nimport { GridRowId, GridValidRowModel } from '../../../models/gridRows';\nexport type GridFilterItemResult = {\n    [key: Required<GridFilterItem>['id']]: boolean;\n};\nexport type GridQuickFilterValueResult = {\n    [key: string]: boolean;\n};\nexport declare const getDefaultGridFilterModel: () => GridFilterModel;\nexport interface GridFilterState {\n    filterModel: GridFilterModel;\n    /**\n     * Filtering status for each row.\n     * A row is filtered if it is passing the filters, whether its parents are expanded or not.\n     * If a row is not registered in this lookup, it is filtered.\n     * This is the equivalent of the `visibleRowsLookup` if all the groups were expanded.\n     */\n    filteredRowsLookup: Record<GridRowId, boolean>;\n    /**\n     * Amount of descendants that are passing the filters.\n     * For the Tree Data, it includes all the intermediate depth levels (= amount of children + amount of grand children + ...).\n     * For the Row grouping by column, it does not include the intermediate depth levels (= amount of descendant of maximum depth).\n     * If a row is not registered in this lookup, it is supposed to have no descendant passing the filters.\n     */\n    filteredDescendantCountLookup: Record<GridRowId, number>;\n}\nexport interface GridFilterInitialState {\n    filterModel?: GridFilterModel;\n}\nexport interface GridAggregatedFilterItemApplierResult {\n    passingFilterItems: null | GridFilterItemResult;\n    passingQuickFilterValues: null | GridQuickFilterValueResult;\n}\n/**\n * @param {GridRowId} rowId The id of the row we want to filter.\n * @param {(filterItem: GridFilterItem) => boolean} shouldApplyItem An optional callback to allow the filtering engine to only apply some items.\n */\nexport type GridAggregatedFilterItemApplier = (row: GridValidRowModel, shouldApplyItem: ((field: string) => boolean) | undefined, result: GridAggregatedFilterItemApplierResult) => void;\nexport interface GridFilteringMethodParams {\n    isRowMatchingFilters: GridAggregatedFilterItemApplier | null;\n    filterModel: GridFilterModel;\n}\nexport type GridFilteringMethodValue = Omit<GridFilterState, 'filterModel'>;\n/**\n * Visibility status for each row.\n * A row is visible if it is passing the filters AND if its parents are expanded.\n * If a row is not registered in this lookup, it is visible.\n */\nexport type GridVisibleRowsLookupState = Record<GridRowId, boolean>;\n","node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterSelector.d.ts":"import { GridFilterItem } from '../../../models/gridFilterItem';\nimport { GridStateCommunity } from '../../../models/gridStateCommunity';\n/**\n * Get the current filter model.\n * @category Filtering\n */\nexport declare const gridFilterModelSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridFilterModel>;\n/**\n * Get the current quick filter values.\n * @category Filtering\n */\nexport declare const gridQuickFilterValuesSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, any[] | undefined>;\n/**\n * @category Visible rows\n * @ignore - do not document.\n */\nexport declare const gridVisibleRowsLookupSelector: (state: GridStateCommunity) => import(\"./gridFilterState\").GridVisibleRowsLookupState;\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport declare const gridFilteredRowsLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, Record<import(\"../../..\").GridRowId, boolean>>;\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport declare const gridFilteredDescendantCountLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, Record<import(\"../../..\").GridRowId, number>>;\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport declare const gridExpandedSortedRowEntriesSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    id: import(\"../../..\").GridRowId;\n    model: import(\"../../..\").GridValidRowModel;\n}[]>;\n/**\n * Get the id of the rows accessible after the filtering process.\n * Does not contain the collapsed children.\n * @category Filtering\n */\nexport declare const gridExpandedSortedRowIdsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridRowId[]>;\n/**\n * Get the id and the model of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport declare const gridFilteredSortedRowEntriesSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    id: import(\"../../..\").GridRowId;\n    model: import(\"../../..\").GridValidRowModel;\n}[]>;\n/**\n * Get the id of the rows accessible after the filtering process.\n * Contains the collapsed children.\n * @category Filtering\n */\nexport declare const gridFilteredSortedRowIdsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridRowId[]>;\n/**\n * Get the id and the model of the top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport declare const gridFilteredSortedTopLevelRowEntriesSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    id: import(\"../../..\").GridRowId;\n    model: import(\"../../..\").GridValidRowModel;\n}[]>;\n/**\n * Get the amount of rows accessible after the filtering process.\n * @category Filtering\n */\nexport declare const gridExpandedRowCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n/**\n * Get the amount of top level rows accessible after the filtering process.\n * @category Filtering\n */\nexport declare const gridFilteredTopLevelRowCountSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport declare const gridFilterActiveItemsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, GridFilterItem[]>;\nexport type GridFilterActiveItemsLookup = {\n    [field: string]: GridFilterItem[];\n};\n/**\n * @category Filtering\n * @ignore - do not document.\n */\nexport declare const gridFilterActiveItemsLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, GridFilterActiveItemsLookup>;\n","node_modules/@mui/x-data-grid/hooks/features/export/utils.d.ts":"import * as React from 'react';\nimport { GridApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridExportOptions, GridCsvGetRowsToExportParams } from '../../../models/gridExport';\nimport { GridStateColDef } from '../../../models/colDef/gridColDef';\nimport { GridRowId } from '../../../models';\ninterface GridGetColumnsToExportParams {\n    /**\n     * The API of the grid.\n     */\n    apiRef: React.MutableRefObject<GridApiCommunity>;\n    options: GridExportOptions;\n}\nexport declare const getColumnsToExport: ({ apiRef, options, }: GridGetColumnsToExportParams) => GridStateColDef[];\nexport declare const defaultGetRowsToExport: ({ apiRef }: GridCsvGetRowsToExportParams) => GridRowId[];\nexport {};\n","node_modules/@mui/x-data-grid/hooks/features/export/useGridPrintExport.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridParamsApi (method)\n */\nexport declare const useGridPrintExport: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'pagination' | 'columnHeaderHeight'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/export/useGridCsvExport.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport type { DataGridProcessedProps } from '../../../models/props/DataGridProps';\n/**\n * @requires useGridColumns (state)\n * @requires useGridFilter (state)\n * @requires useGridSorting (state)\n * @requires useGridSelection (state)\n * @requires useGridParamsApi (method)\n */\nexport declare const useGridCsvExport: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'unstable_ignoreValueFormatterDuringExport'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/events/useGridEvents.d.ts":"import * as React from 'react';\nimport { GridApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\n/**\n * @requires useGridFocus (event) - can be after, async only\n * @requires useGridColumns (event) - can be after, async only\n */\nexport declare function useGridEvents(apiRef: React.MutableRefObject<GridApiCommunity>, props: Pick<DataGridProcessedProps, 'onColumnHeaderClick' | 'onColumnHeaderDoubleClick' | 'onColumnHeaderOver' | 'onColumnHeaderOut' | 'onColumnHeaderEnter' | 'onColumnHeaderLeave' | 'onCellClick' | 'onCellDoubleClick' | 'onCellKeyDown' | 'onPreferencePanelClose' | 'onPreferencePanelOpen' | 'onRowDoubleClick' | 'onRowClick' | 'onStateChange' | 'onMenuOpen' | 'onMenuClose'>): void;\n","node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nexport declare const useGridRowEditing: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'editMode' | 'processRowUpdate' | 'onRowEditStart' | 'onRowEditStop' | 'onProcessRowUpdateError' | 'rowModesModel' | 'onRowModesModelChange' | 'signature'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/editing/useGridEditing.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const editingStateInitializer: GridStateInitializer;\nexport declare const useGridEditing: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'isCellEditable' | 'editMode' | 'processRowUpdate'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nexport declare const useGridCellEditing: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'editMode' | 'processRowUpdate' | 'onCellEditStart' | 'onCellEditStop' | 'cellModesModel' | 'onCellModesModelChange' | 'onProcessRowUpdateError' | 'signature'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/editing/gridEditingSelectors.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const gridEditRowsStateSelector: (state: GridStateCommunity) => import(\"../../..\").GridEditingState;\n","node_modules/@mui/x-data-grid/hooks/features/dimensions/useGridDimensions.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nexport declare function useGridDimensions(apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'onResize' | 'scrollbarSize' | 'pagination' | 'paginationMode' | 'autoHeight' | 'getRowHeight' | 'rowHeight' | 'columnHeaderHeight'>): void;\n","node_modules/@mui/x-data-grid/hooks/features/dimensions/index.d.ts":"export type { GridDimensions, GridDimensionsApi } from './gridDimensionsApi';\n","node_modules/@mui/x-data-grid/hooks/features/dimensions/gridDimensionsApi.d.ts":"import type { ElementSize } from '../../../models/elementSize';\nexport interface GridDimensions {\n    /**\n     * The viewport size including scrollbars.\n     */\n    viewportOuterSize: ElementSize;\n    /**\n     * The viewport size not including scrollbars.\n     */\n    viewportInnerSize: ElementSize;\n    /**\n     * Indicates if a scroll is currently needed to go from the beginning of the first column to the end of the last column.\n     */\n    hasScrollX: boolean;\n    /**\n     * Indicates if a scroll is currently needed to go from the beginning of the first row to the end of the last row.\n     */\n    hasScrollY: boolean;\n    /**\n     * Size of the scrollbar used to scroll the rows in pixel.\n     * It is defined even when the scrollbar is currently not needed.\n     */\n    scrollBarSize: number;\n}\nexport interface GridDimensionsApi {\n    /**\n     * Triggers a resize of the component and recalculation of width and height.\n     */\n    resize: () => void;\n    /**\n     * Returns the dimensions of the grid\n     * @returns {GridDimensions | null} The dimension information of the grid. If `null`, the grid is not ready yet.\n     */\n    getRootDimensions: () => GridDimensions | null;\n}\nexport interface GridDimensionsPrivateApi {\n    /**\n     * Returns the amount of rows that are currently visible in the viewport\n     * @returns {number} The amount of rows visible in the viewport\n     */\n    getViewportPageSize: () => number;\n    /**\n     * Forces a recalculation of all dimensions.\n     */\n    updateGridDimensionsRef: () => void;\n    /**\n     * Computes the size and publishes a `resize` event with the new value.\n     */\n    computeSizeAndPublishResizeEvent: () => void;\n}\n","node_modules/@mui/x-data-grid/hooks/features/density/useGridDensity.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const COMPACT_DENSITY_FACTOR = 0.7;\nexport declare const COMFORTABLE_DENSITY_FACTOR = 1.3;\nexport declare const densityStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'density'>>;\nexport declare const useGridDensity: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'density'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/density/index.d.ts":"export * from './densityState';\nexport * from './densitySelector';\n","node_modules/@mui/x-data-grid/hooks/features/density/densityState.d.ts":"import { GridDensity } from '../../../models/gridDensity';\nexport interface GridDensityState {\n    value: GridDensity;\n    factor: number;\n}\n","node_modules/@mui/x-data-grid/hooks/features/density/densitySelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const gridDensitySelector: (state: GridStateCommunity) => import(\"./densityState\").GridDensityState;\nexport declare const gridDensityValueSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../..\").GridDensity>;\nexport declare const gridDensityFactorSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n","node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const columnsStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'columnVisibilityModel' | 'initialState' | 'columns'>>;\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\nexport declare function useGridColumns(apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'initialState' | 'columns' | 'columnVisibilityModel' | 'onColumnVisibilityModelChange' | 'slots' | 'slotProps' | 'disableColumnSelector' | 'signature'>): void;\n","node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumnSpanning.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport declare const useGridColumnSpanning: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/columns/index.d.ts":"export { gridColumnFieldsSelector, gridColumnLookupSelector, gridColumnDefinitionsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridVisibleColumnFieldsSelector, gridColumnPositionsSelector, gridColumnsTotalWidthSelector, gridFilterableColumnDefinitionsSelector, gridFilterableColumnLookupSelector, } from './gridColumnsSelector';\nexport type { GridColumnLookup, GridColumnsState, GridColumnsInitialState, GridColumnVisibilityModel, } from './gridColumnsInterfaces';\n","node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsUtils.d.ts":"import * as React from 'react';\nimport { GridColumnsState, GridColumnsRawState, GridColumnVisibilityModel, GridColumnsInitialState } from './gridColumnsInterfaces';\nimport { GridColumnTypesRecord } from '../../../models';\nimport { GridStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridColDef } from '../../../models/colDef/gridColDef';\nimport { GridApiCommon } from '../../../models/api/gridApiCommon';\nimport { GridRowEntry } from '../../../models/gridRows';\nexport declare const COLUMNS_DIMENSION_PROPERTIES: readonly [\"maxWidth\", \"minWidth\", \"width\", \"flex\"];\nexport type GridColumnDimensionProperties = (typeof COLUMNS_DIMENSION_PROPERTIES)[number];\n/**\n * Computes width for flex columns.\n * Based on CSS Flexbox specification:\n * https://drafts.csswg.org/css-flexbox-1/#resolve-flexible-lengths\n */\nexport declare function computeFlexColumnsWidth({ initialFreeSpace, totalFlexUnits, flexColumns, }: {\n    initialFreeSpace: number;\n    totalFlexUnits: number;\n    flexColumns: {\n        field: GridColDef['field'];\n        flex?: number | null;\n        minWidth?: number;\n        maxWidth?: number;\n    }[];\n}): Record<string, {\n    flex: number;\n    computedWidth: number;\n    frozen: boolean;\n}>;\n/**\n * Compute the `computedWidth` (ie: the width the column should have during rendering) based on the `width` / `flex` / `minWidth` / `maxWidth` properties of `GridColDef`.\n * The columns already have been merged with there `type` default values for `minWidth`, `maxWidth` and `width`, thus the `!` for those properties below.\n * TODO: Unit test this function in depth and only keep basic cases for the whole grid testing.\n * TODO: Improve the `GridColDef` typing to reflect the fact that `minWidth` / `maxWidth` and `width` can't be null after the merge with the `type` default values.\n */\nexport declare const hydrateColumnsWidth: (rawState: GridColumnsRawState, viewportInnerWidth: number) => GridColumnsState;\n/**\n * Apply the order and the dimensions of the initial state.\n * The columns not registered in `orderedFields` will be placed after the imported columns.\n */\nexport declare const applyInitialState: (columnsState: GridColumnsRawState, initialState: GridColumnsInitialState | undefined) => GridColumnsRawState;\nexport declare const createColumnsState: ({ apiRef, columnsToUpsert, initialState, columnTypes, columnVisibilityModel, keepOnlyColumnsToUpsert, }: {\n    columnsToUpsert: readonly GridColDef[];\n    initialState: GridColumnsInitialState | undefined;\n    columnTypes: GridColumnTypesRecord;\n    columnVisibilityModel?: GridColumnVisibilityModel | undefined;\n    keepOnlyColumnsToUpsert: boolean;\n    apiRef: React.MutableRefObject<GridApiCommunity>;\n}) => GridColumnsState;\nexport declare const mergeColumnsState: (columnsState: GridColumnsState) => (state: GridStateCommunity) => GridStateCommunity;\nexport declare function getFirstNonSpannedColumnToRender({ firstColumnToRender, apiRef, firstRowToRender, lastRowToRender, visibleRows, }: {\n    firstColumnToRender: number;\n    apiRef: React.MutableRefObject<GridApiCommon>;\n    firstRowToRender: number;\n    lastRowToRender: number;\n    visibleRows: GridRowEntry[];\n}): number;\nexport declare function getFirstColumnIndexToRender({ firstColumnIndex, minColumnIndex, columnBuffer, firstRowToRender, lastRowToRender, apiRef, visibleRows, }: {\n    firstColumnIndex: number;\n    minColumnIndex: number;\n    columnBuffer: number;\n    apiRef: React.MutableRefObject<GridApiCommon>;\n    firstRowToRender: number;\n    lastRowToRender: number;\n    visibleRows: GridRowEntry[];\n}): number;\nexport declare function getTotalHeaderHeight(apiRef: React.MutableRefObject<GridApiCommunity>, headerHeight: number): number;\n","node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridColumnLookup } from './gridColumnsInterfaces';\n/**\n * Get the columns state\n * @category Columns\n */\nexport declare const gridColumnsStateSelector: (state: GridStateCommunity) => import(\"./gridColumnsInterfaces\").GridColumnsState;\n/**\n * Get an array of column fields in the order rendered on screen.\n * @category Columns\n */\nexport declare const gridColumnFieldsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, string[]>;\n/**\n * Get the columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport declare const gridColumnLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, GridColumnLookup>;\n/**\n * Get an array of column definitions in the order rendered on screen..\n * @category Columns\n */\nexport declare const gridColumnDefinitionsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../../internals\").GridStateColDef[]>;\n/**\n * Get the column visibility model, containing the visibility status of each column.\n * If a column is not registered in the model, it is visible.\n * @category Visible Columns\n */\nexport declare const gridColumnVisibilityModelSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridColumnsInterfaces\").GridColumnVisibilityModel>;\n/**\n * Get the visible columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Visible Columns\n */\nexport declare const gridVisibleColumnDefinitionsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../../internals\").GridStateColDef[]>;\n/**\n * Get the field of each visible column.\n * @category Visible Columns\n */\nexport declare const gridVisibleColumnFieldsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, string[]>;\n/**\n * Get the left position in pixel of each visible columns relative to the left of the first column.\n * @category Visible Columns\n */\nexport declare const gridColumnPositionsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number[]>;\n/**\n * Get the summed width of all the visible columns.\n * @category Visible Columns\n */\nexport declare const gridColumnsTotalWidthSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n/**\n * Get the filterable columns as an array.\n * @category Columns\n */\nexport declare const gridFilterableColumnDefinitionsSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"../../../internals\").GridStateColDef[]>;\n/**\n * Get the filterable columns as a lookup (an object containing the field for keys and the definition for values).\n * @category Columns\n */\nexport declare const gridFilterableColumnLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, GridColumnLookup>;\n","node_modules/@mui/x-data-grid/hooks/features/columns/gridColumnsInterfaces.d.ts":"import { GridColDef, GridStateColDef } from '../../../models/colDef/gridColDef';\nimport type { GridColumnDimensionProperties } from './gridColumnsUtils';\nexport type GridColumnLookup = {\n    [field: string]: GridStateColDef;\n};\nexport type GridColumnRawLookup = {\n    [field: string]: GridColDef | GridStateColDef;\n};\nexport interface GridColumnsState {\n    orderedFields: string[];\n    lookup: GridColumnLookup;\n    columnVisibilityModel: GridColumnVisibilityModel;\n}\nexport type GridColumnDimensions = {\n    [key in GridColumnDimensionProperties]?: number;\n};\nexport interface GridColumnsInitialState {\n    columnVisibilityModel?: GridColumnVisibilityModel;\n    orderedFields?: string[];\n    dimensions?: Record<string, GridColumnDimensions>;\n}\nexport type GridColumnsRawState = Omit<GridColumnsState, 'lookup'> & {\n    lookup: GridColumnRawLookup;\n};\nexport type GridHydrateColumnsValue = GridColumnsRawState;\nexport type GridColumnVisibilityModel = Record<GridColDef['field'], boolean>;\n","node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenuSlots.d.ts":"import * as React from 'react';\nimport { GridColumnMenuRootProps } from './columnMenuInterfaces';\nimport { GridColDef } from '../../../models/colDef/gridColDef';\ninterface UseGridColumnMenuSlotsProps extends GridColumnMenuRootProps {\n    colDef: GridColDef;\n    hideMenu: (event: React.SyntheticEvent) => void;\n    addDividers?: boolean;\n}\ntype UseGridColumnMenuSlotsResponse = Array<[\n    React.JSXElementConstructor<any>,\n    {\n        [key: string]: any;\n    }\n]>;\ndeclare const useGridColumnMenuSlots: (props: UseGridColumnMenuSlotsProps) => UseGridColumnMenuSlotsResponse;\nexport { useGridColumnMenuSlots };\n","node_modules/@mui/x-data-grid/hooks/features/columnMenu/useGridColumnMenu.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const columnMenuStateInitializer: GridStateInitializer;\n/**\n * @requires useGridColumnResize (event)\n * @requires useGridInfiniteLoader (event)\n */\nexport declare const useGridColumnMenu: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/columnMenu/index.d.ts":"export * from './columnMenuInterfaces';\nexport * from './columnMenuSelector';\n","node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\nexport declare const gridColumnMenuSelector: (state: GridStateCommunity) => import(\"./columnMenuInterfaces\").GridColumnMenuState;\n","node_modules/@mui/x-data-grid/hooks/features/columnMenu/columnMenuInterfaces.d.ts":"import * as React from 'react';\nexport interface GridColumnMenuState {\n    open: boolean;\n    field?: string;\n}\nexport interface GridColumnMenuSlotProps {\n    /**\n     * Every item has a `displayOrder` based which it will be placed before or after other\n     * items in the column menu, `array.prototype.sort` is applied to sort the items.\n     * Note: If same `displayOrder` is applied to two or more items they will be sorted\n     * based on the definition order\n     * @default 100\n     */\n    displayOrder?: number;\n    [key: string]: any;\n}\nexport interface GridColumnMenuRootProps {\n    /**\n     * Initial `slots` - it is internal, to be overrriden by Pro or Premium packages\n     * @ignore - do not document.\n     */\n    defaultSlots: {\n        [key: string]: React.JSXElementConstructor<any>;\n    };\n    /**\n     * Initial `slotProps` - it is internal, to be overrriden by Pro or Premium packages\n     * @ignore - do not document.\n     */\n    defaultSlotProps: {\n        [key: string]: GridColumnMenuSlotProps;\n    };\n    /**\n     * `slots` could be used to add new and (or) override default column menu items\n     * If you register a nee component you must pass it's `displayOrder` in `slotProps`\n     * or it will be placed in the end of the list\n     */\n    slots?: {\n        [key: string]: React.JSXElementConstructor<any> | null;\n    };\n    /**\n     * Could be used to pass new props or override props specific to a column menu component\n     * e.g. `displayOrder`\n     */\n    slotProps?: {\n        [key: string]: GridColumnMenuSlotProps;\n    };\n}\n","node_modules/@mui/x-data-grid/hooks/features/columnHeaders/useGridColumnHeaders.d.ts":"import * as React from 'react';\nimport { GridRenderContext } from '../../../models/params/gridScrollParams';\nimport { GridStateColDef } from '../../../models/colDef/gridColDef';\nimport { GridSortColumnLookup } from '../sorting';\nimport { GridFilterActiveItemsLookup } from '../filter';\nimport { GridColumnGroupIdentifier, GridColumnIdentifier } from '../focus';\nimport { GridColumnMenuState } from '../columnMenu';\nimport { GridColumnVisibilityModel } from '../columns';\nimport { GridGroupingStructure } from '../columnGrouping/gridColumnGroupsInterfaces';\nexport interface UseGridColumnHeadersProps {\n    innerRef?: React.Ref<HTMLDivElement>;\n    minColumnIndex?: number;\n    visibleColumns: GridStateColDef[];\n    sortColumnLookup: GridSortColumnLookup;\n    filterColumnLookup: GridFilterActiveItemsLookup;\n    columnPositions: number[];\n    columnHeaderTabIndexState: GridColumnIdentifier | null;\n    columnGroupHeaderTabIndexState: GridColumnGroupIdentifier | null;\n    columnHeaderFocus: GridColumnIdentifier | null;\n    columnGroupHeaderFocus: GridColumnGroupIdentifier | null;\n    densityFactor: number;\n    headerGroupingMaxDepth: number;\n    columnMenuState: GridColumnMenuState;\n    columnVisibility: GridColumnVisibilityModel;\n    columnGroupsHeaderStructure: GridGroupingStructure[][];\n    hasOtherElementInTabSequence: boolean;\n}\nexport interface GetHeadersParams {\n    renderContext: GridRenderContext | null;\n    minFirstColumn?: number;\n    maxLastColumn?: number;\n}\nexport declare const useGridColumnHeaders: (props: UseGridColumnHeadersProps) => {\n    renderContext: GridRenderContext | null;\n    getColumnHeaders: (params?: GetHeadersParams, other?: {}) => React.JSX.Element | null;\n    getColumnsToRender: (params?: GetHeadersParams) => {\n        renderedColumns: GridStateColDef[];\n        firstColumnToRender: number;\n        lastColumnToRender: number;\n        minFirstColumn: number;\n        maxLastColumn: number;\n    } | null;\n    getColumnGroupHeaders: (params?: GetHeadersParams) => React.JSX.Element[] | null;\n    isDragging: boolean;\n    getRootProps: (other?: {}) => {\n        style: {\n            minHeight: number;\n            maxHeight: number;\n            lineHeight: string;\n        };\n    };\n    getInnerProps: () => {\n        ref: ((instance: HTMLDivElement | null) => void) | null;\n        role: string;\n    };\n    headerHeight: number;\n};\n","node_modules/@mui/x-data-grid/hooks/features/columnGrouping/useGridColumnGrouping.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport { DataGridProcessedProps } from '../../../models/props/DataGridProps';\nimport { GridStateInitializer } from '../../utils/useGridInitializeState';\nexport declare const columnGroupsStateInitializer: GridStateInitializer<Pick<DataGridProcessedProps, 'columnGroupingModel' | 'experimentalFeatures'>>;\n/**\n * @requires useGridColumns (method, event)\n * @requires useGridParamsApi (method)\n */\nexport declare const useGridColumnGrouping: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'columnGroupingModel' | 'experimentalFeatures'>) => void;\n","node_modules/@mui/x-data-grid/hooks/features/columnGrouping/index.d.ts":"export * from './gridColumnGroupsSelector';\nexport type { GridColumnsGroupingState } from './gridColumnGroupsInterfaces';\n","node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsUtils.d.ts":"import { GridColumnGroupingModel, GridColumnGroup } from '../../../models/gridColumnGrouping';\nimport { GridColDef } from '../../../models/colDef';\nimport { GridGroupingStructure } from './gridColumnGroupsInterfaces';\ntype UnwrappedGroupingModel = {\n    [key: GridColDef['field']]: GridColumnGroup['groupId'][];\n};\n/**\n * This is a function that provide for each column the array of its parents.\n * Parents are ordered from the root to the leaf.\n * @param columnGroupingModel The model such as provided in DataGrid props\n * @returns An object `{[field]: groupIds}` where `groupIds` is the parents of the column `field`\n */\nexport declare const unwrapGroupingColumnModel: (columnGroupingModel?: GridColumnGroupingModel) => UnwrappedGroupingModel;\nexport declare const getColumnGroupsHeaderStructure: (orderedColumns: string[], unwrappedGroupingModel: UnwrappedGroupingModel, pinnedFields: {\n    right?: string[];\n    left?: string[];\n}) => GridGroupingStructure[][];\nexport {};\n","node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsSelector.d.ts":"import { GridStateCommunity } from '../../../models/gridStateCommunity';\n/**\n * @category ColumnGrouping\n * @ignore - do not document.\n */\nexport declare const gridColumnGroupingSelector: (state: GridStateCommunity) => import(\"./gridColumnGroupsInterfaces\").GridColumnsGroupingState;\nexport declare const gridColumnGroupsUnwrappedModelSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, {\n    [columnField: string]: string[];\n}>;\nexport declare const gridColumnGroupsLookupSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridColumnGroupsInterfaces\").GridColumnGroupLookup>;\nexport declare const gridColumnGroupsHeaderStructureSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, import(\"./gridColumnGroupsInterfaces\").GridGroupingStructure[][]>;\nexport declare const gridColumnGroupsHeaderMaxDepthSelector: import(\"../../../utils/createSelector\").OutputSelector<GridStateCommunity, number>;\n","node_modules/@mui/x-data-grid/hooks/features/columnGrouping/gridColumnGroupsInterfaces.d.ts":"import { GridColumnGroup } from '../../../models/gridColumnGrouping';\nexport type GridColumnGroupLookup = {\n    [groupId: string]: Omit<GridColumnGroup, 'children'>;\n};\nexport type GridGroupingStructure = {\n    groupId: null | string;\n    columnFields: string[];\n};\nexport interface GridColumnsGroupingState {\n    lookup: GridColumnGroupLookup;\n    headerStructure: GridGroupingStructure[][];\n    unwrappedGroupingModel: {\n        [columnField: string]: GridColumnGroup['groupId'][];\n    };\n    maxDepth: number;\n}\n","node_modules/@mui/x-data-grid/hooks/features/clipboard/useGridClipboard.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommunity } from '../../../models/api/gridApiCommunity';\nimport type { DataGridProcessedProps } from '../../../models/props/DataGridProps';\n/**\n * @requires useGridCsvExport (method)\n * @requires useGridSelection (method)\n */\nexport declare const useGridClipboard: (apiRef: React.MutableRefObject<GridPrivateApiCommunity>, props: Pick<DataGridProcessedProps, 'unstable_ignoreValueFormatterDuringExport' | 'onClipboardCopy' | 'clipboardCopyCellDelimiter'>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridStrategyProcessing.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../../models/api/gridApiCommon';\nimport { GridStrategyProcessorName, GridStrategyProcessingLookup } from './gridStrategyProcessingApi';\nexport declare const GRID_DEFAULT_STRATEGY = \"none\";\nexport declare const GRID_STRATEGIES_PROCESSORS: {\n    [P in GridStrategyProcessorName]: GridStrategyProcessingLookup[P]['group'];\n};\n/**\n * Implements a variant of the Strategy Pattern (see https://en.wikipedia.org/wiki/Strategy_pattern)\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic that must only be applied if the right strategy is active.\n * For instance, the row grouping plugin has a custom filtering algorithm.\n * This algorithm must be applied by the filtering plugin if the row grouping is the current way of grouping rows,\n * but not if the tree data is the current way of grouping rows.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterStrategyProcessor` to register their processor.\n *   When the processor of the active strategy changes, it will fire `\"activeStrategyProcessorChange\"` to re-apply the processor.\n *\n * - `apiRef.current.setStrategyAvailability` to tell if their strategy can be used.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to apply the custom logic of the current strategy must use:\n *\n * - `apiRef.current.applyStrategyProcessor` to run the processor of the active strategy for a given processor name.\n *\n * - the \"strategyAvailabilityChange\" event to update something when the active strategy changes.\n *    Warning: Be careful not to apply the processor several times.\n *    For instance \"rowsSet\" is fired by `useGridRows` whenever the active strategy changes.\n *    So listening to both would most likely run your logic twice.\n *\n * - The \"activeStrategyProcessorChange\" event to update something when the processor of the active strategy changes.\n *\n * =====================================================================================================================\n *\n * Each processor name is part of a strategy group which can only have one active strategy at the time.\n * For now, there is only one strategy group named `rowTree` which customize\n * - row tree creation algorithm.\n * - sorting algorithm.\n * - filtering algorithm.\n */\nexport declare const useGridStrategyProcessing: (apiRef: React.MutableRefObject<GridPrivateApiCommon>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/useGridRegisterStrategyProcessor.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../../models/api/gridApiCommon';\nimport { GridStrategyProcessor } from './gridStrategyProcessingApi';\nexport declare const useGridRegisterStrategyProcessor: <Api extends GridPrivateApiCommon, G extends keyof import(\"./gridStrategyProcessingApi\").GridStrategyProcessingLookup>(apiRef: React.MutableRefObject<Api>, strategyName: string, group: G, processor: GridStrategyProcessor<G>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/index.d.ts":"export * from './gridStrategyProcessingApi';\nexport * from './useGridRegisterStrategyProcessor';\nexport * from './useGridStrategyProcessing';\n","node_modules/@mui/x-data-grid/hooks/core/strategyProcessing/gridStrategyProcessingApi.d.ts":"import { GridRowTreeCreationParams, GridRowTreeCreationValue, GridRowsState } from '../../features/rows/gridRowsInterfaces';\nimport { GridFilteringMethodParams, GridFilteringMethodValue, GridFilterState, GridVisibleRowsLookupState } from '../../features/filter/gridFilterState';\nimport { GridSortingMethodParams, GridSortingMethodValue } from '../../features/sorting/gridSortingState';\nexport type GridStrategyProcessorName = keyof GridStrategyProcessingLookup;\nexport type GridStrategyGroup = GridStrategyProcessingLookup[keyof GridStrategyProcessingLookup]['group'];\nexport interface GridStrategyProcessingLookup {\n    rowTreeCreation: {\n        group: 'rowTree';\n        params: GridRowTreeCreationParams;\n        value: GridRowTreeCreationValue;\n    };\n    filtering: {\n        group: 'rowTree';\n        params: GridFilteringMethodParams;\n        value: GridFilteringMethodValue;\n    };\n    sorting: {\n        group: 'rowTree';\n        params: GridSortingMethodParams;\n        value: GridSortingMethodValue;\n    };\n    visibleRowsLookupCreation: {\n        group: 'rowTree';\n        params: {\n            tree: GridRowsState['tree'];\n            filteredRowsLookup: GridFilterState['filteredRowsLookup'];\n        };\n        value: GridVisibleRowsLookupState;\n    };\n}\nexport type GridStrategyProcessor<P extends GridStrategyProcessorName> = (params: GridStrategyProcessingLookup[P]['params']) => GridStrategyProcessingLookup[P]['value'];\nexport interface GridStrategyProcessingApi {\n    /**\n     * Registers a strategy processor.\n     * If the strategy is active, it emits an event to notify the agents to re-apply the processor.\n     * @template P\n     * @param {string} strategyName The name of the strategy on which this processor should be applied.\n     * @param {GridStrategyProcessorName} processorName The name of the processor.\n     * @param {GridStrategyProcessor<P>} processor The processor to register.\n     * @returns {() => void} A function to unregister the processor.\n     */\n    registerStrategyProcessor: <P extends GridStrategyProcessorName>(strategyName: string, processorName: P, processor: GridStrategyProcessor<P>) => () => void;\n    /**\n     * Set a callback to know if a strategy is available.\n     * @param {GridStrategyGroup} strategyGroup The group for which we set strategy availability.\n     * @param {string} strategyName The name of the strategy.\n     * @param {boolean} callback A callback to know if this strategy is available.\n     */\n    setStrategyAvailability: (strategyGroup: GridStrategyGroup, strategyName: string, callback: () => boolean) => void;\n    /**\n     * Returns the name of the active strategy of a given strategy group\n     * @param {GridStrategyGroup} strategyGroup The group from which we want the active strategy.\n     * @returns {string} The name of the active strategy.\n     */\n    getActiveStrategy: (strategyGroup: GridStrategyGroup) => string;\n    /**\n     * Run the processor registered for the active strategy.\n     * @param {GridStrategyProcessorName} processorName The name of the processor to run.\n     * @param {GridStrategyProcessingLookup[P]['params']} params Additional params to pass to the processor.\n     * @returns {GridStrategyProcessingLookup[P]['value']} The value returned by the processor.\n     */\n    applyStrategyProcessor: <P extends GridStrategyProcessorName>(processorName: P, params: GridStrategyProcessingLookup[P]['params']) => GridStrategyProcessingLookup[P]['value'];\n}\n","node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeProcessor.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../../models/api/gridApiCommon';\nimport { GridPipeProcessor } from './gridPipeProcessingApi';\nexport declare const useGridRegisterPipeProcessor: <PrivateApi extends GridPrivateApiCommon, G extends keyof import(\"./gridPipeProcessingApi\").GridPipeProcessingLookup>(apiRef: React.MutableRefObject<PrivateApi>, group: G, callback: GridPipeProcessor<G>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridRegisterPipeApplier.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../../models/api/gridApiCommon';\nexport declare const useGridRegisterPipeApplier: <PrivateApi extends GridPrivateApiCommon, G extends keyof import(\"./gridPipeProcessingApi\").GridPipeProcessingLookup>(apiRef: React.MutableRefObject<PrivateApi>, group: G, callback: () => void) => void;\n","node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/useGridPipeProcessing.d.ts":"import * as React from 'react';\nimport { GridPrivateApiCommon } from '../../../models/api/gridApiCommon';\n/**\n * Implement the Pipeline Pattern\n *\n * More information and detailed example in (TODO add link to technical doc when ready)\n *\n * Some plugins contains custom logic to enrich data provided by other plugins or components.\n * For instance, the row grouping plugin needs to add / remove the grouping columns when the grid columns are updated.\n *\n * =====================================================================================================================\n *\n * The plugin containing the custom logic must use:\n *\n * - `useGridRegisterPipeProcessor` to register their processor.\n *\n * - `apiRef.current.requestPipeProcessorsApplication` to imperatively re-apply a group.\n *   This method should be used in last resort.\n *   Most of the time, the application should be triggered by an update on the deps of the processor.\n *\n * =====================================================================================================================\n *\n * The plugin or component that needs to enrich its data must use:\n *\n * - `apiRef.current.unstable_applyPipeProcessors` to run in chain all the processors of a given group.\n *\n * - `useGridRegisterPipeApplier` to re-apply the whole pipe when requested.\n *   The applier will be called when:\n *   * a processor is registered.\n *   * `apiRef.current.requestPipeProcessorsApplication` is called for the given group.\n */\nexport declare const useGridPipeProcessing: (apiRef: React.MutableRefObject<GridPrivateApiCommon>) => void;\n","node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/index.d.ts":"export * from './gridPipeProcessingApi';\nexport * from './useGridPipeProcessing';\nexport * from './useGridRegisterPipeProcessor';\nexport * from './useGridRegisterPipeApplier';\n","node_modules/@mui/x-data-grid/hooks/core/pipeProcessing/gridPipeProcessingApi.d.ts":"import * as React from 'react';\nimport { GridCellIndexCoordinates, GridScrollParams, GridColDef, GridCellCoordinates, GridCellParams, GridEditMode } from '../../../models';\nimport { GridInitialStateCommunity } from '../../../models/gridStateCommunity';\nimport { GridExportStateParams, GridRestoreStatePreProcessingContext, GridRestoreStatePreProcessingValue } from '../../features/statePersistence/gridStatePersistenceInterface';\nimport { GridHydrateColumnsValue } from '../../features/columns/gridColumnsInterfaces';\nimport { GridRowEntry, GridRowId } from '../../../models/gridRows';\nimport { GridHydrateRowsValue } from '../../features/rows/gridRowsInterfaces';\nimport { GridPreferencePanelsValue } from '../../features/preferencesPanel';\nexport type GridPipeProcessorGroup = keyof GridPipeProcessingLookup;\nexport interface GridPipeProcessingLookup {\n    columnMenu: {\n        value: Array<string>;\n        context: GridColDef;\n    };\n    exportState: {\n        value: GridInitialStateCommunity;\n        context: GridExportStateParams;\n    };\n    hydrateColumns: {\n        value: GridHydrateColumnsValue;\n    };\n    hydrateRows: {\n        value: GridHydrateRowsValue;\n    };\n    exportMenu: {\n        value: {\n            component: React.ReactElement;\n            componentName: string;\n        }[];\n        context: any;\n    };\n    preferencePanel: {\n        value: React.ReactNode;\n        context: GridPreferencePanelsValue;\n    };\n    restoreState: {\n        value: GridRestoreStatePreProcessingValue;\n        context: GridRestoreStatePreProcessingContext<GridInitialStateCommunity>;\n    };\n    rowHeight: {\n        value: Record<string, number>;\n        context: GridRowEntry;\n    };\n    scrollToIndexes: {\n        value: Partial<GridScrollParams>;\n        context: Partial<GridCellIndexCoordinates>;\n    };\n    rowClassName: {\n        value: string[];\n        context: GridRowId;\n    };\n    cellClassName: {\n        value: string[];\n        context: GridCellCoordinates;\n    };\n    isCellSelected: {\n        value: boolean;\n        context: GridCellCoordinates;\n    };\n    canUpdateFocus: {\n        value: boolean;\n        context: {\n            event: MouseEvent | React.KeyboardEvent;\n            cell: GridCellParams | null;\n        };\n    };\n    clipboardCopy: {\n        value: string;\n    };\n    canStartEditing: {\n        value: boolean;\n        context: {\n            event: React.KeyboardEvent;\n            cellParams: GridCellParams;\n            editMode: GridEditMode;\n        };\n    };\n}\nexport type GridPipeProcessor<P extends GridPipeProcessorGroup> = (value: GridPipeProcessingLookup[P]['value'], context: GridPipeProcessingLookup[P] extends {\n    context: any;\n} ? GridPipeProcessingLookup[P]['context'] : undefined) => GridPipeProcessingLookup[P]['value'];\ntype GridPipeProcessorsApplierArgs<P extends GridPipeProcessorGroup, T extends {\n    value: any;\n}> = T extends {\n    context: any;\n} ? [P, T['value'], T['context']] : [P, T['value']];\ntype GridPipeProcessorsApplier = <P extends GridPipeProcessorGroup>(...params: GridPipeProcessorsApplierArgs<P, GridPipeProcessingLookup[P]>) => GridPipeProcessingLookup[P]['value'];\nexport interface GridPipeProcessingApi {\n    /**\n     * Run all the processors registered for the given group.\n     * @template T\n     * @param {GridPipeProcessorGroup} group The group from which we want to apply the processors.\n     * @param {T['value']} value The initial value to pass to the first processor.\n     * @param {T['context]} context Context object that will be passed to each processor.\n     * @returns {T['value]} The value after passing through all pre-processors.\n     * @ignore - do not document.\n     */\n    unstable_applyPipeProcessors: GridPipeProcessorsApplier;\n}\nexport interface GridPipeProcessingPrivateApi {\n    /**\n     * Register a processor and run all the appliers of the group.\n     * @param {GridPipeProcessorGroup} group The group on which this processor should be applied.\n     * @param {string} id An unique and static identifier of the processor.\n     * @param {GridPipeProcessor} processor The processor to register.\n     * @returns {() => void} A function to unregister the processor.\n     */\n    registerPipeProcessor: <G extends GridPipeProcessorGroup>(group: GridPipeProcessorGroup, id: string, processor: GridPipeProcessor<G>) => () => void;\n    /**\n     * Register an applier.\n     * @param {GridPipeProcessorGroup} group The group of this applier\n     * @param {string} id An unique and static identifier of the applier.\n     * @param {() => void} applier The applier to register.\n     * @returns {() => void} A function to unregister the applier.\n     */\n    registerPipeApplier: (group: GridPipeProcessorGroup, id: string, applier: () => void) => () => void;\n    /**\n     * Imperatively run all the appliers of a group.\n     * Most of the time, the applier should run because a processor is re-registered,\n     * but sometimes we want to re-apply the processing even if the processor deps have not changed.\n     * This may occur when the change requires a `isDeepEqual` check.\n     * @param {GridPipeProcessorGroup} group The group to apply.\n     */\n    requestPipeProcessorsApplication: (group: GridPipeProcessorGroup) => void;\n}\nexport {};\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/index.d.ts":"export * from './GridFilterForm';\nexport * from './GridFilterInputValue';\nexport * from './GridFilterInputDate';\nexport * from './GridFilterInputSingleSelect';\nexport * from './GridFilterInputBoolean';\nexport * from './GridFilterInputValueProps';\nexport { GridFilterPanel } from './GridFilterPanel';\nexport type { GetColumnForNewFilterArgs } from './GridFilterPanel';\nexport * from './GridFilterInputMultipleValue';\nexport * from './GridFilterInputMultipleSingleSelect';\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/filterPanelUtils.d.ts":"import type { GridColDef, GridSingleSelectColDef, ValueOptions } from '../../../models/colDef/gridColDef';\nexport declare function isSingleSelectColDef(colDef: GridColDef | null): colDef is GridSingleSelectColDef;\nexport declare function getValueFromValueOptions(value: string, valueOptions: any[] | undefined, getOptionValue: NonNullable<GridSingleSelectColDef['getOptionValue']>): any;\nexport declare const getLabelFromValueOption: (valueOption: ValueOptions) => string;\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterPanel.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { GridFilterItem } from '../../../models/gridFilterItem';\nimport { GridFilterFormProps } from './GridFilterForm';\nimport { GridColDef, GridStateColDef } from '../../../models/colDef/gridColDef';\nexport interface GetColumnForNewFilterArgs {\n    currentFilters: GridFilterItem[];\n    columns: GridStateColDef[];\n}\nexport interface GridFilterPanelProps extends Pick<GridFilterFormProps, 'logicOperators' | 'columnsSort'> {\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * Function that returns the next filter item to be picked as default filter.\n     * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.\n     * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.\n     */\n    getColumnForNewFilter?: (args: GetColumnForNewFilterArgs) => GridColDef['field'] | null;\n    /**\n     * Props passed to each filter form.\n     */\n    filterFormProps?: Pick<GridFilterFormProps, 'columnsSort' | 'deleteIconProps' | 'logicOperatorInputProps' | 'operatorInputProps' | 'columnInputProps' | 'valueInputProps' | 'filterColumns'>;\n    /**\n     * If `true`, the `Add filter` button will not be displayed.\n     * @default false\n     */\n    disableAddFilterButton?: boolean;\n    /**\n     * If `true`, the `Remove all` button will be disabled\n     * @default false\n     */\n    disableRemoveAllButton?: boolean;\n    /**\n     * @ignore - do not document.\n     */\n    children?: React.ReactNode;\n}\ndeclare const getGridFilter: (col: GridStateColDef) => GridFilterItem;\ndeclare const GridFilterPanel: React.ForwardRefExoticComponent<GridFilterPanelProps & React.RefAttributes<HTMLDivElement>>;\n/**\n * Demos:\n * - [Filtering - overview](https://mui.com/x/react-data-grid/filtering/)\n *\n * API:\n * - [GridFilterPanel API](https://mui.com/x/api/data-grid/grid-filter-panel/)\n */\nexport { GridFilterPanel, getGridFilter };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValueProps.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { GridFilterItem } from '../../../models/gridFilterItem';\nimport type { GridApiCommon } from '../../../models/api/gridApiCommon';\nimport type { GridApiCommunity } from '../../../models/api/gridApiCommunity';\nexport type GridFilterInputValueProps<Api extends GridApiCommon = GridApiCommunity> = {\n    item: GridFilterItem;\n    applyValue: (value: GridFilterItem) => void;\n    apiRef: React.MutableRefObject<Api>;\n    focusElementRef?: React.Ref<any>;\n} & Pick<TextFieldProps, 'color' | 'error' | 'helperText' | 'size' | 'variant'>;\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputValue.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { GridFilterInputValueProps } from './GridFilterInputValueProps';\nexport type GridTypeFilterInputValueProps = GridFilterInputValueProps & TextFieldProps & {\n    type?: 'text' | 'number' | 'date' | 'datetime-local';\n    clearButton?: React.ReactNode | null;\n    /**\n     * It is `true` if the filter either has a value or an operator with no value\n     * required is selected (e.g. `isEmpty`)\n     */\n    isFilterActive?: boolean;\n};\ndeclare function GridFilterInputValue(props: GridTypeFilterInputValueProps): React.JSX.Element;\ndeclare namespace GridFilterInputValue {\n    var propTypes: any;\n}\nexport { GridFilterInputValue };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputSingleSelect.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { GridFilterInputValueProps } from './GridFilterInputValueProps';\nimport { GridSingleSelectColDef } from '../../../models/colDef/gridColDef';\nexport type GridFilterInputSingleSelectProps = GridFilterInputValueProps & TextFieldProps & Pick<GridSingleSelectColDef, 'getOptionLabel' | 'getOptionValue'> & {\n    clearButton?: React.ReactNode | null;\n    /**\n     * It is `true` if the filter either has a value or an operator with no value\n     * required is selected (e.g. `isEmpty`)\n     */\n    isFilterActive?: boolean;\n    type?: 'singleSelect';\n};\ndeclare function GridFilterInputSingleSelect(props: GridFilterInputSingleSelectProps): React.JSX.Element | null;\ndeclare namespace GridFilterInputSingleSelect {\n    var propTypes: any;\n}\nexport { GridFilterInputSingleSelect };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleValue.d.ts":"import * as React from 'react';\nimport { AutocompleteProps } from '@mui/material/Autocomplete';\nimport { GridFilterInputValueProps } from './GridFilterInputValueProps';\nexport type GridFilterInputMultipleValueProps = {\n    type?: 'text' | 'number';\n} & GridFilterInputValueProps & Omit<AutocompleteProps<string, true, false, true>, 'options' | 'renderInput'>;\ndeclare function GridFilterInputMultipleValue(props: GridFilterInputMultipleValueProps): React.JSX.Element;\ndeclare namespace GridFilterInputMultipleValue {\n    var propTypes: any;\n}\nexport { GridFilterInputMultipleValue };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputMultipleSingleSelect.d.ts":"import * as React from 'react';\nimport { AutocompleteProps } from '@mui/material/Autocomplete';\nimport { GridFilterInputValueProps } from './GridFilterInputValueProps';\nimport type { GridSingleSelectColDef, ValueOptions } from '../../../models/colDef/gridColDef';\nexport interface GridFilterInputMultipleSingleSelectProps extends Omit<AutocompleteProps<ValueOptions, true, false, true>, 'options' | 'renderInput' | 'onChange' | 'value' | 'id' | 'filterOptions' | 'isOptionEqualToValue' | 'multiple' | 'color' | 'getOptionLabel'>, Pick<GridSingleSelectColDef, 'getOptionLabel' | 'getOptionValue'>, GridFilterInputValueProps {\n    type?: 'singleSelect';\n}\ndeclare function GridFilterInputMultipleSingleSelect(props: GridFilterInputMultipleSingleSelectProps): React.JSX.Element;\ndeclare namespace GridFilterInputMultipleSingleSelect {\n    var propTypes: any;\n}\nexport { GridFilterInputMultipleSingleSelect };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputDate.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { GridFilterInputValueProps } from './GridFilterInputValueProps';\nexport type GridFilterInputDateProps = GridFilterInputValueProps & TextFieldProps & {\n    type?: 'date' | 'datetime-local';\n    clearButton?: React.ReactNode | null;\n    /**\n     * It is `true` if the filter either has a value or an operator with no value\n     * required is selected (e.g. `isEmpty`)\n     */\n    isFilterActive?: boolean;\n};\ndeclare function GridFilterInputDate(props: GridFilterInputDateProps): React.JSX.Element;\ndeclare namespace GridFilterInputDate {\n    var propTypes: any;\n}\nexport { GridFilterInputDate };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterInputBoolean.d.ts":"import * as React from 'react';\nimport { TextFieldProps } from '@mui/material/TextField';\nimport { GridFilterInputValueProps } from './GridFilterInputValueProps';\nexport type GridFilterInputBooleanProps = GridFilterInputValueProps & TextFieldProps & {\n    clearButton?: React.ReactNode | null;\n    /**\n     * It is `true` if the filter either has a value or an operator with no value\n     * required is selected (e.g. `isEmpty`)\n     */\n    isFilterActive?: boolean;\n};\ndeclare function GridFilterInputBoolean(props: GridFilterInputBooleanProps): React.JSX.Element;\ndeclare namespace GridFilterInputBoolean {\n    var propTypes: any;\n}\nexport { GridFilterInputBoolean };\n","node_modules/@mui/x-data-grid/components/panel/filterPanel/GridFilterForm.d.ts":"import * as React from 'react';\nimport { GridFilterItem, GridLogicOperator } from '../../../models/gridFilterItem';\nimport { GridColDef, GridStateColDef } from '../../../models/colDef/gridColDef';\nexport interface FilterColumnsArgs {\n    field: GridColDef['field'];\n    columns: GridStateColDef[];\n    currentFilters: GridFilterItem[];\n}\nexport interface GridFilterFormProps {\n    /**\n     * The [[GridFilterItem]] representing this form.\n     */\n    item: GridFilterItem;\n    /**\n     * If `true`, the logic operator field is rendered.\n     * The field will be invisible if `showMultiFilterOperators` is also `true`.\n     */\n    hasMultipleFilters: boolean;\n    /**\n     * If `true`, the logic operator field is visible.\n     */\n    showMultiFilterOperators?: boolean;\n    /**\n     * The current logic operator applied.\n     */\n    multiFilterOperator?: GridLogicOperator;\n    /**\n     * If `true`, disables the logic operator field but still renders it.\n     */\n    disableMultiFilterOperator?: boolean;\n    /**\n     * A ref allowing to set imperative focus.\n     * It can be passed to the el\n     */\n    focusElementRef?: React.Ref<any>;\n    /**\n     * Callback called when the operator, column field or value is changed.\n     * @param {GridFilterItem} item The updated [[GridFilterItem]].\n     */\n    applyFilterChanges: (item: GridFilterItem) => void;\n    /**\n     * Callback called when the logic operator is changed.\n     * @param {GridLogicOperator} operator The new logic operator.\n     */\n    applyMultiFilterOperatorChanges: (operator: GridLogicOperator) => void;\n    /**\n     * Callback called when the delete button is clicked.\n     * @param {GridFilterItem} item The deleted [[GridFilterItem]].\n     */\n    deleteFilter: (item: GridFilterItem) => void;\n    /**\n     * Allows to filter the columns displayed in the filter form.\n     * @param {FilterColumnsArgs} args The columns of the grid and name of field.\n     * @returns {GridColDef['field'][]} The filtered fields array.\n     */\n    filterColumns?: (args: FilterColumnsArgs) => GridColDef['field'][];\n    /**\n     * Sets the available logic operators.\n     * @default [GridLogicOperator.And, GridLogicOperator.Or]\n     */\n    logicOperators?: GridLogicOperator[];\n    /**\n     * Changes how the options in the columns selector should be ordered.\n     * If not specified, the order is derived from the `columns` prop.\n     */\n    columnsSort?: 'asc' | 'desc';\n    /**\n     * Props passed to the delete icon.\n     * @default {}\n     */\n    deleteIconProps?: any;\n    /**\n     * Props passed to the logic operator input component.\n     * @default {}\n     */\n    logicOperatorInputProps?: any;\n    /**\n     * Props passed to the operator input component.\n     * @default {}\n     */\n    operatorInputProps?: any;\n    /**\n     * Props passed to the column input component.\n     * @default {}\n     */\n    columnInputProps?: any;\n    /**\n     * Props passed to the value input component.\n     * @default {}\n     */\n    valueInputProps?: any;\n    /**\n     * @ignore - do not document.\n     */\n    children?: React.ReactNode;\n}\ndeclare const GridFilterForm: React.ForwardRefExoticComponent<GridFilterFormProps & React.RefAttributes<HTMLDivElement>>;\n/**\n * Demos:\n * - [Filtering - overview](https://mui.com/x/react-data-grid/filtering/)\n *\n * API:\n * - [GridFilterForm API](https://mui.com/x/api/data-grid/grid-filter-form/)\n */\nexport { GridFilterForm };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/index.d.ts":"export * from './GridColumnHeaderMenu';\nexport * from './GridColumnMenuProps';\nexport * from './GridColumnMenuItemProps';\nexport * from './GridColumnMenuContainer';\nexport { GridGenericColumnMenu } from './GridColumnMenu';\nexport * from './menuItems';\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuProps.d.ts":"import * as React from 'react';\nimport { GridColDef } from '../../../models/colDef/gridColDef';\nimport { GridColumnMenuRootProps } from '../../../hooks/features/columnMenu';\nexport interface GridColumnMenuContainerProps extends React.HTMLAttributes<HTMLUListElement> {\n    hideMenu: (event: React.SyntheticEvent) => void;\n    colDef: GridColDef;\n    open: boolean;\n    id?: string;\n    labelledby?: string;\n}\nexport interface GridGenericColumnMenuProps extends GridColumnMenuRootProps, GridColumnMenuContainerProps {\n}\nexport interface GridColumnMenuProps extends Omit<GridGenericColumnMenuProps, 'defaultSlots' | 'defaultSlotProps'> {\n}\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuItemProps.d.ts":"import * as React from 'react';\nimport { GridColDef } from '../../../models/colDef/gridColDef';\nexport interface GridColumnMenuItemProps {\n    colDef: GridColDef;\n    onClick: (event: React.MouseEvent<any>) => void;\n    [key: string]: any;\n}\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenuContainer.d.ts":"import * as React from 'react';\nimport { GridColumnMenuContainerProps } from './GridColumnMenuProps';\ndeclare const GridColumnMenuContainer: React.ForwardRefExoticComponent<GridColumnMenuContainerProps & React.RefAttributes<HTMLUListElement>>;\nexport { GridColumnMenuContainer };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnMenu.d.ts":"import * as React from 'react';\nimport { GridColumnMenuColumnsItem } from './menuItems/GridColumnMenuColumnsItem';\nimport { GridColumnMenuFilterItem } from './menuItems/GridColumnMenuFilterItem';\nimport { GridColumnMenuSortItem } from './menuItems/GridColumnMenuSortItem';\nimport { GridColumnMenuProps, GridGenericColumnMenuProps } from './GridColumnMenuProps';\nexport declare const GRID_COLUMN_MENU_SLOTS: {\n    columnMenuSortItem: typeof GridColumnMenuSortItem;\n    columnMenuFilterItem: typeof GridColumnMenuFilterItem;\n    columnMenuColumnsItem: typeof GridColumnMenuColumnsItem;\n};\nexport declare const GRID_COLUMN_MENU_SLOT_PROPS: {\n    columnMenuSortItem: {\n        displayOrder: number;\n    };\n    columnMenuFilterItem: {\n        displayOrder: number;\n    };\n    columnMenuColumnsItem: {\n        displayOrder: number;\n    };\n};\ndeclare const GridGenericColumnMenu: React.ForwardRefExoticComponent<GridGenericColumnMenuProps & React.RefAttributes<HTMLUListElement>>;\ndeclare const GridColumnMenu: React.ForwardRefExoticComponent<GridColumnMenuProps & React.RefAttributes<HTMLUListElement>>;\nexport { GridColumnMenu, GridGenericColumnMenu };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/GridColumnHeaderMenu.d.ts":"import * as React from 'react';\nimport { GridMenuProps } from '../GridMenu';\nexport interface GridColumnHeaderMenuProps {\n    columnMenuId?: string;\n    columnMenuButtonId?: string;\n    ContentComponent: React.JSXElementConstructor<any>;\n    contentComponentProps?: any;\n    field: string;\n    open: boolean;\n    target: HTMLElement | null;\n    onExited?: GridMenuProps['onExited'];\n}\ndeclare function GridColumnHeaderMenu({ columnMenuId, columnMenuButtonId, ContentComponent, contentComponentProps, field, open, target, onExited, }: GridColumnHeaderMenuProps): React.JSX.Element | null;\ndeclare namespace GridColumnHeaderMenu {\n    var propTypes: any;\n}\nexport { GridColumnHeaderMenu };\n","node_modules/@mui/x-data-grid/hooks/features/export/serializers/csvSerializer.d.ts":"/// <reference types=\"react\" />\nimport type { GridCsvExportOptions, GridRowId } from '../../../../models';\nimport type { GridCellParams } from '../../../../models/params/gridCellParams';\nimport type { GridStateColDef } from '../../../../models/colDef/gridColDef';\nimport type { GridApiCommunity } from '../../../../models/api/gridApiCommunity';\nexport declare const serializeCellValue: (cellParams: GridCellParams, options: {\n    delimiterCharacter: string;\n    ignoreValueFormatter: boolean;\n    shouldAppendQuotes: boolean;\n}) => any;\ninterface BuildCSVOptions {\n    columns: GridStateColDef[];\n    rowIds: GridRowId[];\n    delimiterCharacter: NonNullable<GridCsvExportOptions['delimiter']>;\n    includeHeaders: NonNullable<GridCsvExportOptions['includeHeaders']>;\n    includeColumnGroupsHeaders: NonNullable<GridCsvExportOptions['includeColumnGroupsHeaders']>;\n    ignoreValueFormatter: boolean;\n    apiRef: React.MutableRefObject<GridApiCommunity>;\n    shouldAppendQuotes: boolean;\n}\nexport declare function buildCSV(options: BuildCSVOptions): string;\nexport {};\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/index.d.ts":"export * from './GridColumnMenuColumnsItem';\nexport * from './GridColumnMenuManageItem';\nexport * from './GridColumnMenuFilterItem';\nexport * from './GridColumnMenuHideItem';\nexport * from './GridColumnMenuSortItem';\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuSortItem.d.ts":"import * as React from 'react';\nimport { GridColumnMenuItemProps } from '../GridColumnMenuItemProps';\ndeclare function GridColumnMenuSortItem(props: GridColumnMenuItemProps): React.JSX.Element | null;\ndeclare namespace GridColumnMenuSortItem {\n    var propTypes: any;\n}\nexport { GridColumnMenuSortItem };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuManageItem.d.ts":"import * as React from 'react';\nimport { GridColumnMenuItemProps } from '../GridColumnMenuItemProps';\ndeclare function GridColumnMenuManageItem(props: GridColumnMenuItemProps): React.JSX.Element | null;\ndeclare namespace GridColumnMenuManageItem {\n    var propTypes: any;\n}\nexport { GridColumnMenuManageItem };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuHideItem.d.ts":"import * as React from 'react';\nimport { GridColumnMenuItemProps } from '../GridColumnMenuItemProps';\ndeclare function GridColumnMenuHideItem(props: GridColumnMenuItemProps): React.JSX.Element | null;\ndeclare namespace GridColumnMenuHideItem {\n    var propTypes: any;\n}\nexport { GridColumnMenuHideItem };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuFilterItem.d.ts":"import * as React from 'react';\nimport { GridColumnMenuItemProps } from '../GridColumnMenuItemProps';\ndeclare function GridColumnMenuFilterItem(props: GridColumnMenuItemProps): React.JSX.Element | null;\ndeclare namespace GridColumnMenuFilterItem {\n    var propTypes: any;\n}\nexport { GridColumnMenuFilterItem };\n","node_modules/@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem.d.ts":"import * as React from 'react';\nimport { GridColumnMenuItemProps } from '../GridColumnMenuItemProps';\ndeclare function GridColumnMenuColumnsItem(props: GridColumnMenuItemProps): React.JSX.Element;\ndeclare namespace GridColumnMenuColumnsItem {\n    var propTypes: any;\n}\nexport { GridColumnMenuColumnsItem };\n","node_modules/@mui/x-data-grid-pro/package.json":"{\n  \"name\": \"@mui/x-data-grid-pro\",\n  \"version\": \"6.19.8\",\n  \"description\": \"The Pro plan edition of the data grid component (MUI X).\",\n  \"author\": \"MUI Team\",\n  \"main\": \"./node/index.js\",\n  \"license\": \"SEE LICENSE IN LICENSE\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/mui-x/issues\"\n  },\n  \"homepage\": \"https://mui.com/x/react-data-grid/\",\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"material-ui\",\n    \"mui\",\n    \"react-table\",\n    \"table\",\n    \"datatable\",\n    \"data-table\",\n    \"datagrid\",\n    \"data-grid\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/mui-x.git\",\n    \"directory\": \"packages/grid/x-data-grid-pro\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.2\",\n    \"@mui/utils\": \"^5.14.16\",\n    \"@mui/x-data-grid\": \"6.19.8\",\n    \"@mui/x-license-pro\": \"6.10.2\",\n    \"@types/format-util\": \"^1.0.3\",\n    \"clsx\": \"^2.0.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"reselect\": \"^4.1.8\"\n  },\n  \"peerDependencies\": {\n    \"@mui/material\": \"^5.4.1\",\n    \"@mui/system\": \"^5.4.1\",\n    \"react\": \"^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"setupFiles\": [\n    \"<rootDir>/src/setupTests.js\"\n  ],\n  \"engines\": {\n    \"node\": \">=14.0.0\"\n  },\n  \"private\": false,\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/x-data-grid-pro/index.d.ts":"import './typeOverloads';\nexport { LicenseInfo } from '@mui/x-license-pro';\nexport * from '@mui/x-data-grid/components';\nexport * from '@mui/x-data-grid/constants';\nexport * from '@mui/x-data-grid/hooks';\nexport * from '@mui/x-data-grid/locales';\nexport * from '@mui/x-data-grid/models';\nexport * from '@mui/x-data-grid/context';\nexport * from '@mui/x-data-grid/utils';\nexport * from '@mui/x-data-grid/colDef';\nexport type { GridExportFormat, GridExportExtension, GridToolbarExportProps, } from '@mui/x-data-grid';\nexport * from './DataGridPro';\nexport * from './hooks';\nexport * from './models';\nexport * from './components';\nexport * from './utils';\nexport type { DataGridProProps, GridExperimentalProFeatures } from './models/dataGridProProps';\nexport { useGridApiContext, useGridApiRef, useGridRootProps } from './typeOverloads/reexports';\nexport type { GridApi, GridInitialState, GridState } from './typeOverloads/reexports';\nexport { GridColumnMenu, GRID_COLUMN_MENU_SLOTS, GRID_COLUMN_MENU_SLOT_PROPS, } from './components/reexports';\nexport { GridColumnHeaders } from './components/GridColumnHeaders';\n","node_modules/@mui/x-data-grid-pro/utils/releaseInfo.d.ts":"export declare const getReleaseInfo: () => any;\n","node_modules/@mui/x-data-grid-pro/utils/index.d.ts":"export * from './tree';\n","node_modules/@mui/x-data-grid-pro/utils/domUtils.d.ts":"import { GridPrivateApiPro } from '../models/gridApiPro';\nexport declare function getFieldFromHeaderElem(colCellEl: Element): string;\nexport declare function findHeaderElementFromField(elem: Element, field: string): Element | null;\nexport declare function findGroupHeaderElementsFromField(elem: Element, field: string): Element[];\nexport declare function findGridCellElementsFromCol(col: HTMLElement, api: GridPrivateApiPro): Element[];\nexport declare function findGridHeader(api: GridPrivateApiPro, field: string): Element | null;\nexport declare function findGridCells(api: GridPrivateApiPro, field: string): Element[];\n","node_modules/@mui/x-data-grid-pro/typeOverloads/reexports.d.ts":"import type { GridApiPro } from '../models/gridApiPro';\nimport type { GridInitialStatePro, GridStatePro } from '../models/gridStatePro';\nexport { useGridApiContext } from '../hooks/utils/useGridApiContext';\nexport { useGridApiRef } from '../hooks/utils/useGridApiRef';\nexport { useGridRootProps } from '../hooks/utils/useGridRootProps';\n/**\n * The full grid API.\n */\nexport type GridApi = GridApiPro;\n/**\n * The state of `DataGridPro`.\n */\nexport type GridState = GridStatePro;\n/**\n * The initial state of `DataGridPro`.\n */\nexport type GridInitialState = GridInitialStatePro;\n","node_modules/@mui/x-data-grid-pro/typeOverloads/modules.d.ts":"/// <reference types=\"react\" />\nimport { GridRowId } from '@mui/x-data-grid';\nimport type { GridRowScrollEndParams, GridRowOrderChangeParams, GridFetchRowsParams } from '../models';\nimport type { GridHeaderFilterCellProps } from '../components/headerFiltering/GridHeaderFilterCell';\nimport type { GridColumnPinningInternalCache, GridPinnedColumns } from '../hooks/features/columnPinning/gridColumnPinningInterface';\nimport type { GridCanBeReorderedPreProcessingContext } from '../hooks/features/columnReorder/columnReorderInterfaces';\nimport { GridRowPinningInternalCache } from '../hooks/features/rowPinning/gridRowPinningInterface';\nexport interface GridColDefPro {\n    /**\n     * Allows to render a component in the column header filter cell.\n     * @param {GridHeaderFilterCellProps} params Object containing parameters for the renderer.\n     * @returns {React.ReactNode} The element to be rendered.\n     */\n    renderHeaderFilter?: (params: GridHeaderFilterCellProps) => React.ReactNode;\n}\nexport interface GridControlledStateEventLookupPro {\n    /**\n     * Fired when the open detail panels are changed.\n     * @ignore - do not document.\n     */\n    detailPanelsExpandedRowIdsChange: {\n        params: GridRowId[];\n    };\n    /**\n     * Fired when the pinned columns is changed.\n     * @ignore - do not document.\n     */\n    pinnedColumnsChange: {\n        params: GridPinnedColumns;\n    };\n}\nexport interface GridEventLookupPro {\n    /**\n     * Fired when scrolling to the bottom of the grid viewport.\n     */\n    rowsScrollEnd: {\n        params: GridRowScrollEndParams;\n    };\n    /**\n     * Fired when the user ends reordering a row.\n     */\n    rowOrderChange: {\n        params: GridRowOrderChangeParams;\n    };\n    /**\n     * Fired when a new batch of rows is requested to be loaded. Called with a [[GridFetchRowsParams]] object.\n     */\n    fetchRows: {\n        params: GridFetchRowsParams;\n    };\n}\nexport interface GridPipeProcessingLookupPro {\n    canBeReordered: {\n        value: boolean;\n        context: GridCanBeReorderedPreProcessingContext;\n    };\n}\nexport interface GridApiCachesPro {\n    columnPinning: GridColumnPinningInternalCache;\n    pinnedRows: GridRowPinningInternalCache;\n}\ndeclare module '@mui/x-data-grid' {\n    interface GridEventLookup extends GridEventLookupPro {\n    }\n    interface GridControlledStateEventLookup extends GridControlledStateEventLookupPro {\n    }\n    interface GridPipeProcessingLookup extends GridPipeProcessingLookupPro {\n    }\n}\ndeclare module '@mui/x-data-grid/internals' {\n    interface GridApiCaches extends GridApiCachesPro {\n    }\n    interface GridBaseColDef extends GridColDefPro {\n    }\n}\n","node_modules/@mui/x-data-grid-pro/typeOverloads/index.d.ts":"export * from './modules';\n","node_modules/@mui/x-data-grid-pro/models/index.d.ts":"export * from './gridApiPro';\nexport * from './gridGroupingColDefOverride';\nexport * from './gridRowScrollEndParams';\nexport * from './gridRowOrderChangeParams';\nexport * from './gridFetchRowsParams';\nexport * from './gridProSlotsComponent';\nexport * from './gridProIconSlotsComponent';\n","node_modules/@mui/x-data-grid-pro/models/gridStatePro.d.ts":"import { GridInitialState as GridInitialStateCommunity, GridState as GridStateCommunity } from '@mui/x-data-grid';\nimport type { GridDetailPanelState, GridDetailPanelInitialState, GridColumnReorderState, GridColumnResizeState, GridColumnPinningState } from '../hooks';\n/**\n * The state of `DataGridPro`.\n */\nexport interface GridStatePro extends GridStateCommunity {\n    columnReorder: GridColumnReorderState;\n    columnResize: GridColumnResizeState;\n    pinnedColumns: GridColumnPinningState;\n    detailPanel: GridDetailPanelState;\n}\n/**\n * The initial state of `DataGridPro`.\n */\nexport interface GridInitialStatePro extends GridInitialStateCommunity {\n    pinnedColumns?: GridColumnPinningState;\n    detailPanel?: GridDetailPanelInitialState;\n}\n","node_modules/@mui/x-data-grid-pro/models/gridRowScrollEndParams.d.ts":"import { GridColDef } from '@mui/x-data-grid';\n/**\n * Object passed as parameter in the onRowsScrollEnd callback.\n */\nexport interface GridRowScrollEndParams {\n    /**\n     * The number of rows that fit in the viewport.\n     */\n    viewportPageSize: number;\n    /**\n     * The number of rows allocated for the rendered zone.\n     */\n    visibleRowsCount: number;\n    /**\n     * The grid visible columns.\n     */\n    visibleColumns: GridColDef[];\n}\n","node_modules/@mui/x-data-grid-pro/models/gridRowOrderChangeParams.d.ts":"import { GridRowModel } from '@mui/x-data-grid';\n/**\n * Object passed as parameter of the row order change event.\n */\nexport interface GridRowOrderChangeParams {\n    /**\n     * The row data.\n     */\n    row: GridRowModel;\n    /**\n     * The target row index.\n     */\n    targetIndex: number;\n    /**\n     * The old row index.\n     */\n    oldIndex: number;\n}\n","node_modules/@mui/x-data-grid-pro/models/gridProSlotsComponent.d.ts":"/// <reference types=\"react\" />\nimport { GridSlotsComponent } from '@mui/x-data-grid';\nimport { UncapitalizeObjectKeys } from '@mui/x-data-grid/internals';\nimport { GridProIconSlotsComponent } from './gridProIconSlotsComponent';\n/**\n * Grid components React prop interface containing all the overridable components\n * for Pro package\n */\nexport interface GridProSlotsComponent extends GridSlotsComponent, GridProIconSlotsComponent {\n    /**\n     * Component responsible for showing menu adornment in Header filter row\n     * @default GridHeaderFilterCell\n     */\n    HeaderFilterCell: React.JSXElementConstructor<any>;\n    /**\n     * Component responsible for showing menu in Header filter row\n     * @default GridHeaderFilterMenu\n     */\n    HeaderFilterMenu: React.JSXElementConstructor<any> | null;\n}\nexport interface UncapitalizedGridProSlotsComponent extends UncapitalizeObjectKeys<GridProSlotsComponent> {\n}\n","node_modules/@mui/x-data-grid-pro/models/gridProSlotProps.d.ts":"import { GridSlotsComponentsProps } from '@mui/x-data-grid/internals';\nimport type { GridHeaderFilterCellProps } from '../components/headerFiltering/GridHeaderFilterCell';\nexport interface HeaderFilterCellPropsOverrides {\n}\ntype SlotProps<Props, Overrides> = Partial<Props & Overrides>;\nexport interface GridProSlotProps extends GridSlotsComponentsProps {\n    headerFilterCell?: SlotProps<GridHeaderFilterCellProps, HeaderFilterCellPropsOverrides>;\n}\nexport {};\n","node_modules/@mui/x-data-grid-pro/models/gridProIconSlotsComponent.d.ts":"import * as React from 'react';\nexport interface GridProIconSlotsComponent {\n    /**\n     * Icon displayed in column menu for left pinning\n     * @default GridPushPinLeftIcon\n     */\n    ColumnMenuPinLeftIcon: React.JSXElementConstructor<any>;\n    /**\n     * Icon displayed in column menu for right pinning\n     * @default GridPushPinRightIcon\n     */\n    ColumnMenuPinRightIcon: React.JSXElementConstructor<any>;\n}\n","node_modules/@mui/x-data-grid-pro/models/gridGroupingColDefOverride.d.ts":"import { GridColDef, GridValidRowModel } from '@mui/x-data-grid';\nexport interface GridGroupingColDefOverride<R extends GridValidRowModel = any> extends Omit<GridColDef<R>, 'editable' | 'valueSetter' | 'field' | 'type' | 'preProcessEditCellProps' | 'renderEditCell' | 'groupable'> {\n    /**\n     * The field from which we want to apply the sorting and the filtering for the grouping column.\n     * It is only useful when `props.rowGroupingColumnMode === \"multiple\"` to decide which grouping criteria should be used for sorting and filtering.\n     * Do not have any effect when building the tree with the `props.treeData` feature.\n     * @default The sorting and filtering is applied based on the leaf field in any, otherwise based on top level grouping criteria.\n     */\n    mainGroupingCriteria?: string;\n    /**\n     * The field from which we want to render the leaves of the tree.\n     * Do not have any effect when building the tree with the `props.treeData` feature.\n     */\n    leafField?: string;\n    /**\n     * If `true`, the grouping cells will not render the amount of descendants.\n     * @default false\n     */\n    hideDescendantCount?: boolean;\n}\nexport interface GridGroupingColDefOverrideParams {\n    /**\n     * The name of the grouping algorithm currently building the grouping column.\n     */\n    groupingName: string;\n    /**\n     * The fields of the columns from which we want to group the values on this new grouping column.\n     */\n    fields: string[];\n}\n","node_modules/@mui/x-data-grid-pro/models/gridFetchRowsParams.d.ts":"import { GridFilterModel, GridSortModel } from '@mui/x-data-grid/models';\n/**\n * Object passed as parameter to the [[onFetchRows]] option.\n */\nexport interface GridFetchRowsParams {\n    /**\n     * The index of the first row to render.\n     */\n    firstRowToRender: number;\n    /**\n     * The index of the last row to render.\n     */\n    lastRowToRender: number;\n    /**\n     * The sort model used to sort the grid.\n     */\n    sortModel: GridSortModel;\n    /**\n     * The filter model.\n     */\n    filterModel: GridFilterModel;\n}\n","node_modules/@mui/x-data-grid-pro/models/gridApiPro.d.ts":"import { GridApiCommon, GridColumnReorderApi, GridRowMultiSelectionApi, GridRowProApi } from '@mui/x-data-grid';\nimport { GridPrivateOnlyApiCommon } from '@mui/x-data-grid/internals';\nimport { GridInitialStatePro, GridStatePro } from './gridStatePro';\nimport type { GridColumnPinningApi, GridColumnResizeApi, GridDetailPanelApi, GridRowPinningApi, GridDetailPanelPrivateApi } from '../hooks';\nimport type { DataGridProProcessedProps } from './dataGridProProps';\n/**\n * The api of `DataGridPro`.\n */\nexport interface GridApiPro extends GridApiCommon<GridStatePro, GridInitialStatePro>, GridRowProApi, GridColumnPinningApi, GridColumnResizeApi, GridDetailPanelApi, GridRowPinningApi, GridRowMultiSelectionApi, GridColumnReorderApi {\n}\nexport interface GridPrivateApiPro extends GridApiPro, GridPrivateOnlyApiCommon<GridApiPro, GridPrivateApiPro, DataGridProProcessedProps>, GridDetailPanelPrivateApi {\n}\n","node_modules/@mui/x-data-grid-pro/models/dataSource.d.ts":"import { GridSortModel, GridFilterModel, GridColDef, GridRowModel, GridPaginationModel } from '@mui/x-data-grid';\ninterface GetRowsParams {\n    sortModel: GridSortModel;\n    filterModel: GridFilterModel;\n    /**\n     * Alternate to `start` and `end`, maps to `GridPaginationModel` interface.\n     */\n    paginationModel: GridPaginationModel;\n    /**\n     * First row index to fetch (number) or cursor information (number | string).\n     */\n    start: number | string;\n    /**\n     * Last row index to fetch.\n     */\n    end: number;\n    /**\n     * Array of keys returned by `getGroupKey` of all the parent rows until the row for which the data is requested\n     * `getGroupKey` prop must be implemented to use this.\n     * Useful for `treeData` and `rowGrouping` only.\n     */\n    groupKeys: string[];\n    /**\n     * List of grouped columns (only applicable with `rowGrouping`).\n     */\n    groupFields: GridColDef['field'][];\n}\ninterface GetRowsResponse {\n    rows: GridRowModel[];\n    /**\n     * To reflect updates in total `rowCount` (optional).\n     * Useful when the `rowCount` is inaccurate (e.g. when filtering) or not available upfront.\n     */\n    rowCount?: number;\n    /**\n     * Additional `pageInfo` to help the grid determine if there are more rows to fetch (corner-cases).\n     * `hasNextPage`: When row count is unknown/inaccurate, if `truncated` is set or rowCount is not known, data will keep loading until `hasNextPage` is `false`\n     * `truncated`: To reflect `rowCount` is inaccurate (will trigger `x-y of many` in pagination after the count of rows fetched is greater than provided `rowCount`)\n     * It could be useful with:\n     * 1. Cursor based pagination:\n     *   When rowCount is not known, grid will check for `hasNextPage` to determine\n     *   if there are more rows to fetch.\n     * 2. Inaccurate `rowCount`:\n     *   `truncated: true` will let the grid know that `rowCount` is estimated/truncated.\n     *   Thus `hasNextPage` will come into play to check more rows are available to fetch after the number becomes >= provided `rowCount`\n     */\n    pageInfo?: {\n        hasNextPage?: boolean;\n        truncated?: number;\n    };\n}\nexport interface DataSource {\n    /**\n     * Fetcher Functions:\n     * - `getRows` is required\n     * - `updateRow` is optional\n     *\n     * `getRows` will be used by the grid to fetch data for the current page or children for the current parent group.\n     * It may return a `rowCount` to update the total count of rows in the grid along with the optional `pageInfo`.\n     */\n    getRows(params: GetRowsParams): Promise<GetRowsResponse>;\n    updateRow?(rows: GridRowModel): Promise<any>;\n}\nexport {};\n","node_modules/@mui/x-data-grid-pro/models/dataGridProProps.d.ts":"import * as React from 'react';\nimport { GridEventListener, GridCallbackDetails, GridRowParams, GridRowId, GridValidRowModel, GridGroupNode, GridFeatureMode } from '@mui/x-data-grid';\nimport { GridExperimentalFeatures, DataGridPropsWithoutDefaultValue, DataGridPropsWithDefaultValues, DataGridPropsWithComplexDefaultValueAfterProcessing, DataGridPropsWithComplexDefaultValueBeforeProcessing } from '@mui/x-data-grid/internals';\nimport type { GridPinnedColumns } from '../hooks/features/columnPinning';\nimport type { GridPinnedRowsProp } from '../hooks/features/rowPinning';\nimport { GridApiPro } from './gridApiPro';\nimport { GridGroupingColDefOverride, GridGroupingColDefOverrideParams } from './gridGroupingColDefOverride';\nimport { GridInitialStatePro } from './gridStatePro';\nimport { GridProSlotsComponent, UncapitalizedGridProSlotsComponent } from './gridProSlotsComponent';\nimport type { GridProSlotProps } from './gridProSlotProps';\nimport { GridAutosizeOptions } from '../hooks';\nexport interface GridExperimentalProFeatures extends GridExperimentalFeatures {\n    /**\n     * Enables the data grid to lazy load rows while scrolling.\n     */\n    lazyLoading: boolean;\n}\ninterface DataGridProPropsWithComplexDefaultValueBeforeProcessing extends Omit<DataGridPropsWithComplexDefaultValueBeforeProcessing, 'components'> {\n    /**\n     * Overridable components.\n     * @deprecated Use the `slots` prop instead.\n     */\n    components?: Partial<GridProSlotsComponent>;\n    /**\n     * Overridable components.\n     */\n    slots?: Partial<UncapitalizedGridProSlotsComponent>;\n}\n/**\n * The props users can give to the `DataGridProProps` component.\n */\nexport interface DataGridProProps<R extends GridValidRowModel = any> extends Omit<Partial<DataGridProPropsWithDefaultValue> & DataGridProPropsWithComplexDefaultValueBeforeProcessing & DataGridProPropsWithoutDefaultValue<R>, DataGridProForcedPropsKey> {\n}\ninterface DataGridProPropsWithComplexDefaultValueAfterProcessing extends Omit<DataGridPropsWithComplexDefaultValueAfterProcessing, 'slots'> {\n    slots: UncapitalizedGridProSlotsComponent;\n}\n/**\n * The props of the `DataGridPro` component after the pre-processing phase.\n */\nexport interface DataGridProProcessedProps<R extends GridValidRowModel = any> extends DataGridProPropsWithDefaultValue, DataGridProPropsWithComplexDefaultValueAfterProcessing, Omit<DataGridProPropsWithoutDefaultValue<R>, 'componentsProps'> {\n}\nexport type DataGridProForcedPropsKey = 'signature';\n/**\n * The `DataGridPro` options with a default value overridable through props\n * None of the entry of this interface should be optional, they all have default values and `DataGridProps` already applies a `Partial<DataGridSimpleOptions>` for the public interface\n * The controlled model do not have a default value at the prop processing level, so they must be defined in `DataGridOtherProps`\n */\nexport interface DataGridProPropsWithDefaultValue extends DataGridPropsWithDefaultValues {\n    /**\n     * Set the area in `px` at the bottom of the grid viewport where onRowsScrollEnd is called.\n     * @default 80\n     */\n    scrollEndThreshold: number;\n    /**\n     * If `true`, the rows will be gathered in a tree structure according to the `getTreeDataPath` prop.\n     * @default false\n     */\n    treeData: boolean;\n    /**\n     * If above 0, the row children will be expanded up to this depth.\n     * If equal to -1, all the row children will be expanded.\n     * @default 0\n     */\n    defaultGroupingExpansionDepth: number;\n    /**\n     * Determines if a group should be expanded after its creation.\n     * This prop takes priority over the `defaultGroupingExpansionDepth` prop.\n     * @param {GridGroupNode} node The node of the group to test.\n     * @returns {boolean} A boolean indicating if the group is expanded.\n     */\n    isGroupExpandedByDefault?: (node: GridGroupNode) => boolean;\n    /**\n     * If `true`, columns are autosized after the datagrid is mounted.\n     * @default false\n     */\n    autosizeOnMount: boolean;\n    /**\n     * If `true`, column autosizing on header separator double-click is disabled.\n     * @default false\n     */\n    disableAutosize: boolean;\n    /**\n     * If `true`, the column pinning is disabled.\n     * @default false\n     */\n    disableColumnPinning: boolean;\n    /**\n     * If `true`, the filtering will only be applied to the top level rows when grouping rows with the `treeData` prop.\n     * @default false\n     */\n    disableChildrenFiltering: boolean;\n    /**\n     * If `true`, the sorting will only be applied to the top level rows when grouping rows with the `treeData` prop.\n     * @default false\n     */\n    disableChildrenSorting: boolean;\n    /**\n     * Function that returns the height of the row detail panel.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @returns {number | string} The height in pixels or \"auto\" to use the content height.\n     * @default \"() => 500\"\n     */\n    getDetailPanelHeight: (params: GridRowParams) => number | 'auto';\n    /**\n     * If `true`, the reordering of rows is enabled.\n     * @default false\n     */\n    rowReordering: boolean;\n    /**\n     * Loading rows can be processed on the server or client-side.\n     * Set it to 'client' if you would like enable infnite loading.\n     * Set it to 'server' if you would like to enable lazy loading.\n     * * @default \"client\"\n     */\n    rowsLoadingMode: GridFeatureMode;\n    /**\n     * If `true`, moving the mouse pointer outside the grid before releasing the mouse button\n     * in a column re-order action will not cause the column to jump back to its original position.\n     * @default false\n     */\n    keepColumnPositionIfDraggedOutside: boolean;\n    /**\n     * If `true`, enables the data grid filtering on header feature.\n     * @default false\n     */\n    unstable_headerFilters: boolean;\n}\nexport interface DataGridProPropsWithoutDefaultValue<R extends GridValidRowModel = any> extends Omit<DataGridPropsWithoutDefaultValue<R>, 'initialState' | 'componentsProps' | 'slotProps'> {\n    /**\n     * The ref object that allows grid manipulation. Can be instantiated with `useGridApiRef()`.\n     */\n    apiRef?: React.MutableRefObject<GridApiPro>;\n    /**\n     * The options for autosize when user-initiated.\n     */\n    autosizeOptions?: GridAutosizeOptions;\n    /**\n     * The initial state of the DataGridPro.\n     * The data in it will be set in the state on initialization but will not be controlled.\n     * If one of the data in `initialState` is also being controlled, then the control state wins.\n     */\n    initialState?: GridInitialStatePro;\n    /**\n     * Unstable features, breaking changes might be introduced.\n     * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.\n     */\n    experimentalFeatures?: Partial<GridExperimentalProFeatures>;\n    /**\n     * Determines the path of a row in the tree data.\n     * For instance, a row with the path [\"A\", \"B\"] is the child of the row with the path [\"A\"].\n     * Note that all paths must contain at least one element.\n     * @template R\n     * @param {R} row The row from which we want the path.\n     * @returns {string[]} The path to the row.\n     */\n    getTreeDataPath?: (row: R) => string[];\n    /**\n     * Callback fired while a column is being resized.\n     * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnResize?: GridEventListener<'columnResize'>;\n    /**\n     * Callback fired when the width of a column is changed.\n     * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].\n     * @param {MuiEvent<React.MouseEvent>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onColumnWidthChange?: GridEventListener<'columnWidthChange'>;\n    /**\n     * Callback fired when scrolling to the bottom of the grid viewport.\n     * @param {GridRowScrollEndParams} params With all properties from [[GridRowScrollEndParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onRowsScrollEnd?: GridEventListener<'rowsScrollEnd'>;\n    /**\n     * The column fields to display pinned to left or right.\n     */\n    pinnedColumns?: GridPinnedColumns;\n    /**\n     * Callback fired when the pinned columns have changed.\n     * @param {GridPinnedColumns} pinnedColumns The changed pinned columns.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onPinnedColumnsChange?: (pinnedColumns: GridPinnedColumns, details: GridCallbackDetails) => void;\n    /**\n     * The grouping column used by the tree data.\n     */\n    groupingColDef?: GridGroupingColDefOverride<R> | ((params: GridGroupingColDefOverrideParams) => GridGroupingColDefOverride<R> | undefined | null);\n    /**\n     * The row ids to show the detail panel.\n     */\n    detailPanelExpandedRowIds?: GridRowId[];\n    /**\n     * Callback fired when the detail panel of a row is opened or closed.\n     * @param {GridRowId[]} ids The ids of the rows which have the detail panel open.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onDetailPanelExpandedRowIdsChange?: (ids: GridRowId[], details: GridCallbackDetails) => void;\n    /**\n     * Function that returns the element to render in row detail.\n     * @param {GridRowParams} params With all properties from [[GridRowParams]].\n     * @returns {React.JSX.Element} The row detail element.\n     */\n    getDetailPanelContent?: (params: GridRowParams<R>) => React.ReactNode;\n    /**\n     * Callback fired when a row is being reordered.\n     * @param {GridRowOrderChangeParams} params With all properties from [[GridRowOrderChangeParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onRowOrderChange?: GridEventListener<'rowOrderChange'>;\n    /**\n     * Callback fired when rowCount is set and the next batch of virtualized rows is rendered.\n     * @param {GridFetchRowsParams} params With all properties from [[GridFetchRowsParams]].\n     * @param {MuiEvent<{}>} event The event object.\n     * @param {GridCallbackDetails} details Additional details for this callback.\n     */\n    onFetchRows?: GridEventListener<'fetchRows'>;\n    /**\n     * Rows data to pin on top or bottom.\n     */\n    pinnedRows?: GridPinnedRowsProp<R>;\n    /**\n     * Overridable components props dynamically passed to the component at rendering.\n     */\n    slotProps?: GridProSlotProps;\n    /**\n     * Overridable components props dynamically passed to the component at rendering.\n     * @deprecated Use the `slotProps` prop instead.\n     */\n    componentsProps?: GridProSlotProps;\n}\nexport {};\n","node_modules/@mui/x-data-grid-pro/material/index.d.ts":"/// <reference types=\"react\" />\ndeclare const materialSlots: {\n    ColumnMenuPinLeftIcon: import(\"react\").JSXElementConstructor<any>;\n    ColumnMenuPinRightIcon: import(\"react\").JSXElementConstructor<any>;\n};\nexport default materialSlots;\n","node_modules/@mui/x-data-grid-pro/material/icons.d.ts":"export declare const GridPushPinRightIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\nexport declare const GridPushPinLeftIcon: import(\"@mui/material/OverridableComponent\").OverridableComponent<import(\"@mui/material\").SvgIconTypeMap<{}, \"svg\">> & {\n    muiName: string;\n};\n","node_modules/@mui/x-data-grid-pro/internals/index.d.ts":"export * from '@mui/x-data-grid/internals';\nexport { DataGridProVirtualScroller } from '../components/DataGridProVirtualScroller';\nexport { GridColumnHeaders } from '../components/GridColumnHeaders';\nexport { DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS } from '../constants/dataGridProDefaultSlotsComponents';\nexport { useGridColumnHeaders } from '../hooks/features/columnHeaders/useGridColumnHeaders';\nexport { useGridColumnResize, columnResizeStateInitializer, } from '../hooks/features/columnResize/useGridColumnResize';\nexport { useGridColumnPinning, columnPinningStateInitializer, } from '../hooks/features/columnPinning/useGridColumnPinning';\nexport { useGridColumnPinningPreProcessors } from '../hooks/features/columnPinning/useGridColumnPinningPreProcessors';\nexport { useGridColumnReorder, columnReorderStateInitializer, } from '../hooks/features/columnReorder/useGridColumnReorder';\nexport { useGridDetailPanel, detailPanelStateInitializer, } from '../hooks/features/detailPanel/useGridDetailPanel';\nexport { useGridDetailPanelPreProcessors } from '../hooks/features/detailPanel/useGridDetailPanelPreProcessors';\nexport { useGridInfiniteLoader } from '../hooks/features/infiniteLoader/useGridInfiniteLoader';\nexport { useGridRowReorder } from '../hooks/features/rowReorder/useGridRowReorder';\nexport { useGridRowReorderPreProcessors } from '../hooks/features/rowReorder/useGridRowReorderPreProcessors';\nexport { useGridTreeData } from '../hooks/features/treeData/useGridTreeData';\nexport { useGridTreeDataPreProcessors } from '../hooks/features/treeData/useGridTreeDataPreProcessors';\nexport { TREE_DATA_STRATEGY } from '../hooks/features/treeData/gridTreeDataUtils';\nexport { useGridRowPinning, rowPinningStateInitializer, } from '../hooks/features/rowPinning/useGridRowPinning';\nexport { useGridRowPinningPreProcessors, addPinnedRow, } from '../hooks/features/rowPinning/useGridRowPinningPreProcessors';\nexport { useGridLazyLoader } from '../hooks/features/lazyLoader/useGridLazyLoader';\nexport { useGridLazyLoaderPreProcessors } from '../hooks/features/lazyLoader/useGridLazyLoaderPreProcessors';\nexport type { GridExperimentalProFeatures, DataGridProPropsWithoutDefaultValue, DataGridProPropsWithDefaultValue, } from '../models/dataGridProProps';\nexport { createRowTree } from '../utils/tree/createRowTree';\nexport { updateRowTree } from '../utils/tree/updateRowTree';\nexport { sortRowTree } from '../utils/tree/sortRowTree';\nexport { insertNodeInTree, removeNodeFromTree, getVisibleRowsLookup } from '../utils/tree/utils';\nexport type { RowTreeBuilderGroupingCriterion } from '../utils/tree/models';\n","node_modules/@mui/x-data-grid-pro/hooks/index.d.ts":"export * from './features';\n","node_modules/@mui/x-data-grid-pro/constants/dataGridProDefaultSlotsComponents.d.ts":"import type { GridProSlotsComponent } from '../models';\nexport declare const DATA_GRID_PRO_DEFAULT_SLOTS_COMPONENTS: GridProSlotsComponent;\n","node_modules/@mui/x-data-grid-pro/components/reexports.d.ts":"export { GridProColumnMenu as GridColumnMenu, GRID_COLUMN_MENU_SLOTS_PRO as GRID_COLUMN_MENU_SLOTS, GRID_COLUMN_MENU_SLOT_PROPS_PRO as GRID_COLUMN_MENU_SLOT_PROPS, } from './GridProColumnMenu';\n","node_modules/@mui/x-data-grid-pro/components/index.d.ts":"export * from './GridTreeDataGroupingCell';\nexport * from './GridColumnMenuPinningItem';\nexport * from './GridDetailPanelToggleCell';\nexport * from '../material/icons';\nexport * from './headerFiltering';\n","node_modules/@mui/x-data-grid-pro/components/GridTreeDataGroupingCell.d.ts":"import * as React from 'react';\nimport { GridRenderCellParams, GridGroupNode } from '@mui/x-data-grid';\ninterface GridTreeDataGroupingCellProps extends GridRenderCellParams<any, any, any, GridGroupNode> {\n    hideDescendantCount?: boolean;\n    /**\n     * The cell offset multiplier used for calculating cell offset (`rowNode.depth * offsetMultiplier` px).\n     * @default 2\n     */\n    offsetMultiplier?: number;\n}\ndeclare function GridTreeDataGroupingCell(props: GridTreeDataGroupingCellProps): React.JSX.Element;\ndeclare namespace GridTreeDataGroupingCell {\n    var propTypes: any;\n}\nexport { GridTreeDataGroupingCell };\n","node_modules/@mui/x-data-grid-pro/components/GridScrollArea.d.ts":"import * as React from 'react';\ninterface ScrollAreaProps {\n    scrollDirection: 'left' | 'right';\n}\ndeclare function GridScrollAreaRaw(props: ScrollAreaProps): React.JSX.Element | null;\ndeclare namespace GridScrollAreaRaw {\n    var propTypes: any;\n}\ndeclare const GridScrollArea: React.MemoExoticComponent<typeof GridScrollAreaRaw>;\nexport { GridScrollArea };\n","node_modules/@mui/x-data-grid-pro/components/GridRowReorderCell.d.ts":"import * as React from 'react';\nimport { GridRenderCellParams } from '@mui/x-data-grid';\ndeclare function GridRowReorderCell(params: GridRenderCellParams): React.JSX.Element | null;\nexport { GridRowReorderCell };\nexport declare const renderRowReorderCell: (params: GridRenderCellParams) => React.JSX.Element | null;\n","node_modules/@mui/x-data-grid-pro/components/GridProColumnMenu.d.ts":"import * as React from 'react';\nimport { GridColumnMenuProps } from '@mui/x-data-grid';\nimport { GridColumnMenuPinningItem } from './GridColumnMenuPinningItem';\nexport declare const GRID_COLUMN_MENU_SLOTS_PRO: {\n    columnMenuPinningItem: typeof GridColumnMenuPinningItem;\n    columnMenuSortItem: typeof import(\"@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuSortItem\").GridColumnMenuSortItem;\n    columnMenuFilterItem: typeof import(\"@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuFilterItem\").GridColumnMenuFilterItem;\n    columnMenuColumnsItem: typeof import(\"@mui/x-data-grid/components/menu/columnMenu/menuItems/GridColumnMenuColumnsItem\").GridColumnMenuColumnsItem;\n};\nexport declare const GRID_COLUMN_MENU_SLOT_PROPS_PRO: {\n    columnMenuPinningItem: {\n        displayOrder: number;\n    };\n    columnMenuSortItem: {\n        displayOrder: number;\n    };\n    columnMenuFilterItem: {\n        displayOrder: number;\n    };\n    columnMenuColumnsItem: {\n        displayOrder: number;\n    };\n};\ndeclare const GridProColumnMenu: React.ForwardRefExoticComponent<GridColumnMenuProps & React.RefAttributes<HTMLUListElement>>;\nexport { GridProColumnMenu };\n","node_modules/@mui/x-data-grid-pro/components/GridDetailPanelToggleCell.d.ts":"import * as React from 'react';\nimport { GridRenderCellParams } from '@mui/x-data-grid';\ndeclare function GridDetailPanelToggleCell(props: GridRenderCellParams): React.JSX.Element;\ndeclare namespace GridDetailPanelToggleCell {\n    var propTypes: any;\n}\nexport { GridDetailPanelToggleCell };\n","node_modules/@mui/x-data-grid-pro/components/GridDetailPanel.d.ts":"import * as React from 'react';\nimport { SxProps, Theme } from '@mui/material/styles';\nimport { GridRowId } from '@mui/x-data-grid';\ninterface GridDetailPanelProps extends React.HTMLAttributes<HTMLDivElement> {\n    /**\n     * The system prop that allows defining system overrides as well as additional CSS styles.\n     */\n    sx?: SxProps<Theme>;\n    /**\n     * The panel height.\n     */\n    height: number | 'auto';\n    /**\n     * The row ID that this panel belongs to.\n     */\n    rowId: GridRowId;\n}\ndeclare function GridDetailPanel(props: GridDetailPanelProps): React.JSX.Element;\nexport { GridDetailPanel };\n","node_modules/@mui/x-data-grid-pro/components/GridColumnMenuPinningItem.d.ts":"import * as React from 'react';\nimport { GridColumnMenuItemProps } from '@mui/x-data-grid';\ndeclare function GridColumnMenuPinningItem(props: GridColumnMenuItemProps): React.JSX.Element | null;\ndeclare namespace GridColumnMenuPinningItem {\n    var propTypes: any;\n}\nexport { GridColumnMenuPinningItem };\n","node_modules/@mui/x-data-grid-pro/components/GridColumnHeaders.d.ts":"import * as React from 'react';\nimport { UseGridColumnHeadersProps } from '@mui/x-data-grid/internals';\nimport { GridPinnedColumns } from '../hooks/features/columnPinning';\ninterface DataGridProColumnHeadersProps extends React.HTMLAttributes<HTMLDivElement>, Omit<UseGridColumnHeadersProps, 'innerRef'> {\n    innerRef?: React.Ref<HTMLDivElement>;\n    pinnedColumns: GridPinnedColumns;\n}\ndeclare const GridColumnHeaders: React.ForwardRefExoticComponent<DataGridProColumnHeadersProps & React.RefAttributes<HTMLDivElement>>;\nexport { GridColumnHeaders };\n","node_modules/@mui/x-data-grid-pro/components/DataGridProVirtualScroller.d.ts":"import * as React from 'react';\nimport { GridPinnedColumns } from '../hooks/features/columnPinning';\nexport declare const filterColumns: (pinnedColumns: GridPinnedColumns, columns: string[], invert?: boolean) => [string[], string[]];\ninterface DataGridProVirtualScrollerProps extends React.HTMLAttributes<HTMLDivElement> {\n    disableVirtualization?: boolean;\n}\ndeclare const DataGridProVirtualScroller: React.ForwardRefExoticComponent<DataGridProVirtualScrollerProps & React.RefAttributes<HTMLDivElement>>;\nexport { DataGridProVirtualScroller };\n","node_modules/@mui/x-data-grid-pro/themeAugmentation/props.d.ts":"import { ComponentsOverrides, ComponentsProps } from '@mui/material/styles';\nimport { DataGridProProps } from '../models/dataGridProProps';\nexport interface DataGridProComponentsPropsList {\n    MuiDataGrid: DataGridProProps;\n}\nexport interface DataGridProComponents<Theme = unknown> {\n    MuiDataGrid?: {\n        defaultProps?: ComponentsProps['MuiDataGrid'];\n        styleOverrides?: ComponentsOverrides<Theme>['MuiDataGrid'];\n    };\n}\ndeclare module '@mui/material/styles' {\n    interface ComponentsPropsList extends DataGridProComponentsPropsList {\n    }\n    interface Components<Theme = unknown> extends DataGridProComponents<Theme> {\n    }\n}\n","node_modules/@mui/x-data-grid-pro/themeAugmentation/overrides.d.ts":"import { GridClassKey } from '@mui/x-data-grid';\nexport interface DataGridProComponentNameToClassKey {\n    MuiDataGrid: GridClassKey;\n}\ndeclare module '@mui/material/styles' {\n    interface ComponentNameToClassKey extends DataGridProComponentNameToClassKey {\n    }\n}\n","node_modules/@mui/x-data-grid-pro/themeAugmentation/index.d.ts":"export * from './overrides';\nexport * from './props';\n","node_modules/@mui/x-data-grid-pro/DataGridPro/useDataGridProProps.d.ts":"import { GridValidRowModel } from '@mui/x-data-grid';\nimport { DataGridProProps, DataGridProProcessedProps, DataGridProPropsWithDefaultValue } from '../models/dataGridProProps';\n/**\n * The default values of `DataGridProPropsWithDefaultValue` to inject in the props of DataGridPro.\n */\nexport declare const DATA_GRID_PRO_PROPS_DEFAULT_VALUES: DataGridProPropsWithDefaultValue;\nexport declare const useDataGridProProps: <R extends GridValidRowModel>(inProps: DataGridProProps<R>) => DataGridProProcessedProps<R>;\n","node_modules/@mui/x-data-grid-pro/DataGridPro/useDataGridProComponent.d.ts":"import * as React from 'react';\nimport { GridApiPro, GridPrivateApiPro } from '../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../models/dataGridProProps';\nexport declare const useDataGridProComponent: (inputApiRef: React.MutableRefObject<GridApiPro> | undefined, props: DataGridProProcessedProps) => React.MutableRefObject<GridPrivateApiPro>;\n","node_modules/@mui/x-data-grid-pro/DataGridPro/index.d.ts":"export * from './DataGrid';\nexport * from './DataGridPro';\nexport { DATA_GRID_PRO_PROPS_DEFAULT_VALUES } from './useDataGridProProps';\n","node_modules/@mui/x-data-grid-pro/DataGridPro/DataGridPro.d.ts":"import * as React from 'react';\nimport { GridValidRowModel } from '@mui/x-data-grid';\nimport { DataGridProProps } from '../models/dataGridProProps';\ninterface DataGridProComponent {\n    <R extends GridValidRowModel = any>(props: DataGridProProps<R> & React.RefAttributes<HTMLDivElement>): React.JSX.Element;\n    propTypes?: any;\n}\n/**\n * Demos:\n * - [DataGridPro](https://mui.com/x/react-data-grid/demo/)\n *\n * API:\n * - [DataGridPro API](https://mui.com/x/api/data-grid/data-grid-pro/)\n */\nexport declare const DataGridPro: DataGridProComponent;\nexport {};\n","node_modules/@mui/x-data-grid-pro/DataGridPro/DataGrid.d.ts":"export { SUBMIT_FILTER_STROKE_TIME, SUBMIT_FILTER_DATE_STROKE_TIME } from '@mui/x-data-grid';\n/**\n * @deprecated Import DataGridPro instead.\n */\nexport declare function DataGrid(): null;\n/**\n * @deprecated Import DataGridPro instead.\n */\nexport declare function DataGridPremium(): null;\n","node_modules/@mui/x-data-grid-pro/utils/tree/utils.d.ts":"import { GridFilterState, GridGroupNode, GridRowId, GridRowTreeConfig, GridRowsState, GridTreeNode } from '@mui/x-data-grid';\nimport { GridTreeDepths, GridRowTreeUpdatedGroupsManager } from '@mui/x-data-grid/internals';\nimport { RowTreeBuilderGroupingCriterion } from './models';\nimport { DataGridProProps } from '../../models/dataGridProProps';\nexport declare const getGroupRowIdFromPath: (path: RowTreeBuilderGroupingCriterion[]) => string;\nexport declare const getNodePathInTree: ({ id, tree, }: {\n    id: GridRowId;\n    tree: GridRowTreeConfig;\n}) => RowTreeBuilderGroupingCriterion[];\nexport declare const updateGroupDefaultExpansion: (node: GridGroupNode, defaultGroupingExpansionDepth: number, isGroupExpandedByDefault?: DataGridProProps['isGroupExpandedByDefault']) => GridGroupNode;\n/**\n * Insert a node in the tree\n */\nexport declare const insertNodeInTree: (node: GridTreeNode, tree: GridRowTreeConfig, treeDepths: GridTreeDepths, previousTree: GridRowTreeConfig | null) => void;\n/**\n * Removes a node from the tree\n */\nexport declare const removeNodeFromTree: ({ node, tree, treeDepths, }: {\n    node: GridTreeNode;\n    tree: GridRowTreeConfig;\n    treeDepths: GridTreeDepths;\n}) => void;\n/**\n * Updates the `id` and `isAutoGenerated` properties of a group node.\n */\nexport declare const updateGroupNodeIdAndAutoGenerated: ({ node, updatedNode, previousTree, tree, treeDepths, }: {\n    previousTree: GridRowTreeConfig | null;\n    node: GridGroupNode;\n    updatedNode: Pick<GridGroupNode, 'id' | 'isAutoGenerated'>;\n    tree: GridRowTreeConfig;\n    treeDepths: GridTreeDepths;\n}) => void;\nexport declare const createUpdatedGroupsManager: () => GridRowTreeUpdatedGroupsManager;\nexport declare const getVisibleRowsLookup: ({ tree, filteredRowsLookup, }: {\n    tree: GridRowsState['tree'];\n    filteredRowsLookup: GridFilterState['filteredRowsLookup'];\n}) => Record<GridRowId, boolean>;\n","node_modules/@mui/x-data-grid-pro/utils/tree/updateRowTree.d.ts":"import { GridGroupNode, GridRowId, GridRowTreeConfig } from '@mui/x-data-grid';\nimport { GridRowTreeCreationValue, GridTreeDepths } from '@mui/x-data-grid/internals';\nimport { GridTreePathDuplicateHandler, RowTreeBuilderNode } from './models';\nexport interface UpdateRowTreeNodes {\n    inserted: RowTreeBuilderNode[];\n    modified: RowTreeBuilderNode[];\n    removed: GridRowId[];\n}\ninterface UpdateRowTreeParams {\n    previousTree: GridRowTreeConfig;\n    previousTreeDepth: GridTreeDepths;\n    nodes: UpdateRowTreeNodes;\n    defaultGroupingExpansionDepth: number;\n    isGroupExpandedByDefault?: (node: GridGroupNode) => boolean;\n    groupingName: string;\n    onDuplicatePath?: GridTreePathDuplicateHandler;\n}\nexport declare const updateRowTree: (params: UpdateRowTreeParams) => GridRowTreeCreationValue;\nexport {};\n","node_modules/@mui/x-data-grid-pro/utils/tree/sortRowTree.d.ts":"import { GridRowId, GridRowTreeConfig } from '@mui/x-data-grid';\nimport { GridSortingModelApplier } from '@mui/x-data-grid/internals';\ninterface SortRowTreeParams {\n    rowTree: GridRowTreeConfig;\n    disableChildrenSorting: boolean;\n    sortRowList: GridSortingModelApplier | null;\n    /**\n     * Defines where the groups are placed relative to the leaves of same depth when no sorting rule is applied.\n     * If `true` the groups will be rendered below the leaves.\n     * If `false`, the groups will be rendered on their creation order.\n     */\n    shouldRenderGroupBelowLeaves: boolean;\n}\nexport declare const sortRowTree: (params: SortRowTreeParams) => GridRowId[];\nexport {};\n","node_modules/@mui/x-data-grid-pro/utils/tree/removeDataRowFromTree.d.ts":"import { GridRowId, GridRowTreeConfig } from '@mui/x-data-grid';\nimport { GridTreeDepths, GridRowTreeUpdatedGroupsManager } from '@mui/x-data-grid/internals';\ninterface RemoveDataRowFromTreeParams {\n    /**\n     * ID of the data row to remove from the tree.\n     */\n    id: GridRowId;\n    /**\n     * Tree from which to remove the data row.\n     * This tree can be mutated but it's children should not.\n     * For instance:\n     *\n     * - `tree[nodeId] = newNode` => valid\n     * - `tree[nodeId].children.push(newNodeId)` => invalid\n     */\n    tree: GridRowTreeConfig;\n    /**\n     * Amount of nodes at each depth of the tree.\n     * This object can be mutated.\n     * For instance:\n     *\n     * - `treeDepths[nodeDepth] = treeDepth[nodeDepth] + 1` => valid\n     */\n    treeDepths: GridTreeDepths;\n    /**\n     * Object tracking the action performed on each group.\n     * Used to decide which groups to refresh on sorting, filtering, aggregation, ...\n     * If not defined, then the tracking will be skipped.\n     */\n    updatedGroupsManager?: GridRowTreeUpdatedGroupsManager;\n}\n/**\n * Removed a data row from the tree.\n * If the node is a non-empty group, replace it with an auto-generated group to be able to keep displaying its children.\n * If not, remove it and recursively clean its parent with the following rules:\n * - An empty auto-generated should be removed from the tree\n * - An empty non-auto-generated should be turned into a leaf\n */\nexport declare const removeDataRowFromTree: ({ id, tree, treeDepths, updatedGroupsManager, }: RemoveDataRowFromTreeParams) => void;\nexport {};\n","node_modules/@mui/x-data-grid-pro/utils/tree/models.d.ts":"import { GridKeyValue, GridRowId } from '@mui/x-data-grid';\nexport interface RowTreeBuilderGroupingCriterion {\n    field: string | null;\n    key: GridKeyValue | null;\n}\nexport interface RowTreeBuilderNode {\n    id: GridRowId;\n    path: RowTreeBuilderGroupingCriterion[];\n}\n/**\n * Callback called when trying to insert a data row in the tree in place of an already existing data row.\n */\nexport type GridTreePathDuplicateHandler = (firstId: GridRowId, secondId: GridRowId, path: RowTreeBuilderGroupingCriterion[]) => void;\n","node_modules/@mui/x-data-grid-pro/utils/tree/insertDataRowInTree.d.ts":"import { GridRowId, GridRowTreeConfig } from '@mui/x-data-grid';\nimport { GridTreeDepths, GridRowTreeUpdatedGroupsManager } from '@mui/x-data-grid/internals';\nimport { GridTreePathDuplicateHandler, RowTreeBuilderGroupingCriterion } from './models';\nimport { DataGridProProps } from '../../models/dataGridProProps';\ninterface InsertDataRowInTreeParams {\n    /**\n     * ID of the data row to insert in the tree.\n     */\n    id: GridRowId;\n    /**\n     * Path of the data row to insert in the tree.\n     */\n    path: RowTreeBuilderGroupingCriterion[];\n    /**\n     * Tree in which to insert the data row.\n     * This tree can be mutated but it's children should not.\n     * For instance:\n     *\n     * - `tree[nodeId] = newNode` => valid\n     * - `tree[nodeId].children.push(newNodeId)` => invalid\n     */\n    tree: GridRowTreeConfig;\n    /**\n     * Previous tree instance for comparison.\n     */\n    previousTree: GridRowTreeConfig | null;\n    /**\n     * Amount of nodes at each depth of the tree.\n     * This object can be mutated.\n     * For instance:\n     *\n     * - `treeDepths[nodeDepth] = treeDepth[nodeDepth] + 1` => valid\n     */\n    treeDepths: GridTreeDepths;\n    /**\n     * Object tracking the action performed on each group.\n     * Used to decide which groups to refresh on sorting, filtering, aggregation, ...\n     * If not defined, then the tracking will be skipped.\n     */\n    updatedGroupsManager?: GridRowTreeUpdatedGroupsManager;\n    /**\n     * Callback fired when trying to insert a data row for a path already populated by another data row.\n     */\n    onDuplicatePath?: GridTreePathDuplicateHandler;\n    isGroupExpandedByDefault?: DataGridProProps['isGroupExpandedByDefault'];\n    defaultGroupingExpansionDepth: number;\n}\n/**\n * Inserts a data row in a tree.\n * For each steps of its path:\n * - if a node exists with the same partial path, it will register this node as the ancestor of the data row.\n * - if not, it will create an auto-generated node and register it as ancestor of the data row.\n */\nexport declare const insertDataRowInTree: ({ id, path, updatedGroupsManager, previousTree, tree, treeDepths, onDuplicatePath, isGroupExpandedByDefault, defaultGroupingExpansionDepth, }: InsertDataRowInTreeParams) => void;\nexport {};\n","node_modules/@mui/x-data-grid-pro/utils/tree/index.d.ts":"export { getGroupRowIdFromPath } from './utils';\n","node_modules/@mui/x-data-grid-pro/utils/tree/createRowTree.d.ts":"import { GridRowTreeConfig } from '@mui/x-data-grid';\nimport { GridRowTreeCreationValue } from '@mui/x-data-grid/internals';\nimport { RowTreeBuilderNode, GridTreePathDuplicateHandler } from './models';\nimport { DataGridProProps } from '../../models/dataGridProProps';\ninterface CreateRowTreeParams {\n    previousTree: GridRowTreeConfig | null;\n    nodes: RowTreeBuilderNode[];\n    defaultGroupingExpansionDepth: number;\n    isGroupExpandedByDefault?: DataGridProProps['isGroupExpandedByDefault'];\n    groupingName: string;\n    onDuplicatePath?: GridTreePathDuplicateHandler;\n}\n/**\n * Transform a list of rows into a tree structure where each row references its parent and children.\n */\nexport declare const createRowTree: (params: CreateRowTreeParams) => GridRowTreeCreationValue;\nexport {};\n","node_modules/@mui/x-data-grid-pro/hooks/features/index.d.ts":"export * from './columnPinning';\nexport * from './columnReorder';\nexport * from './columnResize';\nexport * from './rowReorder';\nexport * from './treeData';\nexport * from './detailPanel';\nexport * from './rowPinning';\n","node_modules/@mui/x-data-grid-pro/hooks/utils/useGridRootProps.d.ts":"import { DataGridProProcessedProps } from '../../models/dataGridProProps';\nexport declare const useGridRootProps: () => DataGridProProcessedProps;\n","node_modules/@mui/x-data-grid-pro/hooks/utils/useGridPrivateApiContext.d.ts":"/// <reference types=\"react\" />\nimport { GridPrivateApiPro } from '../../models/gridApiPro';\nexport declare const useGridPrivateApiContext: () => import(\"react\").MutableRefObject<GridPrivateApiPro>;\n","node_modules/@mui/x-data-grid-pro/hooks/utils/useGridApiRef.d.ts":"/// <reference types=\"react\" />\nimport { GridApiPro } from '../../models/gridApiPro';\nexport declare const useGridApiRef: () => import(\"react\").MutableRefObject<GridApiPro>;\n","node_modules/@mui/x-data-grid-pro/hooks/utils/useGridApiContext.d.ts":"/// <reference types=\"react\" />\nimport { GridApiPro } from '../../models/gridApiPro';\nexport declare const useGridApiContext: () => import(\"react\").MutableRefObject<GridApiPro>;\n","node_modules/@mui/x-data-grid-pro/components/headerFiltering/index.d.ts":"export * from './GridHeaderFilterMenuContainer';\nexport * from './GridHeaderFilterCell';\nexport * from './GridHeaderFilterMenu';\n","node_modules/@mui/x-data-grid-pro/components/headerFiltering/GridHeaderFilterMenuContainer.d.ts":"import * as React from 'react';\nimport { GridFilterItem, GridFilterOperator, GridColDef } from '@mui/x-data-grid';\ndeclare function GridHeaderFilterMenuContainer(props: {\n    operators: GridFilterOperator<any, any, any>[];\n    field: GridColDef['field'];\n    item: GridFilterItem;\n    applyFilterChanges: (item: GridFilterItem) => void;\n    headerFilterMenuRef: React.MutableRefObject<HTMLButtonElement | null>;\n    buttonRef: React.Ref<HTMLButtonElement>;\n}): React.JSX.Element | null;\ndeclare namespace GridHeaderFilterMenuContainer {\n    var propTypes: any;\n}\nexport { GridHeaderFilterMenuContainer };\n","node_modules/@mui/x-data-grid-pro/components/headerFiltering/GridHeaderFilterMenu.d.ts":"import * as React from 'react';\nimport { GridFilterOperator, GridFilterItem, GridColDef } from '@mui/x-data-grid';\ninterface GridHeaderFilterMenuProps {\n    field: GridColDef['field'];\n    applyFilterChanges: (item: GridFilterItem) => void;\n    operators: GridFilterOperator<any, any, any>[];\n    item: GridFilterItem;\n    open: boolean;\n    id: string;\n    labelledBy: string;\n    target: HTMLElement | null;\n}\ndeclare function GridHeaderFilterMenu({ open, field, target, applyFilterChanges, operators, item, id, labelledBy, }: GridHeaderFilterMenuProps): React.JSX.Element | null;\ndeclare namespace GridHeaderFilterMenu {\n    var propTypes: any;\n}\nexport { GridHeaderFilterMenu };\n","node_modules/@mui/x-data-grid-pro/components/headerFiltering/GridHeaderFilterClearButton.d.ts":"import * as React from 'react';\ninterface GridHeaderFilterClearIconProps {\n    onClick: () => void;\n}\ndeclare function GridHeaderFilterClearButton({ onClick }: GridHeaderFilterClearIconProps): React.JSX.Element;\nexport { GridHeaderFilterClearButton };\n","node_modules/@mui/x-data-grid-pro/components/headerFiltering/GridHeaderFilterCell.d.ts":"import * as React from 'react';\nimport { GridFilterItem, GridFilterOperator, GridColDef } from '@mui/x-data-grid';\nimport { GridStateColDef } from '@mui/x-data-grid/internals';\nexport interface GridHeaderFilterCellProps extends Pick<GridStateColDef, 'headerClassName'> {\n    colIndex: number;\n    height: number;\n    sortIndex?: number;\n    hasFocus?: boolean;\n    tabIndex: 0 | -1;\n    filterOperators?: GridFilterOperator[];\n    width: number;\n    colDef: GridColDef;\n    headerFilterMenuRef: React.MutableRefObject<HTMLButtonElement | null>;\n    item: GridFilterItem;\n    showClearIcon?: boolean;\n    InputComponentProps: GridFilterOperator['InputComponentProps'];\n}\ndeclare const GridHeaderFilterCell: React.ForwardRefExoticComponent<GridHeaderFilterCellProps & React.RefAttributes<HTMLDivElement>>;\nexport { GridHeaderFilterCell };\n","node_modules/@mui/x-data-grid-pro/hooks/features/treeData/useGridTreeDataPreProcessors.d.ts":"import * as React from 'react';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nexport declare const useGridTreeDataPreProcessors: (privateApiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'treeData' | 'groupingColDef' | 'getTreeDataPath' | 'disableChildrenSorting' | 'disableChildrenFiltering' | 'defaultGroupingExpansionDepth' | 'isGroupExpandedByDefault'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/treeData/useGridTreeData.d.ts":"import * as React from 'react';\nimport { GridApiPro } from '../../../models/gridApiPro';\nexport declare const useGridTreeData: (apiRef: React.MutableRefObject<GridApiPro>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/treeData/index.d.ts":"export { GRID_TREE_DATA_GROUPING_FIELD } from './gridTreeDataGroupColDef';\n","node_modules/@mui/x-data-grid-pro/hooks/features/treeData/gridTreeDataUtils.d.ts":"/// <reference types=\"react\" />\nimport { GridRowTreeConfig, GridFilterState, GridFilterModel } from '@mui/x-data-grid';\nimport { GridAggregatedFilterItemApplier } from '@mui/x-data-grid/internals';\nimport type { GridPrivateApiPro } from '../../../models/gridApiPro';\ninterface FilterRowTreeFromTreeDataParams {\n    rowTree: GridRowTreeConfig;\n    disableChildrenFiltering: boolean;\n    isRowMatchingFilters: GridAggregatedFilterItemApplier | null;\n    filterModel: GridFilterModel;\n    apiRef: React.MutableRefObject<GridPrivateApiPro>;\n}\nexport declare const TREE_DATA_STRATEGY = \"tree-data\";\n/**\n * A node is visible if one of the following criteria is met:\n * - One of its children is passing the filter\n * - It is passing the filter\n */\nexport declare const filterRowTreeFromTreeData: (params: FilterRowTreeFromTreeDataParams) => Omit<GridFilterState, 'filterModel'>;\nexport {};\n","node_modules/@mui/x-data-grid-pro/hooks/features/treeData/gridTreeDataGroupColDef.d.ts":"import { GridColDef } from '@mui/x-data-grid';\n/**\n * TODO: Add sorting and filtering on the value and the filteredDescendantCount\n */\nexport declare const GRID_TREE_DATA_GROUPING_COL_DEF: Omit<GridColDef, 'field' | 'editable'>;\nexport declare const GRID_TREE_DATA_GROUPING_FIELD = \"__tree_data_group__\";\nexport declare const GRID_TREE_DATA_GROUPING_COL_DEF_FORCED_PROPERTIES: Pick<GridColDef, 'field' | 'editable' | 'groupable'>;\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/useGridRowReorderPreProcessors.d.ts":"import * as React from 'react';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nexport declare const useGridRowReorderPreProcessors: (privateApiRef: React.MutableRefObject<GridPrivateApiPro>, props: DataGridProProcessedProps) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/useGridRowReorder.d.ts":"import * as React from 'react';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\n/**\n * Only available in DataGridPro\n * @requires useGridRows (method)\n */\nexport declare const useGridRowReorder: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'rowReordering' | 'onRowOrderChange' | 'classes'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/index.d.ts":"export * from './gridRowReorderColDef';\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowReorder/gridRowReorderColDef.d.ts":"import { GridColDef } from '@mui/x-data-grid';\nexport declare const GRID_REORDER_COL_DEF: GridColDef;\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/useGridRowPinningPreProcessors.d.ts":"import * as React from 'react';\nimport { GridHydrateRowsValue } from '@mui/x-data-grid/internals';\nimport { GridRowId, GridRowModel } from '@mui/x-data-grid';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { GridPinnedRowsProp } from './gridRowPinningInterface';\ntype GridPinnedRowPosition = keyof GridPinnedRowsProp;\nexport declare function addPinnedRow({ groupingParams, rowModel, rowId, position, apiRef, isAutoGenerated, }: {\n    groupingParams: GridHydrateRowsValue;\n    rowModel: GridRowModel;\n    rowId: GridRowId;\n    position: GridPinnedRowPosition;\n    apiRef: React.MutableRefObject<GridPrivateApiPro>;\n    isAutoGenerated: boolean;\n}): {\n    dataRowIdToModelLookup: {\n        [x: string]: import(\"@mui/x-data-grid\").GridValidRowModel;\n    };\n    dataRowIdToIdLookup: {\n        [x: string]: GridRowId;\n    };\n    tree: {\n        [x: string]: import(\"@mui/x-data-grid\").GridTreeNode;\n        [x: number]: import(\"@mui/x-data-grid\").GridTreeNode;\n    };\n    treeDepths: {\n        [x: number]: number;\n    };\n    dataRowIds: GridRowId[];\n    additionalRowGroups?: {\n        pinnedRows?: import(\"@mui/x-data-grid/internals\").GridPinnedRowsState | undefined;\n    } | undefined;\n};\nexport declare const useGridRowPinningPreProcessors: (apiRef: React.MutableRefObject<GridPrivateApiPro>) => void;\nexport {};\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/useGridRowPinning.d.ts":"import * as React from 'react';\nimport { GridStateInitializer } from '@mui/x-data-grid/internals';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const rowPinningStateInitializer: GridStateInitializer<Pick<DataGridProProcessedProps, 'pinnedRows' | 'getRowId' | 'experimentalFeatures'>>;\nexport declare const useGridRowPinning: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'pinnedRows' | 'getRowId'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/index.d.ts":"export * from './gridRowPinningInterface';\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/gridRowPinningSelector.d.ts":"export { gridAdditionalRowGroupsSelector, gridPinnedRowsSelector, } from '@mui/x-data-grid/internals';\n","node_modules/@mui/x-data-grid-pro/hooks/features/rowPinning/gridRowPinningInterface.d.ts":"import { GridRowId, GridRowIdToModelLookup, GridRowsProp, GridValidRowModel } from '@mui/x-data-grid';\nexport interface GridPinnedRowsProp<R extends GridValidRowModel = GridValidRowModel> {\n    top?: GridRowsProp<R>;\n    bottom?: GridRowsProp<R>;\n}\nexport interface GridRowPinningApi {\n    /**\n     * Changes the pinned rows.\n     * @param {GridPinnedRowsProp} pinnedRows An object containing the rows to pin.\n     */\n    unstable_setPinnedRows: (pinnedRows?: GridPinnedRowsProp) => void;\n}\nexport interface GridRowPinningInternalCache {\n    topIds: GridRowId[];\n    bottomIds: GridRowId[];\n    idLookup: GridRowIdToModelLookup;\n}\n","node_modules/@mui/x-data-grid-pro/hooks/features/lazyLoader/useGridLazyLoaderPreProcessors.d.ts":"import * as React from 'react';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const GRID_SKELETON_ROW_ROOT_ID = \"auto-generated-skeleton-row-root\";\nexport declare const useGridLazyLoaderPreProcessors: (privateApiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'rowCount' | 'rowsLoadingMode' | 'experimentalFeatures'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/lazyLoader/useGridLazyLoader.d.ts":"import * as React from 'react';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\n/**\n * @requires useGridRows (state)\n * @requires useGridPagination (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport declare const useGridLazyLoader: (privateApiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'onFetchRows' | 'rowsLoadingMode' | 'pagination' | 'paginationMode' | 'rowBuffer' | 'experimentalFeatures'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/useGridColumnResize.d.ts":"import * as React from 'react';\nimport { GridStateInitializer } from '@mui/x-data-grid/internals';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const columnResizeStateInitializer: GridStateInitializer;\n/**\n * @requires useGridColumns (method, event)\n * TODO: improve experience for last column\n */\nexport declare const useGridColumnResize: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'autosizeOptions' | 'autosizeOnMount' | 'disableAutosize' | 'onColumnResize' | 'onColumnWidthChange'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/index.d.ts":"export * from './columnResizeSelector';\nexport * from './columnResizeState';\nexport * from './gridColumnResizeApi';\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/gridColumnResizeApi.d.ts":"import { GridColDef } from '@mui/x-data-grid';\nexport declare const DEFAULT_GRID_AUTOSIZE_OPTIONS: {\n    includeHeaders: boolean;\n    includeOutliers: boolean;\n    outliersFactor: number;\n    expand: boolean;\n};\nexport type GridAutosizeOptions = {\n    /**\n     * The columns to autosize. By default, applies to all columns.\n     */\n    columns?: GridColDef['field'][];\n    /**\n     * If true, include the header widths in the calculation.\n     * @default false\n     */\n    includeHeaders?: boolean;\n    /**\n     * If true, width outliers will be ignored.\n     * @default false\n     */\n    includeOutliers?: boolean;\n    /**\n     * The IQR factor range to detect outliers.\n     * @default 1.5\n     */\n    outliersFactor?: number;\n    /**\n     * If the total width is less than the available width, expand columns to fill it.\n     * @default false\n     */\n    expand?: boolean;\n};\n/**\n * The Resize API interface that is available in the grid `apiRef`.\n */\nexport interface GridColumnResizeApi {\n    /**\n     * Auto-size the columns of the grid based on the cells' content and the space available.\n     * @param {GridAutosizeOptions} options The autosizing options\n     * @returns {Promise} A promise that resolves when autosizing is completed\n     */\n    autosizeColumns: (options?: GridAutosizeOptions) => Promise<void>;\n}\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/columnResizeState.d.ts":"export interface GridColumnResizeState {\n    resizingColumnField: string;\n}\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnResize/columnResizeSelector.d.ts":"import { GridStatePro } from '../../../models/gridStatePro';\nexport declare const gridColumnResizeSelector: (state: GridStatePro) => import(\"./columnResizeState\").GridColumnResizeState;\nexport declare const gridResizingColumnFieldSelector: import(\"@mui/x-data-grid\").OutputSelector<GridStatePro, string>;\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/useGridDetailPanelPreProcessors.d.ts":"import * as React from 'react';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nexport declare const useGridDetailPanelPreProcessors: (privateApiRef: React.MutableRefObject<GridPrivateApiPro>, props: DataGridProProcessedProps) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/useGridDetailPanelCache.d.ts":"import * as React from 'react';\nimport { GridApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const useGridDetailPanelCache: (apiRef: React.MutableRefObject<GridApiPro>, props: Pick<DataGridProProcessedProps, 'getDetailPanelContent' | 'getDetailPanelHeight'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/useGridDetailPanel.d.ts":"import * as React from 'react';\nimport { GridStateInitializer } from '@mui/x-data-grid/internals';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const detailPanelStateInitializer: GridStateInitializer<Pick<DataGridProProcessedProps, 'initialState' | 'detailPanelExpandedRowIds'>>;\nexport declare const useGridDetailPanel: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'getDetailPanelContent' | 'getDetailPanelHeight' | 'detailPanelExpandedRowIds' | 'onDetailPanelExpandedRowIdsChange'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/index.d.ts":"export * from './gridDetailPanelToggleColDef';\nexport { gridDetailPanelExpandedRowIdsSelector, gridDetailPanelExpandedRowsContentCacheSelector, gridDetailPanelExpandedRowsHeightCacheSelector, } from './gridDetailPanelSelector';\nexport * from './gridDetailPanelInterface';\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/gridDetailPanelToggleColDef.d.ts":"import { GridColDef } from '@mui/x-data-grid';\nexport declare const GRID_DETAIL_PANEL_TOGGLE_FIELD = \"__detail_panel_toggle__\";\nexport declare const GRID_DETAIL_PANEL_TOGGLE_COL_DEF: GridColDef;\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/gridDetailPanelSelector.d.ts":"/// <reference types=\"react\" />\nimport { GridRowId } from '@mui/x-data-grid';\nimport { GridStatePro } from '../../../models/gridStatePro';\nexport declare const gridDetailPanelExpandedRowIdsSelector: (state: GridStatePro) => GridRowId[];\nexport declare const gridDetailPanelExpandedRowsContentCacheSelector: (state: GridStatePro) => Record<GridRowId, import(\"react\").ReactNode>;\nexport declare const gridDetailPanelRawHeightCacheSelector: (state: GridStatePro) => {\n    [x: string]: {\n        autoHeight: boolean;\n        height: number;\n    };\n    [x: number]: {\n        autoHeight: boolean;\n        height: number;\n    };\n};\nexport declare const gridDetailPanelExpandedRowsHeightCacheSelector: import(\"@mui/x-data-grid\").OutputSelector<GridStatePro, Record<GridRowId, number>>;\n","node_modules/@mui/x-data-grid-pro/hooks/features/detailPanel/gridDetailPanelInterface.d.ts":"import * as React from 'react';\nimport { GridRowId } from '@mui/x-data-grid';\ntype DetailPanelHeightCache = Record<GridRowId, {\n    autoHeight: boolean;\n    height: number;\n}>;\n/**\n * The master/detail API interface that is available in the grid [[apiRef]].\n */\nexport interface GridDetailPanelApi {\n    /**\n     * Expands or collapses the detail panel of a row.\n     * @param {string} id The row id to toggle the panel.\n     */\n    toggleDetailPanel: (id: GridRowId) => void;\n    /**\n     * Returns the rows whose detail panel is open.\n     * @returns {GridRowId[]} An array of row ids.\n     */\n    getExpandedDetailPanels: () => GridRowId[];\n    /**\n     * Changes which rows to expand the detail panel.\n     * @param {GridRowId[]} ids The ids of the rows to open the detail panel.\n     */\n    setExpandedDetailPanels: (ids: GridRowId[]) => void;\n}\nexport interface GridDetailPanelPrivateApi {\n    /**\n     * Stores the panel height measurement and triggers the row height pre-processing.\n     * @param {GridRowId} id The id of the row.\n     * @param {number} height The new height.\n     */\n    storeDetailPanelHeight: (id: GridRowId, height: number) => void;\n    /**\n     * Determines if the height of a detail panel is \"auto\".\n     * @param {GridRowId} id The id of the row.\n     * @returns {boolean} `true` if the detail panel height is \"auto\".\n     */\n    detailPanelHasAutoHeight: (id: GridRowId) => boolean;\n}\nexport interface GridDetailPanelState {\n    expandedRowIds: GridRowId[];\n    contentCache: Record<GridRowId, React.ReactNode>;\n    heightCache: DetailPanelHeightCache;\n}\nexport type GridDetailPanelInitialState = Pick<GridDetailPanelState, 'expandedRowIds'>;\nexport {};\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/useGridColumnReorder.d.ts":"import * as React from 'react';\nimport { GridStateInitializer } from '@mui/x-data-grid/internals';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const columnReorderStateInitializer: GridStateInitializer;\n/**\n * @requires useGridColumns (method)\n */\nexport declare const useGridColumnReorder: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'disableColumnReorder' | 'keepColumnPositionIfDraggedOutside' | 'classes' | 'onColumnOrderChange'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/index.d.ts":"export * from './columnReorderSelector';\nexport type { GridColumnReorderState } from './columnReorderInterfaces';\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/columnReorderSelector.d.ts":"import { GridStatePro } from '../../../models/gridStatePro';\nexport declare const gridColumnReorderSelector: (state: GridStatePro) => import(\"./columnReorderInterfaces\").GridColumnReorderState;\nexport declare const gridColumnReorderDragColSelector: import(\"@mui/x-data-grid\").OutputSelector<GridStatePro, string>;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnReorder/columnReorderInterfaces.d.ts":"export interface GridColumnReorderState {\n    dragCol: string;\n}\nexport interface GridCanBeReorderedPreProcessingContext {\n    targetIndex: number;\n}\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnHeaders/useGridColumnHeaders.d.ts":"import * as React from 'react';\nimport { UseGridColumnHeadersProps, GetHeadersParams } from '@mui/x-data-grid/internals';\nexport declare const useGridColumnHeaders: (props: UseGridColumnHeadersProps) => {\n    getColumnFilters: (params?: GetHeadersParams, other?: {}) => React.JSX.Element | null;\n    getRootProps: (other?: {} | undefined) => {\n        style: {\n            minHeight: number;\n            maxHeight: number;\n            lineHeight: string;\n        };\n    };\n    renderContext: import(\"@mui/x-data-grid\").GridRenderContext | null;\n    getColumnHeaders: (params?: GetHeadersParams | undefined, other?: {} | undefined) => React.JSX.Element | null;\n    getColumnGroupHeaders: (params?: GetHeadersParams | undefined) => React.JSX.Element[] | null;\n    isDragging: boolean;\n    getInnerProps: () => {\n        ref: ((instance: HTMLDivElement | null) => void) | null;\n        role: string;\n    };\n    headerHeight: number;\n};\n","node_modules/@mui/x-data-grid-pro/hooks/features/infiniteLoader/useGridInfiniteLoader.d.ts":"import * as React from 'react';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\n/**\n * @requires useGridColumns (state)\n * @requires useGridDimensions (method) - can be after\n * @requires useGridScroll (method\n */\nexport declare const useGridInfiniteLoader: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'onRowsScrollEnd' | 'scrollEndThreshold' | 'pagination' | 'paginationMode' | 'rowsLoadingMode'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/useGridColumnPinningPreProcessors.d.ts":"import * as React from 'react';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nexport declare const useGridColumnPinningPreProcessors: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: DataGridProProcessedProps) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/useGridColumnPinning.d.ts":"import * as React from 'react';\nimport { GridStateInitializer } from '@mui/x-data-grid/internals';\nimport { GridPrivateApiPro } from '../../../models/gridApiPro';\nimport { DataGridProProcessedProps } from '../../../models/dataGridProProps';\nexport declare const columnPinningStateInitializer: GridStateInitializer<Pick<DataGridProProcessedProps, 'pinnedColumns' | 'initialState' | 'disableColumnPinning'>>;\nexport declare const useGridColumnPinning: (apiRef: React.MutableRefObject<GridPrivateApiPro>, props: Pick<DataGridProProcessedProps, 'disableColumnPinning' | 'initialState' | 'pinnedColumns' | 'onPinnedColumnsChange' | 'slotProps' | 'slots'>) => void;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/index.d.ts":"export * from './gridColumnPinningSelector';\nexport * from './gridColumnPinningInterface';\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/gridColumnPinningSelector.d.ts":"import { GridStatePro } from '../../../models/gridStatePro';\nexport declare const gridPinnedColumnsSelector: (state: GridStatePro) => import(\"./gridColumnPinningInterface\").GridPinnedColumns;\n","node_modules/@mui/x-data-grid-pro/hooks/features/columnPinning/gridColumnPinningInterface.d.ts":"export interface GridPinnedColumns {\n    left?: string[];\n    right?: string[];\n}\nexport type GridColumnPinningState = GridPinnedColumns;\ndeclare enum GridPinnedPosition {\n    left = \"left\",\n    right = \"right\"\n}\n/**\n * The column pinning API interface that is available in the grid [[apiRef]].\n */\nexport interface GridColumnPinningApi {\n    /**\n     * Pins a column to the left or right side of the grid.\n     * @param {string} field The column field to pin.\n     * @param {GridPinnedPosition} side Which side to pin the column.\n     */\n    pinColumn: (field: string, side: GridPinnedPosition) => void;\n    /**\n     * Unpins a column.\n     * @param {string} field The column field to unpin.\n     */\n    unpinColumn: (field: string) => void;\n    /**\n     * Returns which columns are pinned.\n     * @returns {GridPinnedColumns} An object containing the pinned columns.\n     */\n    getPinnedColumns: () => GridPinnedColumns;\n    /**\n     * Changes the pinned columns.\n     * @param {GridPinnedColumns} pinnedColumns An object containing the columns to pin.\n     */\n    setPinnedColumns: (pinnedColumns: GridPinnedColumns) => void;\n    /**\n     * Returns which side a column is pinned to.\n     * @param {string} field The column field to check.\n     * @returns {string | false} Which side the column is pinned or `false` if not pinned.\n     */\n    isColumnPinned: (field: string) => GridPinnedPosition | false;\n}\nexport interface GridColumnPinningInternalCache {\n    /**\n     * Stores the fields in their original position, before being pinned.\n     */\n    orderedFieldsBeforePinningColumns: string[] | null;\n}\nexport { GridPinnedPosition };\n","node_modules/dayjs/package.json":"{\n  \"name\": \"dayjs\",\n  \"version\": \"1.11.10\",\n  \"description\": \"2KB immutable date time library alternative to Moment.js with the same modern API \",\n  \"main\": \"dayjs.min.js\",\n  \"types\": \"index.d.ts\",\n  \"scripts\": {\n    \"test\": \"TZ=Pacific/Auckland npm run test-tz && TZ=Europe/London npm run test-tz && TZ=America/Whitehorse npm run test-tz && npm run test-tz && jest\",\n    \"test-tz\": \"date && jest test/timezone.test --coverage=false\",\n    \"lint\": \"./node_modules/.bin/eslint src/* test/* build/*\",\n    \"prettier\": \"prettier --write \\\"docs/**/*.md\\\"\",\n    \"babel\": \"cross-env BABEL_ENV=build babel src --out-dir esm --copy-files && node build/esm\",\n    \"build\": \"cross-env BABEL_ENV=build node build && npm run size\",\n    \"sauce\": \"npx karma start karma.sauce.conf.js\",\n    \"test:sauce\": \"npm run sauce -- 0 && npm run sauce -- 1 && npm run sauce -- 2  && npm run sauce -- 3\",\n    \"size\": \"size-limit && gzip-size dayjs.min.js\"\n  },\n  \"pre-commit\": [\n    \"lint\"\n  ],\n  \"size-limit\": [\n    {\n      \"limit\": \"2.99 KB\",\n      \"path\": \"dayjs.min.js\"\n    }\n  ],\n  \"jest\": {\n    \"roots\": [\n      \"test\"\n    ],\n    \"testRegex\": \"test/(.*?/)?.*test.js$\",\n    \"testURL\": \"http://localhost\",\n    \"coverageDirectory\": \"./coverage/\",\n    \"collectCoverage\": true,\n    \"collectCoverageFrom\": [\n      \"src/**/*\"\n    ]\n  },\n  \"keywords\": [\n    \"dayjs\",\n    \"date\",\n    \"time\",\n    \"immutable\",\n    \"moment\"\n  ],\n  \"author\": \"iamkun\",\n  \"license\": \"MIT\",\n  \"homepage\": \"https://day.js.org\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/iamkun/dayjs.git\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.0.0-beta.44\",\n    \"@babel/core\": \"^7.0.0-beta.44\",\n    \"@babel/node\": \"^7.0.0-beta.44\",\n    \"@babel/preset-env\": \"^7.0.0-beta.44\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-jest\": \"^22.4.3\",\n    \"babel-plugin-external-helpers\": \"^6.22.0\",\n    \"cross-env\": \"^5.1.6\",\n    \"eslint\": \"^4.19.1\",\n    \"eslint-config-airbnb-base\": \"^12.1.0\",\n    \"eslint-plugin-import\": \"^2.10.0\",\n    \"eslint-plugin-jest\": \"^21.15.0\",\n    \"gzip-size-cli\": \"^2.1.0\",\n    \"jasmine-core\": \"^2.99.1\",\n    \"jest\": \"^22.4.3\",\n    \"karma\": \"^2.0.2\",\n    \"karma-jasmine\": \"^1.1.2\",\n    \"karma-sauce-launcher\": \"^1.1.0\",\n    \"mockdate\": \"^2.0.2\",\n    \"moment\": \"2.29.2\",\n    \"moment-timezone\": \"0.5.31\",\n    \"ncp\": \"^2.0.0\",\n    \"pre-commit\": \"^1.2.2\",\n    \"prettier\": \"^1.16.1\",\n    \"rollup\": \"^2.45.1\",\n    \"rollup-plugin-babel\": \"^4.4.0\",\n    \"rollup-plugin-terser\": \"^7.0.2\",\n    \"size-limit\": \"^0.18.0\",\n    \"typescript\": \"^2.8.3\"\n  }\n}\n","node_modules/dayjs/index.d.ts":"/// <reference path=\"./locale/index.d.ts\" />\n\nexport = dayjs;\n\ndeclare function dayjs (date?: dayjs.ConfigType): dayjs.Dayjs\n\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, strict?: boolean): dayjs.Dayjs\n\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, locale?: string, strict?: boolean): dayjs.Dayjs\n\ndeclare namespace dayjs {\n  interface ConfigTypeMap {\n    default: string | number | Date | Dayjs | null | undefined\n  }\n\n  export type ConfigType = ConfigTypeMap[keyof ConfigTypeMap]\n\n  export interface FormatObject { locale?: string, format?: string, utc?: boolean }\n\n  export type OptionType = FormatObject | string | string[]\n\n  export type UnitTypeShort = 'd' | 'D' | 'M' | 'y' | 'h' | 'm' | 's' | 'ms'\n\n  export type UnitTypeLong = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year' | 'date'\n\n  export type UnitTypeLongPlural = 'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days' | 'months' | 'years' | 'dates'\n  \n  export type UnitType = UnitTypeLong | UnitTypeLongPlural | UnitTypeShort;\n\n  export type OpUnitType = UnitType | \"week\" | \"weeks\" | 'w';\n  export type QUnitType = UnitType | \"quarter\" | \"quarters\" | 'Q';\n  export type ManipulateType = Exclude<OpUnitType, 'date' | 'dates'>;\n  class Dayjs {\n    constructor (config?: ConfigType)\n    /**\n     * All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n     * ```\n     * dayjs().clone()// => Dayjs\n     * dayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n     * ```\n     * Docs: https://day.js.org/docs/en/parse/dayjs-clone\n     */\n    clone(): Dayjs\n    /**\n     * This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n     * ```\n     * dayjs().isValid()// => boolean\n     * ```\n     * Docs: https://day.js.org/docs/en/parse/is-valid\n     */\n    isValid(): boolean\n    /**\n     * Get the year.\n     * ```\n     * dayjs().year()// => 2020\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/year\n     */\n    year(): number\n    /**\n     * Set the year.\n     * ```\n     * dayjs().year(2000)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/year\n     */\n    year(value: number): Dayjs\n    /**\n     * Get the month.\n     *\n     * Months are zero indexed, so January is month 0.\n     * ```\n     * dayjs().month()// => 0-11\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/month\n     */\n    month(): number\n    /**\n     * Set the month.\n     *\n     * Months are zero indexed, so January is month 0.\n     *\n     * Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the next year.\n     * ```\n     * dayjs().month(0)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/month\n     */\n    month(value: number): Dayjs\n    /**\n     * Get the date of the month.\n     * ```\n     * dayjs().date()// => 1-31\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/date\n     */\n    date(): number\n    /**\n     * Set the date of the month.\n     *\n     * Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the next months.\n     * ```\n     * dayjs().date(1)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/date\n     */\n    date(value: number): Dayjs\n    /**\n     * Get the day of the week.\n     *\n     * Returns numbers from 0 (Sunday) to 6 (Saturday).\n     * ```\n     * dayjs().day()// 0-6\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/day\n     */\n    day(): number\n    /**\n     * Set the day of the week.\n     *\n     * Accepts numbers from 0 (Sunday) to 6 (Saturday). If the range is exceeded, it will bubble up to next weeks.\n     * ```\n     * dayjs().day(0)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/day\n     */\n    day(value: number): Dayjs\n    /**\n     * Get the hour.\n     * ```\n     * dayjs().hour()// => 0-23\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/hour\n     */\n    hour(): number\n    /**\n     * Set the hour.\n     *\n     * Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the next day.\n     * ```\n     * dayjs().hour(12)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/hour\n     */\n    hour(value: number): Dayjs\n    /**\n     * Get the minutes.\n     * ```\n     * dayjs().minute()// => 0-59\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/minute\n     */\n    minute(): number\n    /**\n     * Set the minutes.\n     *\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next hour.\n     * ```\n     * dayjs().minute(59)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/minute\n     */\n    minute(value: number): Dayjs\n    /**\n     * Get the seconds.\n     * ```\n     * dayjs().second()// => 0-59\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/second\n     */\n    second(): number\n    /**\n     * Set the seconds.\n     *\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next minutes.\n     * ```\n     * dayjs().second(1)// Dayjs\n     * ```\n     */\n    second(value: number): Dayjs\n    /**\n     * Get the milliseconds.\n     * ```\n     * dayjs().millisecond()// => 0-999\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\n     */\n    millisecond(): number\n    /**\n     * Set the milliseconds.\n     *\n     * Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the next seconds.\n     * ```\n     * dayjs().millisecond(1)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\n     */\n    millisecond(value: number): Dayjs\n    /**\n     * Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n     *\n     * In general:\n     * ```\n     * dayjs().set(unit, value) === dayjs()[unit](value)\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     * ```\n     * dayjs().set('date', 1)\n     * dayjs().set('month', 3) // April\n     * dayjs().set('second', 30)\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/set\n     */\n    set(unit: UnitType, value: number): Dayjs\n    /**\n     * String getter, returns the corresponding information getting from Day.js object.\n     *\n     * In general:\n     * ```\n     * dayjs().get(unit) === dayjs()[unit]()\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     * ```\n     * dayjs().get('year')\n     * dayjs().get('month') // start 0\n     * dayjs().get('date')\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/get\n     */\n    get(unit: UnitType): number\n    /**\n     * Returns a cloned Day.js object with a specified amount of time added.\n     * ```\n     * dayjs().add(7, 'day')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/add\n     */\n    add(value: number, unit?: ManipulateType): Dayjs\n    /**\n     * Returns a cloned Day.js object with a specified amount of time subtracted.\n     * ```\n     * dayjs().subtract(7, 'year')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/subtract\n     */\n    subtract(value: number, unit?: ManipulateType): Dayjs\n    /**\n     * Returns a cloned Day.js object and set it to the start of a unit of time.\n     * ```\n     * dayjs().startOf('year')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/start-of\n     */\n    startOf(unit: OpUnitType): Dayjs\n    /**\n     * Returns a cloned Day.js object and set it to the end of a unit of time.\n     * ```\n     * dayjs().endOf('month')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/end-of\n     */\n    endOf(unit: OpUnitType): Dayjs\n    /**\n     * Get the formatted date according to the string of tokens passed in.\n     *\n     * To escape characters, wrap them in square brackets (e.g. [MM]).\n     * ```\n     * dayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\n     * dayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\n     * dayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/format\n     */\n    format(template?: string): string\n    /**\n     * This indicates the difference between two date-time in the specified unit.\n     *\n     * To get the difference in milliseconds, use `dayjs#diff`\n     * ```\n     * const date1 = dayjs('2019-01-25')\n     * const date2 = dayjs('2018-06-05')\n     * date1.diff(date2) // 20214000000 default milliseconds\n     * date1.diff() // milliseconds to current time\n     * ```\n     *\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\n     * ```\n     * const date1 = dayjs('2019-01-25')\n     * date1.diff('2018-06-05', 'month') // 7\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/display/difference\n     */\n    diff(date?: ConfigType, unit?: QUnitType | OpUnitType, float?: boolean): number\n    /**\n     * This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\n     * ```\n     * dayjs('2019-01-25').valueOf() // 1548381600000\n     * +dayjs(1548381600000) // 1548381600000\n     * ```\n     * To get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\n     *\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds\n     */\n    valueOf(): number\n    /**\n     * This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\n     * ```\n     * dayjs('2019-01-25').unix() // 1548381600\n     * ```\n     * This value is floored to the nearest second, and does not include a milliseconds component.\n     *\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp\n     */\n    unix(): number\n    /**\n     * Get the number of days in the current month.\n     * ```\n     * dayjs('2019-01-25').daysInMonth() // 31\n     * ```\n     * Docs: https://day.js.org/docs/en/display/days-in-month\n     */\n    daysInMonth(): number\n    /**\n     * To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\n     * ```\n     * dayjs('2019-01-25').toDate()// => Date\n     * ```\n     */\n    toDate(): Date\n    /**\n     * To serialize as an ISO 8601 string.\n     * ```\n     * dayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-json\n     */\n    toJSON(): string\n    /**\n     * To format as an ISO 8601 string.\n     * ```\n     * dayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-iso-string\n     */\n    toISOString(): string\n    /**\n     * Returns a string representation of the date.\n     * ```\n     * dayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-string\n     */\n    toString(): string\n    /**\n     * Get the UTC offset in minutes.\n     * ```\n     * dayjs().utcOffset()\n     * ```\n     * Docs: https://day.js.org/docs/en/manipulate/utc-offset\n     */\n    utcOffset(): number\n    /**\n     * This indicates whether the Day.js object is before the other supplied date-time.\n     * ```\n     * dayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isBefore('2011-01-01', 'year')// => boolean\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/query/is-before\n     */\n    isBefore(date?: ConfigType, unit?: OpUnitType): boolean\n    /**\n     * This indicates whether the Day.js object is the same as the other supplied date-time.\n     * ```\n     * dayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isSame('2011-01-01', 'year')// => boolean\n     * ```\n     * Docs: https://day.js.org/docs/en/query/is-same\n     */\n    isSame(date?: ConfigType, unit?: OpUnitType): boolean\n    /**\n     * This indicates whether the Day.js object is after the other supplied date-time.\n     * ```\n     * dayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isAfter('2011-01-01', 'year')// => boolean\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/query/is-after\n     */\n    isAfter(date?: ConfigType, unit?: OpUnitType): boolean\n\n    locale(): string\n\n    locale(preset: string | ILocale, object?: Partial<ILocale>): Dayjs\n  }\n\n  export type PluginFunc<T = unknown> = (option: T, c: typeof Dayjs, d: typeof dayjs) => void\n\n  export function extend<T = unknown>(plugin: PluginFunc<T>, option?: T): Dayjs\n\n  export function locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string\n\n  export function isDayjs(d: any): d is Dayjs\n\n  export function unix(t: number): Dayjs\n\n  const Ls : { [key: string] :  ILocale }\n}\n","node_modules/dayjs/esm/index.d.ts":"/// <reference path=\"./locale/index.d.ts\" />\n\nexport = dayjs;\n\ndeclare function dayjs (date?: dayjs.ConfigType): dayjs.Dayjs\n\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, strict?: boolean): dayjs.Dayjs\n\ndeclare function dayjs (date?: dayjs.ConfigType, format?: dayjs.OptionType, locale?: string, strict?: boolean): dayjs.Dayjs\n\ndeclare namespace dayjs {\n  interface ConfigTypeMap {\n    default: string | number | Date | Dayjs | null | undefined\n  }\n\n  export type ConfigType = ConfigTypeMap[keyof ConfigTypeMap]\n\n  export interface FormatObject { locale?: string, format?: string, utc?: boolean }\n\n  export type OptionType = FormatObject | string | string[]\n\n  export type UnitTypeShort = 'd' | 'D' | 'M' | 'y' | 'h' | 'm' | 's' | 'ms'\n\n  export type UnitTypeLong = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'month' | 'year' | 'date'\n\n  export type UnitTypeLongPlural = 'milliseconds' | 'seconds' | 'minutes' | 'hours' | 'days' | 'months' | 'years' | 'dates'\n  \n  export type UnitType = UnitTypeLong | UnitTypeLongPlural | UnitTypeShort;\n\n  export type OpUnitType = UnitType | \"week\" | \"weeks\" | 'w';\n  export type QUnitType = UnitType | \"quarter\" | \"quarters\" | 'Q';\n  export type ManipulateType = Exclude<OpUnitType, 'date' | 'dates'>;\n  class Dayjs {\n    constructor (config?: ConfigType)\n    /**\n     * All Day.js objects are immutable. Still, `dayjs#clone` can create a clone of the current object if you need one.\n     * ```\n     * dayjs().clone()// => Dayjs\n     * dayjs(dayjs('2019-01-25')) // passing a Dayjs object to a constructor will also clone it\n     * ```\n     * Docs: https://day.js.org/docs/en/parse/dayjs-clone\n     */\n    clone(): Dayjs\n    /**\n     * This returns a `boolean` indicating whether the Day.js object contains a valid date or not.\n     * ```\n     * dayjs().isValid()// => boolean\n     * ```\n     * Docs: https://day.js.org/docs/en/parse/is-valid\n     */\n    isValid(): boolean\n    /**\n     * Get the year.\n     * ```\n     * dayjs().year()// => 2020\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/year\n     */\n    year(): number\n    /**\n     * Set the year.\n     * ```\n     * dayjs().year(2000)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/year\n     */\n    year(value: number): Dayjs\n    /**\n     * Get the month.\n     *\n     * Months are zero indexed, so January is month 0.\n     * ```\n     * dayjs().month()// => 0-11\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/month\n     */\n    month(): number\n    /**\n     * Set the month.\n     *\n     * Months are zero indexed, so January is month 0.\n     *\n     * Accepts numbers from 0 to 11. If the range is exceeded, it will bubble up to the next year.\n     * ```\n     * dayjs().month(0)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/month\n     */\n    month(value: number): Dayjs\n    /**\n     * Get the date of the month.\n     * ```\n     * dayjs().date()// => 1-31\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/date\n     */\n    date(): number\n    /**\n     * Set the date of the month.\n     *\n     * Accepts numbers from 1 to 31. If the range is exceeded, it will bubble up to the next months.\n     * ```\n     * dayjs().date(1)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/date\n     */\n    date(value: number): Dayjs\n    /**\n     * Get the day of the week.\n     *\n     * Returns numbers from 0 (Sunday) to 6 (Saturday).\n     * ```\n     * dayjs().day()// 0-6\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/day\n     */\n    day(): number\n    /**\n     * Set the day of the week.\n     *\n     * Accepts numbers from 0 (Sunday) to 6 (Saturday). If the range is exceeded, it will bubble up to next weeks.\n     * ```\n     * dayjs().day(0)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/day\n     */\n    day(value: number): Dayjs\n    /**\n     * Get the hour.\n     * ```\n     * dayjs().hour()// => 0-23\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/hour\n     */\n    hour(): number\n    /**\n     * Set the hour.\n     *\n     * Accepts numbers from 0 to 23. If the range is exceeded, it will bubble up to the next day.\n     * ```\n     * dayjs().hour(12)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/hour\n     */\n    hour(value: number): Dayjs\n    /**\n     * Get the minutes.\n     * ```\n     * dayjs().minute()// => 0-59\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/minute\n     */\n    minute(): number\n    /**\n     * Set the minutes.\n     *\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next hour.\n     * ```\n     * dayjs().minute(59)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/minute\n     */\n    minute(value: number): Dayjs\n    /**\n     * Get the seconds.\n     * ```\n     * dayjs().second()// => 0-59\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/second\n     */\n    second(): number\n    /**\n     * Set the seconds.\n     *\n     * Accepts numbers from 0 to 59. If the range is exceeded, it will bubble up to the next minutes.\n     * ```\n     * dayjs().second(1)// Dayjs\n     * ```\n     */\n    second(value: number): Dayjs\n    /**\n     * Get the milliseconds.\n     * ```\n     * dayjs().millisecond()// => 0-999\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\n     */\n    millisecond(): number\n    /**\n     * Set the milliseconds.\n     *\n     * Accepts numbers from 0 to 999. If the range is exceeded, it will bubble up to the next seconds.\n     * ```\n     * dayjs().millisecond(1)// => Dayjs\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/millisecond\n     */\n    millisecond(value: number): Dayjs\n    /**\n     * Generic setter, accepting unit as first argument, and value as second, returns a new instance with the applied changes.\n     *\n     * In general:\n     * ```\n     * dayjs().set(unit, value) === dayjs()[unit](value)\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     * ```\n     * dayjs().set('date', 1)\n     * dayjs().set('month', 3) // April\n     * dayjs().set('second', 30)\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/set\n     */\n    set(unit: UnitType, value: number): Dayjs\n    /**\n     * String getter, returns the corresponding information getting from Day.js object.\n     *\n     * In general:\n     * ```\n     * dayjs().get(unit) === dayjs()[unit]()\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     * ```\n     * dayjs().get('year')\n     * dayjs().get('month') // start 0\n     * dayjs().get('date')\n     * ```\n     * Docs: https://day.js.org/docs/en/get-set/get\n     */\n    get(unit: UnitType): number\n    /**\n     * Returns a cloned Day.js object with a specified amount of time added.\n     * ```\n     * dayjs().add(7, 'day')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/add\n     */\n    add(value: number, unit?: ManipulateType): Dayjs\n    /**\n     * Returns a cloned Day.js object with a specified amount of time subtracted.\n     * ```\n     * dayjs().subtract(7, 'year')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/subtract\n     */\n    subtract(value: number, unit?: ManipulateType): Dayjs\n    /**\n     * Returns a cloned Day.js object and set it to the start of a unit of time.\n     * ```\n     * dayjs().startOf('year')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/start-of\n     */\n    startOf(unit: OpUnitType): Dayjs\n    /**\n     * Returns a cloned Day.js object and set it to the end of a unit of time.\n     * ```\n     * dayjs().endOf('month')// => Dayjs\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/manipulate/end-of\n     */\n    endOf(unit: OpUnitType): Dayjs\n    /**\n     * Get the formatted date according to the string of tokens passed in.\n     *\n     * To escape characters, wrap them in square brackets (e.g. [MM]).\n     * ```\n     * dayjs().format()// => current date in ISO8601, without fraction seconds e.g. '2020-04-02T08:02:17-05:00'\n     * dayjs('2019-01-25').format('[YYYYescape] YYYY-MM-DDTHH:mm:ssZ[Z]')// 'YYYYescape 2019-01-25T00:00:00-02:00Z'\n     * dayjs('2019-01-25').format('DD/MM/YYYY') // '25/01/2019'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/format\n     */\n    format(template?: string): string\n    /**\n     * This indicates the difference between two date-time in the specified unit.\n     *\n     * To get the difference in milliseconds, use `dayjs#diff`\n     * ```\n     * const date1 = dayjs('2019-01-25')\n     * const date2 = dayjs('2018-06-05')\n     * date1.diff(date2) // 20214000000 default milliseconds\n     * date1.diff() // milliseconds to current time\n     * ```\n     *\n     * To get the difference in another unit of measurement, pass that measurement as the second argument.\n     * ```\n     * const date1 = dayjs('2019-01-25')\n     * date1.diff('2018-06-05', 'month') // 7\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/display/difference\n     */\n    diff(date?: ConfigType, unit?: QUnitType | OpUnitType, float?: boolean): number\n    /**\n     * This returns the number of **milliseconds** since the Unix Epoch of the Day.js object.\n     * ```\n     * dayjs('2019-01-25').valueOf() // 1548381600000\n     * +dayjs(1548381600000) // 1548381600000\n     * ```\n     * To get a Unix timestamp (the number of seconds since the epoch) from a Day.js object, you should use Unix Timestamp `dayjs#unix()`.\n     *\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp-milliseconds\n     */\n    valueOf(): number\n    /**\n     * This returns the Unix timestamp (the number of **seconds** since the Unix Epoch) of the Day.js object.\n     * ```\n     * dayjs('2019-01-25').unix() // 1548381600\n     * ```\n     * This value is floored to the nearest second, and does not include a milliseconds component.\n     *\n     * Docs: https://day.js.org/docs/en/display/unix-timestamp\n     */\n    unix(): number\n    /**\n     * Get the number of days in the current month.\n     * ```\n     * dayjs('2019-01-25').daysInMonth() // 31\n     * ```\n     * Docs: https://day.js.org/docs/en/display/days-in-month\n     */\n    daysInMonth(): number\n    /**\n     * To get a copy of the native `Date` object parsed from the Day.js object use `dayjs#toDate`.\n     * ```\n     * dayjs('2019-01-25').toDate()// => Date\n     * ```\n     */\n    toDate(): Date\n    /**\n     * To serialize as an ISO 8601 string.\n     * ```\n     * dayjs('2019-01-25').toJSON() // '2019-01-25T02:00:00.000Z'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-json\n     */\n    toJSON(): string\n    /**\n     * To format as an ISO 8601 string.\n     * ```\n     * dayjs('2019-01-25').toISOString() // '2019-01-25T02:00:00.000Z'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-iso-string\n     */\n    toISOString(): string\n    /**\n     * Returns a string representation of the date.\n     * ```\n     * dayjs('2019-01-25').toString() // 'Fri, 25 Jan 2019 02:00:00 GMT'\n     * ```\n     * Docs: https://day.js.org/docs/en/display/as-string\n     */\n    toString(): string\n    /**\n     * Get the UTC offset in minutes.\n     * ```\n     * dayjs().utcOffset()\n     * ```\n     * Docs: https://day.js.org/docs/en/manipulate/utc-offset\n     */\n    utcOffset(): number\n    /**\n     * This indicates whether the Day.js object is before the other supplied date-time.\n     * ```\n     * dayjs().isBefore(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isBefore('2011-01-01', 'year')// => boolean\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/query/is-before\n     */\n    isBefore(date?: ConfigType, unit?: OpUnitType): boolean\n    /**\n     * This indicates whether the Day.js object is the same as the other supplied date-time.\n     * ```\n     * dayjs().isSame(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isSame('2011-01-01', 'year')// => boolean\n     * ```\n     * Docs: https://day.js.org/docs/en/query/is-same\n     */\n    isSame(date?: ConfigType, unit?: OpUnitType): boolean\n    /**\n     * This indicates whether the Day.js object is after the other supplied date-time.\n     * ```\n     * dayjs().isAfter(dayjs('2011-01-01')) // default milliseconds\n     * ```\n     * If you want to limit the granularity to a unit other than milliseconds, pass it as the second parameter.\n     * ```\n     * dayjs().isAfter('2011-01-01', 'year')// => boolean\n     * ```\n     * Units are case insensitive, and support plural and short forms.\n     *\n     * Docs: https://day.js.org/docs/en/query/is-after\n     */\n    isAfter(date?: ConfigType, unit?: OpUnitType): boolean\n\n    locale(): string\n\n    locale(preset: string | ILocale, object?: Partial<ILocale>): Dayjs\n  }\n\n  export type PluginFunc<T = unknown> = (option: T, c: typeof Dayjs, d: typeof dayjs) => void\n\n  export function extend<T = unknown>(plugin: PluginFunc<T>, option?: T): Dayjs\n\n  export function locale(preset?: string | ILocale, object?: Partial<ILocale>, isLocal?: boolean): string\n\n  export function isDayjs(d: any): d is Dayjs\n\n  export function unix(t: number): Dayjs\n\n  const Ls : { [key: string] :  ILocale }\n}\n","node_modules/dayjs/plugin/weekday.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    weekday(): number\n\n    weekday(value: number): Dayjs\n  }\n}\n","node_modules/dayjs/plugin/weekYear.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    weekYear(): number\n  }\n}\n","node_modules/dayjs/plugin/weekOfYear.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    week(): number\n\n    week(value : number): Dayjs\n  }\n}\n","node_modules/dayjs/plugin/utc.d.ts":"import { PluginFunc, ConfigType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    \n    utc(keepLocalTime?: boolean): Dayjs\n    \n    local(): Dayjs\n\n    isUTC(): boolean\n\n    utcOffset(offset: number | string, keepLocalTime?: boolean): Dayjs\n  }\n\n  export function utc(config?: ConfigType, format?: string, strict?: boolean): Dayjs\n}\n","node_modules/dayjs/plugin/updateLocale.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  export function updateLocale(localeName: string, customConfig: Record<string, unknown>): Record<string, unknown>\n}\n","node_modules/dayjs/plugin/toObject.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ninterface DayjsObject {\n  years: number\n  months: number\n  date: number\n  hours: number\n  minutes: number\n  seconds: number\n  milliseconds: number\n}\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    toObject(): DayjsObject\n  }\n}\n","node_modules/dayjs/plugin/toArray.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    toArray(): number[]\n  }\n}\n","node_modules/dayjs/plugin/timezone.d.ts":"import { PluginFunc, ConfigType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    tz(timezone?: string, keepLocalTime?: boolean): Dayjs\n    offsetName(type?: 'short' | 'long'): string | undefined\n  }\n\n  interface DayjsTimezone {\n    (date?: ConfigType, timezone?: string): Dayjs\n    (date: ConfigType, format: string, timezone?: string): Dayjs\n    guess(): string\n    setDefault(timezone?: string): void\n  }\n\n  const tz: DayjsTimezone\n}\n","node_modules/dayjs/plugin/relativeTime.d.ts":"import { PluginFunc, ConfigType } from 'dayjs'\n\ndeclare interface RelativeTimeThreshold {\n  l: string\n  r?: number\n  d?: string\n}\n\ndeclare interface RelativeTimeOptions {\n  rounding?: (num: number) => number\n  thresholds?: RelativeTimeThreshold[]\n}\n\ndeclare const plugin: PluginFunc<RelativeTimeOptions>\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    fromNow(withoutSuffix?: boolean): string\n    from(compared: ConfigType, withoutSuffix?: boolean): string\n    toNow(withoutSuffix?: boolean): string\n    to(compared: ConfigType, withoutSuffix?: boolean): string\n  }\n}\n","node_modules/dayjs/plugin/quarterOfYear.d.ts":"import { PluginFunc, ConfigType, QUnitType, OpUnitType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    quarter(): number\n\n    quarter(quarter: number): Dayjs\n\n    add(value: number, unit: QUnitType): Dayjs\n\n    subtract(value: number, unit: QUnitType): Dayjs\n\n    startOf(unit: QUnitType | OpUnitType): Dayjs\n\n    endOf(unit: QUnitType | OpUnitType): Dayjs\n\n    isSame(date?: ConfigType, unit?: QUnitType): boolean\n\n    isBefore(date?: ConfigType, unit?: QUnitType): boolean\n\n    isAfter(date?: ConfigType, unit?: QUnitType): boolean\n  }\n}\n","node_modules/dayjs/plugin/preParsePostFormat.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/pluralGetSet.d.ts":"import { PluginFunc, UnitType, ConfigType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    years(): number\n\n    years(value: number): Dayjs\n\n    months(): number\n\n    months(value: number): Dayjs\n\n    dates(): number\n\n    dates(value: number): Dayjs\n\n    weeks(): number\n\n    weeks(value: number): Dayjs\n\n    days(): number\n\n    days(value: number): Dayjs\n\n    hours(): number\n\n    hours(value: number): Dayjs\n\n    minutes(): number\n\n    minutes(value: number): Dayjs\n\n    seconds(): number\n\n    seconds(value: number): Dayjs\n\n    milliseconds(): number\n\n    milliseconds(value: number): Dayjs\n  }\n}\n","node_modules/dayjs/plugin/objectSupport.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n    interface Dayjs {\n        set(argument: object): Dayjs\n        add(argument: object): Dayjs\n        subtract(argument: object): Dayjs\n    }\n\n    interface ConfigTypeMap {\n        objectSupport: {\n            years?: number | string;\n            year?: number | string;\n            y?: number | string;\n\n            months?: number | string;\n            month?: number | string;\n            M?: number | string;\n\n            days?: number | string;\n            day?: number | string;\n            d?: number | string;\n\n            dates?: number | string;\n            date?: number | string;\n            D?: number | string;\n\n            hours?: number | string;\n            hour?: number | string;\n            h?: number | string;\n\n            minutes?: number | string;\n            minute?: number | string;\n            m?: number | string;\n\n            seconds?: number | string;\n            second?: number | string;\n            s?: number | string;\n\n            milliseconds?: number | string;\n            millisecond?: number | string;\n            ms?: number | string;\n        }\n    }\n}\n","node_modules/dayjs/plugin/minMax.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  export function max(dayjs: Dayjs[]): Dayjs | null\n  export function max(...dayjs: Dayjs[]): Dayjs | null\n  export function min(dayjs: Dayjs[]): Dayjs | null\n  export function min(...dayjs: Dayjs[]): Dayjs | null\n}\n","node_modules/dayjs/plugin/localizedFormat.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/localeData.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  type WeekdayNames = [string, string, string, string, string, string, string];\n  type MonthNames = [string, string, string, string, string, string, string, string, string, string, string, string];\n\n  interface InstanceLocaleDataReturn {\n    firstDayOfWeek(): number;\n    weekdays(instance?: Dayjs): WeekdayNames;\n    weekdaysShort(instance?: Dayjs): WeekdayNames;\n    weekdaysMin(instance?: Dayjs): WeekdayNames;\n    months(instance?: Dayjs): MonthNames;\n    monthsShort(instance?: Dayjs): MonthNames;\n    longDateFormat(format: string): string;\n    meridiem(hour?: number, minute?: number, isLower?: boolean): string;\n    ordinal(n: number): string\n  }\n\n  interface GlobalLocaleDataReturn {\n    firstDayOfWeek(): number;\n    weekdays(): WeekdayNames;\n    weekdaysShort(): WeekdayNames;\n    weekdaysMin(): WeekdayNames;\n    months(): MonthNames;\n    monthsShort(): MonthNames;\n    longDateFormat(format: string): string;\n    meridiem(hour?: number, minute?: number, isLower?: boolean): string;\n    ordinal(n: number): string\n  }\n\n  interface Dayjs {\n    localeData(): InstanceLocaleDataReturn;\n  }\n\n  export function weekdays(localOrder?: boolean): WeekdayNames;\n  export function weekdaysShort(localOrder?: boolean): WeekdayNames;\n  export function weekdaysMin(localOrder?: boolean): WeekdayNames;\n  export function monthsShort(): MonthNames;\n  export function months(): MonthNames;\n  export function localeData(): GlobalLocaleDataReturn;\n}\n","node_modules/dayjs/plugin/isoWeeksInYear.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isoWeeksInYear(): number\n  }\n}\n","node_modules/dayjs/plugin/isoWeek.d.ts":"import { PluginFunc, OpUnitType, ConfigType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ntype ISOUnitType = OpUnitType | 'isoWeek';\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isoWeekYear(): number\n    isoWeek(): number\n    isoWeek(value: number): Dayjs\n\n    isoWeekday(): number\n    isoWeekday(value: number): Dayjs\n\n    startOf(unit: ISOUnitType): Dayjs\n\n    endOf(unit: ISOUnitType): Dayjs\n\n    isSame(date?: ConfigType, unit?: ISOUnitType): boolean\n\n    isBefore(date?: ConfigType, unit?: ISOUnitType): boolean\n\n    isAfter(date?: ConfigType, unit?: ISOUnitType): boolean\n  }\n}\n","node_modules/dayjs/plugin/isYesterday.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isYesterday(): boolean\n  }\n}\n","node_modules/dayjs/plugin/isTomorrow.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isTomorrow(): boolean\n  }\n}\n","node_modules/dayjs/plugin/isToday.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isToday(): boolean\n  }\n}\n","node_modules/dayjs/plugin/isSameOrBefore.d.ts":"import { PluginFunc, ConfigType, OpUnitType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isSameOrBefore(date?: ConfigType, unit?: OpUnitType): boolean\n  }\n}\n","node_modules/dayjs/plugin/isSameOrAfter.d.ts":"import { PluginFunc, ConfigType, OpUnitType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isSameOrAfter(date?: ConfigType, unit?: OpUnitType): boolean\n  }\n}\n","node_modules/dayjs/plugin/isMoment.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n\n  export function isMoment(input: any): boolean\n\n}\n","node_modules/dayjs/plugin/isLeapYear.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isLeapYear(): boolean\n  }\n}\n","node_modules/dayjs/plugin/isBetween.d.ts":"import { PluginFunc, ConfigType, OpUnitType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    isBetween(a: ConfigType, b: ConfigType, c?: OpUnitType | null, d?: '()' | '[]' | '[)' | '(]'): boolean\n  }\n}\n","node_modules/dayjs/plugin/duration.d.ts":"import { PluginFunc } from 'dayjs'\nimport { OpUnitType, UnitTypeLongPlural } from 'dayjs';\n\ndeclare const plugin: PluginFunc\nexport as namespace plugin;\nexport = plugin\n\ndeclare namespace plugin {\n  /**\n   * @deprecated Please use more strict types\n   */\n  type DurationInputType = string | number | object\n  /**\n   * @deprecated Please use more strict types\n   */\n  type DurationAddType = number | object | Duration\n  \n  type DurationUnitsObjectType = Partial<{\n    [unit in Exclude<UnitTypeLongPlural, \"dates\"> | \"weeks\"]: number\n  }>;\n  type DurationUnitType = Exclude<OpUnitType, \"date\" | \"dates\">\n  type CreateDurationType = \n    ((units: DurationUnitsObjectType) => Duration)\n    & ((time: number, unit?: DurationUnitType) => Duration)\n    & ((ISO_8601: string) => Duration)\n  type AddDurationType = CreateDurationType & ((duration: Duration) => Duration)\n\n  interface Duration {\n    new (input: string | number | object, unit?: string, locale?: string): Duration\n\n    clone(): Duration\n\n    humanize(withSuffix?: boolean): string\n\n    milliseconds(): number\n    asMilliseconds(): number\n\n    seconds(): number\n    asSeconds(): number\n\n    minutes(): number\n    asMinutes(): number\n\n    hours(): number\n    asHours(): number\n\n    days(): number\n    asDays(): number\n\n    weeks(): number\n    asWeeks(): number\n\n    months(): number\n    asMonths(): number\n\n    years(): number\n    asYears(): number\n\n    as(unit: DurationUnitType): number\n\n    get(unit: DurationUnitType): number\n\n    add: AddDurationType\n    \n    subtract: AddDurationType\n\n    toJSON(): string\n\n    toISOString(): string\n\n    format(formatStr?: string): string\n\n    locale(locale: string): Duration\n  }\n}\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    add(duration: plugin.Duration): Dayjs\n    subtract(duration: plugin.Duration): Dayjs\n  }\n\n  /**\n   * @param time If unit is not present, time treated as number of milliseconds\n   */\n  export const duration: plugin.CreateDurationType;\n  export function isDuration(d: any): d is plugin.Duration\n}","node_modules/dayjs/plugin/devHelper.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/dayOfYear.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    dayOfYear(): number\n    dayOfYear(value: number): Dayjs\n  }\n}\n","node_modules/dayjs/plugin/customParseFormat.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare interface PluginOptions {\n    parseTwoDigitYear?: (yearString: string) => number\n}\n\ndeclare const plugin: PluginFunc<PluginOptions>\nexport = plugin\n","node_modules/dayjs/plugin/calendar.d.ts":"import { PluginFunc, ConfigType } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs' {\n  interface Dayjs {\n    calendar(referenceTime?: ConfigType, formats?: object): string\n  }\n}\n","node_modules/dayjs/plugin/buddhistEra.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/bigIntSupport.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare module 'dayjs' {\n  interface ConfigTypeMap {\n    bigIntSupport: BigInt\n  }\n  export function unix(t: BigInt): Dayjs\n}\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/badMutable.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/arraySupport.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare module 'dayjs' {\n  interface ConfigTypeMap {\n    arraySupport: [number?, number?, number?, number?, number?, number?, number?]\n  }\n}\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/plugin/advancedFormat.d.ts":"import { PluginFunc } from 'dayjs'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/locale/types.d.ts":"declare interface ILocale {\n  name: string\n  weekdays?: string[]\n  months?: string[]\n  weekStart?: number\n  weekdaysShort?: string[]\n  monthsShort?: string[]\n  weekdaysMin?: string[]\n  ordinal?: (n: number) => number | string\n  formats: Partial<{\n    LT: string\n    LTS: string\n    L: string\n    LL: string\n    LLL: string\n    LLLL: string\n  }>\n  relativeTime: Partial<{\n    future: string\n    past: string\n    s: string\n    m: string\n    mm: string\n    h: string\n    hh: string\n    d: string\n    dd: string\n    M: string\n    MM: string\n    y: string\n    yy: string\n  }>\n}\n","node_modules/dayjs/locale/index.d.ts":"/// <reference path=\"./types.d.ts\" />\n\ndeclare module 'dayjs/locale/*' {\n  namespace locale {\n    interface Locale extends ILocale {}\n  }\n\n  const locale: locale.Locale\n\n  export = locale\n}\n","node_modules/dayjs/esm/locale/types.d.ts":"declare interface ILocale {\n  name: string\n  weekdays?: string[]\n  months?: string[]\n  weekStart?: number\n  weekdaysShort?: string[]\n  monthsShort?: string[]\n  weekdaysMin?: string[]\n  ordinal?: (n: number) => number | string\n  formats: Partial<{\n    LT: string\n    LTS: string\n    L: string\n    LL: string\n    LLL: string\n    LLLL: string\n  }>\n  relativeTime: Partial<{\n    future: string\n    past: string\n    s: string\n    m: string\n    mm: string\n    h: string\n    hh: string\n    d: string\n    dd: string\n    M: string\n    MM: string\n    y: string\n    yy: string\n  }>\n}\n","node_modules/dayjs/esm/locale/index.d.ts":"/// <reference path=\"./types.d.ts\" />\n\ndeclare module 'dayjs/esm/locale/*' {\n  namespace locale {\n    interface Locale extends ILocale {}\n  }\n\n  const locale: locale.Locale\n\n  export = locale\n}\n","node_modules/dayjs/esm/plugin/weekYear/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    weekYear(): number\n  }\n}\n","node_modules/dayjs/esm/plugin/weekday/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    weekday(): number\n\n    weekday(value: number): Dayjs\n  }\n}\n","node_modules/dayjs/esm/plugin/weekOfYear/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    week(): number\n\n    week(value : number): Dayjs\n  }\n}\n","node_modules/dayjs/esm/plugin/utc/index.d.ts":"import { PluginFunc, ConfigType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    \n    utc(keepLocalTime?: boolean): Dayjs\n    \n    local(): Dayjs\n\n    isUTC(): boolean\n\n    utcOffset(offset: number | string, keepLocalTime?: boolean): Dayjs\n  }\n\n  export function utc(config?: ConfigType, format?: string, strict?: boolean): Dayjs\n}\n","node_modules/dayjs/esm/plugin/toArray/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    toArray(): number[]\n  }\n}\n","node_modules/dayjs/esm/plugin/timezone/index.d.ts":"import { PluginFunc, ConfigType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    tz(timezone?: string, keepLocalTime?: boolean): Dayjs\n    offsetName(type?: 'short' | 'long'): string | undefined\n  }\n\n  interface DayjsTimezone {\n    (date?: ConfigType, timezone?: string): Dayjs\n    (date: ConfigType, format: string, timezone?: string): Dayjs\n    guess(): string\n    setDefault(timezone?: string): void\n  }\n\n  const tz: DayjsTimezone\n}\n","node_modules/dayjs/esm/plugin/toObject/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ninterface DayjsObject {\n  years: number\n  months: number\n  date: number\n  hours: number\n  minutes: number\n  seconds: number\n  milliseconds: number\n}\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    toObject(): DayjsObject\n  }\n}\n","node_modules/dayjs/esm/plugin/relativeTime/index.d.ts":"import { PluginFunc, ConfigType } from 'dayjs/esm'\n\ndeclare interface RelativeTimeThreshold {\n  l: string\n  r?: number\n  d?: string\n}\n\ndeclare interface RelativeTimeOptions {\n  rounding?: (num: number) => number\n  thresholds?: RelativeTimeThreshold[]\n}\n\ndeclare const plugin: PluginFunc<RelativeTimeOptions>\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    fromNow(withoutSuffix?: boolean): string\n    from(compared: ConfigType, withoutSuffix?: boolean): string\n    toNow(withoutSuffix?: boolean): string\n    to(compared: ConfigType, withoutSuffix?: boolean): string\n  }\n}\n","node_modules/dayjs/esm/plugin/updateLocale/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  export function updateLocale(localeName: string, customConfig: Record<string, unknown>): Record<string, unknown>\n}\n","node_modules/dayjs/esm/plugin/objectSupport/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n    interface Dayjs {\n        set(argument: object): Dayjs\n        add(argument: object): Dayjs\n        subtract(argument: object): Dayjs\n    }\n\n    interface ConfigTypeMap {\n        objectSupport: {\n            years?: number | string;\n            year?: number | string;\n            y?: number | string;\n\n            months?: number | string;\n            month?: number | string;\n            M?: number | string;\n\n            days?: number | string;\n            day?: number | string;\n            d?: number | string;\n\n            dates?: number | string;\n            date?: number | string;\n            D?: number | string;\n\n            hours?: number | string;\n            hour?: number | string;\n            h?: number | string;\n\n            minutes?: number | string;\n            minute?: number | string;\n            m?: number | string;\n\n            seconds?: number | string;\n            second?: number | string;\n            s?: number | string;\n\n            milliseconds?: number | string;\n            millisecond?: number | string;\n            ms?: number | string;\n        }\n    }\n}\n","node_modules/dayjs/esm/plugin/minMax/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  export function max(dayjs: Dayjs[]): Dayjs | null\n  export function max(...dayjs: Dayjs[]): Dayjs | null\n  export function min(dayjs: Dayjs[]): Dayjs | null\n  export function min(...dayjs: Dayjs[]): Dayjs | null\n}\n","node_modules/dayjs/esm/plugin/quarterOfYear/index.d.ts":"import { PluginFunc, ConfigType, QUnitType, OpUnitType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    quarter(): number\n\n    quarter(quarter: number): Dayjs\n\n    add(value: number, unit: QUnitType): Dayjs\n\n    subtract(value: number, unit: QUnitType): Dayjs\n\n    startOf(unit: QUnitType | OpUnitType): Dayjs\n\n    endOf(unit: QUnitType | OpUnitType): Dayjs\n\n    isSame(date?: ConfigType, unit?: QUnitType): boolean\n\n    isBefore(date?: ConfigType, unit?: QUnitType): boolean\n\n    isAfter(date?: ConfigType, unit?: QUnitType): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/preParsePostFormat/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/localizedFormat/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/pluralGetSet/index.d.ts":"import { PluginFunc, UnitType, ConfigType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    years(): number\n\n    years(value: number): Dayjs\n\n    months(): number\n\n    months(value: number): Dayjs\n\n    dates(): number\n\n    dates(value: number): Dayjs\n\n    weeks(): number\n\n    weeks(value: number): Dayjs\n\n    days(): number\n\n    days(value: number): Dayjs\n\n    hours(): number\n\n    hours(value: number): Dayjs\n\n    minutes(): number\n\n    minutes(value: number): Dayjs\n\n    seconds(): number\n\n    seconds(value: number): Dayjs\n\n    milliseconds(): number\n\n    milliseconds(value: number): Dayjs\n  }\n}\n","node_modules/dayjs/esm/plugin/localeData/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  type WeekdayNames = [string, string, string, string, string, string, string];\n  type MonthNames = [string, string, string, string, string, string, string, string, string, string, string, string];\n\n  interface InstanceLocaleDataReturn {\n    firstDayOfWeek(): number;\n    weekdays(instance?: Dayjs): WeekdayNames;\n    weekdaysShort(instance?: Dayjs): WeekdayNames;\n    weekdaysMin(instance?: Dayjs): WeekdayNames;\n    months(instance?: Dayjs): MonthNames;\n    monthsShort(instance?: Dayjs): MonthNames;\n    longDateFormat(format: string): string;\n    meridiem(hour?: number, minute?: number, isLower?: boolean): string;\n    ordinal(n: number): string\n  }\n\n  interface GlobalLocaleDataReturn {\n    firstDayOfWeek(): number;\n    weekdays(): WeekdayNames;\n    weekdaysShort(): WeekdayNames;\n    weekdaysMin(): WeekdayNames;\n    months(): MonthNames;\n    monthsShort(): MonthNames;\n    longDateFormat(format: string): string;\n    meridiem(hour?: number, minute?: number, isLower?: boolean): string;\n    ordinal(n: number): string\n  }\n\n  interface Dayjs {\n    localeData(): InstanceLocaleDataReturn;\n  }\n\n  export function weekdays(localOrder?: boolean): WeekdayNames;\n  export function weekdaysShort(localOrder?: boolean): WeekdayNames;\n  export function weekdaysMin(localOrder?: boolean): WeekdayNames;\n  export function monthsShort(): MonthNames;\n  export function months(): MonthNames;\n  export function localeData(): GlobalLocaleDataReturn;\n}\n","node_modules/dayjs/esm/plugin/isoWeek/index.d.ts":"import { PluginFunc, OpUnitType, ConfigType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ntype ISOUnitType = OpUnitType | 'isoWeek';\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isoWeekYear(): number\n    isoWeek(): number\n    isoWeek(value: number): Dayjs\n\n    isoWeekday(): number\n    isoWeekday(value: number): Dayjs\n\n    startOf(unit: ISOUnitType): Dayjs\n\n    endOf(unit: ISOUnitType): Dayjs\n\n    isSame(date?: ConfigType, unit?: ISOUnitType): boolean\n\n    isBefore(date?: ConfigType, unit?: ISOUnitType): boolean\n\n    isAfter(date?: ConfigType, unit?: ISOUnitType): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/isoWeeksInYear/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isoWeeksInYear(): number\n  }\n}\n","node_modules/dayjs/esm/plugin/isToday/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isToday(): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/isTomorrow/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isTomorrow(): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/isSameOrAfter/index.d.ts":"import { PluginFunc, ConfigType, OpUnitType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isSameOrAfter(date?: ConfigType, unit?: OpUnitType): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/isSameOrBefore/index.d.ts":"import { PluginFunc, ConfigType, OpUnitType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isSameOrBefore(date?: ConfigType, unit?: OpUnitType): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/isMoment/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n\n  export function isMoment(input: any): boolean\n\n}\n","node_modules/dayjs/esm/plugin/isLeapYear/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isLeapYear(): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/duration/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\nimport { OpUnitType, UnitTypeLongPlural } from 'dayjs/esm';\n\ndeclare const plugin: PluginFunc\nexport as namespace plugin;\nexport = plugin\n\ndeclare namespace plugin {\n  /**\n   * @deprecated Please use more strict types\n   */\n  type DurationInputType = string | number | object\n  /**\n   * @deprecated Please use more strict types\n   */\n  type DurationAddType = number | object | Duration\n  \n  type DurationUnitsObjectType = Partial<{\n    [unit in Exclude<UnitTypeLongPlural, \"dates\"> | \"weeks\"]: number\n  }>;\n  type DurationUnitType = Exclude<OpUnitType, \"date\" | \"dates\">\n  type CreateDurationType = \n    ((units: DurationUnitsObjectType) => Duration)\n    & ((time: number, unit?: DurationUnitType) => Duration)\n    & ((ISO_8601: string) => Duration)\n  type AddDurationType = CreateDurationType & ((duration: Duration) => Duration)\n\n  interface Duration {\n    new (input: string | number | object, unit?: string, locale?: string): Duration\n\n    clone(): Duration\n\n    humanize(withSuffix?: boolean): string\n\n    milliseconds(): number\n    asMilliseconds(): number\n\n    seconds(): number\n    asSeconds(): number\n\n    minutes(): number\n    asMinutes(): number\n\n    hours(): number\n    asHours(): number\n\n    days(): number\n    asDays(): number\n\n    weeks(): number\n    asWeeks(): number\n\n    months(): number\n    asMonths(): number\n\n    years(): number\n    asYears(): number\n\n    as(unit: DurationUnitType): number\n\n    get(unit: DurationUnitType): number\n\n    add: AddDurationType\n    \n    subtract: AddDurationType\n\n    toJSON(): string\n\n    toISOString(): string\n\n    format(formatStr?: string): string\n\n    locale(locale: string): Duration\n  }\n}\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    add(duration: plugin.Duration): Dayjs\n    subtract(duration: plugin.Duration): Dayjs\n  }\n\n  /**\n   * @param time If unit is not present, time treated as number of milliseconds\n   */\n  export const duration: plugin.CreateDurationType;\n  export function isDuration(d: any): d is plugin.Duration\n}","node_modules/dayjs/esm/plugin/isYesterday/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isYesterday(): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/isBetween/index.d.ts":"import { PluginFunc, ConfigType, OpUnitType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    isBetween(a: ConfigType, b: ConfigType, c?: OpUnitType | null, d?: '()' | '[]' | '[)' | '(]'): boolean\n  }\n}\n","node_modules/dayjs/esm/plugin/devHelper/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/dayOfYear/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    dayOfYear(): number\n    dayOfYear(value: number): Dayjs\n  }\n}\n","node_modules/dayjs/esm/plugin/customParseFormat/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare interface PluginOptions {\n    parseTwoDigitYear?: (yearString: string) => number\n}\n\ndeclare const plugin: PluginFunc<PluginOptions>\nexport = plugin\n","node_modules/dayjs/esm/plugin/bigIntSupport/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare module 'dayjs/esm' {\n  interface ConfigTypeMap {\n    bigIntSupport: BigInt\n  }\n  export function unix(t: BigInt): Dayjs\n}\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/buddhistEra/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/badMutable/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/calendar/index.d.ts":"import { PluginFunc, ConfigType } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n\ndeclare module 'dayjs/esm' {\n  interface Dayjs {\n    calendar(referenceTime?: ConfigType, formats?: object): string\n  }\n}\n","node_modules/dayjs/esm/plugin/arraySupport/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare module 'dayjs/esm' {\n  interface ConfigTypeMap {\n    arraySupport: [number?, number?, number?, number?, number?, number?, number?]\n  }\n}\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/dayjs/esm/plugin/advancedFormat/index.d.ts":"import { PluginFunc } from 'dayjs/esm'\n\ndeclare const plugin: PluginFunc\nexport = plugin\n","node_modules/csstype/package.json":"{\n  \"name\": \"csstype\",\n  \"version\": \"3.1.3\",\n  \"main\": \"\",\n  \"types\": \"index.d.ts\",\n  \"description\": \"Strict TypeScript and Flow types for style based on MDN data\",\n  \"repository\": \"https://github.com/frenic/csstype\",\n  \"author\": \"Fredrik Nicol <fredrik.nicol@gmail.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@types/chokidar\": \"^2.1.3\",\n    \"@types/css-tree\": \"^2.3.1\",\n    \"@types/jest\": \"^29.5.0\",\n    \"@types/jsdom\": \"^21.1.1\",\n    \"@types/node\": \"^16.18.23\",\n    \"@types/prettier\": \"^2.7.2\",\n    \"@types/request\": \"^2.48.8\",\n    \"@types/turndown\": \"^5.0.1\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.57.0\",\n    \"@typescript-eslint/parser\": \"^5.57.0\",\n    \"chalk\": \"^4.1.2\",\n    \"chokidar\": \"^3.5.3\",\n    \"eslint\": \"^8.37.0\",\n    \"css-tree\": \"^2.3.1\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"fast-glob\": \"^3.2.12\",\n    \"flow-bin\": \"^0.203.1\",\n    \"jest\": \"^29.5.0\",\n    \"jsdom\": \"^21.1.1\",\n    \"mdn-browser-compat-data\": \"git+https://github.com/mdn/browser-compat-data.git#1bf44517bd08de735e9ec20dbfe8e86c96341054\",\n    \"mdn-data\": \"git+https://github.com/mdn/data.git#7f0c865a3c4b5d891285c93308ee5c25cb5cfee8\",\n    \"prettier\": \"^2.8.7\",\n    \"request\": \"^2.88.2\",\n    \"ts-jest\": \"^29.0.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"turndown\": \"^7.1.2\",\n    \"typescript\": \"~5.0.3\"\n  },\n  \"scripts\": {\n    \"prepublish\": \"npm install --prefix __tests__ && npm install --prefix __tests__/__fixtures__\",\n    \"prepublishOnly\": \"tsc && npm run test:src && npm run build && ts-node --files prepublish.ts\",\n    \"update\": \"ts-node --files update.ts\",\n    \"build\": \"ts-node --files build.ts --start\",\n    \"watch\": \"ts-node --files build.ts --watch\",\n    \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx --fix\",\n    \"pretty\": \"prettier --write build.ts **/*.{ts,js,json,md}\",\n    \"lazy\": \"tsc && npm run lint\",\n    \"test\": \"jest --runInBand\",\n    \"test:src\": \"jest src.*.ts\",\n    \"test:dist\": \"jest dist.*.ts --runInBand\"\n  },\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js.flow\"\n  ],\n  \"keywords\": [\n    \"css\",\n    \"style\",\n    \"typescript\",\n    \"flow\",\n    \"typings\",\n    \"types\",\n    \"definitions\"\n  ]\n}\n","node_modules/csstype/index.d.ts":"export {};\n\nexport type PropertyValue<TValue> = TValue extends Array<infer AValue>\n  ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue>\n  : TValue extends infer TUnpacked & {}\n  ? TUnpacked\n  : TValue;\n\nexport type Fallback<T> = { [P in keyof T]: T[P] | readonly NonNullable<T[P]>[] };\n\nexport interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  accentColor?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  alignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  alignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  alignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  alignTracks?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** | **115** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  animationComposition?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  animationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  animationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  animationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  animationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  animationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  animationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  animationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end\n   */\n  animationRangeEnd?: Property.AnimationRangeEnd<TLength> | undefined;\n  /**\n   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start\n   */\n  animationRangeStart?: Property.AnimationRangeStart<TLength> | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  animationTimeline?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  animationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  aspectRatio?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  backdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  backfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  backgroundAttachment?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  backgroundBlendMode?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  |  **5**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  backgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  backgroundColor?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  backgroundImage?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  backgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  backgroundRepeat?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  backgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  blockOverflow?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  blockSize?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  borderBlockColor?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  borderBlockEndColor?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  borderBlockStartColor?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  borderBlockStyle?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  borderBlockWidth?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  borderBottomColor?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  borderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  borderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  borderBottomStyle?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  borderBottomWidth?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  borderCollapse?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  borderEndEndRadius?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  borderEndStartRadius?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  borderImageOutset?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  borderImageRepeat?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  borderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  borderImageSource?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  borderImageWidth?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  borderInlineColor?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  borderInlineEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  borderInlineEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  borderInlineEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  borderInlineStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  borderInlineStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  borderInlineStartWidth?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  borderInlineStyle?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  borderInlineWidth?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  borderLeftColor?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  borderLeftStyle?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  borderLeftWidth?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  borderRightColor?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  borderRightStyle?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  borderRightWidth?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  borderSpacing?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  borderStartEndRadius?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  borderStartStartRadius?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  borderTopColor?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  borderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  borderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  borderTopStyle?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  borderTopWidth?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  boxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  boxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  breakAfter?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  breakBefore?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  breakInside?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  captionSide?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  caretColor?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  caretShape?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  clipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  colorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  colorScheme?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  columnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  columnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  columnGap?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  columnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  columnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  columnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  columnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  columnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  containIntrinsicBlockSize?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  containIntrinsicHeight?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  containIntrinsicInlineSize?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  containIntrinsicWidth?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  containerName?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  containerType?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome |   Firefox   | Safari | Edge | IE  |\n   * | :----: | :---------: | :----: | :--: | :-: |\n   * | **85** | **preview** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  contentVisibility?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  counterIncrement?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  counterReset?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **85** | **68**  | **17.2** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  counterSet?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  emptyCells?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  flexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  flexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  flexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  flexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  flexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  fontFamily?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  fontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  fontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  fontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  fontOpticalSizing?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  fontPalette?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  fontSize?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  fontSmooth?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  fontStretch?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  fontStyle?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps || position]`\n   *\n   * **Initial value**: `weight style small-caps position `\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  fontSynthesis?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-synthesis-position`** CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using `font-variant-position` to set the positions.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **118** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position\n   */\n  fontSynthesisPosition?: Property.FontSynthesisPosition | undefined;\n  /**\n   * The **`font-synthesis-small-caps`** CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps\n   */\n  fontSynthesisSmallCaps?: Property.FontSynthesisSmallCaps | undefined;\n  /**\n   * The **`font-synthesis-style`** CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style\n   */\n  fontSynthesisStyle?: Property.FontSynthesisStyle | undefined;\n  /**\n   * The **`font-synthesis-weight`** CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight\n   */\n  fontSynthesisWeight?: Property.FontSynthesisWeight | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  fontVariant?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **111** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  fontVariantAlternates?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  fontVariantCaps?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  fontVariantEastAsian?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  fontVariantEmoji?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  fontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  fontVariantNumeric?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **117** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  fontVariantPosition?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  fontVariationSettings?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** | **113** |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  forcedColorAdjust?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  gridAutoColumns?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  gridAutoFlow?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  gridAutoRows?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  gridColumnEnd?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  gridColumnStart?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  gridRowEnd?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  gridRowStart?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  gridTemplateAreas?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  gridTemplateColumns?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  gridTemplateRows?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  hangingPunctuation?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :-----: | :-----: | :-------: | :--: | :-: |\n   * | **106** | **98**  |  **17**   | n/a  | No  |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  hyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  hyphenateLimitChars?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |      IE      |\n   * | :------: | :-----: | :-------: | :----: | :----------: |\n   * |  **55**  | **43**  |  **17**   | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ | 5.1 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  imageOrientation?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  imageRendering?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  imageResolution?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  initialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  inlineSize?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  inputSecurity?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  insetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  insetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  insetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  insetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  justifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  justifyItems?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  justifySelf?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  justifyTracks?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  lineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  lineHeightStep?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  listStyleImage?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  listStylePosition?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  listStyleType?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  marginBlockEnd?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  marginBlockStart?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginBottom?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  marginInlineEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  marginInlineStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  marginLeft?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginRight?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  marginTop?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  marginTrim?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  maskBorderMode?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-outset)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  maskBorderOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-repeat)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  maskBorderRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-slice)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  maskBorderSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-source)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  maskBorderSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-width)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  maskBorderWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  maskClip?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  maskComposite?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 16-79 | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  maskImage?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  maskMode?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  maskOrigin?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  maskPosition?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  maskRepeat?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   * | 4 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  maskSize?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  maskType?: Property.MaskType | undefined;\n  /**\n   * This feature is not Baseline because it does not work in some of the most widely-used browsers.\n   *\n   * **Syntax**: `[ pack | next ] || [ definite-first | ordered ]`\n   *\n   * **Initial value**: `pack`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\n   */\n  masonryAutoFlow?: Property.MasonryAutoFlow | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** | **117** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  mathDepth?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  mathShift?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** | **117** | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  mathStyle?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  maxBlockSize?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  maxHeight?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  maxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  maxLines?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  maxWidth?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  minBlockSize?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  minHeight?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  minInlineSize?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  minWidth?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  mixBlendMode?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  motionDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  motionPath?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  motionRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  objectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  objectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** | **72**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  offsetAnchor?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  offsetDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  offsetPath?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `normal | auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  offsetPosition?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotate?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  outlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  outlineOffset?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  outlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  outlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  overflowAnchor?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  overflowBlock?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   */\n  overflowClipBox?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  overflowClipMargin?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  overflowInline?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  overflowWrap?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  overflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  overflowY?: Property.OverflowY | undefined;\n  /**\n   * The **`overlay`** CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal `<dialog>` element) is actually rendered in the top layer. This property is only relevant within a list of `transition-property` values, and only if `allow-discrete` is set as the `transition-behavior`.\n   *\n   * **Syntax**: `none | auto`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overlay\n   */\n  overlay?: Property.Overlay | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  overscrollBehaviorInline?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  overscrollBehaviorX?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  overscrollBehaviorY?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  paddingBlockEnd?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  paddingBlockStart?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingBottom?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  paddingInlineEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  paddingInlineStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  paddingLeft?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingRight?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  paddingTop?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari   | Edge | IE  |\n   * | :----: | :-----: | :-------: | :--: | :-: |\n   * | **85** | **110** | **≤13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  pageBreakAfter?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  pageBreakBefore?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  pageBreakInside?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  paintOrder?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  perspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  pointerEvents?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  printColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  rowGap?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  rubyAlign?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  rubyMerge?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  rubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  scrollBehavior?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  scrollMarginBlockStart?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  scrollMarginInlineStart?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  scrollPaddingBottom?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  scrollPaddingLeft?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  scrollPaddingRight?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  scrollPaddingTop?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  scrollSnapAlign?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollSnapMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollSnapMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollSnapMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollSnapMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  scrollSnapStop?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  scrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  scrollTimelineAxis?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  scrollTimelineName?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  scrollbarColor?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  scrollbarGutter?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  scrollbarWidth?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  shapeImageThreshold?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  shapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  shapeOutside?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  tabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  tableLayout?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  textAlign?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  textAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            |  Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :----: | :------------------------------------: |\n   * |           **48**           | **48**  |           **15.4**           | **79** | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  textCombineUpright?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  textDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  textDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  textDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  textDecorationSkipInk?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  textDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationThickness?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  textEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  textEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  textEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  textIndent?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge  |   IE   |\n   * | :----: | :-----: | :----: | :---: | :----: |\n   * |  n/a   | **55**  |   No   | 12-79 | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  textJustify?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  textOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  textOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  textRendering?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  textShadow?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  textSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  textTransform?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  textUnderlineOffset?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  textUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`text-wrap`** CSS property controls how text inside an element is wrapped. The different values provide:\n   *\n   * **Syntax**: `wrap | nowrap | balance | stable | pretty`\n   *\n   * **Initial value**: `wrap`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** | **121** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-wrap\n   */\n  textWrap?: Property.TextWrap | undefined;\n  /**\n   * The **`timeline-scope`** CSS property modifies the scope of a named animation timeline.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/timeline-scope\n   */\n  timelineScope?: Property.TimelineScope | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  touchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  transformBox?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **36**  | **16**  |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ |         | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  transformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **36**  | **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  transformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-behavior`** CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.\n   *\n   * **Syntax**: `<transition-behavior-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-behavior\n   */\n  transitionBehavior?: Property.TransitionBehavior | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  transitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  transitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  transitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  transitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  userSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  verticalAlign?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-timeline-axis`** CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline-axis` is set on the subject. See CSS scroll-driven animations for more details.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis\n   */\n  viewTimelineAxis?: Property.ViewTimelineAxis | undefined;\n  /**\n   * The **`view-timeline-inset`** CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.\n   *\n   * **Syntax**: `[ [ auto | <length-percentage> ]{1,2} ]#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset\n   */\n  viewTimelineInset?: Property.ViewTimelineInset<TLength> | undefined;\n  /**\n   * The **`view-timeline-name`** CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-name\n   */\n  viewTimelineName?: Property.ViewTimelineName | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  viewTransitionName?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  whiteSpace?: Property.WhiteSpace | undefined;\n  /**\n   * The **`white-space-collapse`** CSS property controls how white space inside an element is collapsed.\n   *\n   * **Syntax**: `collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces`\n   *\n   * **Initial value**: `collapse`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space-collapse\n   */\n  whiteSpaceCollapse?: Property.WhiteSpaceCollapse | undefined;\n  /**\n   * **Syntax**: `none | discard-before || discard-after || discard-inner`\n   *\n   * **Initial value**: `none`\n   */\n  whiteSpaceTrim?: Property.WhiteSpaceTrim | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  willChange?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  wordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge   | IE  |\n   * | :-----: | :-----: | :-------: | :-----: | :-: |\n   * | **≤80** | **≤72** | **≤13.1** | **≤80** | No  |\n   */\n  wordWrap?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  writingMode?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   n/a   | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-range`** CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.\n   *\n   * **Syntax**: `[ <'animation-range-start'> <'animation-range-end'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range\n   */\n  animationRange?: Property.AnimationRange<TLength> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  backgroundPosition?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  borderBlock?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  borderBlockEnd?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  borderBlockStart?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  borderBottom?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  borderColor?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  borderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  borderInline?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  borderInlineEnd?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  borderInlineStart?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  borderLeft?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  borderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  borderRight?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  borderStyle?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  borderTop?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  borderWidth?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  columnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ auto? [ none | <length> ] ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  containIntrinsicSize?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  flexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  gridArea?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  gridColumn?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  gridRow?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  gridTemplate?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  insetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  insetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  lineClamp?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  listStyle?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  marginBlock?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  marginInline?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox |  Safari   | Edge  | IE  |\n   * | :----: | :-----: | :-------: | :---: | :-: |\n   * | **1**  | **53**  | **15.4**  | 12-79 | No  |\n   * |        |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |             Safari             | Edge | IE  |\n   * | :------------------------------: | :-----: | :----------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    |            **17.2**            | n/a  | No  |\n   * |                                  |         | 3.1 _(-webkit-mask-box-image)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  maskBorder?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **94** | **88**  | **16.4** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  overscrollBehavior?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  paddingBlock?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  paddingInline?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  placeContent?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  placeItems?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  placeSelf?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  scrollMarginBlock?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  scrollMarginInline?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  scrollPadding?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  scrollPaddingBlock?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  scrollPaddingInline?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollSnapMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  scrollTimeline?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  textEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`view-timeline`** CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `[ <'view-timeline-name'> <'view-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline\n   */\n  viewTimeline?: Property.ViewTimeline | undefined;\n}\n\nexport interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandProperties<TLength, TTime>,\n    StandardShorthandProperties<TLength, TTime> {}\n\nexport interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  MozAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  MozAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  MozAppearance?: Property.MozAppearance | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBinding?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderBottomColors?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozBorderEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderLeftColors?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderRightColors?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderTopColors?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  MozColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozContextProperties?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  MozHyphens?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozImageRegion?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  MozOrient?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  MozOsxFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomleft?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomright?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopleft?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopright?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  MozStackSizing?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  MozTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  MozTextBlink?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  MozTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozUserFocus?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  MozUserModify?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  MozUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  MozWindowDragging?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  MozWindowShadow?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  msAccelerator?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  msBlockProgression?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomChaining?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  msContentZoomLimitMax?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  msContentZoomLimitMin?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  msContentZoomSnapPoints?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomSnapType?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  msContentZooming?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  msFilter?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  msFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  msFlexPositive?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowFrom?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowInto?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridColumns?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridRows?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  msHighContrastAdjust?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  msHyphenateLimitChars?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  msHyphenateLimitLines?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  msHyphenateLimitZone?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  msHyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  msImeAlign?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  msLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  msOrder?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  msOverflowStyle?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowY?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  msScrollChaining?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitXMax?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitXMin?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitYMax?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitYMin?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  msScrollRails?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsX?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsY?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollSnapType?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollTranslation?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbar3dlightColor?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  msScrollbarArrowColor?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbarBaseColor?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarDarkshadowColor?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  msScrollbarFaceColor?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  msScrollbarHighlightColor?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarShadowColor?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  msScrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  msTextAutospace?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  msTextCombineHorizontal?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  msTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  msTouchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  msTouchSelect?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  msTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  msTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  msTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  msUserSelect?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  msWordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  msWrapFlow?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msWrapMargin?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  msWrapThrough?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  msWritingMode?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitAlignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  WebkitAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  WebkitAppearance?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBackdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  WebkitBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  WebkitBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  WebkitBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitBorderBeforeColor?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBorderBeforeStyle?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitBorderBeforeWidth?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  WebkitBorderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  WebkitBoxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxReflect?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  WebkitBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitClipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  WebkitColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitFilter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFlexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  WebkitFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitFlexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitFlexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  WebkitFlexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitHyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  WebkitHyphens?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitInitialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitJustifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitLineClamp?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  WebkitMaskAttachment?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  WebkitMaskBoxImageRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskBoxImageSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitMaskBoxImageWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  WebkitMaskClip?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  WebkitMaskComposite?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskImage?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  WebkitMaskOrigin?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  WebkitMaskPosition?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionX?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionY?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeat?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatX?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatY?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitMaskSize?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitOrder?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitOverflowScrolling?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  WebkitPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  WebkitPrintColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  WebkitRubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitScrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitShapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  WebkitTapHighlightColor?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextCombine?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  WebkitTextDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  WebkitTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  WebkitTextEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextFillColor?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  WebkitTextOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  WebkitTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextStrokeColor?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitTextStrokeWidth?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitTextUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  WebkitTouchCallout?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  WebkitTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  WebkitTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  WebkitTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  WebkitUserModify?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  WebkitWritingMode?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  MozAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  MozBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  MozColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  MozColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   */\n  MozOutlineRadius?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  msContentZoomLimit?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  msContentZoomSnap?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  msFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  msScrollLimit?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  msScrollSnapX?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  msScrollSnapY?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  msTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  WebkitAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  WebkitBorderBefore?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  WebkitBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  WebkitBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  WebkitColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  WebkitColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  WebkitFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  WebkitFlexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  WebkitMask?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  WebkitMaskBoxImage?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  WebkitTextEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  WebkitTextStroke?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  WebkitTransition?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {}\n\nexport interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  boxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  boxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  boxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  boxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  boxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  boxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridColumnGap?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  gridGap?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridRowGap?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  imeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapCoordinate?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  scrollSnapDestination?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeX?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeY?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  KhtmlBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  KhtmlBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  KhtmlBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  KhtmlBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * @deprecated\n   */\n  MozBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  MozBackgroundInlinePolicy?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  MozBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomleft?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomright?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopleft?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopright?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  MozBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  MozBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  MozBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  MozBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  MozFloatEdge?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozForceBrokenImageIcon?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  MozOutline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  MozOutlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozOutlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  MozOutlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  MozPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozTextAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  MozTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  MozTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  MozTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * @deprecated\n   */\n  MozTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  MozTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  MozTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  MozTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  MozTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  MozTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozUserInput?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  msImeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  OAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  OAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  OAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  OAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  OBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  OBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  OObjectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  OObjectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  OTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  OTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  OTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  OTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  OTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  WebkitBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  WebkitBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  WebkitBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  WebkitBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  WebkitBoxPack?: Property.BoxPack | undefined;\n}\n\nexport interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  alignmentBaseline?: Property.AlignmentBaseline | undefined;\n  baselineShift?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  clipPath?: Property.ClipPath | undefined;\n  clipRule?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  colorInterpolation?: Property.ColorInterpolation | undefined;\n  colorRendering?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  dominantBaseline?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  fillOpacity?: Property.FillOpacity | undefined;\n  fillRule?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  floodColor?: Property.FloodColor | undefined;\n  floodOpacity?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  fontFamily?: Property.FontFamily | undefined;\n  fontSize?: Property.FontSize<TLength> | undefined;\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  fontStretch?: Property.FontStretch | undefined;\n  fontStyle?: Property.FontStyle | undefined;\n  fontVariant?: Property.FontVariant | undefined;\n  fontWeight?: Property.FontWeight | undefined;\n  glyphOrientationVertical?: Property.GlyphOrientationVertical | undefined;\n  imageRendering?: Property.ImageRendering | undefined;\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  lightingColor?: Property.LightingColor | undefined;\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  markerEnd?: Property.MarkerEnd | undefined;\n  markerMid?: Property.MarkerMid | undefined;\n  markerStart?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  paintOrder?: Property.PaintOrder | undefined;\n  pointerEvents?: Property.PointerEvents | undefined;\n  shapeRendering?: Property.ShapeRendering | undefined;\n  stopColor?: Property.StopColor | undefined;\n  stopOpacity?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  strokeDasharray?: Property.StrokeDasharray<TLength> | undefined;\n  strokeDashoffset?: Property.StrokeDashoffset<TLength> | undefined;\n  strokeLinecap?: Property.StrokeLinecap | undefined;\n  strokeLinejoin?: Property.StrokeLinejoin | undefined;\n  strokeMiterlimit?: Property.StrokeMiterlimit | undefined;\n  strokeOpacity?: Property.StrokeOpacity | undefined;\n  strokeWidth?: Property.StrokeWidth<TLength> | undefined;\n  textAnchor?: Property.TextAnchor | undefined;\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  textRendering?: Property.TextRendering | undefined;\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  vectorEffect?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  whiteSpace?: Property.WhiteSpace | undefined;\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  writingMode?: Property.WritingMode | undefined;\n}\n\nexport interface Properties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardProperties<TLength, TTime>,\n    VendorProperties<TLength, TTime>,\n    ObsoleteProperties<TLength, TTime>,\n    SvgProperties<TLength, TTime> {}\n\nexport interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  \"accent-color\"?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  \"align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  \"align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  \"align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  \"align-tracks\"?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** | **115** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  \"animation-composition\"?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  \"animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  \"animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  \"animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  \"animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  \"animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  \"animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  \"animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end\n   */\n  \"animation-range-end\"?: Property.AnimationRangeEnd<TLength> | undefined;\n  /**\n   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start\n   */\n  \"animation-range-start\"?: Property.AnimationRangeStart<TLength> | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  \"animation-timeline\"?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  \"animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  \"aspect-ratio\"?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  \"backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  \"backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  \"background-attachment\"?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  \"background-blend-mode\"?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  |  **5**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  \"background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  \"background-color\"?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  \"background-image\"?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  \"background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  \"background-position-x\"?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  \"background-position-y\"?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  \"background-repeat\"?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  \"background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  \"block-overflow\"?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  \"block-size\"?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  \"border-block-color\"?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  \"border-block-end-color\"?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  \"border-block-end-style\"?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  \"border-block-end-width\"?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  \"border-block-start-color\"?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  \"border-block-start-style\"?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  \"border-block-start-width\"?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  \"border-block-style\"?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  \"border-block-width\"?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  \"border-bottom-color\"?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  \"border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  \"border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  \"border-bottom-style\"?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  \"border-bottom-width\"?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  \"border-collapse\"?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  \"border-end-end-radius\"?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  \"border-end-start-radius\"?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  \"border-image-outset\"?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  \"border-image-repeat\"?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  \"border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  \"border-image-source\"?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  \"border-image-width\"?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  \"border-inline-color\"?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  \"border-inline-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  \"border-inline-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  \"border-inline-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  \"border-inline-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  \"border-inline-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  \"border-inline-start-width\"?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  \"border-inline-style\"?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  \"border-inline-width\"?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  \"border-left-color\"?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  \"border-left-style\"?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  \"border-left-width\"?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  \"border-right-color\"?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  \"border-right-style\"?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  \"border-right-width\"?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  \"border-spacing\"?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  \"border-start-end-radius\"?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  \"border-start-start-radius\"?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  \"border-top-color\"?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  \"border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  \"border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  \"border-top-style\"?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  \"border-top-width\"?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  \"box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  \"box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  \"box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  \"break-after\"?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  \"break-before\"?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  \"break-inside\"?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  \"caption-side\"?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  \"caret-color\"?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  \"caret-shape\"?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  \"clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  \"color-scheme\"?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  \"column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  \"column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  \"column-gap\"?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  \"column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  \"column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  \"column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  \"column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  \"column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  \"contain-intrinsic-block-size\"?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  \"contain-intrinsic-height\"?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  \"contain-intrinsic-inline-size\"?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  \"contain-intrinsic-width\"?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  \"container-name\"?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  \"container-type\"?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome |   Firefox   | Safari | Edge | IE  |\n   * | :----: | :---------: | :----: | :--: | :-: |\n   * | **85** | **preview** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  \"content-visibility\"?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  \"counter-increment\"?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  \"counter-reset\"?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **85** | **68**  | **17.2** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  \"counter-set\"?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  \"empty-cells\"?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  \"flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  \"flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  \"flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  \"flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  \"flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  \"font-family\"?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  \"font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  \"font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  \"font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  \"font-optical-sizing\"?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  \"font-palette\"?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  \"font-smooth\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  \"font-style\"?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps || position]`\n   *\n   * **Initial value**: `weight style small-caps position `\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  \"font-synthesis\"?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-synthesis-position`** CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using `font-variant-position` to set the positions.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **118** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position\n   */\n  \"font-synthesis-position\"?: Property.FontSynthesisPosition | undefined;\n  /**\n   * The **`font-synthesis-small-caps`** CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps\n   */\n  \"font-synthesis-small-caps\"?: Property.FontSynthesisSmallCaps | undefined;\n  /**\n   * The **`font-synthesis-style`** CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style\n   */\n  \"font-synthesis-style\"?: Property.FontSynthesisStyle | undefined;\n  /**\n   * The **`font-synthesis-weight`** CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight\n   */\n  \"font-synthesis-weight\"?: Property.FontSynthesisWeight | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  \"font-variant\"?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **111** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  \"font-variant-alternates\"?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  \"font-variant-caps\"?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  \"font-variant-east-asian\"?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  \"font-variant-emoji\"?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  \"font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  \"font-variant-numeric\"?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **117** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  \"font-variant-position\"?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  \"font-variation-settings\"?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  \"font-weight\"?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** | **113** |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  \"forced-color-adjust\"?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  \"grid-auto-columns\"?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  \"grid-auto-flow\"?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  \"grid-auto-rows\"?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  \"grid-column-end\"?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  \"grid-column-start\"?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  \"grid-row-end\"?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  \"grid-row-start\"?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  \"grid-template-areas\"?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  \"grid-template-columns\"?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  \"grid-template-rows\"?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  \"hanging-punctuation\"?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :-----: | :-----: | :-------: | :--: | :-: |\n   * | **106** | **98**  |  **17**   | n/a  | No  |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  \"hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  \"hyphenate-limit-chars\"?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |      IE      |\n   * | :------: | :-----: | :-------: | :----: | :----------: |\n   * |  **55**  | **43**  |  **17**   | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ | 5.1 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  \"image-orientation\"?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  \"image-resolution\"?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  \"initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  \"inline-size\"?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"input-security\"?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  \"inset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  \"inset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  \"inset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  \"inset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  \"justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  \"justify-items\"?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  \"justify-self\"?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  \"justify-tracks\"?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  \"line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  \"line-height-step\"?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  \"list-style-image\"?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  \"list-style-position\"?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  \"list-style-type\"?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  \"margin-block-end\"?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  \"margin-block-start\"?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  \"margin-bottom\"?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  \"margin-inline-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  \"margin-inline-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  \"margin-left\"?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  \"margin-right\"?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  \"margin-top\"?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  \"margin-trim\"?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  \"mask-border-mode\"?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-outset)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  \"mask-border-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-repeat)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  \"mask-border-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-slice)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  \"mask-border-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-source)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  \"mask-border-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-width)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  \"mask-border-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  \"mask-clip\"?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  \"mask-composite\"?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 16-79 | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  \"mask-image\"?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  \"mask-mode\"?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  \"mask-origin\"?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  \"mask-position\"?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  \"mask-repeat\"?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   * | 4 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  \"mask-size\"?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  \"mask-type\"?: Property.MaskType | undefined;\n  /**\n   * This feature is not Baseline because it does not work in some of the most widely-used browsers.\n   *\n   * **Syntax**: `[ pack | next ] || [ definite-first | ordered ]`\n   *\n   * **Initial value**: `pack`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\n   */\n  \"masonry-auto-flow\"?: Property.MasonryAutoFlow | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** | **117** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  \"math-depth\"?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  \"math-shift\"?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** | **117** | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  \"math-style\"?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  \"max-block-size\"?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  \"max-height\"?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  \"max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"max-lines\"?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  \"max-width\"?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  \"min-block-size\"?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  \"min-height\"?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  \"min-inline-size\"?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  \"min-width\"?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  \"mix-blend-mode\"?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"motion-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"motion-path\"?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"motion-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  \"object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  \"object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** | **72**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  \"offset-anchor\"?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"offset-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"offset-path\"?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `normal | auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  \"offset-position\"?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotate\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  \"outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  \"outline-offset\"?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  \"outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  \"outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  \"overflow-anchor\"?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  \"overflow-block\"?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"overflow-clip-box\"?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  \"overflow-clip-margin\"?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  \"overflow-inline\"?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"overflow-wrap\"?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  \"overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  \"overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The **`overlay`** CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal `<dialog>` element) is actually rendered in the top layer. This property is only relevant within a list of `transition-property` values, and only if `allow-discrete` is set as the `transition-behavior`.\n   *\n   * **Syntax**: `none | auto`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overlay\n   */\n  overlay?: Property.Overlay | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  \"overscroll-behavior-block\"?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  \"overscroll-behavior-inline\"?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  \"overscroll-behavior-x\"?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  \"overscroll-behavior-y\"?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  \"padding-block-end\"?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  \"padding-block-start\"?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  \"padding-bottom\"?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  \"padding-inline-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  \"padding-inline-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  \"padding-left\"?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  \"padding-right\"?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  \"padding-top\"?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari   | Edge | IE  |\n   * | :----: | :-----: | :-------: | :--: | :-: |\n   * | **85** | **110** | **≤13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  \"page-break-after\"?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  \"page-break-before\"?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  \"page-break-inside\"?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  \"perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  \"row-gap\"?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  \"ruby-align\"?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  \"ruby-merge\"?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  \"ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  \"scroll-behavior\"?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  \"scroll-margin-block-end\"?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  \"scroll-margin-block-start\"?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  \"scroll-margin-inline-end\"?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  \"scroll-margin-inline-start\"?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  \"scroll-padding-block-end\"?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  \"scroll-padding-block-start\"?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  \"scroll-padding-bottom\"?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  \"scroll-padding-inline-end\"?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  \"scroll-padding-inline-start\"?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  \"scroll-padding-left\"?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  \"scroll-padding-right\"?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  \"scroll-padding-top\"?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  \"scroll-snap-align\"?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-snap-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-snap-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-snap-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-snap-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  \"scroll-snap-stop\"?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  \"scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  \"scroll-timeline-axis\"?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  \"scroll-timeline-name\"?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  \"scrollbar-color\"?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  \"scrollbar-gutter\"?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  \"scrollbar-width\"?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  \"shape-image-threshold\"?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  \"shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  \"shape-outside\"?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  \"tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  \"table-layout\"?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  \"text-align\"?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  \"text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            |  Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :----: | :------------------------------------: |\n   * |           **48**           | **48**  |           **15.4**           | **79** | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  \"text-combine-upright\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  \"text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  \"text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  \"text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  \"text-decoration-skip-ink\"?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  \"text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-thickness\"?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  \"text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  \"text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  \"text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  \"text-indent\"?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge  |   IE   |\n   * | :----: | :-----: | :----: | :---: | :----: |\n   * |  n/a   | **55**  |   No   | 12-79 | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  \"text-justify\"?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  \"text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  \"text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  \"text-shadow\"?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  \"text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  \"text-transform\"?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  \"text-underline-offset\"?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  \"text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`text-wrap`** CSS property controls how text inside an element is wrapped. The different values provide:\n   *\n   * **Syntax**: `wrap | nowrap | balance | stable | pretty`\n   *\n   * **Initial value**: `wrap`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** | **121** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-wrap\n   */\n  \"text-wrap\"?: Property.TextWrap | undefined;\n  /**\n   * The **`timeline-scope`** CSS property modifies the scope of a named animation timeline.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/timeline-scope\n   */\n  \"timeline-scope\"?: Property.TimelineScope | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  \"touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  \"transform-box\"?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **36**  | **16**  |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ |         | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  \"transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **36**  | **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  \"transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-behavior`** CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.\n   *\n   * **Syntax**: `<transition-behavior-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-behavior\n   */\n  \"transition-behavior\"?: Property.TransitionBehavior | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  \"transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  \"transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  \"transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  \"transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  \"user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  \"vertical-align\"?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-timeline-axis`** CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline-axis` is set on the subject. See CSS scroll-driven animations for more details.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis\n   */\n  \"view-timeline-axis\"?: Property.ViewTimelineAxis | undefined;\n  /**\n   * The **`view-timeline-inset`** CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.\n   *\n   * **Syntax**: `[ [ auto | <length-percentage> ]{1,2} ]#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset\n   */\n  \"view-timeline-inset\"?: Property.ViewTimelineInset<TLength> | undefined;\n  /**\n   * The **`view-timeline-name`** CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-name\n   */\n  \"view-timeline-name\"?: Property.ViewTimelineName | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  \"view-transition-name\"?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  /**\n   * The **`white-space-collapse`** CSS property controls how white space inside an element is collapsed.\n   *\n   * **Syntax**: `collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces`\n   *\n   * **Initial value**: `collapse`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space-collapse\n   */\n  \"white-space-collapse\"?: Property.WhiteSpaceCollapse | undefined;\n  /**\n   * **Syntax**: `none | discard-before || discard-after || discard-inner`\n   *\n   * **Initial value**: `none`\n   */\n  \"white-space-trim\"?: Property.WhiteSpaceTrim | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  \"will-change\"?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  \"word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge   | IE  |\n   * | :-----: | :-----: | :-------: | :-----: | :-: |\n   * | **≤80** | **≤72** | **≤13.1** | **≤80** | No  |\n   */\n  \"word-wrap\"?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  \"writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  \"z-index\"?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   n/a   | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-range`** CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.\n   *\n   * **Syntax**: `[ <'animation-range-start'> <'animation-range-end'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range\n   */\n  \"animation-range\"?: Property.AnimationRange<TLength> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  \"background-position\"?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  \"border-block\"?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  \"border-block-end\"?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  \"border-block-start\"?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  \"border-bottom\"?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  \"border-color\"?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  \"border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  \"border-inline\"?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  \"border-inline-end\"?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  \"border-inline-start\"?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  \"border-left\"?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  \"border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  \"border-right\"?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  \"border-style\"?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  \"border-top\"?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  \"border-width\"?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  \"column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ auto? [ none | <length> ] ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  \"contain-intrinsic-size\"?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  \"flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  \"grid-area\"?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  \"grid-column\"?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  \"grid-row\"?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  \"grid-template\"?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  \"inset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  \"inset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"line-clamp\"?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  \"list-style\"?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  \"margin-block\"?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  \"margin-inline\"?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox |  Safari   | Edge  | IE  |\n   * | :----: | :-----: | :-------: | :---: | :-: |\n   * | **1**  | **53**  | **15.4**  | 12-79 | No  |\n   * |        |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |             Safari             | Edge | IE  |\n   * | :------------------------------: | :-----: | :----------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    |            **17.2**            | n/a  | No  |\n   * |                                  |         | 3.1 _(-webkit-mask-box-image)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  \"mask-border\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **94** | **88**  | **16.4** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  \"overscroll-behavior\"?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  \"padding-block\"?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  \"padding-inline\"?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  \"place-content\"?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  \"place-items\"?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  \"place-self\"?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  \"scroll-margin-block\"?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  \"scroll-margin-inline\"?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  \"scroll-padding\"?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  \"scroll-padding-block\"?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  \"scroll-padding-inline\"?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-snap-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  \"scroll-timeline\"?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  \"text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`view-timeline`** CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `[ <'view-timeline-name'> <'view-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline\n   */\n  \"view-timeline\"?: Property.ViewTimeline | undefined;\n}\n\nexport interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphen<TLength, TTime>,\n    StandardShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-moz-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-moz-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-moz-appearance\"?: Property.MozAppearance | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-binding\"?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-bottom-colors\"?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-border-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-left-colors\"?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-right-colors\"?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-top-colors\"?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-moz-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-context-properties\"?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-moz-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-image-region\"?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  \"-moz-orient\"?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-osx-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomleft\"?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomright\"?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topleft\"?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topright\"?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  \"-moz-stack-sizing\"?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-moz-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-text-blink\"?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-moz-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-user-focus\"?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-moz-user-modify\"?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  \"-moz-window-dragging\"?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-moz-window-shadow\"?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  \"-ms-accelerator\"?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  \"-ms-block-progression\"?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-chaining\"?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  \"-ms-content-zoom-limit-max\"?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-ms-content-zoom-limit-min\"?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  \"-ms-content-zoom-snap-points\"?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-snap-type\"?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  \"-ms-content-zooming\"?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  \"-ms-filter\"?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-ms-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-flex-positive\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-from\"?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-into\"?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-columns\"?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-rows\"?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-high-contrast-adjust\"?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-hyphenate-limit-chars\"?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  \"-ms-hyphenate-limit-lines\"?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-hyphenate-limit-zone\"?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-ms-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-ime-align\"?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-order\"?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-overflow-style\"?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  \"-ms-scroll-chaining\"?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-x-max\"?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-x-min\"?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-y-max\"?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-y-min\"?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  \"-ms-scroll-rails\"?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-x\"?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-y\"?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-snap-type\"?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-translation\"?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-3dlight-color\"?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  \"-ms-scrollbar-arrow-color\"?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-base-color\"?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-darkshadow-color\"?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  \"-ms-scrollbar-face-color\"?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  \"-ms-scrollbar-highlight-color\"?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-shadow-color\"?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  \"-ms-scrollbar-track-color\"?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-autospace\"?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-combine-horizontal\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-ms-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  \"-ms-touch-select\"?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-ms-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-ms-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-ms-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  \"-ms-user-select\"?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-ms-word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-wrap-flow\"?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-wrap-margin\"?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  \"-ms-wrap-through\"?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-ms-writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-webkit-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-webkit-appearance\"?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-webkit-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  \"-webkit-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"-webkit-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-border-before-color\"?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-border-before-style\"?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-border-before-width\"?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-webkit-border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  \"-webkit-box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-reflect\"?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-webkit-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-webkit-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-filter\"?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-webkit-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  \"-webkit-flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-webkit-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-line-clamp\"?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  \"-webkit-mask-attachment\"?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  \"-webkit-mask-box-image-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-box-image-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-mask-box-image-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  \"-webkit-mask-clip\"?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  \"-webkit-mask-composite\"?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-image\"?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  \"-webkit-mask-origin\"?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  \"-webkit-mask-position\"?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-x\"?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-y\"?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat\"?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-x\"?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-y\"?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-mask-size\"?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-order\"?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-overflow-scrolling\"?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-webkit-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  \"-webkit-print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  \"-webkit-ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  \"-webkit-tap-highlight-color\"?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-combine\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  \"-webkit-text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  \"-webkit-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  \"-webkit-text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-fill-color\"?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  \"-webkit-text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-webkit-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-stroke-color\"?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-text-stroke-width\"?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-webkit-touch-callout\"?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-webkit-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-webkit-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-webkit-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-webkit-user-modify\"?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-webkit-writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-moz-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-moz-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-moz-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-moz-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   */\n  \"-moz-outline-radius\"?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  \"-ms-content-zoom-limit\"?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  \"-ms-content-zoom-snap\"?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-ms-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  \"-ms-scroll-limit\"?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  \"-ms-scroll-snap-x\"?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  \"-ms-scroll-snap-y\"?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-ms-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-webkit-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  \"-webkit-border-before\"?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-webkit-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  \"-webkit-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-webkit-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-webkit-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-webkit-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  \"-webkit-flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  \"-webkit-mask\"?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  \"-webkit-mask-box-image\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  \"-webkit-text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  \"-webkit-text-stroke\"?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-webkit-transition\"?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphen<TLength, TTime>,\n    VendorShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-column-gap\"?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  \"grid-gap\"?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-row-gap\"?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-coordinate\"?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-destination\"?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-x\"?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-y\"?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-khtml-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * @deprecated\n   */\n  \"-moz-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  \"-moz-background-inline-policy\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-moz-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomleft\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomright\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topleft\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topright\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-moz-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-moz-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-moz-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-moz-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  \"-moz-float-edge\"?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-force-broken-image-icon\"?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  \"-moz-outline\"?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  \"-moz-outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-moz-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-moz-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * @deprecated\n   */\n  \"-moz-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-moz-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-moz-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-user-input\"?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-ms-ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  \"-o-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-o-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-o-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  \"-o-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-o-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  \"-o-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  \"-o-object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-o-object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  \"-o-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  \"-o-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-o-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-o-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-o-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-webkit-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-pack\"?: Property.BoxPack | undefined;\n}\n\nexport interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  \"alignment-baseline\"?: Property.AlignmentBaseline | undefined;\n  \"baseline-shift\"?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  \"clip-path\"?: Property.ClipPath | undefined;\n  \"clip-rule\"?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  \"color-interpolation\"?: Property.ColorInterpolation | undefined;\n  \"color-rendering\"?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  \"dominant-baseline\"?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  \"fill-opacity\"?: Property.FillOpacity | undefined;\n  \"fill-rule\"?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  \"flood-color\"?: Property.FloodColor | undefined;\n  \"flood-opacity\"?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  \"font-family\"?: Property.FontFamily | undefined;\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  \"font-style\"?: Property.FontStyle | undefined;\n  \"font-variant\"?: Property.FontVariant | undefined;\n  \"font-weight\"?: Property.FontWeight | undefined;\n  \"glyph-orientation-vertical\"?: Property.GlyphOrientationVertical | undefined;\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  \"lighting-color\"?: Property.LightingColor | undefined;\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  \"marker-end\"?: Property.MarkerEnd | undefined;\n  \"marker-mid\"?: Property.MarkerMid | undefined;\n  \"marker-start\"?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  \"shape-rendering\"?: Property.ShapeRendering | undefined;\n  \"stop-color\"?: Property.StopColor | undefined;\n  \"stop-opacity\"?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  \"stroke-dasharray\"?: Property.StrokeDasharray<TLength> | undefined;\n  \"stroke-dashoffset\"?: Property.StrokeDashoffset<TLength> | undefined;\n  \"stroke-linecap\"?: Property.StrokeLinecap | undefined;\n  \"stroke-linejoin\"?: Property.StrokeLinejoin | undefined;\n  \"stroke-miterlimit\"?: Property.StrokeMiterlimit | undefined;\n  \"stroke-opacity\"?: Property.StrokeOpacity | undefined;\n  \"stroke-width\"?: Property.StrokeWidth<TLength> | undefined;\n  \"text-anchor\"?: Property.TextAnchor | undefined;\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  \"vector-effect\"?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  \"writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphen<TLength, TTime>,\n    VendorPropertiesHyphen<TLength, TTime>,\n    ObsoletePropertiesHyphen<TLength, TTime>,\n    SvgPropertiesHyphen<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;\n\nexport interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesFallback<TLength, TTime>,\n    StandardShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;\n\nexport interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesFallback<TLength, TTime>,\n    VendorShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;\n\nexport type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;\n\nexport interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesFallback<TLength, TTime>,\n    VendorPropertiesFallback<TLength, TTime>,\n    ObsoletePropertiesFallback<TLength, TTime>,\n    SvgPropertiesFallback<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>,\n    StandardShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>,\n    VendorShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;\n\nexport type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;\n\nexport interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphenFallback<TLength, TTime>,\n    VendorPropertiesHyphenFallback<TLength, TTime>,\n    ObsoletePropertiesHyphenFallback<TLength, TTime>,\n    SvgPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type AtRules =\n  | \"@charset\"\n  | \"@counter-style\"\n  | \"@document\"\n  | \"@font-face\"\n  | \"@font-feature-values\"\n  | \"@font-palette-values\"\n  | \"@import\"\n  | \"@keyframes\"\n  | \"@layer\"\n  | \"@media\"\n  | \"@namespace\"\n  | \"@page\"\n  | \"@property\"\n  | \"@scope\"\n  | \"@scroll-timeline\"\n  | \"@starting-style\"\n  | \"@supports\"\n  | \"@viewport\";\n\nexport type AdvancedPseudos =\n  | \":-moz-any()\"\n  | \":-moz-dir\"\n  | \":-webkit-any()\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::part\"\n  | \"::slotted\"\n  | \"::view-transition-group\"\n  | \"::view-transition-image-pair\"\n  | \"::view-transition-new\"\n  | \"::view-transition-old\"\n  | \":dir\"\n  | \":has\"\n  | \":host\"\n  | \":host-context\"\n  | \":is\"\n  | \":lang\"\n  | \":matches()\"\n  | \":not\"\n  | \":nth-child\"\n  | \":nth-last-child\"\n  | \":nth-last-of-type\"\n  | \":nth-of-type\"\n  | \":where\";\n\nexport type SimplePseudos =\n  | \":-khtml-any-link\"\n  | \":-moz-any-link\"\n  | \":-moz-focusring\"\n  | \":-moz-full-screen\"\n  | \":-moz-placeholder\"\n  | \":-moz-read-only\"\n  | \":-moz-read-write\"\n  | \":-moz-ui-invalid\"\n  | \":-moz-ui-valid\"\n  | \":-ms-fullscreen\"\n  | \":-ms-input-placeholder\"\n  | \":-webkit-any-link\"\n  | \":-webkit-full-screen\"\n  | \"::-moz-placeholder\"\n  | \"::-moz-progress-bar\"\n  | \"::-moz-range-progress\"\n  | \"::-moz-range-thumb\"\n  | \"::-moz-range-track\"\n  | \"::-moz-selection\"\n  | \"::-ms-backdrop\"\n  | \"::-ms-browse\"\n  | \"::-ms-check\"\n  | \"::-ms-clear\"\n  | \"::-ms-expand\"\n  | \"::-ms-fill\"\n  | \"::-ms-fill-lower\"\n  | \"::-ms-fill-upper\"\n  | \"::-ms-input-placeholder\"\n  | \"::-ms-reveal\"\n  | \"::-ms-thumb\"\n  | \"::-ms-ticks-after\"\n  | \"::-ms-ticks-before\"\n  | \"::-ms-tooltip\"\n  | \"::-ms-track\"\n  | \"::-ms-value\"\n  | \"::-webkit-backdrop\"\n  | \"::-webkit-input-placeholder\"\n  | \"::-webkit-progress-bar\"\n  | \"::-webkit-progress-inner-value\"\n  | \"::-webkit-progress-value\"\n  | \"::-webkit-slider-runnable-track\"\n  | \"::-webkit-slider-thumb\"\n  | \"::after\"\n  | \"::backdrop\"\n  | \"::before\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::first-letter\"\n  | \"::first-line\"\n  | \"::grammar-error\"\n  | \"::marker\"\n  | \"::placeholder\"\n  | \"::selection\"\n  | \"::spelling-error\"\n  | \"::target-text\"\n  | \"::view-transition\"\n  | \":active\"\n  | \":after\"\n  | \":any-link\"\n  | \":before\"\n  | \":blank\"\n  | \":checked\"\n  | \":current\"\n  | \":default\"\n  | \":defined\"\n  | \":disabled\"\n  | \":empty\"\n  | \":enabled\"\n  | \":first\"\n  | \":first-child\"\n  | \":first-letter\"\n  | \":first-line\"\n  | \":first-of-type\"\n  | \":focus\"\n  | \":focus-visible\"\n  | \":focus-within\"\n  | \":fullscreen\"\n  | \":future\"\n  | \":hover\"\n  | \":in-range\"\n  | \":indeterminate\"\n  | \":invalid\"\n  | \":last-child\"\n  | \":last-of-type\"\n  | \":left\"\n  | \":link\"\n  | \":local-link\"\n  | \":nth-col\"\n  | \":nth-last-col\"\n  | \":only-child\"\n  | \":only-of-type\"\n  | \":optional\"\n  | \":out-of-range\"\n  | \":past\"\n  | \":paused\"\n  | \":picture-in-picture\"\n  | \":placeholder-shown\"\n  | \":playing\"\n  | \":read-only\"\n  | \":read-write\"\n  | \":required\"\n  | \":right\"\n  | \":root\"\n  | \":scope\"\n  | \":target\"\n  | \":target-within\"\n  | \":user-invalid\"\n  | \":user-valid\"\n  | \":valid\"\n  | \":visited\";\n\nexport type Pseudos = AdvancedPseudos | SimplePseudos;\n\nexport type HtmlAttributes =\n  | \"[abbr]\"\n  | \"[accept-charset]\"\n  | \"[accept]\"\n  | \"[accesskey]\"\n  | \"[action]\"\n  | \"[align]\"\n  | \"[alink]\"\n  | \"[allow]\"\n  | \"[allowfullscreen]\"\n  | \"[allowpaymentrequest]\"\n  | \"[alt]\"\n  | \"[archive]\"\n  | \"[async]\"\n  | \"[attributionsrc]\"\n  | \"[autobuffer]\"\n  | \"[autocapitalize]\"\n  | \"[autocomplete]\"\n  | \"[autofocus]\"\n  | \"[autoplay]\"\n  | \"[axis]\"\n  | \"[background]\"\n  | \"[behavior]\"\n  | \"[bgcolor]\"\n  | \"[blocking]\"\n  | \"[border]\"\n  | \"[bottommargin]\"\n  | \"[browsingtopics]\"\n  | \"[capture]\"\n  | \"[cellpadding]\"\n  | \"[cellspacing]\"\n  | \"[char]\"\n  | \"[charoff]\"\n  | \"[charset]\"\n  | \"[checked]\"\n  | \"[cite]\"\n  | \"[class]\"\n  | \"[classid]\"\n  | \"[clear]\"\n  | \"[codebase]\"\n  | \"[codetype]\"\n  | \"[color]\"\n  | \"[cols]\"\n  | \"[colspan]\"\n  | \"[compact]\"\n  | \"[content]\"\n  | \"[contenteditable]\"\n  | \"[contextmenu]\"\n  | \"[controls]\"\n  | \"[coords]\"\n  | \"[credentialless]\"\n  | \"[crossorigin]\"\n  | \"[data]\"\n  | \"[datetime]\"\n  | \"[declare]\"\n  | \"[decoding]\"\n  | \"[default]\"\n  | \"[defer]\"\n  | \"[dir]\"\n  | \"[direction]\"\n  | \"[dirname]\"\n  | \"[disabled]\"\n  | \"[download]\"\n  | \"[draggable]\"\n  | \"[enctype]\"\n  | \"[enterkeyhint]\"\n  | \"[exportparts]\"\n  | \"[face]\"\n  | \"[fetchpriority]\"\n  | \"[for]\"\n  | \"[form]\"\n  | \"[formaction]\"\n  | \"[formenctype]\"\n  | \"[formmethod]\"\n  | \"[formnovalidate]\"\n  | \"[formtarget]\"\n  | \"[frame]\"\n  | \"[frameborder]\"\n  | \"[headers]\"\n  | \"[height]\"\n  | \"[hidden]\"\n  | \"[high]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[hspace]\"\n  | \"[http-equiv]\"\n  | \"[id]\"\n  | \"[imagesizes]\"\n  | \"[imagesrcset]\"\n  | \"[inert]\"\n  | \"[inputmode]\"\n  | \"[integrity]\"\n  | \"[is]\"\n  | \"[ismap]\"\n  | \"[itemid]\"\n  | \"[itemprop]\"\n  | \"[itemref]\"\n  | \"[itemscope]\"\n  | \"[itemtype]\"\n  | \"[kind]\"\n  | \"[label]\"\n  | \"[lang]\"\n  | \"[language]\"\n  | \"[leftmargin]\"\n  | \"[link]\"\n  | \"[list]\"\n  | \"[loading]\"\n  | \"[longdesc]\"\n  | \"[loop]\"\n  | \"[low]\"\n  | \"[manifest]\"\n  | \"[marginheight]\"\n  | \"[marginwidth]\"\n  | \"[max]\"\n  | \"[maxlength]\"\n  | \"[media]\"\n  | \"[method]\"\n  | \"[methods]\"\n  | \"[min]\"\n  | \"[minlength]\"\n  | \"[moz-opaque]\"\n  | \"[mozactionhint]\"\n  | \"[mozallowfullscreen]\"\n  | \"[msallowfullscreen]\"\n  | \"[multiple]\"\n  | \"[muted]\"\n  | \"[name]\"\n  | \"[nohref]\"\n  | \"[nomodule]\"\n  | \"[nonce]\"\n  | \"[noresize]\"\n  | \"[noshade]\"\n  | \"[novalidate]\"\n  | \"[nowrap]\"\n  | \"[onerror]\"\n  | \"[open]\"\n  | \"[optimum]\"\n  | \"[part]\"\n  | \"[pattern]\"\n  | \"[ping]\"\n  | \"[placeholder]\"\n  | \"[popover]\"\n  | \"[popovertarget]\"\n  | \"[popovertargetaction]\"\n  | \"[poster]\"\n  | \"[preload]\"\n  | \"[profile]\"\n  | \"[readonly]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[required]\"\n  | \"[rev]\"\n  | \"[reversed]\"\n  | \"[rightmargin]\"\n  | \"[rows]\"\n  | \"[rowspan]\"\n  | \"[rules]\"\n  | \"[sandbox]\"\n  | \"[scope]\"\n  | \"[scrollamount]\"\n  | \"[scrolldelay]\"\n  | \"[scrolling]\"\n  | \"[selected]\"\n  | \"[shadowroot]\"\n  | \"[shadowrootmode]\"\n  | \"[shape]\"\n  | \"[size]\"\n  | \"[sizes]\"\n  | \"[slot]\"\n  | \"[span]\"\n  | \"[spellcheck]\"\n  | \"[src]\"\n  | \"[srcdoc]\"\n  | \"[srclang]\"\n  | \"[srcset]\"\n  | \"[standby]\"\n  | \"[start]\"\n  | \"[step]\"\n  | \"[style]\"\n  | \"[summary]\"\n  | \"[tabindex]\"\n  | \"[target]\"\n  | \"[text]\"\n  | \"[title]\"\n  | \"[topmargin]\"\n  | \"[translate]\"\n  | \"[truespeed]\"\n  | \"[type]\"\n  | \"[usemap]\"\n  | \"[valign]\"\n  | \"[value]\"\n  | \"[valuetype]\"\n  | \"[version]\"\n  | \"[virtualkeyboardpolicy]\"\n  | \"[vlink]\"\n  | \"[vspace]\"\n  | \"[webkitallowfullscreen]\"\n  | \"[width]\"\n  | \"[wrap]\"\n  | \"[x-moz-errormessage]\"\n  | \"[xmlns]\";\n\nexport type SvgAttributes =\n  | \"[accent-height]\"\n  | \"[alignment-baseline]\"\n  | \"[allowReorder]\"\n  | \"[alphabetic]\"\n  | \"[animation]\"\n  | \"[arabic-form]\"\n  | \"[ascent]\"\n  | \"[async]\"\n  | \"[attributeName]\"\n  | \"[attributeType]\"\n  | \"[azimuth]\"\n  | \"[baseFrequency]\"\n  | \"[baseProfile]\"\n  | \"[baseline-shift]\"\n  | \"[bbox]\"\n  | \"[bias]\"\n  | \"[by]\"\n  | \"[calcMode]\"\n  | \"[cap-height]\"\n  | \"[class]\"\n  | \"[clip-path]\"\n  | \"[clip-rule]\"\n  | \"[clipPathUnits]\"\n  | \"[clip]\"\n  | \"[color-interpolation-filters]\"\n  | \"[color-interpolation]\"\n  | \"[color-profile]\"\n  | \"[color]\"\n  | \"[contentScriptType]\"\n  | \"[contentStyleType]\"\n  | \"[crossorigin]\"\n  | \"[cursor]\"\n  | \"[cx]\"\n  | \"[cy]\"\n  | \"[d]\"\n  | \"[decoding]\"\n  | \"[defer]\"\n  | \"[descent]\"\n  | \"[diffuseConstant]\"\n  | \"[direction]\"\n  | \"[display]\"\n  | \"[divisor]\"\n  | \"[document]\"\n  | \"[dominant-baseline]\"\n  | \"[download]\"\n  | \"[dur]\"\n  | \"[dx]\"\n  | \"[dy]\"\n  | \"[edgeMode]\"\n  | \"[elevation]\"\n  | \"[enable-background]\"\n  | \"[fill-opacity]\"\n  | \"[fill-rule]\"\n  | \"[fill]\"\n  | \"[filterRes]\"\n  | \"[filterUnits]\"\n  | \"[filter]\"\n  | \"[flood-color]\"\n  | \"[flood-opacity]\"\n  | \"[font-family]\"\n  | \"[font-size-adjust]\"\n  | \"[font-size]\"\n  | \"[font-stretch]\"\n  | \"[font-style]\"\n  | \"[font-variant]\"\n  | \"[font-weight]\"\n  | \"[format]\"\n  | \"[fr]\"\n  | \"[from]\"\n  | \"[fx]\"\n  | \"[fy]\"\n  | \"[g1]\"\n  | \"[g2]\"\n  | \"[global]\"\n  | \"[glyph-name]\"\n  | \"[glyph-orientation-horizontal]\"\n  | \"[glyph-orientation-vertical]\"\n  | \"[glyphRef]\"\n  | \"[gradientTransform]\"\n  | \"[gradientUnits]\"\n  | \"[graphical]\"\n  | \"[hanging]\"\n  | \"[height]\"\n  | \"[horiz-adv-x]\"\n  | \"[horiz-origin-x]\"\n  | \"[horiz-origin-y]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[id]\"\n  | \"[ideographic]\"\n  | \"[image-rendering]\"\n  | \"[in2]\"\n  | \"[in]\"\n  | \"[k1]\"\n  | \"[k2]\"\n  | \"[k3]\"\n  | \"[k4]\"\n  | \"[k]\"\n  | \"[kernelMatrix]\"\n  | \"[kernelUnitLength]\"\n  | \"[kerning]\"\n  | \"[keyPoints]\"\n  | \"[lang]\"\n  | \"[lengthAdjust]\"\n  | \"[letter-spacing]\"\n  | \"[lighting-color]\"\n  | \"[limitingConeAngle]\"\n  | \"[marker-end]\"\n  | \"[marker-mid]\"\n  | \"[marker-start]\"\n  | \"[markerHeight]\"\n  | \"[markerUnits]\"\n  | \"[markerWidth]\"\n  | \"[maskContentUnits]\"\n  | \"[maskUnits]\"\n  | \"[mask]\"\n  | \"[mathematical]\"\n  | \"[media]\"\n  | \"[mode]\"\n  | \"[name]\"\n  | \"[numOctaves]\"\n  | \"[offset]\"\n  | \"[opacity]\"\n  | \"[operator]\"\n  | \"[order]\"\n  | \"[orient]\"\n  | \"[orientation]\"\n  | \"[origin]\"\n  | \"[overflow]\"\n  | \"[overline-position]\"\n  | \"[overline-thickness]\"\n  | \"[paint-order]\"\n  | \"[panose-1]\"\n  | \"[path]\"\n  | \"[patternContentUnits]\"\n  | \"[patternTransform]\"\n  | \"[patternUnits]\"\n  | \"[ping]\"\n  | \"[pointer-events]\"\n  | \"[pointsAtX]\"\n  | \"[pointsAtY]\"\n  | \"[pointsAtZ]\"\n  | \"[points]\"\n  | \"[preserveAlpha]\"\n  | \"[preserveAspectRatio]\"\n  | \"[primitiveUnits]\"\n  | \"[r]\"\n  | \"[radius]\"\n  | \"[refX]\"\n  | \"[refY]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[repeatCount]\"\n  | \"[requiredExtensions]\"\n  | \"[requiredFeatures]\"\n  | \"[rotate]\"\n  | \"[rx]\"\n  | \"[ry]\"\n  | \"[scale]\"\n  | \"[seed]\"\n  | \"[shape-rendering]\"\n  | \"[side]\"\n  | \"[slope]\"\n  | \"[solid-color]\"\n  | \"[solid-opacity]\"\n  | \"[spacing]\"\n  | \"[specularConstant]\"\n  | \"[specularExponent]\"\n  | \"[spreadMethod]\"\n  | \"[startOffset]\"\n  | \"[stdDeviation]\"\n  | \"[stemh]\"\n  | \"[stemv]\"\n  | \"[stitchTiles]\"\n  | \"[stop-color]\"\n  | \"[stop-opacity]\"\n  | \"[strikethrough-position]\"\n  | \"[strikethrough-thickness]\"\n  | \"[string]\"\n  | \"[stroke-dasharray]\"\n  | \"[stroke-dashoffset]\"\n  | \"[stroke-linecap]\"\n  | \"[stroke-linejoin]\"\n  | \"[stroke-miterlimit]\"\n  | \"[stroke-opacity]\"\n  | \"[stroke-width]\"\n  | \"[stroke]\"\n  | \"[style]\"\n  | \"[surfaceScale]\"\n  | \"[systemLanguage]\"\n  | \"[tabindex]\"\n  | \"[targetX]\"\n  | \"[targetY]\"\n  | \"[target]\"\n  | \"[text-anchor]\"\n  | \"[text-decoration]\"\n  | \"[text-overflow]\"\n  | \"[text-rendering]\"\n  | \"[textLength]\"\n  | \"[title]\"\n  | \"[to]\"\n  | \"[transform-origin]\"\n  | \"[transform]\"\n  | \"[type]\"\n  | \"[u1]\"\n  | \"[u2]\"\n  | \"[underline-position]\"\n  | \"[underline-thickness]\"\n  | \"[unicode-bidi]\"\n  | \"[unicode-range]\"\n  | \"[unicode]\"\n  | \"[units-per-em]\"\n  | \"[v-alphabetic]\"\n  | \"[v-hanging]\"\n  | \"[v-ideographic]\"\n  | \"[v-mathematical]\"\n  | \"[values]\"\n  | \"[vector-effect]\"\n  | \"[version]\"\n  | \"[vert-adv-y]\"\n  | \"[vert-origin-x]\"\n  | \"[vert-origin-y]\"\n  | \"[viewBox]\"\n  | \"[viewTarget]\"\n  | \"[visibility]\"\n  | \"[white-space]\"\n  | \"[width]\"\n  | \"[widths]\"\n  | \"[word-spacing]\"\n  | \"[writing-mode]\"\n  | \"[x-height]\"\n  | \"[x1]\"\n  | \"[x2]\"\n  | \"[xChannelSelector]\"\n  | \"[x]\"\n  | \"[y1]\"\n  | \"[y2]\"\n  | \"[yChannelSelector]\"\n  | \"[y]\"\n  | \"[z]\"\n  | \"[zoomAndPan]\";\n\nexport type Globals = \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\";\n\nexport namespace Property {\n  export type AccentColor = Globals | DataType.Color | \"auto\";\n\n  export type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type AlignItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type All = Globals;\n\n  export type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});\n\n  export type AnimationComposition = Globals | DataType.SingleAnimationComposition | (string & {});\n\n  export type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});\n\n  export type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});\n\n  export type AnimationIterationCount = Globals | \"infinite\" | (string & {}) | (number & {});\n\n  export type AnimationName = Globals | \"none\" | (string & {});\n\n  export type AnimationPlayState = Globals | \"paused\" | \"running\" | (string & {});\n\n  export type AnimationRange<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationRangeEnd<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationRangeStart<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationTimeline = Globals | DataType.SingleAnimationTimeline | (string & {});\n\n  export type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Appearance = Globals | DataType.CompatAuto | \"auto\" | \"menulist-button\" | \"none\" | \"textfield\";\n\n  export type AspectRatio = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Azimuth =\n    | Globals\n    | \"behind\"\n    | \"center\"\n    | \"center-left\"\n    | \"center-right\"\n    | \"far-left\"\n    | \"far-right\"\n    | \"left\"\n    | \"left-side\"\n    | \"leftwards\"\n    | \"right\"\n    | \"right-side\"\n    | \"rightwards\"\n    | (string & {});\n\n  export type BackdropFilter = Globals | \"none\" | (string & {});\n\n  export type BackfaceVisibility = Globals | \"hidden\" | \"visible\";\n\n  export type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});\n\n  export type BackgroundAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});\n\n  export type BackgroundClip = Globals | DataType.Box | (string & {});\n\n  export type BackgroundColor = Globals | DataType.Color;\n\n  export type BackgroundImage = Globals | \"none\" | (string & {});\n\n  export type BackgroundOrigin = Globals | DataType.Box | (string & {});\n\n  export type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});\n\n  export type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | \"x-end\" | \"x-start\" | (string & {});\n\n  export type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | \"y-end\" | \"y-start\" | (string & {});\n\n  export type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type BlockOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type BlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockColor = Globals | DataType.Color | (string & {});\n\n  export type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockEndColor = Globals | DataType.Color;\n\n  export type BorderBlockEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockStartColor = Globals | DataType.Color;\n\n  export type BorderBlockStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBottomColor = Globals | DataType.Color;\n\n  export type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomStyle = Globals | DataType.LineStyle;\n\n  export type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderCollapse = Globals | \"collapse\" | \"separate\";\n\n  export type BorderColor = Globals | DataType.Color | (string & {});\n\n  export type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderImage = Globals | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type BorderImageRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type BorderImageSlice = Globals | (string & {}) | (number & {});\n\n  export type BorderImageSource = Globals | \"none\" | (string & {});\n\n  export type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineColor = Globals | DataType.Color | (string & {});\n\n  export type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineEndColor = Globals | DataType.Color;\n\n  export type BorderInlineEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineStartColor = Globals | DataType.Color;\n\n  export type BorderInlineStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderLeftColor = Globals | DataType.Color;\n\n  export type BorderLeftStyle = Globals | DataType.LineStyle;\n\n  export type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderRightColor = Globals | DataType.Color;\n\n  export type BorderRightStyle = Globals | DataType.LineStyle;\n\n  export type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderTopColor = Globals | DataType.Color;\n\n  export type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopStyle = Globals | DataType.LineStyle;\n\n  export type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type Bottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type BoxAlign = Globals | \"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\";\n\n  export type BoxDecorationBreak = Globals | \"clone\" | \"slice\";\n\n  export type BoxDirection = Globals | \"inherit\" | \"normal\" | \"reverse\";\n\n  export type BoxFlex = Globals | (number & {}) | (string & {});\n\n  export type BoxFlexGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxLines = Globals | \"multiple\" | \"single\";\n\n  export type BoxOrdinalGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxOrient = Globals | \"block-axis\" | \"horizontal\" | \"inherit\" | \"inline-axis\" | \"vertical\";\n\n  export type BoxPack = Globals | \"center\" | \"end\" | \"justify\" | \"start\";\n\n  export type BoxShadow = Globals | \"none\" | (string & {});\n\n  export type BoxSizing = Globals | \"border-box\" | \"content-box\";\n\n  export type BreakAfter =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakBefore =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakInside = Globals | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\";\n\n  export type CaptionSide = Globals | \"block-end\" | \"block-start\" | \"bottom\" | \"inline-end\" | \"inline-start\" | \"top\";\n\n  export type Caret = Globals | DataType.Color | \"auto\" | \"bar\" | \"block\" | \"underscore\" | (string & {});\n\n  export type CaretColor = Globals | DataType.Color | \"auto\";\n\n  export type CaretShape = Globals | \"auto\" | \"bar\" | \"block\" | \"underscore\";\n\n  export type Clear = Globals | \"both\" | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Clip = Globals | \"auto\" | (string & {});\n\n  export type ClipPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n\n  export type Color = Globals | DataType.Color;\n\n  export type PrintColorAdjust = Globals | \"economy\" | \"exact\";\n\n  export type ColorScheme = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type ColumnCount = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type ColumnFill = Globals | \"auto\" | \"balance\" | \"balance-all\";\n\n  export type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type ColumnRuleColor = Globals | DataType.Color;\n\n  export type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type ColumnSpan = Globals | \"all\" | \"none\";\n\n  export type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type Columns<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type Contain = Globals | \"content\" | \"inline-size\" | \"layout\" | \"none\" | \"paint\" | \"size\" | \"strict\" | \"style\" | (string & {});\n\n  export type ContainIntrinsicBlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicHeight<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicInlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicWidth<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type Container = Globals | \"none\" | (string & {});\n\n  export type ContainerName = Globals | \"none\" | (string & {});\n\n  export type ContainerType = Globals | \"inline-size\" | \"normal\" | \"size\";\n\n  export type Content = Globals | DataType.ContentList | \"none\" | \"normal\" | (string & {});\n\n  export type ContentVisibility = Globals | \"auto\" | \"hidden\" | \"visible\";\n\n  export type CounterIncrement = Globals | \"none\" | (string & {});\n\n  export type CounterReset = Globals | \"none\" | (string & {});\n\n  export type CounterSet = Globals | \"none\" | (string & {});\n\n  export type Cursor =\n    | Globals\n    | \"-moz-grab\"\n    | \"-webkit-grab\"\n    | \"alias\"\n    | \"all-scroll\"\n    | \"auto\"\n    | \"cell\"\n    | \"col-resize\"\n    | \"context-menu\"\n    | \"copy\"\n    | \"crosshair\"\n    | \"default\"\n    | \"e-resize\"\n    | \"ew-resize\"\n    | \"grab\"\n    | \"grabbing\"\n    | \"help\"\n    | \"move\"\n    | \"n-resize\"\n    | \"ne-resize\"\n    | \"nesw-resize\"\n    | \"no-drop\"\n    | \"none\"\n    | \"not-allowed\"\n    | \"ns-resize\"\n    | \"nw-resize\"\n    | \"nwse-resize\"\n    | \"pointer\"\n    | \"progress\"\n    | \"row-resize\"\n    | \"s-resize\"\n    | \"se-resize\"\n    | \"sw-resize\"\n    | \"text\"\n    | \"vertical-text\"\n    | \"w-resize\"\n    | \"wait\"\n    | \"zoom-in\"\n    | \"zoom-out\"\n    | (string & {});\n\n  export type Direction = Globals | \"ltr\" | \"rtl\";\n\n  export type Display =\n    | Globals\n    | DataType.DisplayOutside\n    | DataType.DisplayInside\n    | DataType.DisplayInternal\n    | DataType.DisplayLegacy\n    | \"contents\"\n    | \"list-item\"\n    | \"none\"\n    | (string & {});\n\n  export type EmptyCells = Globals | \"hide\" | \"show\";\n\n  export type Filter = Globals | \"none\" | (string & {});\n\n  export type Flex<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"content\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {}) | (number & {});\n\n  export type FlexBasis<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-auto\"\n    | \"auto\"\n    | \"content\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type FlexDirection = Globals | \"column\" | \"column-reverse\" | \"row\" | \"row-reverse\";\n\n  export type FlexFlow = Globals | \"column\" | \"column-reverse\" | \"nowrap\" | \"row\" | \"row-reverse\" | \"wrap\" | \"wrap-reverse\" | (string & {});\n\n  export type FlexGrow = Globals | (number & {}) | (string & {});\n\n  export type FlexShrink = Globals | (number & {}) | (string & {});\n\n  export type FlexWrap = Globals | \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n\n  export type Float = Globals | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Font = Globals | \"caption\" | \"icon\" | \"menu\" | \"message-box\" | \"small-caption\" | \"status-bar\" | (string & {});\n\n  export type FontFamily = Globals | DataType.GenericFamily | (string & {});\n\n  export type FontFeatureSettings = Globals | \"normal\" | (string & {});\n\n  export type FontKerning = Globals | \"auto\" | \"none\" | \"normal\";\n\n  export type FontLanguageOverride = Globals | \"normal\" | (string & {});\n\n  export type FontOpticalSizing = Globals | \"auto\" | \"none\";\n\n  export type FontPalette = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"larger\" | \"smaller\" | (string & {});\n\n  export type FontSizeAdjust = Globals | \"from-font\" | \"none\" | (string & {}) | (number & {});\n\n  export type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"always\" | \"auto\" | \"never\";\n\n  export type FontStretch = Globals | DataType.FontStretchAbsolute;\n\n  export type FontStyle = Globals | \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  export type FontSynthesis = Globals | \"none\" | \"position\" | \"small-caps\" | \"style\" | \"weight\" | (string & {});\n\n  export type FontSynthesisPosition = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisSmallCaps = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisStyle = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisWeight = Globals | \"auto\" | \"none\";\n\n  export type FontVariant =\n    | Globals\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  export type FontVariantAlternates = Globals | \"historical-forms\" | \"normal\" | (string & {});\n\n  export type FontVariantCaps = Globals | \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\n\n  export type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | \"full-width\" | \"normal\" | \"proportional-width\" | \"ruby\" | (string & {});\n\n  export type FontVariantEmoji = Globals | \"emoji\" | \"normal\" | \"text\" | \"unicode\";\n\n  export type FontVariantLigatures =\n    | Globals\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"discretionary-ligatures\"\n    | \"historical-ligatures\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | (string & {});\n\n  export type FontVariantNumeric =\n    | Globals\n    | \"diagonal-fractions\"\n    | \"lining-nums\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"proportional-nums\"\n    | \"slashed-zero\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | (string & {});\n\n  export type FontVariantPosition = Globals | \"normal\" | \"sub\" | \"super\";\n\n  export type FontVariationSettings = Globals | \"normal\" | (string & {});\n\n  export type FontWeight = Globals | DataType.FontWeightAbsolute | \"bolder\" | \"lighter\";\n\n  export type ForcedColorAdjust = Globals | \"auto\" | \"none\";\n\n  export type Gap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type Grid = Globals | \"none\" | (string & {});\n\n  export type GridArea = Globals | DataType.GridLine | (string & {});\n\n  export type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridAutoFlow = Globals | \"column\" | \"dense\" | \"row\" | (string & {});\n\n  export type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridColumn = Globals | DataType.GridLine | (string & {});\n\n  export type GridColumnEnd = Globals | DataType.GridLine;\n\n  export type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridColumnStart = Globals | DataType.GridLine;\n\n  export type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRow = Globals | DataType.GridLine | (string & {});\n\n  export type GridRowEnd = Globals | DataType.GridLine;\n\n  export type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRowStart = Globals | DataType.GridLine;\n\n  export type GridTemplate = Globals | \"none\" | (string & {});\n\n  export type GridTemplateAreas = Globals | \"none\" | (string & {});\n\n  export type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type HangingPunctuation = Globals | \"allow-end\" | \"first\" | \"force-end\" | \"last\" | \"none\" | (string & {});\n\n  export type Height<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type HyphenateCharacter = Globals | \"auto\" | (string & {});\n\n  export type HyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Hyphens = Globals | \"auto\" | \"manual\" | \"none\";\n\n  export type ImageOrientation = Globals | \"flip\" | \"from-image\" | (string & {});\n\n  export type ImageRendering = Globals | \"-moz-crisp-edges\" | \"-webkit-optimize-contrast\" | \"auto\" | \"crisp-edges\" | \"pixelated\";\n\n  export type ImageResolution = Globals | \"from-image\" | (string & {});\n\n  export type ImeMode = Globals | \"active\" | \"auto\" | \"disabled\" | \"inactive\" | \"normal\";\n\n  export type InitialLetter = Globals | \"normal\" | (string & {}) | (number & {});\n\n  export type InlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type InputSecurity = Globals | \"auto\" | \"none\";\n\n  export type Inset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Isolation = Globals | \"auto\" | \"isolate\";\n\n  export type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type JustifyItems = Globals | DataType.SelfPosition | \"baseline\" | \"left\" | \"legacy\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifySelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"left\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type Left<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type LineBreak = Globals | \"anywhere\" | \"auto\" | \"loose\" | \"normal\" | \"strict\";\n\n  export type LineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {}) | (number & {});\n\n  export type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ListStyle = Globals | \"inside\" | \"none\" | \"outside\" | (string & {});\n\n  export type ListStyleImage = Globals | \"none\" | (string & {});\n\n  export type ListStylePosition = Globals | \"inside\" | \"outside\";\n\n  export type ListStyleType = Globals | \"none\" | (string & {});\n\n  export type Margin<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTrim = Globals | \"all\" | \"in-flow\" | \"none\";\n\n  export type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});\n\n  export type MaskBorder = Globals | \"alpha\" | \"luminance\" | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type MaskBorderMode = Globals | \"alpha\" | \"luminance\";\n\n  export type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type MaskBorderRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type MaskBorderSlice = Globals | (string & {}) | (number & {});\n\n  export type MaskBorderSource = Globals | \"none\" | (string & {});\n\n  export type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type MaskClip = Globals | DataType.GeometryBox | \"no-clip\" | (string & {});\n\n  export type MaskComposite = Globals | DataType.CompositingOperator | (string & {});\n\n  export type MaskImage = Globals | \"none\" | (string & {});\n\n  export type MaskMode = Globals | DataType.MaskingMode | (string & {});\n\n  export type MaskOrigin = Globals | DataType.GeometryBox | (string & {});\n\n  export type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type MaskType = Globals | \"alpha\" | \"luminance\";\n\n  export type MasonryAutoFlow = Globals | \"definite-first\" | \"next\" | \"ordered\" | \"pack\" | (string & {});\n\n  export type MathDepth = Globals | \"auto-add\" | (string & {}) | (number & {});\n\n  export type MathShift = Globals | \"compact\" | \"normal\";\n\n  export type MathStyle = Globals | \"compact\" | \"normal\";\n\n  export type MaxBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxLines = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type MaxWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MinBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type MixBlendMode = Globals | DataType.BlendMode | \"plus-lighter\";\n\n  export type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\" | \"none\" | \"normal\" | (string & {});\n\n  export type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type OffsetPath = Globals | \"none\" | (string & {});\n\n  export type OffsetRotate = Globals | \"auto\" | \"reverse\" | (string & {});\n\n  export type ObjectFit = Globals | \"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\";\n\n  export type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\";\n\n  export type OffsetPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\" | \"normal\";\n\n  export type Opacity = Globals | (string & {}) | (number & {});\n\n  export type Order = Globals | (number & {}) | (string & {});\n\n  export type Orphans = Globals | (number & {}) | (string & {});\n\n  export type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | \"auto\" | \"invert\" | (string & {});\n\n  export type OutlineColor = Globals | DataType.Color | \"invert\";\n\n  export type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type OutlineStyle = Globals | DataType.LineStyle | \"auto\" | (string & {});\n\n  export type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type Overflow = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\" | (string & {});\n\n  export type OverflowAnchor = Globals | \"auto\" | \"none\";\n\n  export type OverflowBlock = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowClipBox = Globals | \"content-box\" | \"padding-box\";\n\n  export type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});\n\n  export type OverflowInline = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowWrap = Globals | \"anywhere\" | \"break-word\" | \"normal\";\n\n  export type OverflowX = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowY = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type Overlay = Globals | \"auto\" | \"none\";\n\n  export type OverscrollBehavior = Globals | \"auto\" | \"contain\" | \"none\" | (string & {});\n\n  export type OverscrollBehaviorBlock = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorInline = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorX = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorY = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type Page = Globals | \"auto\" | (string & {});\n\n  export type PageBreakAfter = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakBefore = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakInside = Globals | \"auto\" | \"avoid\";\n\n  export type PaintOrder = Globals | \"fill\" | \"markers\" | \"normal\" | \"stroke\" | (string & {});\n\n  export type Perspective<TLength = (string & {}) | 0> = Globals | TLength | \"none\";\n\n  export type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type PlaceItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PlaceSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PointerEvents = Globals | \"all\" | \"auto\" | \"fill\" | \"inherit\" | \"none\" | \"painted\" | \"stroke\" | \"visible\" | \"visibleFill\" | \"visiblePainted\" | \"visibleStroke\";\n\n  export type Position = Globals | \"-webkit-sticky\" | \"absolute\" | \"fixed\" | \"relative\" | \"static\" | \"sticky\";\n\n  export type Quotes = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type Resize = Globals | \"block\" | \"both\" | \"horizontal\" | \"inline\" | \"none\" | \"vertical\";\n\n  export type Right<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Rotate = Globals | \"none\" | (string & {});\n\n  export type RowGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type RubyAlign = Globals | \"center\" | \"space-around\" | \"space-between\" | \"start\";\n\n  export type RubyMerge = Globals | \"auto\" | \"collapse\" | \"separate\";\n\n  export type RubyPosition = Globals | \"alternate\" | \"inter-character\" | \"over\" | \"under\" | (string & {});\n\n  export type Scale = Globals | \"none\" | (string & {}) | (number & {});\n\n  export type ScrollBehavior = Globals | \"auto\" | \"smooth\";\n\n  export type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollSnapAlign = Globals | \"center\" | \"end\" | \"none\" | \"start\" | (string & {});\n\n  export type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"none\" | (string & {});\n\n  export type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type ScrollSnapPointsX = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapPointsY = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapStop = Globals | \"always\" | \"normal\";\n\n  export type ScrollSnapType = Globals | \"block\" | \"both\" | \"inline\" | \"none\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollSnapTypeX = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollSnapTypeY = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollTimeline = Globals | \"none\" | (string & {});\n\n  export type ScrollTimelineAxis = Globals | \"block\" | \"inline\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollTimelineName = Globals | \"none\" | (string & {});\n\n  export type ScrollbarColor = Globals | \"auto\" | (string & {});\n\n  export type ScrollbarGutter = Globals | \"auto\" | \"stable\" | (string & {});\n\n  export type ScrollbarWidth = Globals | \"auto\" | \"none\" | \"thin\";\n\n  export type ShapeImageThreshold = Globals | (string & {}) | (number & {});\n\n  export type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ShapeOutside = Globals | DataType.Box | \"margin-box\" | \"none\" | (string & {});\n\n  export type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});\n\n  export type TableLayout = Globals | \"auto\" | \"fixed\";\n\n  export type TextAlign = Globals | \"-webkit-match-parent\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\";\n\n  export type TextAlignLast = Globals | \"auto\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"right\" | \"start\";\n\n  export type TextCombineUpright = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TextDecoration<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Color\n    | TLength\n    | \"auto\"\n    | \"blink\"\n    | \"dashed\"\n    | \"dotted\"\n    | \"double\"\n    | \"from-font\"\n    | \"grammar-error\"\n    | \"line-through\"\n    | \"none\"\n    | \"overline\"\n    | \"solid\"\n    | \"spelling-error\"\n    | \"underline\"\n    | \"wavy\"\n    | (string & {});\n\n  export type TextDecorationColor = Globals | DataType.Color;\n\n  export type TextDecorationLine = Globals | \"blink\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"spelling-error\" | \"underline\" | (string & {});\n\n  export type TextDecorationSkip = Globals | \"box-decoration\" | \"edges\" | \"leading-spaces\" | \"none\" | \"objects\" | \"spaces\" | \"trailing-spaces\" | (string & {});\n\n  export type TextDecorationSkipInk = Globals | \"all\" | \"auto\" | \"none\";\n\n  export type TextDecorationStyle = Globals | \"dashed\" | \"dotted\" | \"double\" | \"solid\" | \"wavy\";\n\n  export type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"from-font\" | (string & {});\n\n  export type TextEmphasis = Globals | DataType.Color | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextEmphasisColor = Globals | DataType.Color;\n\n  export type TextEmphasisPosition = Globals | (string & {});\n\n  export type TextEmphasisStyle = Globals | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextJustify = Globals | \"auto\" | \"inter-character\" | \"inter-word\" | \"none\";\n\n  export type TextOrientation = Globals | \"mixed\" | \"sideways\" | \"upright\";\n\n  export type TextOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type TextRendering = Globals | \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\n\n  export type TextShadow = Globals | \"none\" | (string & {});\n\n  export type TextSizeAdjust = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type TextTransform = Globals | \"capitalize\" | \"full-size-kana\" | \"full-width\" | \"lowercase\" | \"none\" | \"uppercase\";\n\n  export type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TextUnderlinePosition = Globals | \"auto\" | \"from-font\" | \"left\" | \"right\" | \"under\" | (string & {});\n\n  export type TextWrap = Globals | \"balance\" | \"nowrap\" | \"pretty\" | \"stable\" | \"wrap\";\n\n  export type TimelineScope = Globals | \"none\" | (string & {});\n\n  export type Top<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TouchAction =\n    | Globals\n    | \"-ms-manipulation\"\n    | \"-ms-none\"\n    | \"-ms-pinch-zoom\"\n    | \"auto\"\n    | \"manipulation\"\n    | \"none\"\n    | \"pan-down\"\n    | \"pan-left\"\n    | \"pan-right\"\n    | \"pan-up\"\n    | \"pan-x\"\n    | \"pan-y\"\n    | \"pinch-zoom\"\n    | (string & {});\n\n  export type Transform = Globals | \"none\" | (string & {});\n\n  export type TransformBox = Globals | \"border-box\" | \"content-box\" | \"fill-box\" | \"stroke-box\" | \"view-box\";\n\n  export type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  export type TransformStyle = Globals | \"flat\" | \"preserve-3d\";\n\n  export type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});\n\n  export type TransitionBehavior = Globals | \"allow-discrete\" | \"normal\" | (string & {});\n\n  export type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionProperty = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Translate<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type UnicodeBidi =\n    | Globals\n    | \"-moz-isolate\"\n    | \"-moz-isolate-override\"\n    | \"-moz-plaintext\"\n    | \"-webkit-isolate\"\n    | \"-webkit-isolate-override\"\n    | \"-webkit-plaintext\"\n    | \"bidi-override\"\n    | \"embed\"\n    | \"isolate\"\n    | \"isolate-override\"\n    | \"normal\"\n    | \"plaintext\";\n\n  export type UserSelect = Globals | \"-moz-none\" | \"all\" | \"auto\" | \"contain\" | \"element\" | \"none\" | \"text\";\n\n  export type VerticalAlign<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"baseline\"\n    | \"bottom\"\n    | \"middle\"\n    | \"sub\"\n    | \"super\"\n    | \"text-bottom\"\n    | \"text-top\"\n    | \"top\"\n    | (string & {});\n\n  export type ViewTimeline = Globals | \"none\" | (string & {});\n\n  export type ViewTimelineAxis = Globals | \"block\" | \"inline\" | \"x\" | \"y\" | (string & {});\n\n  export type ViewTimelineInset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ViewTimelineName = Globals | \"none\" | (string & {});\n\n  export type ViewTransitionName = Globals | \"none\" | (string & {});\n\n  export type Visibility = Globals | \"collapse\" | \"hidden\" | \"visible\";\n\n  export type WhiteSpace =\n    | Globals\n    | \"-moz-pre-wrap\"\n    | \"balance\"\n    | \"break-spaces\"\n    | \"collapse\"\n    | \"discard\"\n    | \"discard-after\"\n    | \"discard-before\"\n    | \"discard-inner\"\n    | \"none\"\n    | \"normal\"\n    | \"nowrap\"\n    | \"pre\"\n    | \"pre-line\"\n    | \"pre-wrap\"\n    | \"preserve\"\n    | \"preserve-breaks\"\n    | \"preserve-spaces\"\n    | \"pretty\"\n    | \"stable\"\n    | \"wrap\"\n    | (string & {});\n\n  export type WhiteSpaceCollapse = Globals | \"break-spaces\" | \"collapse\" | \"discard\" | \"preserve\" | \"preserve-breaks\" | \"preserve-spaces\";\n\n  export type WhiteSpaceTrim = Globals | \"discard-after\" | \"discard-before\" | \"discard-inner\" | \"none\" | (string & {});\n\n  export type Widows = Globals | (number & {}) | (string & {});\n\n  export type Width<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type WillChange = Globals | DataType.AnimateableFeature | \"auto\" | (string & {});\n\n  export type WordBreak = Globals | \"break-all\" | \"break-word\" | \"keep-all\" | \"normal\";\n\n  export type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type WordWrap = Globals | \"break-word\" | \"normal\";\n\n  export type WritingMode = Globals | \"horizontal-tb\" | \"sideways-lr\" | \"sideways-rl\" | \"vertical-lr\" | \"vertical-rl\";\n\n  export type ZIndex = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type Zoom = Globals | \"normal\" | \"reset\" | (string & {}) | (number & {});\n\n  export type MozAppearance =\n    | Globals\n    | \"-moz-mac-unified-toolbar\"\n    | \"-moz-win-borderless-glass\"\n    | \"-moz-win-browsertabbar-toolbox\"\n    | \"-moz-win-communications-toolbox\"\n    | \"-moz-win-communicationstext\"\n    | \"-moz-win-exclude-glass\"\n    | \"-moz-win-glass\"\n    | \"-moz-win-media-toolbox\"\n    | \"-moz-win-mediatext\"\n    | \"-moz-window-button-box\"\n    | \"-moz-window-button-box-maximized\"\n    | \"-moz-window-button-close\"\n    | \"-moz-window-button-maximize\"\n    | \"-moz-window-button-minimize\"\n    | \"-moz-window-button-restore\"\n    | \"-moz-window-frame-bottom\"\n    | \"-moz-window-frame-left\"\n    | \"-moz-window-frame-right\"\n    | \"-moz-window-titlebar\"\n    | \"-moz-window-titlebar-maximized\"\n    | \"button\"\n    | \"button-arrow-down\"\n    | \"button-arrow-next\"\n    | \"button-arrow-previous\"\n    | \"button-arrow-up\"\n    | \"button-bevel\"\n    | \"button-focus\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"checkbox-container\"\n    | \"checkbox-label\"\n    | \"checkmenuitem\"\n    | \"dualbutton\"\n    | \"groupbox\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"menuarrow\"\n    | \"menubar\"\n    | \"menucheckbox\"\n    | \"menuimage\"\n    | \"menuitem\"\n    | \"menuitemtext\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"menupopup\"\n    | \"menuradio\"\n    | \"menuseparator\"\n    | \"meterbar\"\n    | \"meterchunk\"\n    | \"none\"\n    | \"progressbar\"\n    | \"progressbar-vertical\"\n    | \"progresschunk\"\n    | \"progresschunk-vertical\"\n    | \"radio\"\n    | \"radio-container\"\n    | \"radio-label\"\n    | \"radiomenuitem\"\n    | \"range\"\n    | \"range-thumb\"\n    | \"resizer\"\n    | \"resizerpanel\"\n    | \"scale-horizontal\"\n    | \"scale-vertical\"\n    | \"scalethumb-horizontal\"\n    | \"scalethumb-vertical\"\n    | \"scalethumbend\"\n    | \"scalethumbstart\"\n    | \"scalethumbtick\"\n    | \"scrollbarbutton-down\"\n    | \"scrollbarbutton-left\"\n    | \"scrollbarbutton-right\"\n    | \"scrollbarbutton-up\"\n    | \"scrollbarthumb-horizontal\"\n    | \"scrollbarthumb-vertical\"\n    | \"scrollbartrack-horizontal\"\n    | \"scrollbartrack-vertical\"\n    | \"searchfield\"\n    | \"separator\"\n    | \"sheet\"\n    | \"spinner\"\n    | \"spinner-downbutton\"\n    | \"spinner-textfield\"\n    | \"spinner-upbutton\"\n    | \"splitter\"\n    | \"statusbar\"\n    | \"statusbarpanel\"\n    | \"tab\"\n    | \"tab-scroll-arrow-back\"\n    | \"tab-scroll-arrow-forward\"\n    | \"tabpanel\"\n    | \"tabpanels\"\n    | \"textfield\"\n    | \"textfield-multiline\"\n    | \"toolbar\"\n    | \"toolbarbutton\"\n    | \"toolbarbutton-dropdown\"\n    | \"toolbargripper\"\n    | \"toolbox\"\n    | \"tooltip\"\n    | \"treeheader\"\n    | \"treeheadercell\"\n    | \"treeheadersortarrow\"\n    | \"treeitem\"\n    | \"treeline\"\n    | \"treetwisty\"\n    | \"treetwistyopen\"\n    | \"treeview\";\n\n  export type MozBinding = Globals | \"none\" | (string & {});\n\n  export type MozBorderBottomColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderLeftColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderRightColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderTopColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozContextProperties = Globals | \"fill\" | \"fill-opacity\" | \"none\" | \"stroke\" | \"stroke-opacity\" | (string & {});\n\n  export type MozFloatEdge = Globals | \"border-box\" | \"content-box\" | \"margin-box\" | \"padding-box\";\n\n  export type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;\n\n  export type MozImageRegion = Globals | \"auto\" | (string & {});\n\n  export type MozOrient = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\";\n\n  export type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozStackSizing = Globals | \"ignore\" | \"stretch-to-fit\";\n\n  export type MozTextBlink = Globals | \"blink\" | \"none\";\n\n  export type MozUserFocus = Globals | \"ignore\" | \"none\" | \"normal\" | \"select-after\" | \"select-all\" | \"select-before\" | \"select-menu\" | \"select-same\";\n\n  export type MozUserInput = Globals | \"auto\" | \"disabled\" | \"enabled\" | \"none\";\n\n  export type MozUserModify = Globals | \"read-only\" | \"read-write\" | \"write-only\";\n\n  export type MozWindowDragging = Globals | \"drag\" | \"no-drag\";\n\n  export type MozWindowShadow = Globals | \"default\" | \"menu\" | \"none\" | \"sheet\" | \"tooltip\";\n\n  export type MsAccelerator = Globals | \"false\" | \"true\";\n\n  export type MsBlockProgression = Globals | \"bt\" | \"lr\" | \"rl\" | \"tb\";\n\n  export type MsContentZoomChaining = Globals | \"chained\" | \"none\";\n\n  export type MsContentZoomLimit = Globals | (string & {});\n\n  export type MsContentZoomLimitMax = Globals | (string & {});\n\n  export type MsContentZoomLimitMin = Globals | (string & {});\n\n  export type MsContentZoomSnap = Globals | \"mandatory\" | \"none\" | \"proximity\" | (string & {});\n\n  export type MsContentZoomSnapPoints = Globals | (string & {});\n\n  export type MsContentZoomSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsContentZooming = Globals | \"none\" | \"zoom\";\n\n  export type MsFilter = Globals | (string & {});\n\n  export type MsFlowFrom = Globals | \"none\" | (string & {});\n\n  export type MsFlowInto = Globals | \"none\" | (string & {});\n\n  export type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsHighContrastAdjust = Globals | \"auto\" | \"none\";\n\n  export type MsHyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type MsHyphenateLimitLines = Globals | \"no-limit\" | (number & {}) | (string & {});\n\n  export type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MsImeAlign = Globals | \"after\" | \"auto\";\n\n  export type MsOverflowStyle = Globals | \"-ms-autohiding-scrollbar\" | \"auto\" | \"none\" | \"scrollbar\";\n\n  export type MsScrollChaining = Globals | \"chained\" | \"none\";\n\n  export type MsScrollLimit = Globals | (string & {});\n\n  export type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollRails = Globals | \"none\" | \"railed\";\n\n  export type MsScrollSnapPointsX = Globals | (string & {});\n\n  export type MsScrollSnapPointsY = Globals | (string & {});\n\n  export type MsScrollSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsScrollSnapX = Globals | (string & {});\n\n  export type MsScrollSnapY = Globals | (string & {});\n\n  export type MsScrollTranslation = Globals | \"none\" | \"vertical-to-horizontal\";\n\n  export type MsScrollbar3dlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarArrowColor = Globals | DataType.Color;\n\n  export type MsScrollbarBaseColor = Globals | DataType.Color;\n\n  export type MsScrollbarDarkshadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarFaceColor = Globals | DataType.Color;\n\n  export type MsScrollbarHighlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarShadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarTrackColor = Globals | DataType.Color;\n\n  export type MsTextAutospace = Globals | \"ideograph-alpha\" | \"ideograph-numeric\" | \"ideograph-parenthesis\" | \"ideograph-space\" | \"none\";\n\n  export type MsTouchSelect = Globals | \"grippers\" | \"none\";\n\n  export type MsUserSelect = Globals | \"element\" | \"none\" | \"text\";\n\n  export type MsWrapFlow = Globals | \"auto\" | \"both\" | \"clear\" | \"end\" | \"maximum\" | \"start\";\n\n  export type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsWrapThrough = Globals | \"none\" | \"wrap\";\n\n  export type WebkitAppearance =\n    | Globals\n    | \"-apple-pay-button\"\n    | \"button\"\n    | \"button-bevel\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"default-button\"\n    | \"inner-spin-button\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"media-controls-background\"\n    | \"media-controls-fullscreen-background\"\n    | \"media-current-time-display\"\n    | \"media-enter-fullscreen-button\"\n    | \"media-exit-fullscreen-button\"\n    | \"media-fullscreen-button\"\n    | \"media-mute-button\"\n    | \"media-overlay-play-button\"\n    | \"media-play-button\"\n    | \"media-seek-back-button\"\n    | \"media-seek-forward-button\"\n    | \"media-slider\"\n    | \"media-sliderthumb\"\n    | \"media-time-remaining-display\"\n    | \"media-toggle-closed-captions-button\"\n    | \"media-volume-slider\"\n    | \"media-volume-slider-container\"\n    | \"media-volume-sliderthumb\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"meter\"\n    | \"none\"\n    | \"progress-bar\"\n    | \"progress-bar-value\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"searchfield-cancel-button\"\n    | \"searchfield-decoration\"\n    | \"searchfield-results-button\"\n    | \"searchfield-results-decoration\"\n    | \"slider-horizontal\"\n    | \"slider-vertical\"\n    | \"sliderthumb-horizontal\"\n    | \"sliderthumb-vertical\"\n    | \"square-button\"\n    | \"textarea\"\n    | \"textfield\";\n\n  export type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type WebkitBorderBeforeColor = Globals | DataType.Color;\n\n  export type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | \"above\" | \"below\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitLineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type WebkitMask<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Position<TLength>\n    | DataType.RepeatStyle\n    | DataType.Box\n    | \"border\"\n    | \"content\"\n    | \"none\"\n    | \"padding\"\n    | \"text\"\n    | (string & {});\n\n  export type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type WebkitMaskClip = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | \"text\" | (string & {});\n\n  export type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});\n\n  export type WebkitMaskImage = Globals | \"none\" | (string & {});\n\n  export type WebkitMaskOrigin = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | (string & {});\n\n  export type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | (string & {});\n\n  export type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type WebkitMaskRepeatX = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskRepeatY = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type WebkitOverflowScrolling = Globals | \"auto\" | \"touch\";\n\n  export type WebkitTapHighlightColor = Globals | DataType.Color;\n\n  export type WebkitTextFillColor = Globals | DataType.Color;\n\n  export type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});\n\n  export type WebkitTextStrokeColor = Globals | DataType.Color;\n\n  export type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type WebkitTouchCallout = Globals | \"default\" | \"none\";\n\n  export type WebkitUserModify = Globals | \"read-only\" | \"read-write\" | \"read-write-plaintext-only\";\n\n  export type AlignmentBaseline =\n    | Globals\n    | \"after-edge\"\n    | \"alphabetic\"\n    | \"auto\"\n    | \"baseline\"\n    | \"before-edge\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"text-after-edge\"\n    | \"text-before-edge\";\n\n  export type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | \"baseline\" | \"sub\" | \"super\" | (string & {});\n\n  export type ClipRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type ColorInterpolation = Globals | \"auto\" | \"linearRGB\" | \"sRGB\";\n\n  export type ColorRendering = Globals | \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\";\n\n  export type DominantBaseline =\n    | Globals\n    | \"alphabetic\"\n    | \"auto\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"no-change\"\n    | \"reset-size\"\n    | \"text-after-edge\"\n    | \"text-before-edge\"\n    | \"use-script\";\n\n  export type Fill = Globals | DataType.Paint;\n\n  export type FillOpacity = Globals | (number & {}) | (string & {});\n\n  export type FillRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type FloodColor = Globals | DataType.Color | \"currentColor\";\n\n  export type FloodOpacity = Globals | (number & {}) | (string & {});\n\n  export type GlyphOrientationVertical = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type LightingColor = Globals | DataType.Color | \"currentColor\";\n\n  export type Marker = Globals | \"none\" | (string & {});\n\n  export type MarkerEnd = Globals | \"none\" | (string & {});\n\n  export type MarkerMid = Globals | \"none\" | (string & {});\n\n  export type MarkerStart = Globals | \"none\" | (string & {});\n\n  export type ShapeRendering = Globals | \"auto\" | \"crispEdges\" | \"geometricPrecision\" | \"optimizeSpeed\";\n\n  export type StopColor = Globals | DataType.Color | \"currentColor\";\n\n  export type StopOpacity = Globals | (number & {}) | (string & {});\n\n  export type Stroke = Globals | DataType.Paint;\n\n  export type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | \"none\";\n\n  export type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type StrokeLinecap = Globals | \"butt\" | \"round\" | \"square\";\n\n  export type StrokeLinejoin = Globals | \"bevel\" | \"miter\" | \"round\";\n\n  export type StrokeMiterlimit = Globals | (number & {}) | (string & {});\n\n  export type StrokeOpacity = Globals | (number & {}) | (string & {});\n\n  export type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextAnchor = Globals | \"end\" | \"middle\" | \"start\";\n\n  export type VectorEffect = Globals | \"non-scaling-stroke\" | \"none\";\n}\n\nexport namespace AtRule {\n  export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {\n    additiveSymbols?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    speakAs?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"additive-symbols\"?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    \"speak-as\"?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;\n\n  export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;\n\n  export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {\n    MozFontFeatureSettings?: FontFeatureSettings | undefined;\n    ascentOverride?: AscentOverride | undefined;\n    descentOverride?: DescentOverride | undefined;\n    fontDisplay?: FontDisplay | undefined;\n    fontFamily?: string | undefined;\n    fontFeatureSettings?: FontFeatureSettings | undefined;\n    fontStretch?: FontStretch | undefined;\n    fontStyle?: FontStyle | undefined;\n    fontVariant?: FontVariant | undefined;\n    fontVariationSettings?: FontVariationSettings | undefined;\n    fontWeight?: FontWeight | undefined;\n    lineGapOverride?: LineGapOverride | undefined;\n    sizeAdjust?: string | undefined;\n    src?: string | undefined;\n    unicodeRange?: string | undefined;\n  }\n\n  export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"-moz-font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"ascent-override\"?: AscentOverride | undefined;\n    \"descent-override\"?: DescentOverride | undefined;\n    \"font-display\"?: FontDisplay | undefined;\n    \"font-family\"?: string | undefined;\n    \"font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"font-stretch\"?: FontStretch | undefined;\n    \"font-style\"?: FontStyle | undefined;\n    \"font-variant\"?: FontVariant | undefined;\n    \"font-variation-settings\"?: FontVariationSettings | undefined;\n    \"font-weight\"?: FontWeight | undefined;\n    \"line-gap-override\"?: LineGapOverride | undefined;\n    \"size-adjust\"?: string | undefined;\n    src?: string | undefined;\n    \"unicode-range\"?: string | undefined;\n  }\n\n  export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;\n\n  export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;\n\n  export interface FontPaletteValues<TLength = (string & {}) | 0, TTime = string & {}> {\n    basePalette?: BasePalette | undefined;\n    fontFamily?: string | undefined;\n    overrideColors?: string | undefined;\n  }\n\n  export interface FontPaletteValuesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"base-palette\"?: BasePalette | undefined;\n    \"font-family\"?: string | undefined;\n    \"override-colors\"?: string | undefined;\n  }\n\n  export type FontPaletteValuesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValues<TLength, TTime>>;\n\n  export type FontPaletteValuesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValuesHyphen<TLength, TTime>>;\n\n  export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    pageOrientation?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    \"page-orientation\"?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;\n\n  export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;\n\n  export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    initialValue?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    \"initial-value\"?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;\n\n  export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;\n\n  export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    maxHeight?: MaxHeight<TLength> | undefined;\n    maxWidth?: MaxWidth<TLength> | undefined;\n    maxZoom?: MaxZoom | undefined;\n    minHeight?: MinHeight<TLength> | undefined;\n    minWidth?: MinWidth<TLength> | undefined;\n    minZoom?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    userZoom?: UserZoom | undefined;\n    viewportFit?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    \"max-height\"?: MaxHeight<TLength> | undefined;\n    \"max-width\"?: MaxWidth<TLength> | undefined;\n    \"max-zoom\"?: MaxZoom | undefined;\n    \"min-height\"?: MinHeight<TLength> | undefined;\n    \"min-width\"?: MinWidth<TLength> | undefined;\n    \"min-zoom\"?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    \"user-zoom\"?: UserZoom | undefined;\n    \"viewport-fit\"?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;\n\n  export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;\n\n  type Range = \"auto\" | (string & {});\n\n  type SpeakAs = \"auto\" | \"bullets\" | \"numbers\" | \"spell-out\" | \"words\" | (string & {});\n\n  type System = \"additive\" | \"alphabetic\" | \"cyclic\" | \"fixed\" | \"numeric\" | \"symbolic\" | (string & {});\n\n  type FontFeatureSettings = \"normal\" | (string & {});\n\n  type AscentOverride = \"normal\" | (string & {});\n\n  type DescentOverride = \"normal\" | (string & {});\n\n  type FontDisplay = \"auto\" | \"block\" | \"fallback\" | \"optional\" | \"swap\";\n\n  type FontStretch = DataType.FontStretchAbsolute | (string & {});\n\n  type FontStyle = \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  type FontVariant =\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  type FontVariationSettings = \"normal\" | (string & {});\n\n  type FontWeight = DataType.FontWeightAbsolute | (string & {});\n\n  type LineGapOverride = \"normal\" | (string & {});\n\n  type BasePalette = \"dark\" | \"light\" | (number & {}) | (string & {});\n\n  type Bleed<TLength> = TLength | \"auto\";\n\n  type Marks = \"crop\" | \"cross\" | \"none\" | (string & {});\n\n  type PageOrientation = \"rotate-left\" | \"rotate-right\" | \"upright\";\n\n  type Size<TLength> = DataType.PageSize | TLength | \"auto\" | \"landscape\" | \"portrait\" | (string & {});\n\n  type Inherits = \"false\" | \"true\";\n\n  type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type MaxHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxZoom = \"auto\" | (string & {}) | (number & {});\n\n  type MinHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinZoom = \"auto\" | (string & {}) | (number & {});\n\n  type Orientation = \"auto\" | \"landscape\" | \"portrait\";\n\n  type UserZoom = \"fixed\" | \"zoom\";\n\n  type ViewportFit = \"auto\" | \"contain\" | \"cover\";\n\n  type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type Zoom = \"auto\" | (string & {}) | (number & {});\n}\n\n/**\n * **Attention!** Data types receives its name from the spec. E.g. `<color>` becomes `DataType.Color` and\n * `<content-distribution>` becomes `DataType.ContentDistribution`. It happens quite frequent that these data types\n * are split into several data types or/and name changes as the spec develops. So there's a risk that a minor/patch\n * update from `csstype` can break your typing if you're using the `DataType` namespace.\n */\nexport namespace DataType {\n  type AbsoluteSize = \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\";\n\n  type AnimateableFeature = \"contents\" | \"scroll-position\" | (string & {});\n\n  type Attachment = \"fixed\" | \"local\" | \"scroll\";\n\n  type BgPosition<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type BgSize<TLength> = TLength | \"auto\" | \"contain\" | \"cover\" | (string & {});\n\n  type BlendMode =\n    | \"color\"\n    | \"color-burn\"\n    | \"color-dodge\"\n    | \"darken\"\n    | \"difference\"\n    | \"exclusion\"\n    | \"hard-light\"\n    | \"hue\"\n    | \"lighten\"\n    | \"luminosity\"\n    | \"multiply\"\n    | \"normal\"\n    | \"overlay\"\n    | \"saturation\"\n    | \"screen\"\n    | \"soft-light\";\n\n  type Box = \"border-box\" | \"content-box\" | \"padding-box\";\n\n  type Color = NamedColor | DeprecatedSystemColor | \"currentcolor\" | (string & {});\n\n  type CompatAuto =\n    | \"button\"\n    | \"checkbox\"\n    | \"listbox\"\n    | \"menulist\"\n    | \"meter\"\n    | \"progress-bar\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"slider-horizontal\"\n    | \"square-button\"\n    | \"textarea\";\n\n  type CompositeStyle =\n    | \"clear\"\n    | \"copy\"\n    | \"destination-atop\"\n    | \"destination-in\"\n    | \"destination-out\"\n    | \"destination-over\"\n    | \"source-atop\"\n    | \"source-in\"\n    | \"source-out\"\n    | \"source-over\"\n    | \"xor\";\n\n  type CompositingOperator = \"add\" | \"exclude\" | \"intersect\" | \"subtract\";\n\n  type ContentDistribution = \"space-around\" | \"space-between\" | \"space-evenly\" | \"stretch\";\n\n  type ContentList = Quote | \"contents\" | (string & {});\n\n  type ContentPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\";\n\n  type CubicBezierTimingFunction = \"ease\" | \"ease-in\" | \"ease-in-out\" | \"ease-out\" | (string & {});\n\n  type Dasharray<TLength> = TLength | (string & {}) | (number & {});\n\n  type DeprecatedSystemColor =\n    | \"ActiveBorder\"\n    | \"ActiveCaption\"\n    | \"AppWorkspace\"\n    | \"Background\"\n    | \"ButtonFace\"\n    | \"ButtonHighlight\"\n    | \"ButtonShadow\"\n    | \"ButtonText\"\n    | \"CaptionText\"\n    | \"GrayText\"\n    | \"Highlight\"\n    | \"HighlightText\"\n    | \"InactiveBorder\"\n    | \"InactiveCaption\"\n    | \"InactiveCaptionText\"\n    | \"InfoBackground\"\n    | \"InfoText\"\n    | \"Menu\"\n    | \"MenuText\"\n    | \"Scrollbar\"\n    | \"ThreeDDarkShadow\"\n    | \"ThreeDFace\"\n    | \"ThreeDHighlight\"\n    | \"ThreeDLightShadow\"\n    | \"ThreeDShadow\"\n    | \"Window\"\n    | \"WindowFrame\"\n    | \"WindowText\";\n\n  type DisplayInside = \"-ms-flexbox\" | \"-ms-grid\" | \"-webkit-flex\" | \"flex\" | \"flow\" | \"flow-root\" | \"grid\" | \"ruby\" | \"table\";\n\n  type DisplayInternal =\n    | \"ruby-base\"\n    | \"ruby-base-container\"\n    | \"ruby-text\"\n    | \"ruby-text-container\"\n    | \"table-caption\"\n    | \"table-cell\"\n    | \"table-column\"\n    | \"table-column-group\"\n    | \"table-footer-group\"\n    | \"table-header-group\"\n    | \"table-row\"\n    | \"table-row-group\";\n\n  type DisplayLegacy = \"-ms-inline-flexbox\" | \"-ms-inline-grid\" | \"-webkit-inline-flex\" | \"inline-block\" | \"inline-flex\" | \"inline-grid\" | \"inline-list-item\" | \"inline-table\";\n\n  type DisplayOutside = \"block\" | \"inline\" | \"run-in\";\n\n  type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | \"linear\";\n\n  type EastAsianVariantValues = \"jis04\" | \"jis78\" | \"jis83\" | \"jis90\" | \"simplified\" | \"traditional\";\n\n  type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | \"none\" | (string & {});\n\n  type FontStretchAbsolute =\n    | \"condensed\"\n    | \"expanded\"\n    | \"extra-condensed\"\n    | \"extra-expanded\"\n    | \"normal\"\n    | \"semi-condensed\"\n    | \"semi-expanded\"\n    | \"ultra-condensed\"\n    | \"ultra-expanded\"\n    | (string & {});\n\n  type FontWeightAbsolute = \"bold\" | \"normal\" | (number & {}) | (string & {});\n\n  type GenericFamily = \"cursive\" | \"fantasy\" | \"monospace\" | \"sans-serif\" | \"serif\";\n\n  type GeometryBox = Box | \"fill-box\" | \"margin-box\" | \"stroke-box\" | \"view-box\";\n\n  type GridLine = \"auto\" | (string & {}) | (number & {});\n\n  type LineStyle = \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"hidden\" | \"inset\" | \"none\" | \"outset\" | \"ridge\" | \"solid\";\n\n  type LineWidth<TLength> = TLength | \"medium\" | \"thick\" | \"thin\";\n\n  type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | \"no-clip\" | \"none\" | (string & {});\n\n  type MaskingMode = \"alpha\" | \"luminance\" | \"match-source\";\n\n  type NamedColor =\n    | \"aliceblue\"\n    | \"antiquewhite\"\n    | \"aqua\"\n    | \"aquamarine\"\n    | \"azure\"\n    | \"beige\"\n    | \"bisque\"\n    | \"black\"\n    | \"blanchedalmond\"\n    | \"blue\"\n    | \"blueviolet\"\n    | \"brown\"\n    | \"burlywood\"\n    | \"cadetblue\"\n    | \"chartreuse\"\n    | \"chocolate\"\n    | \"coral\"\n    | \"cornflowerblue\"\n    | \"cornsilk\"\n    | \"crimson\"\n    | \"cyan\"\n    | \"darkblue\"\n    | \"darkcyan\"\n    | \"darkgoldenrod\"\n    | \"darkgray\"\n    | \"darkgreen\"\n    | \"darkgrey\"\n    | \"darkkhaki\"\n    | \"darkmagenta\"\n    | \"darkolivegreen\"\n    | \"darkorange\"\n    | \"darkorchid\"\n    | \"darkred\"\n    | \"darksalmon\"\n    | \"darkseagreen\"\n    | \"darkslateblue\"\n    | \"darkslategray\"\n    | \"darkslategrey\"\n    | \"darkturquoise\"\n    | \"darkviolet\"\n    | \"deeppink\"\n    | \"deepskyblue\"\n    | \"dimgray\"\n    | \"dimgrey\"\n    | \"dodgerblue\"\n    | \"firebrick\"\n    | \"floralwhite\"\n    | \"forestgreen\"\n    | \"fuchsia\"\n    | \"gainsboro\"\n    | \"ghostwhite\"\n    | \"gold\"\n    | \"goldenrod\"\n    | \"gray\"\n    | \"green\"\n    | \"greenyellow\"\n    | \"grey\"\n    | \"honeydew\"\n    | \"hotpink\"\n    | \"indianred\"\n    | \"indigo\"\n    | \"ivory\"\n    | \"khaki\"\n    | \"lavender\"\n    | \"lavenderblush\"\n    | \"lawngreen\"\n    | \"lemonchiffon\"\n    | \"lightblue\"\n    | \"lightcoral\"\n    | \"lightcyan\"\n    | \"lightgoldenrodyellow\"\n    | \"lightgray\"\n    | \"lightgreen\"\n    | \"lightgrey\"\n    | \"lightpink\"\n    | \"lightsalmon\"\n    | \"lightseagreen\"\n    | \"lightskyblue\"\n    | \"lightslategray\"\n    | \"lightslategrey\"\n    | \"lightsteelblue\"\n    | \"lightyellow\"\n    | \"lime\"\n    | \"limegreen\"\n    | \"linen\"\n    | \"magenta\"\n    | \"maroon\"\n    | \"mediumaquamarine\"\n    | \"mediumblue\"\n    | \"mediumorchid\"\n    | \"mediumpurple\"\n    | \"mediumseagreen\"\n    | \"mediumslateblue\"\n    | \"mediumspringgreen\"\n    | \"mediumturquoise\"\n    | \"mediumvioletred\"\n    | \"midnightblue\"\n    | \"mintcream\"\n    | \"mistyrose\"\n    | \"moccasin\"\n    | \"navajowhite\"\n    | \"navy\"\n    | \"oldlace\"\n    | \"olive\"\n    | \"olivedrab\"\n    | \"orange\"\n    | \"orangered\"\n    | \"orchid\"\n    | \"palegoldenrod\"\n    | \"palegreen\"\n    | \"paleturquoise\"\n    | \"palevioletred\"\n    | \"papayawhip\"\n    | \"peachpuff\"\n    | \"peru\"\n    | \"pink\"\n    | \"plum\"\n    | \"powderblue\"\n    | \"purple\"\n    | \"rebeccapurple\"\n    | \"red\"\n    | \"rosybrown\"\n    | \"royalblue\"\n    | \"saddlebrown\"\n    | \"salmon\"\n    | \"sandybrown\"\n    | \"seagreen\"\n    | \"seashell\"\n    | \"sienna\"\n    | \"silver\"\n    | \"skyblue\"\n    | \"slateblue\"\n    | \"slategray\"\n    | \"slategrey\"\n    | \"snow\"\n    | \"springgreen\"\n    | \"steelblue\"\n    | \"tan\"\n    | \"teal\"\n    | \"thistle\"\n    | \"tomato\"\n    | \"transparent\"\n    | \"turquoise\"\n    | \"violet\"\n    | \"wheat\"\n    | \"white\"\n    | \"whitesmoke\"\n    | \"yellow\"\n    | \"yellowgreen\";\n\n  type PageSize = \"A3\" | \"A4\" | \"A5\" | \"B4\" | \"B5\" | \"JIS-B4\" | \"JIS-B5\" | \"ledger\" | \"legal\" | \"letter\";\n\n  type Paint = Color | \"child\" | \"context-fill\" | \"context-stroke\" | \"none\" | (string & {});\n\n  type Position<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type Quote = \"close-quote\" | \"no-close-quote\" | \"no-open-quote\" | \"open-quote\";\n\n  type RepeatStyle = \"no-repeat\" | \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"round\" | \"space\" | (string & {});\n\n  type SelfPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"self-end\" | \"self-start\" | \"start\";\n\n  type SingleAnimation<TTime> =\n    | EasingFunction\n    | SingleAnimationDirection\n    | SingleAnimationFillMode\n    | SingleAnimationTimeline\n    | TTime\n    | \"infinite\"\n    | \"none\"\n    | \"paused\"\n    | \"running\"\n    | (string & {})\n    | (number & {});\n\n  type SingleAnimationComposition = \"accumulate\" | \"add\" | \"replace\";\n\n  type SingleAnimationDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\n\n  type SingleAnimationFillMode = \"backwards\" | \"both\" | \"forwards\" | \"none\";\n\n  type SingleAnimationTimeline = \"auto\" | \"none\" | (string & {});\n\n  type SingleTransition<TTime> = EasingFunction | TTime | \"all\" | \"allow-discrete\" | \"none\" | \"normal\" | (string & {});\n\n  type StepTimingFunction = \"step-end\" | \"step-start\" | (string & {});\n\n  type TimelineRangeName = \"contain\" | \"cover\" | \"entry\" | \"entry-crossing\" | \"exit\" | \"exit-crossing\";\n\n  type TrackBreadth<TLength> = TLength | \"auto\" | \"max-content\" | \"min-content\" | (string & {});\n\n  type ViewportLength<TLength> = TLength | \"auto\" | (string & {});\n\n  type VisualBox = \"border-box\" | \"content-box\" | \"padding-box\";\n}\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/package.json":"{\n  \"name\": \"react-transition-group\",\n  \"version\": \"4.4.5\",\n  \"description\": \"A react component toolset for managing animations\",\n  \"main\": \"cjs/index.js\",\n  \"module\": \"esm/index.js\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/reactjs/react-transition-group.git\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"transition\",\n    \"addons\",\n    \"transition-group\",\n    \"animation\",\n    \"css\",\n    \"transitions\"\n  ],\n  \"author\": \"\",\n  \"license\": \"BSD-3-Clause\",\n  \"bugs\": {\n    \"url\": \"https://github.com/reactjs/react-transition-group/issues\"\n  },\n  \"homepage\": \"https://github.com/reactjs/react-transition-group#readme\",\n  \"jest\": {\n    \"testRegex\": \"-test\\\\.js\",\n    \"setupFiles\": [\n      \"./test/setup.js\"\n    ],\n    \"setupFilesAfterEnv\": [\n      \"./test/setupAfterEnv.js\"\n    ],\n    \"roots\": [\n      \"<rootDir>/test\"\n    ]\n  },\n  \"peerDependencies\": {\n    \"react\": \">=16.6.0\",\n    \"react-dom\": \">=16.6.0\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.5.5\",\n    \"dom-helpers\": \"^5.0.1\",\n    \"loose-envify\": \"^1.4.0\",\n    \"prop-types\": \"^15.6.2\"\n  },\n  \"release\": {\n    \"pkgRoot\": \"lib\",\n    \"verifyConditions\": [\n      \"@semantic-release/changelog\",\n      \"semantic-release-alt-publish-dir\",\n      \"@semantic-release/git\",\n      \"@semantic-release/github\"\n    ],\n    \"prepare\": [\n      \"@semantic-release/changelog\",\n      \"semantic-release-alt-publish-dir\",\n      \"@semantic-release/npm\",\n      \"@semantic-release/git\"\n    ]\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"loose-envify\"\n    ]\n  },\n  \"sideEffects\": false\n}\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/index.d.ts":"export { default as config } from \"./config\";\nexport { default as CSSTransition } from \"./CSSTransition\";\nexport { default as SwitchTransition } from \"./SwitchTransition\";\nexport { default as Transition, TransitionStatus } from \"./Transition\";\nexport { default as TransitionGroup } from \"./TransitionGroup\";\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/config.d.ts":"export interface Config {\n    disabled: boolean;\n}\n\ndeclare const config: Config;\nexport default config;\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/TransitionGroup.d.ts":"import { Component, ElementType, JSX, ReactElement } from \"react\";\nimport { TransitionActions, TransitionProps } from \"./Transition\";\n\nexport interface IntrinsicTransitionGroupProps<T extends keyof JSX.IntrinsicElements = \"div\">\n    extends TransitionActions\n{\n    component?: T | null | undefined;\n}\n\nexport interface ComponentTransitionGroupProps<T extends ElementType> extends TransitionActions {\n    component: T;\n}\n\nexport type TransitionGroupProps<T extends keyof JSX.IntrinsicElements = \"div\", V extends ElementType = any> =\n    | (IntrinsicTransitionGroupProps<T> & JSX.IntrinsicElements[T])\n    | (ComponentTransitionGroupProps<V>) & {\n        children?: ReactElement<TransitionProps<any>> | Array<ReactElement<TransitionProps<any>>> | undefined;\n        childFactory?(child: ReactElement): ReactElement;\n        [prop: string]: any;\n    };\n\n/**\n * The `<TransitionGroup>` component manages a set of `<Transition>` components\n * in a list. Like with the `<Transition>` component, `<TransitionGroup>`, is a\n * state machine for managing the mounting and unmounting of components over\n * time.\n *\n * Consider the example below using the `Fade` CSS transition from before.\n * As items are removed or added to the TodoList the `in` prop is toggled\n * automatically by the `<TransitionGroup>`. You can use _any_ `<Transition>`\n * component in a `<TransitionGroup>`, not just css.\n *\n * ```jsx\n * import TransitionGroup from 'react-transition-group/TransitionGroup';\n *\n * class TodoList extends React.Component {\n *   constructor(props) {\n *     super(props)\n *     this.state = {items: ['hello', 'world', 'click', 'me']}\n *   }\n *   handleAdd() {\n *     const newItems = this.state.items.concat([\n *       prompt('Enter some text')\n *     ]);\n *     this.setState({ items: newItems });\n *   }\n *   handleRemove(i) {\n *     let newItems = this.state.items.slice();\n *     newItems.splice(i, 1);\n *     this.setState({items: newItems});\n *   }\n *   render() {\n *     return (\n *       <div>\n *         <button onClick={() => this.handleAdd()}>Add Item</button>\n *         <TransitionGroup>\n *           {this.state.items.map((item, i) => (\n *             <FadeTransition key={item}>\n *               <div>\n *                 {item}{' '}\n *                 <button onClick={() => this.handleRemove(i)}>\n *                   remove\n *                 </button>\n *               </div>\n *             </FadeTransition>\n *           ))}\n *         </TransitionGroup>\n *       </div>\n *     );\n *   }\n * }\n * ```\n *\n * Note that `<TransitionGroup>`  does not define any animation behavior!\n * Exactly _how_ a list item animates is up to the individual `<Transition>`\n * components. This means you can mix and match animations across different\n * list items.\n */\ndeclare class TransitionGroup extends Component<TransitionGroupProps> {}\n\nexport default TransitionGroup;\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/Transition.d.ts":"import { Component, ReactNode } from \"react\";\n\ntype RefHandler<\n    RefElement extends undefined | HTMLElement,\n    ImplicitRefHandler extends (node: HTMLElement, ...args: any[]) => void,\n    ExplicitRefHandler extends (...args: any[]) => void,\n> = {\n    implicit: ImplicitRefHandler;\n    explicit: ExplicitRefHandler;\n}[RefElement extends undefined ? \"implicit\" : \"explicit\"];\n\nexport type EndHandler<RefElement extends undefined | HTMLElement> = RefHandler<\n    RefElement,\n    (node: HTMLElement, done: () => void) => void,\n    (done: () => void) => void\n>;\n\nexport type EnterHandler<RefElement extends undefined | HTMLElement> = RefHandler<\n    RefElement,\n    (node: HTMLElement, isAppearing: boolean) => void,\n    (isAppearing: boolean) => void\n>;\n\nexport type ExitHandler<E extends undefined | HTMLElement> = RefHandler<E, (node: HTMLElement) => void, () => void>;\n\nexport const UNMOUNTED = \"unmounted\";\nexport const EXITED = \"exited\";\nexport const ENTERING = \"entering\";\nexport const ENTERED = \"entered\";\nexport const EXITING = \"exiting\";\n\nexport interface TransitionActions {\n    /**\n     * Normally a component is not transitioned if it is shown when the\n     * `<Transition>` component mounts. If you want to transition on the first\n     * mount set  appear to true, and the component will transition in as soon\n     * as the `<Transition>` mounts. Note: there are no specific \"appear\" states.\n     * appear only adds an additional enter transition.\n     */\n    appear?: boolean | undefined;\n\n    /**\n     * Enable or disable enter transitions.\n     */\n    enter?: boolean | undefined;\n\n    /**\n     * Enable or disable exit transitions.\n     */\n    exit?: boolean | undefined;\n}\n\ninterface BaseTransitionProps<RefElement extends undefined | HTMLElement> {\n    /**\n     * Show the component; triggers the enter or exit states\n     */\n    in?: boolean | undefined;\n\n    /**\n     * By default the child component is mounted immediately along with the\n     * parent Transition component. If you want to \"lazy mount\" the component on\n     * the first `in={true}` you can set `mountOnEnter`. After the first enter\n     * transition the component will stay mounted, even on \"exited\", unless you\n     * also specify `unmountOnExit`.\n     */\n    mountOnEnter?: boolean | undefined;\n\n    /**\n     * By default the child component stays mounted after it reaches the\n     * 'exited' state. Set `unmountOnExit` if you'd prefer to unmount the\n     * component after it finishes exiting.\n     */\n    unmountOnExit?: boolean | undefined;\n\n    /**\n     * Callback fired before the \"entering\" status is applied. An extra\n     * parameter `isAppearing` is supplied to indicate if the enter stage is\n     * occurring on the initial mount\n     */\n    onEnter?: EnterHandler<RefElement> | undefined;\n\n    /**\n     * Callback fired after the \"entering\" status is applied. An extra parameter\n     * isAppearing is supplied to indicate if the enter stage is occurring on\n     * the initial mount\n     */\n    onEntering?: EnterHandler<RefElement> | undefined;\n\n    /**\n     * Callback fired after the \"entered\" status is applied. An extra parameter\n     * isAppearing is supplied to indicate if the enter stage is occurring on\n     * the initial mount\n     */\n    onEntered?: EnterHandler<RefElement> | undefined;\n\n    /**\n     * Callback fired before the \"exiting\" status is applied.\n     */\n    onExit?: ExitHandler<RefElement> | undefined;\n\n    /**\n     * Callback fired after the \"exiting\" status is applied.\n     */\n    onExiting?: ExitHandler<RefElement> | undefined;\n\n    /**\n     * Callback fired after the \"exited\" status is applied.\n     */\n    onExited?: ExitHandler<RefElement> | undefined;\n\n    /**\n     * A function child can be used instead of a React element. This function is\n     * called with the current transition status ('entering', 'entered',\n     * 'exiting',  'exited', 'unmounted'), which can be used to apply context\n     * specific props to a component.\n     * ```jsx\n     *    <Transition in={this.state.in} timeout={150}>\n     *        {state => (\n     *            <MyComponent className={`fade fade-${state}`} />\n     *        )}\n     *    </Transition>\n     * ```\n     */\n    children?: TransitionChildren | undefined;\n\n    /**\n     * A React reference to DOM element that need to transition: https://stackoverflow.com/a/51127130/4671932\n     * When `nodeRef` prop is used, node is not passed to callback functions (e.g. onEnter) because user already has direct access to the node.\n     * When changing `key` prop of `Transition` in a `TransitionGroup` a new `nodeRef` need to be provided to `Transition` with changed `key`\n     * prop (@see https://github.com/reactjs/react-transition-group/blob/master/test/Transition-test.js).\n     */\n    nodeRef?: React.Ref<RefElement> | undefined;\n\n    [prop: string]: any;\n}\n\nexport type TransitionStatus = typeof ENTERING | typeof ENTERED | typeof EXITING | typeof EXITED | typeof UNMOUNTED;\nexport type TransitionChildren =\n    | ReactNode\n    | ((status: TransitionStatus, childProps?: Record<string, unknown>) => ReactNode);\n\nexport interface TimeoutProps<RefElement extends undefined | HTMLElement> extends BaseTransitionProps<RefElement> {\n    /**\n     * The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n     *\n     * You may specify a single timeout for all transitions:\n     * ```js\n     *   timeout={500}\n     * ```\n     * or individually:\n     * ```js\n     * timeout={{\n     *  appear: 500,\n     *  enter: 300,\n     *  exit: 500,\n     * }}\n     * ```\n     * - appear defaults to the value of `enter`\n     * - enter defaults to `0`\n     * - exit defaults to `0`\n     */\n    timeout: number | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined };\n\n    /**\n     * Add a custom transition end trigger. Called with the transitioning DOM\n     * node and a done callback. Allows for more fine grained transition end\n     * logic. Note: Timeouts are still used as a fallback if provided.\n     */\n    addEndListener?: EndHandler<RefElement> | undefined;\n}\n\nexport interface EndListenerProps<Ref extends undefined | HTMLElement> extends BaseTransitionProps<Ref> {\n    /**\n     * The duration of the transition, in milliseconds. Required unless addEndListener is provided.\n     *\n     * You may specify a single timeout for all transitions:\n     * ```js\n     *   timeout={500}\n     * ```\n     * or individually:\n     * ```js\n     * timeout={{\n     *  appear: 500,\n     *  enter: 300,\n     *  exit: 500,\n     * }}\n     * ```\n     * - appear defaults to the value of `enter`\n     * - enter defaults to `0`\n     * - exit defaults to `0`\n     */\n    timeout?:\n        | number\n        | { appear?: number | undefined; enter?: number | undefined; exit?: number | undefined }\n        | undefined;\n    /**\n     * Add a custom transition end trigger. Called with the transitioning DOM\n     * node and a done callback. Allows for more fine grained transition end\n     * logic. Note: Timeouts are still used as a fallback if provided.\n     */\n    addEndListener: EndHandler<Ref>;\n}\n\nexport type TransitionProps<RefElement extends undefined | HTMLElement = undefined> =\n    | TimeoutProps<RefElement>\n    | EndListenerProps<RefElement>;\n\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * It's used to animate the mounting and unmounting of Component, but can also\n * be used to describe in-place transition states as well.\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the components.\n * It's up to you to give meaning and effect to those states. For example we can\n * add styles to a component when it enters or exits:\n *\n * ```jsx\n * import Transition from 'react-transition-group/Transition';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {(state) => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm A fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n */\ndeclare class Transition<RefElement extends HTMLElement | undefined> extends Component<TransitionProps<RefElement>> {}\n\nexport default Transition;\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/SwitchTransition.d.ts":"import { Component, ReactElement } from \"react\";\n\nexport enum modes {\n    out = \"out-in\",\n    in = \"in-out\",\n}\n\nexport interface SwitchTransitionProps {\n    /**\n     * Transition modes.\n     * `out-in`: Current element transitions out first, then when complete, the new element transitions in.\n     * `in-out`: New element transitions in first, then when complete, the current element transitions out.\n     */\n    mode?: \"out-in\" | \"in-out\" | undefined;\n\n    /**\n     * Any `Transition` or `CSSTransition` component\n     */\n    children: ReactElement;\n}\n\n/**\n * A transition component inspired by the [vue transition modes](https://vuejs.org/v2/guide/transitions.html#Transition-Modes).\n * You can use it when you want to control the render between state transitions.\n * Based on the selected mode and the child's key which is the `Transition` or `CSSTransition` component, the `SwitchTransition` makes a consistent transition between them.\n *\n * If the `out-in` mode is selected, the `SwitchTransition` waits until the old child leaves and then inserts a new child.\n * If the `in-out` mode is selected, the `SwitchTransition` inserts a new child first, waits for the new child to enter and then removes the old child\n *\n * ```jsx\n * function App() {\n *  const [state, setState] = useState(false);\n *  return (\n *    <SwitchTransition>\n *      <FadeTransition key={state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        addEndListener={(node, done) => node.addEventListener(\"transitionend\", done, false)}\n *        classNames='fade' >\n *        <button onClick={() => setState(state => !state)}>\n *          {state ? \"Goodbye, world!\" : \"Hello, world!\"}\n *        </button>\n *      </FadeTransition>\n *    </SwitchTransition>\n *  )\n * }\n * ```\n */\ndeclare class SwitchTransition extends Component<SwitchTransitionProps> {}\n\nexport default SwitchTransition;\n","../@types+react-transition-group@4.4.10/node_modules/@types/react-transition-group/CSSTransition.d.ts":"import { Component } from \"react\";\nimport { TransitionProps } from \"./Transition\";\n\nexport interface CSSTransitionClassNames {\n    appear?: string | undefined;\n    appearActive?: string | undefined;\n    appearDone?: string | undefined;\n    enter?: string | undefined;\n    enterActive?: string | undefined;\n    enterDone?: string | undefined;\n    exit?: string | undefined;\n    exitActive?: string | undefined;\n    exitDone?: string | undefined;\n}\n\nexport type CSSTransitionProps<Ref extends undefined | HTMLElement = undefined> = TransitionProps<Ref> & {\n    /**\n     * The animation `classNames` applied to the component as it enters or exits.\n     * A single name can be provided and it will be suffixed for each stage: e.g.\n     *\n     * `classNames=\"fade\"` applies `fade-enter`, `fade-enter-active`,\n     * `fade-exit`, `fade-exit-active`, `fade-appear`, and `fade-appear-active`.\n     *\n     * Each individual classNames can also be specified independently like:\n     *\n     * ```js\n     * classNames={{\n     *   appear: 'my-appear',\n     *   appearActive: 'my-appear-active',\n     *   appearDone: 'my-appear-done',\n     *   enter: 'my-enter',\n     *   enterActive: 'my-enter-active',\n     *   enterDone: 'my-enter-done',\n     *   exit: 'my-exit',\n     *   exitActive: 'my-exit-active',\n     *   exitDone: 'my-exit-done'\n     * }}\n     * ```\n     */\n    classNames?: string | CSSTransitionClassNames | undefined;\n};\n\ndeclare class CSSTransition<Ref extends undefined | HTMLElement> extends Component<CSSTransitionProps<Ref>> {}\n\nexport default CSSTransition;\n","node_modules/@mui/base/package.json":"{\n  \"name\": \"@mui/base\",\n  \"version\": \"5.0.0-beta.40\",\n  \"private\": false,\n  \"author\": \"MUI Team\",\n  \"description\": \"Base UI is a library of headless ('unstyled') React components and low-level hooks. You gain complete control over your app's CSS and accessibility features.\",\n  \"main\": \"./node/index.js\",\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"unstyled\",\n    \"a11y\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/material-ui.git\",\n    \"directory\": \"packages/mui-base\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/material-ui/issues\"\n  },\n  \"homepage\": \"https://mui.com/base-ui/\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mui-org\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.9\",\n    \"@floating-ui/react-dom\": \"^2.0.8\",\n    \"@popperjs/core\": \"^2.11.8\",\n    \"clsx\": \"^2.1.0\",\n    \"prop-types\": \"^15.8.1\",\n    \"@mui/utils\": \"^5.15.14\",\n    \"@mui/types\": \"^7.2.14\"\n  },\n  \"peerDependencies\": {\n    \"@types/react\": \"^17.0.0 || ^18.0.0\",\n    \"react\": \"^17.0.0 || ^18.0.0\",\n    \"react-dom\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@types/react\": {\n      \"optional\": true\n    }\n  },\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"directory\": \"build\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/base/index.d.ts":"export * from './utils';\nexport * from './Badge';\nexport * from './Button';\nexport * from './ClickAwayListener';\nexport * from './composeClasses';\nexport * from './Dropdown';\nexport * from './FocusTrap';\nexport * from './FormControl';\nexport * from './Input';\nexport * from './Menu';\nexport * from './MenuButton';\nexport * from './MenuItem';\nexport * from './Modal';\nexport { NoSsr } from './NoSsr';\nexport * from './Unstable_NumberInput';\nexport * from './OptionGroup';\nexport * from './Option';\nexport * from './Popper';\nexport * from './Unstable_Popup';\nexport * from './Portal';\nexport * from './Select';\nexport * from './Slider';\nexport * from './Snackbar';\nexport * from './Switch';\nexport * from './TablePagination';\nexport * from './TabPanel';\nexport * from './TabsList';\nexport * from './Tabs';\nexport * from './Tab';\nexport * from './TextareaAutosize';\nexport * from './Transitions';\nexport * from './useAutocomplete';\nexport * from './useBadge';\nexport * from './useButton';\nexport * from './useDropdown';\nexport * from './useInput';\nexport * from './useMenu';\nexport * from './useMenuButton';\nexport * from './useMenuItem';\nexport * from './unstable_useNumberInput';\nexport * from './useOption';\nexport * from './useSelect';\nexport * from './useSlider';\nexport * from './useSnackbar';\nexport * from './useSwitch';\nexport * from './useTab';\nexport * from './useTabPanel';\nexport * from './useTabs';\nexport * from './useTabsList';\nexport * from './unstable_useModal';\n\nexport {\n  generateUtilityClass as unstable_generateUtilityClass,\n  isGlobalState as unstable_isGlobalState,\n} from './generateUtilityClass';\n","node_modules/@mui/base/utils/useTextNavigation.d.ts":"import * as React from 'react';\n/**\n * @ignore - internal hook.\n *\n * Provides a handler for text navigation.\n * It's used to navigate a list by typing the first letters of the options.\n *\n * @param callback A function to be called when the navigation should be performed.\n * @returns A function to be used in a keydown event handler.\n */\nexport declare function useTextNavigation(callback: (searchString: string, event: React.KeyboardEvent) => void): (event: React.KeyboardEvent) => void;\n","node_modules/@mui/base/utils/useSlotProps.d.ts":"import * as React from 'react';\nimport { AppendOwnerStateReturnType } from './appendOwnerState';\nimport { MergeSlotPropsParameters, MergeSlotPropsResult, WithCommonProps } from './mergeSlotProps';\nexport type UseSlotPropsParameters<ElementType extends React.ElementType, SlotProps, ExternalForwardedProps, ExternalSlotProps, AdditionalProps, OwnerState> = Omit<MergeSlotPropsParameters<SlotProps, ExternalForwardedProps, ExternalSlotProps, AdditionalProps>, 'externalSlotProps'> & {\n    /**\n     * The type of the component used in the slot.\n     */\n    elementType: ElementType | undefined;\n    /**\n     * The `slotProps.*` of the Base UI component.\n     */\n    externalSlotProps: ExternalSlotProps | ((ownerState: OwnerState) => ExternalSlotProps) | undefined;\n    /**\n     * The ownerState of the Base UI component.\n     */\n    ownerState: OwnerState;\n    /**\n     * Set to true if the slotProps callback should receive more props.\n     */\n    skipResolvingSlotProps?: boolean;\n};\nexport type UseSlotPropsResult<ElementType extends React.ElementType, SlotProps, AdditionalProps, OwnerState> = AppendOwnerStateReturnType<ElementType, MergeSlotPropsResult<SlotProps, object, object, AdditionalProps>['props'] & {\n    ref: ((instance: any | null) => void) | null;\n}, OwnerState>;\n/**\n * @ignore - do not document.\n * Builds the props to be passed into the slot of an unstyled component.\n * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.\n * If the slot component is not a host component, it also merges in the `ownerState`.\n *\n * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.\n */\nexport declare function useSlotProps<ElementType extends React.ElementType, SlotProps, AdditionalProps, OwnerState>(parameters: UseSlotPropsParameters<ElementType, SlotProps, object, WithCommonProps<Record<string, any>>, AdditionalProps, OwnerState>): import(\"@mui/types\").Simplify<import(\"@mui/types\").Simplify<SlotProps & object & AdditionalProps & {\n    className?: string | undefined;\n    style?: React.CSSProperties | undefined;\n}> & {\n    ref: ((instance: any) => void) | null;\n} & {\n    ownerState: ElementType extends React.ComponentType<any> ? OwnerState : ElementType extends keyof JSX.IntrinsicElements ? undefined : OwnerState | undefined;\n}>;\n","node_modules/@mui/base/utils/useRootElementName.d.ts":"type UseRootElementNameParameters = {\n    /**\n     * The HTML element expected to be rendered, for example 'div', 'button' etc\n     * @default ''\n     */\n    rootElementName?: keyof HTMLElementTagNameMap;\n    /**\n     * The name of the component using useRootElementName.\n     * For debugging purposes.\n     */\n    componentName?: string;\n};\n/**\n * @ignore - do not document.\n *\n * Use this function determine the host element correctly on the server (in a SSR context, for example Next.js)\n */\nexport declare function useRootElementName(parameters: UseRootElementNameParameters): [string, (instance: HTMLElement | null) => void];\nexport {};\n","node_modules/@mui/base/utils/useMessageBus.d.ts":"export interface MessageBus {\n    subscribe(topic: string, callback: Function): () => void;\n    publish(topic: string, ...args: unknown[]): void;\n}\nexport declare function createMessageBus(): MessageBus;\n/**\n * @ignore - internal hook.\n */\nexport declare function useMessageBus(): MessageBus;\n","node_modules/@mui/base/utils/useForcedRerendering.d.ts":"/**\n * @ignore - internal hook.\n */\nexport declare function useForcedRerendering(): () => void;\n","node_modules/@mui/base/utils/useControllableReducer.types.d.ts":"/// <reference types=\"react\" />\n/**\n * Functions that compare fields of a given State object\n */\nexport type StateComparers<State> = {\n    [key in keyof State]?: (value1: State[key], value2: State[key]) => boolean;\n};\nexport type StateChangeCallback<State> = <StateKey extends keyof State>(event: React.SyntheticEvent | null, field: StateKey, value: State[StateKey], reason: string, state: State) => void;\nexport type ActionWithContext<Action, ContextValue> = Action & {\n    context: ContextValue;\n};\n/**\n * Parameters of the useControllableReducer hook.\n */\nexport interface ControllableReducerParameters<State, Action extends ControllableReducerAction, ActionContext = undefined> {\n    /**\n     * The reducer function.\n     *\n     * @param state The previous state. If controlledProps are defined, the state will contain the values of the controlledProps.\n     * @param action The action to dispatch. The action can be augmented with the `actionContext`.\n     * @returns The updated state.\n     */\n    reducer: (state: State, action: ActionWithContext<Action, ActionContext>) => State;\n    /**\n     * The controlled props that will override the state items.\n     */\n    controlledProps?: Partial<State>;\n    /**\n     * The initial state.\n     */\n    initialState: State;\n    /**\n     * Comparers for each state item. If a state item has a corresponding comparer, it will be used to determine if the state has changed.\n     * This is taken into consideration when firing the `onStateChange` event.\n     * If no comparer is defined, the default equality comparison will be used.\n     */\n    stateComparers?: StateComparers<State>;\n    /**\n     * The event handler called whenever a field of the state changes.\n     */\n    onStateChange?: StateChangeCallback<State>;\n    /**\n     * Additional properties that will be added to the action.\n     */\n    actionContext?: ActionContext;\n    /**\n     * The name of the component using useControllableReducer.\n     * For debugging purposes.\n     */\n    componentName?: string;\n}\nexport type ControllableReducerAction = {\n    /**\n     * The type of the action.\n     */\n    type?: string;\n    /**\n     * The event that triggered the action.\n     */\n    event?: React.SyntheticEvent | null;\n};\n","node_modules/@mui/base/utils/useControllableReducer.d.ts":"import { ControllableReducerAction, ControllableReducerParameters } from './useControllableReducer.types';\n/**\n * The alternative to `React.useReducer` that lets you control the state from the outside.\n *\n * It can be used in an uncontrolled mode, similar to `React.useReducer`, or in a controlled mode, when the state is controlled by the props.\n * It also supports partially controlled state, when some state items are controlled and some are not.\n *\n * The controlled state items are provided via the `controlledProps` parameter.\n * When a reducer action is dispatched, the internal state is updated with the new values.\n * A change event (`onStateChange`) is then triggered (for each changed state item) if the new state is different from the previous state.\n * This event can be used to update the controlled values.\n *\n * The comparison of the previous and next states is done using the `stateComparers` parameter.\n * If a state item has a corresponding comparer, it will be used to determine if the state has changed.\n * This is useful when the state item is an object and you want to compare only a subset of its properties or if it's an array and you want to compare its contents.\n *\n * An additional feature is the `actionContext` parameter. It allows you to add additional properties to every action object,\n * similarly to how React context is implicitly available to every component.\n *\n * @template State - The type of the state calculated by the reducer.\n * @template Action - The type of the actions that can be dispatched.\n * @template ActionContext - The type of the additional properties that will be added to every action object.\n *\n * @ignore - internal hook.\n */\nexport declare function useControllableReducer<State extends {}, Action extends ControllableReducerAction, ActionContext = undefined>(parameters: ControllableReducerParameters<State, Action, ActionContext>): [State, (action: Action) => void];\n","node_modules/@mui/base/utils/types.d.ts":"import * as React from 'react';\nexport type EventHandlers = Record<string, React.EventHandler<any>>;\nexport type WithOptionalOwnerState<Props extends {\n    ownerState: unknown;\n}> = Omit<Props, 'ownerState'> & Partial<Pick<Props, 'ownerState'>>;\nexport type SlotComponentProps<TSlotComponent extends React.ElementType, TOverrides, TOwnerState> = (Partial<React.ComponentPropsWithRef<TSlotComponent>> & TOverrides) | ((ownerState: TOwnerState) => Partial<React.ComponentPropsWithRef<TSlotComponent>> & TOverrides);\nexport type SlotComponentPropsWithSlotState<TSlotComponent extends React.ElementType, TOverrides, TOwnerState, TSlotState> = (Partial<React.ComponentPropsWithRef<TSlotComponent>> & TOverrides) | ((ownerState: TOwnerState, slotState: TSlotState) => Partial<React.ComponentPropsWithRef<TSlotComponent>> & TOverrides);\n","node_modules/@mui/base/utils/resolveComponentProps.d.ts":"/**\n * If `componentProps` is a function, calls it with the provided `ownerState`.\n * Otherwise, just returns `componentProps`.\n */\nexport declare function resolveComponentProps<TProps, TOwnerState, TSlotState>(componentProps: TProps | ((ownerState: TOwnerState, slotState?: TSlotState) => TProps) | undefined, ownerState: TOwnerState, slotState?: TSlotState): TProps | undefined;\n","node_modules/@mui/base/utils/prepareForSlot.d.ts":"import * as React from 'react';\nexport declare function prepareForSlot<ComponentType extends React.ElementType>(Component: ComponentType): React.ForwardRefExoticComponent<React.PropsWithoutRef<React.ComponentProps<ComponentType>> & React.RefAttributes<HTMLElement>>;\n","node_modules/@mui/base/utils/omitEventHandlers.d.ts":"/**\n * Removes event handlers from the given object.\n * A field is considered an event handler if it is a function with a name beginning with `on`.\n *\n * @param object Object to remove event handlers from.\n * @returns Object with event handlers removed.\n */\nexport declare function omitEventHandlers<Props extends Record<string, unknown>>(object: Props | undefined): {};\n","node_modules/@mui/base/utils/mergeSlotProps.d.ts":"import * as React from 'react';\nimport { ClassValue } from 'clsx';\nimport { Simplify } from '@mui/types';\nimport { EventHandlers } from './types';\nexport type WithCommonProps<OtherProps> = OtherProps & {\n    className?: string;\n    style?: React.CSSProperties;\n    ref?: React.Ref<any>;\n};\nexport interface MergeSlotPropsParameters<SlotProps, ExternalForwardedProps, ExternalSlotProps, AdditionalProps> {\n    /**\n     * A function that returns the internal props of the component.\n     * It accepts the event handlers passed into the component by the user\n     * and is responsible for calling them where appropriate.\n     */\n    getSlotProps?: (other: EventHandlers) => WithCommonProps<SlotProps>;\n    /**\n     * Props provided to the `slotProps.*` of the Base UI component.\n     */\n    externalSlotProps?: WithCommonProps<ExternalSlotProps>;\n    /**\n     * Extra props placed on the Base UI component that should be forwarded to the slot.\n     * This should usually be used only for the root slot.\n     */\n    externalForwardedProps?: WithCommonProps<ExternalForwardedProps>;\n    /**\n     * Additional props to be placed on the slot.\n     */\n    additionalProps?: WithCommonProps<AdditionalProps>;\n    /**\n     * Extra class name(s) to be placed on the slot.\n     */\n    className?: ClassValue | ClassValue[];\n}\nexport type MergeSlotPropsResult<SlotProps, ExternalForwardedProps, ExternalSlotProps, AdditionalProps> = {\n    props: Simplify<SlotProps & ExternalForwardedProps & ExternalSlotProps & AdditionalProps & {\n        className?: string;\n        style?: React.CSSProperties;\n    }>;\n    internalRef: React.Ref<any> | undefined;\n};\n/**\n * Merges the slot component internal props (usually coming from a hook)\n * with the externally provided ones.\n *\n * The merge order is (the latter overrides the former):\n * 1. The internal props (specified as a getter function to work with get*Props hook result)\n * 2. Additional props (specified internally on a Base UI component)\n * 3. External props specified on the owner component. These should only be used on a root slot.\n * 4. External props specified in the `slotProps.*` prop.\n * 5. The `className` prop - combined from all the above.\n * @param parameters\n * @returns\n */\nexport declare function mergeSlotProps<SlotProps, ExternalForwardedProps extends Record<string, unknown>, ExternalSlotProps extends Record<string, unknown>, AdditionalProps>(parameters: MergeSlotPropsParameters<SlotProps, ExternalForwardedProps, ExternalSlotProps, AdditionalProps>): MergeSlotPropsResult<SlotProps, ExternalForwardedProps, ExternalSlotProps, AdditionalProps>;\n","node_modules/@mui/base/utils/isHostComponent.d.ts":"import * as React from 'react';\n/**\n * Determines if a given element is a DOM element name (i.e. not a React component).\n */\nexport declare function isHostComponent(element: React.ElementType): boolean;\n","node_modules/@mui/base/utils/index.d.ts":"export { appendOwnerState } from './appendOwnerState';\nexport { areArraysEqual } from './areArraysEqual';\nexport { ClassNameConfigurator } from './ClassNameConfigurator';\nexport { extractEventHandlers } from './extractEventHandlers';\nexport { isHostComponent } from './isHostComponent';\nexport { resolveComponentProps } from './resolveComponentProps';\nexport { useRootElementName } from './useRootElementName';\nexport { useSlotProps } from './useSlotProps';\nexport { mergeSlotProps } from './mergeSlotProps';\nexport { prepareForSlot } from './prepareForSlot';\nexport * from './PolymorphicComponent';\nexport * from './types';\n","node_modules/@mui/base/utils/extractEventHandlers.d.ts":"import { EventHandlers } from './types';\n/**\n * Extracts event handlers from a given object.\n * A prop is considered an event handler if it is a function and its name starts with `on`.\n *\n * @param object An object to extract event handlers from.\n * @param excludeKeys An array of keys to exclude from the returned object.\n */\nexport declare function extractEventHandlers(object: Record<string, any> | undefined, excludeKeys?: string[]): EventHandlers;\n","node_modules/@mui/base/utils/combineHooksSlotProps.d.ts":"import { EventHandlers } from './types';\n/**\n * Combines the two get*Props functions from Base UI hooks into one.\n * Useful when a hook uses two other hooks behind the scenes\n * (such as useSelect that depends on useList and useButton for its root slot).\n *\n * The resulting function will return the combined props.\n * They are merged from left to right, similarly to how Object.assign works.\n *\n * The getSecondProps function will receive the result of the getFirstProps function as its argument,\n * so its event handlers can call the previous handlers and act depending on its result.\n *\n * @param getFirstProps - A getter function that returns the props for the first slot. It receives the external event handlers as its argument.\n * @param getSecondProps - A getter function that returns the props for the second slot. It receives the result of the getFirstProps function as its argument.\n */\nexport declare function combineHooksSlotProps<ExternalHandlers extends EventHandlers, FirstSlotProps extends ExternalHandlers, SecondSlotProps extends ExternalHandlers>(getFirstProps: (external?: ExternalHandlers) => FirstSlotProps, getSecondProps: (external?: ExternalHandlers) => SecondSlotProps): <OtherProps extends ExternalHandlers>(external?: OtherProps) => OtherProps & FirstSlotProps & SecondSlotProps;\n","node_modules/@mui/base/utils/areArraysEqual.d.ts":"type ItemComparer<Item> = (a: Item, b: Item) => boolean;\nexport declare function areArraysEqual<Item>(array1: ReadonlyArray<Item>, array2: ReadonlyArray<Item>, itemComparer?: ItemComparer<Item>): boolean;\nexport {};\n","node_modules/@mui/base/utils/appendOwnerState.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\n/**\n * Type of the ownerState based on the type of an element it applies to.\n * This resolves to the provided OwnerState for React components and `undefined` for host components.\n * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.\n */\ntype OwnerStateWhenApplicable<ElementType extends React.ElementType, OwnerState> = ElementType extends React.ComponentType<any> ? OwnerState : ElementType extends keyof JSX.IntrinsicElements ? undefined : OwnerState | undefined;\nexport type AppendOwnerStateReturnType<ElementType extends React.ElementType, OtherProps, OwnerState> = Simplify<OtherProps & {\n    ownerState: OwnerStateWhenApplicable<ElementType, OwnerState>;\n}>;\n/**\n * Appends the ownerState object to the props, merging with the existing one if necessary.\n *\n * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.\n * @param otherProps Props of the element.\n * @param ownerState\n */\nexport declare function appendOwnerState<ElementType extends React.ElementType, OtherProps extends Record<string, any>, OwnerState>(elementType: ElementType | undefined, otherProps: OtherProps, ownerState: OwnerState): AppendOwnerStateReturnType<ElementType, OtherProps, OwnerState>;\nexport {};\n","node_modules/@mui/base/utils/PolymorphicComponent.d.ts":"import * as React from 'react';\nimport { DistributiveOmit, OverridableTypeMap } from '@mui/types';\n/**\n * A component whose root component can be controlled explicitly with a generic type parameter.\n * Adjusts valid props based on the type of `RootComponent`.\n *\n * @template TypeMap The interface the defines the props and a default root element of the component.\n */\nexport type PolymorphicComponent<TypeMap extends OverridableTypeMap> = {\n    <RootComponent extends React.ElementType = TypeMap['defaultComponent']>(props: PolymorphicProps<TypeMap, RootComponent>): JSX.Element | null;\n    propTypes?: any;\n    displayName?: string | undefined;\n};\n/**\n * Own props of the component augmented with props of the root component.\n */\nexport type PolymorphicProps<TypeMap extends OverridableTypeMap, RootComponent extends React.ElementType> = TypeMap['props'] & DistributiveOmit<React.ComponentPropsWithRef<RootComponent>, keyof TypeMap['props']>;\n","node_modules/@mui/base/utils/MuiCancellableEvent.d.ts":"export type MuiCancellableEvent = {\n    defaultMuiPrevented?: boolean;\n};\nexport type MuiCancellableEventHandler<Event> = (event: Event & MuiCancellableEvent) => void;\n","node_modules/@mui/base/utils/ClassNameConfigurator.d.ts":"import * as React from 'react';\ntype ClassNameConfiguration = {\n    /**\n     * If `true`, the components within the context will not have built-in classes applied.\n     */\n    disableDefaultClasses: boolean;\n};\nexport interface ClassNameConfiguratorProps extends Partial<ClassNameConfiguration> {\n    children?: React.ReactNode;\n}\n/**\n * @ignore - internal hook.\n *\n * Wraps the `generateUtilityClass` function and controls how the classes are generated.\n * Currently it only affects whether the classes are applied or not.\n *\n * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.\n */\nexport declare function useClassNamesOverride(generateUtilityClass: (slot: string) => string): (slot: string) => string;\n/**\n * Allows to configure the components within to not apply any built-in classes.\n */\nexport declare function ClassNameConfigurator(props: ClassNameConfiguratorProps): React.JSX.Element;\nexport {};\n","node_modules/@mui/base/useTransition/useTransitionTrigger.d.ts":"import { TransitionContextValue } from './TransitionContext';\n/**\n * Allows child elements to be transitioned in and out.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionTrigger API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-trigger)\n */\nexport declare function useTransitionTrigger(requestEnter: boolean): UseTransitionTriggerReturnValue;\nexport type UseTransitionTriggerReturnValue = {\n    /**\n     * The value of a `TransitionContext` to be placed around children that will be transitioned.\n     */\n    contextValue: TransitionContextValue;\n    /**\n     * `true`, if the transitioned element has exited completely (or not entered yet).\n     */\n    hasExited: boolean;\n};\n","node_modules/@mui/base/useTransition/useTransitionStateManager.d.ts":"export type UseTransitionStateManagerReturnValue = {\n    /**\n     * `true`, if the current element should be visible.\n     */\n    requestedEnter: boolean;\n    /**\n     * Callback to be called when the element has completely exited.\n     */\n    onExited: () => void;\n};\n/**\n * Allows an element to be transitioned in and out.\n * The transition is triggerred by a `TransitionContext` placed above in the component tree.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/#hooks)\n *\n * API:\n *\n * - [useTransitionStateManager API](https://mui.com/base-ui/react-transitions/hooks-api/#use-transition-state-manager)\n */\nexport declare function useTransitionStateManager(): UseTransitionStateManagerReturnValue;\n","node_modules/@mui/base/useTransition/index.d.ts":"export * from './useTransitionStateManager';\nexport * from './useTransitionTrigger';\nexport * from './TransitionContext';\n","node_modules/@mui/base/useTransition/TransitionContext.d.ts":"import * as React from 'react';\nexport type TransitionContextValue = {\n    /**\n     * `true`, if the current element was requested to appear.\n     */\n    requestedEnter: boolean;\n    /**\n     * Callback to be called when the element has completely exited.\n     */\n    onExited: () => void;\n    /**\n     * Registers a child transition.\n     * This is used to notify the parent `useTransitionTrigger` hook that a child transition exists\n     * and state changes must be triggered by the context's callbck functions.\n     *\n     * Returns a function to unregister the child transition.\n     */\n    registerTransition: () => () => void;\n};\nexport declare const TransitionContext: React.Context<TransitionContextValue | null>;\n","node_modules/@mui/base/useTabsList/useTabsList.types.d.ts":"import * as React from 'react';\nimport { TabsListProviderValue } from './TabsListProvider';\nimport { ListAction } from '../useList';\nexport interface UseTabsListParameters {\n    /**\n     * Ref to the root element.\n     */\n    rootRef: React.Ref<Element>;\n}\nexport type UseTabsListRootSlotProps<ExternalProps = {}> = ExternalProps & {\n    'aria-label'?: React.AriaAttributes['aria-label'];\n    'aria-labelledby'?: React.AriaAttributes['aria-labelledby'];\n    'aria-orientation'?: React.AriaAttributes['aria-orientation'];\n    role: React.AriaRole;\n    ref: React.RefCallback<Element> | null;\n    onKeyDown?: React.KeyboardEventHandler<HTMLElement>;\n};\nexport interface UseTabsListReturnValue {\n    /**\n     * The value to be passed to the TabListProvider above all the tabs.\n     */\n    contextValue: TabsListProviderValue;\n    /**\n     * Action dispatcher for the tabs list component.\n     * Allows to programmatically control the tabs list.\n     */\n    dispatch: (action: ListAction<string | number>) => void;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseTabsListRootSlotProps<ExternalProps>;\n    /**\n     * The value of the currently highlighted tab.\n     */\n    highlightedValue: string | number | null;\n    /**\n     * If `true`, it will indicate that the text's direction in right-to-left.\n     */\n    isRtl: boolean;\n    /**\n     * The component orientation (layout flow direction).\n     */\n    orientation: 'horizontal' | 'vertical';\n    rootRef: React.RefCallback<Element> | null;\n    /**\n     * The value of the currently selected tab.\n     */\n    selectedValue: string | number | null;\n}\nexport declare const TabsListActionTypes: {\n    readonly valueChange: \"valueChange\";\n};\nexport interface ValueChangeAction {\n    type: typeof TabsListActionTypes.valueChange;\n    value: string | number | null;\n}\n","node_modules/@mui/base/useTabsList/useTabsList.d.ts":"import { UseTabsListParameters, UseTabsListReturnValue } from './useTabsList.types';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTabsList API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tabs-list)\n */\ndeclare function useTabsList(parameters: UseTabsListParameters): UseTabsListReturnValue;\nexport { useTabsList };\n","node_modules/@mui/base/useTabsList/tabsListReducer.d.ts":"import { ListState, ListAction, ListActionContext } from '../useList';\nimport { ActionWithContext } from '../utils/useControllableReducer.types';\nimport { ValueChangeAction } from './useTabsList.types';\nexport type TabsListActionContext = ListActionContext<string | number> & {\n    selectionFollowsFocus: boolean;\n};\nexport declare function tabsListReducer(state: ListState<string | number>, action: ActionWithContext<ListAction<string | number> | ValueChangeAction, TabsListActionContext>): ListState<string | number>;\n","node_modules/@mui/base/useTabsList/index.d.ts":"export { useTabsList } from './useTabsList';\nexport * from './useTabsList.types';\nexport * from './TabsListProvider';\n","node_modules/@mui/base/useTabsList/TabsListProvider.d.ts":"import * as React from 'react';\nimport { ListContextValue } from '../useList/ListContext';\nimport { TabMetadata } from '../useTabs';\nimport { CompoundComponentContextValue } from '../useCompound';\nexport type TabsListProviderValue = CompoundComponentContextValue<string | number, TabMetadata> & ListContextValue<string | number>;\nexport interface TabsListProviderProps {\n    value: TabsListProviderValue;\n    children: React.ReactNode;\n}\n/**\n * Sets up the contexts for the underlying Tab components.\n *\n * @ignore - do not document.\n */\nexport declare function TabsListProvider(props: TabsListProviderProps): React.JSX.Element;\n","node_modules/@mui/base/useTabs/useTabs.types.d.ts":"/// <reference types=\"react\" />\nimport { TabsProviderValue } from './TabsProvider';\nexport interface UseTabsParameters {\n    /**\n     * The value of the currently selected `Tab`.\n     * If you don't want any selected `Tab`, you can set this prop to `false`.\n     */\n    value?: string | number | null;\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: string | number | null;\n    /**\n     * The component orientation (layout flow direction).\n     * @default 'horizontal'\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * The direction of the text.\n     * @default 'ltr'\n     */\n    direction?: 'ltr' | 'rtl';\n    /**\n     * Callback invoked when new value is being set.\n     */\n    onChange?: (event: React.SyntheticEvent | null, value: number | string | null) => void;\n    /**\n     * If `true` the selected tab changes on focus. Otherwise it only\n     * changes on activation.\n     */\n    selectionFollowsFocus?: boolean;\n}\nexport interface UseTabsReturnValue {\n    /**\n     * Returns the values to be passed to the tabs provider.\n     */\n    contextValue: TabsProviderValue;\n}\n","node_modules/@mui/base/useTabs/useTabs.d.ts":"import * as React from 'react';\nimport { UseTabsParameters, UseTabsReturnValue } from './useTabs.types';\nexport interface TabMetadata {\n    disabled: boolean;\n    id: string | undefined;\n    ref: React.RefObject<HTMLElement>;\n}\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTabs API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tabs)\n */\ndeclare function useTabs(parameters: UseTabsParameters): UseTabsReturnValue;\nexport { useTabs };\n","node_modules/@mui/base/useTabs/index.d.ts":"export * from './useTabs';\nexport * from './useTabs.types';\nexport * from './TabsProvider';\n","node_modules/@mui/base/useTabs/TabsProvider.d.ts":"import * as React from 'react';\nimport { TabsContextValue } from '../Tabs/TabsContext';\nimport { CompoundComponentContextValue } from '../useCompound';\nexport type TabPanelMetadata = {\n    id: string | undefined;\n    ref: React.RefObject<HTMLElement>;\n};\nexport type TabsProviderValue = CompoundComponentContextValue<string | number, TabPanelMetadata> & TabsContextValue;\nexport interface TabsProviderProps {\n    value: TabsProviderValue;\n    children: React.ReactNode;\n}\n/**\n * Sets up the contexts for the underlying Tab and TabPanel components.\n *\n * @ignore - do not document.\n */\nexport declare function TabsProvider(props: TabsProviderProps): React.JSX.Element;\n","node_modules/@mui/base/useTabPanel/useTabPanel.types.d.ts":"/// <reference types=\"react\" />\nexport interface UseTabPanelParameters {\n    /**\n     * The id of the TabPanel.\n     */\n    id?: string;\n    /**\n     * The ref of the TabPanel.\n     */\n    rootRef?: React.Ref<HTMLElement>;\n    /**\n     * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n     */\n    value?: number | string;\n}\ninterface UseTabPanelRootSlotOwnProps {\n    'aria-labelledby'?: string;\n    hidden?: boolean;\n    id?: string;\n    ref: React.Ref<HTMLElement>;\n}\nexport type UseTabPanelRootSlotProps<ExternalProps = {}> = ExternalProps & UseTabPanelRootSlotOwnProps;\nexport interface UseTabPanelReturnValue {\n    /**\n     * If `true`, it indicates that the tab panel will be hidden.\n     */\n    hidden: boolean;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps additional props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseTabPanelRootSlotProps<ExternalProps>;\n    rootRef: React.Ref<HTMLElement>;\n}\nexport {};\n","node_modules/@mui/base/useTabPanel/useTabPanel.d.ts":"import { UseTabPanelParameters, UseTabPanelReturnValue } from './useTabPanel.types';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTabPanel API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab-panel)\n */\ndeclare function useTabPanel(parameters: UseTabPanelParameters): UseTabPanelReturnValue;\nexport { useTabPanel };\n","node_modules/@mui/base/useTabPanel/index.d.ts":"export { useTabPanel } from './useTabPanel';\nexport * from './useTabPanel.types';\n","node_modules/@mui/base/useTab/useTab.types.d.ts":"import * as React from 'react';\nimport { UseButtonRootSlotProps } from '../useButton';\nexport interface UseTabParameters {\n    /**\n     * The value of the tab.\n     * It's used to associate the tab with a tab panel(s) with the same value.\n     * If the value is not provided, it falls back to the position index.\n     */\n    value?: number | string;\n    /**\n     * If `true`, the tab will be disabled.\n     */\n    onChange?: (event: React.SyntheticEvent, value: number | string) => void;\n    /**\n     * Callback fired when the tab is clicked.\n     */\n    onClick?: React.MouseEventHandler;\n    /**\n     * If `true`, the tab will be disabled.\n     */\n    disabled?: boolean;\n    /**\n     * The id of the tab.\n     * If not provided, it will be automatically generated.\n     */\n    id?: string;\n    /**\n     * Ref to the root slot's DOM element.\n     */\n    rootRef?: React.Ref<Element>;\n}\nexport type UseTabRootSlotProps<ExternalProps = {}> = UseButtonRootSlotProps<ExternalProps> & {\n    'aria-controls': React.AriaAttributes['aria-controls'];\n    'aria-selected': React.AriaAttributes['aria-selected'];\n    id: string | undefined;\n    ref: React.RefCallback<Element> | null;\n    role: React.AriaRole;\n};\nexport interface UseTabReturnValue {\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseTabRootSlotProps<ExternalProps>;\n    /**\n     * If `true`, the tab is active (as in `:active` pseudo-class; in other words, pressed).\n     */\n    active: boolean;\n    /**\n     * If `true`, the tab has visible focus.\n     * This is a workaround for browsers that do not support this feature natively.\n     */\n    focusVisible: boolean;\n    /**\n     * If `true`, the tab is highlighted.\n     */\n    highlighted: boolean;\n    /**\n     * 0-based index of the tab in the list of tabs.\n     */\n    index: number;\n    /**\n     * Ref to the root slot's DOM element.\n     */\n    rootRef: React.RefCallback<Element> | null;\n    /**\n     * If `true`, the tab is selected.\n     */\n    selected: boolean;\n    /**\n     * Sets the focus-visible state of the tab.\n     * This is a workaround for browsers that do not support this feature natively.\n     */\n    setFocusVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    /**\n     * Total number of tabs in the nearest parent TabsList.\n     * This can be used to determine if the tab is the last one to style it accordingly.\n     */\n    totalTabsCount: number;\n}\n","node_modules/@mui/base/useTab/useTab.d.ts":"import { UseTabParameters, UseTabReturnValue } from './useTab.types';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/#hooks)\n *\n * API:\n *\n * - [useTab API](https://mui.com/base-ui/react-tabs/hooks-api/#use-tab)\n */\ndeclare function useTab(parameters: UseTabParameters): UseTabReturnValue;\nexport { useTab };\n","node_modules/@mui/base/useTab/index.d.ts":"export { useTab } from './useTab';\nexport * from './useTab.types';\n","node_modules/@mui/base/useSlider/useSlider.types.d.ts":"import * as React from 'react';\nexport interface UseSliderParameters {\n    /**\n     * The id of the element containing a label for the slider.\n     */\n    'aria-labelledby'?: string;\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: number | ReadonlyArray<number>;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.\n     * @default false\n     */\n    disableSwap?: boolean;\n    /**\n     * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).\n     * @default false\n     */\n    isRtl?: boolean;\n    /**\n     * Marks indicate predetermined values to which the user can move the slider.\n     * If `true` the marks are spaced according the value of the `step` prop.\n     * If an array, it should contain objects with `value` and an optional `label` keys.\n     * @default false\n     */\n    marks?: boolean | ReadonlyArray<Mark>;\n    /**\n     * The maximum allowed value of the slider.\n     * Should not be equal to min.\n     * @default 100\n     */\n    max?: number;\n    /**\n     * The minimum allowed value of the slider.\n     * Should not be equal to max.\n     * @default 0\n     */\n    min?: number;\n    /**\n     * Name attribute of the hidden `input` element.\n     */\n    name?: string;\n    /**\n     * Callback function that is fired when the slider's value changed.\n     *\n     * @param {Event} event The event source of the callback.\n     * You can pull out the new value by accessing `event.target.value` (any).\n     * **Warning**: This is a generic event not a change event.\n     * @param {number | number[]} value The new value.\n     * @param {number} activeThumb Index of the currently moved thumb.\n     */\n    onChange?: (event: Event, value: number | number[], activeThumb: number) => void;\n    /**\n     * Callback function that is fired when the `mouseup` is triggered.\n     *\n     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.\n     * @param {number | number[]} value The new value.\n     */\n    onChangeCommitted?: (event: React.SyntheticEvent | Event, value: number | number[]) => void;\n    /**\n     * The component orientation.\n     * @default 'horizontal'\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * The ref attached to the root of the Slider.\n     */\n    rootRef?: React.Ref<Element>;\n    /**\n     * A transformation function, to change the scale of the slider.\n     * @param {any} x\n     * @returns {any}\n     * @default function Identity(x) {\n     *   return x;\n     * }\n     */\n    scale?: (value: number) => number;\n    /**\n     * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.\n     * @default 10\n     */\n    shiftStep?: number;\n    /**\n     * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n     * The `min` prop serves as the origin for the valid values.\n     * We recommend (max - min) to be evenly divisible by the step.\n     *\n     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n     * @default 1\n     */\n    step?: number | null;\n    /**\n     * Tab index attribute of the hidden `input` element.\n     */\n    tabIndex?: number;\n    /**\n     * The value of the slider.\n     * For ranged sliders, provide an array with two values.\n     */\n    value?: number | ReadonlyArray<number>;\n}\nexport interface Mark {\n    value: number;\n    label?: React.ReactNode;\n}\nexport type UseSliderRootSlotOwnProps = {\n    onMouseDown: React.MouseEventHandler;\n    ref: React.RefCallback<Element> | null;\n};\nexport type UseSliderRootSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseSliderRootSlotOwnProps> & UseSliderRootSlotOwnProps;\nexport type UseSliderThumbSlotOwnProps = {\n    onMouseLeave: React.MouseEventHandler;\n    onMouseOver: React.MouseEventHandler;\n};\nexport type UseSliderThumbSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseSliderThumbSlotOwnProps> & UseSliderThumbSlotOwnProps;\nexport type UseSliderHiddenInputOwnProps = {\n    'aria-labelledby'?: string;\n    'aria-orientation'?: React.AriaAttributes['aria-orientation'];\n    'aria-valuemax'?: React.AriaAttributes['aria-valuemax'];\n    'aria-valuemin'?: React.AriaAttributes['aria-valuemin'];\n    disabled: boolean;\n    name?: string;\n    onBlur: React.FocusEventHandler;\n    onChange: React.ChangeEventHandler;\n    onFocus: React.FocusEventHandler;\n    step?: number | 'any';\n    style: React.CSSProperties;\n    tabIndex?: number;\n    type?: React.InputHTMLAttributes<HTMLInputElement>['type'];\n};\nexport type UseSliderHiddenInputProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseSliderHiddenInputOwnProps> & UseSliderHiddenInputOwnProps;\nexport type Axis = 'horizontal' | 'vertical' | 'horizontal-reverse';\nexport interface AxisProps<T extends Axis> {\n    offset: (percent: number) => T extends 'horizontal' ? {\n        left: string;\n    } : T extends 'vertical' ? {\n        bottom: string;\n    } : T extends 'horizontal-reverse' ? {\n        right: string;\n    } : never;\n    leap: (percent: number) => T extends 'horizontal' | 'horizontal-reverse' ? {\n        width: string;\n    } : T extends 'vertical' ? {\n        height: string;\n    } : never;\n}\nexport interface UseSliderReturnValue {\n    /**\n     * The active index of the slider.\n     */\n    active: number;\n    /**\n     * The orientation of the slider.\n     */\n    axis: Axis;\n    /**\n     * Returns the `offset` and `leap` methods to calculate the positioning styles based on the slider axis.\n     */\n    axisProps: {\n        [key in Axis]: AxisProps<key>;\n    };\n    /**\n     * If `true`, the slider is being dragged.\n     */\n    dragging: boolean;\n    /**\n     * The index of the thumb which is focused on the slider.\n     */\n    focusedThumbIndex: number;\n    /**\n     * Resolver for the hidden input slot's props.\n     * @param externalProps props for the hidden input slot\n     * @returns props that should be spread on the hidden input slot\n     */\n    getHiddenInputProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSliderHiddenInputProps<ExternalProps>;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSliderRootSlotProps<ExternalProps>;\n    /**\n     * Resolver for the thumb slot's props.\n     * @param externalProps props for the thumb slot\n     * @returns props that should be spread on the thumb slot\n     */\n    getThumbProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSliderThumbSlotProps<ExternalProps>;\n    /**\n     * Resolver for the thumb slot's style prop.\n     * @param index of the currently moved thumb\n     * @returns props that should be spread on the style prop of thumb slot\n     */\n    getThumbStyle: (index: number) => object;\n    /**\n     * The marks of the slider. Marks indicate predetermined values to which the user can move the slider.\n     */\n    marks: Mark[];\n    /**\n     * The thumb index for the current value when in hover state.\n     */\n    open: number;\n    /**\n     * If `true`, the slider is a range slider when the `value` prop passed is an array.\n     */\n    range: boolean;\n    /**\n     * Ref to the root slot's DOM node.\n     */\n    rootRef: React.RefCallback<Element> | null;\n    /**\n     * The track leap for the current value of the slider.\n     */\n    trackLeap: number;\n    /**\n     * The track offset for the current value of the slider.\n     */\n    trackOffset: number;\n    /**\n     * The possible values of the slider.\n     */\n    values: number[];\n}\n","node_modules/@mui/base/useSlider/useSlider.d.ts":"import { UseSliderParameters, UseSliderReturnValue } from './useSlider.types';\nexport declare function valueToPercent(value: number, min: number, max: number): number;\nexport declare const Identity: (x: any) => any;\n/**\n *\n * Demos:\n *\n * - [Slider](https://mui.com/base-ui/react-slider/#hook)\n *\n * API:\n *\n * - [useSlider API](https://mui.com/base-ui/react-slider/hooks-api/#use-slider)\n */\nexport declare function useSlider(parameters: UseSliderParameters): UseSliderReturnValue;\n","node_modules/@mui/base/useSlider/index.d.ts":"export * from './useSlider';\nexport * from './useSlider.types';\n","node_modules/@mui/base/useSnackbar/useSnackbar.types.d.ts":"/// <reference types=\"react\" />\nexport type SnackbarCloseReason = 'timeout' | 'clickaway' | 'escapeKeyDown';\nexport interface UseSnackbarParameters {\n    /**\n     * The number of milliseconds to wait before automatically calling the\n     * `onClose` function. `onClose` should then set the state of the `open`\n     * prop to hide the Snackbar. This behavior is disabled by default with\n     * the `null` value.\n     * @default null\n     */\n    autoHideDuration?: number | null;\n    /**\n     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n     * @default false\n     */\n    disableWindowBlurListener?: boolean;\n    /**\n     * Callback fired when the component requests to be closed.\n     * Typically `onClose` is used to set state in the parent component,\n     * which is used to control the `Snackbar` `open` prop.\n     * The `reason` parameter can optionally be used to control the response to `onClose`,\n     * for example ignoring `clickaway`.\n     *\n     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n     * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n     */\n    onClose?: (event: React.SyntheticEvent<any> | Event | null, reason: SnackbarCloseReason) => void;\n    /**\n     * If `true`, the component is shown.\n     */\n    open?: boolean;\n    /**\n     * The number of milliseconds to wait before dismissing after user interaction.\n     * If `autoHideDuration` prop isn't specified, it does nothing.\n     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n     * we default to `autoHideDuration / 2` ms.\n     */\n    resumeHideDuration?: number;\n}\nexport type UseSnackbarRootSlotProps<ExternalProps = {}> = ExternalProps & UseSnackbarRootSlotOwnProps;\nexport interface UseSnackbarRootSlotOwnProps {\n    onBlur: React.FocusEventHandler;\n    onFocus: React.FocusEventHandler;\n    onMouseEnter: React.MouseEventHandler;\n    onMouseLeave: React.MouseEventHandler;\n    ref?: React.RefCallback<Element>;\n    role: React.AriaRole;\n}\nexport interface UseSnackbarReturnValue {\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSnackbarRootSlotProps<ExternalProps>;\n    /**\n     * Callback fired when a \"click away\" event is detected.\n     */\n    onClickAway: (event: React.SyntheticEvent<any> | Event) => void;\n}\n","node_modules/@mui/base/useSnackbar/useSnackbar.d.ts":"import { UseSnackbarParameters, UseSnackbarReturnValue } from './useSnackbar.types';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\nexport declare function useSnackbar(parameters?: UseSnackbarParameters): UseSnackbarReturnValue;\n","node_modules/@mui/base/useSnackbar/index.d.ts":"export { useSnackbar } from './useSnackbar';\nexport * from './useSnackbar.types';\n","node_modules/@mui/base/useSwitch/useSwitch.types.d.ts":"import * as React from 'react';\nexport interface UseSwitchParameters {\n    /**\n     * If `true`, the component is checked.\n     */\n    checked?: boolean;\n    /**\n     * The default checked state. Use when the component is not controlled.\n     */\n    defaultChecked?: boolean;\n    /**\n     * If `true`, the component is disabled.\n     */\n    disabled?: boolean;\n    onBlur?: React.FocusEventHandler;\n    /**\n     * Callback fired when the state is changed.\n     *\n     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n     * You can pull out the new value by accessing `event.target.value` (string).\n     * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n     */\n    onChange?: React.ChangeEventHandler<HTMLInputElement>;\n    onFocus?: React.FocusEventHandler;\n    onFocusVisible?: React.FocusEventHandler;\n    /**\n     * If `true`, the component is read only.\n     */\n    readOnly?: boolean;\n    /**\n     * If `true`, the `input` element is required.\n     */\n    required?: boolean;\n}\ninterface UseSwitchInputSlotOwnProps {\n    checked?: boolean;\n    defaultChecked?: boolean;\n    disabled?: boolean;\n    onBlur: React.FocusEventHandler;\n    onChange: React.ChangeEventHandler<HTMLInputElement>;\n    onFocus: React.FocusEventHandler;\n    readOnly?: boolean;\n    ref: React.RefCallback<HTMLInputElement> | null;\n    required?: boolean;\n    type: React.HTMLInputTypeAttribute;\n}\nexport type UseSwitchInputSlotProps<TOther = {}> = Omit<TOther, keyof UseSwitchInputSlotOwnProps> & UseSwitchInputSlotOwnProps;\nexport interface UseSwitchReturnValue {\n    /**\n     * If `true`, the component will be checked.\n     */\n    checked: boolean;\n    /**\n     * If `true`, the component will be disabled.\n     */\n    disabled: boolean;\n    /**\n     * If `true`, it indicates that the component is being focused using keyboard.\n     */\n    focusVisible: boolean;\n    /**\n     * Resolver for the input slot's props.\n     * @param externalProps props for the input slot\n     * @returns props that should be spread on the input slot\n     */\n    getInputProps: (externalProps?: React.HTMLAttributes<HTMLInputElement>) => UseSwitchInputSlotProps;\n    /**\n     * Ref to the input slot's DOM node.\n     */\n    inputRef: React.RefCallback<HTMLInputElement> | null;\n    /**\n     * If `true`, the component will be read only.\n     */\n    readOnly: boolean;\n}\nexport {};\n","node_modules/@mui/base/useSwitch/useSwitch.d.ts":"import { UseSwitchParameters, UseSwitchReturnValue } from './useSwitch.types';\n/**\n * The basic building block for creating custom switches.\n *\n * Demos:\n *\n * - [Switch](https://mui.com/base-ui/react-switch/#hook)\n *\n * API:\n *\n * - [useSwitch API](https://mui.com/base-ui/react-switch/hooks-api/#use-switch)\n */\nexport declare function useSwitch(props: UseSwitchParameters): UseSwitchReturnValue;\n","node_modules/@mui/base/useSwitch/index.d.ts":"export { useSwitch } from './useSwitch';\nexport * from './useSwitch.types';\n","node_modules/@mui/base/useSelect/useSelect.types.d.ts":"import * as React from 'react';\nimport { ListAction, ListState, UseListRootSlotProps } from '../useList';\nimport { SelectOption } from '../useOption/useOption.types';\nimport { SelectProviderValue } from './SelectProvider';\nimport { MuiCancellableEventHandler } from '../utils/MuiCancellableEvent';\nimport { UseButtonRootSlotProps } from '../useButton';\nexport type SelectChangeEventType = React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element> | React.FocusEvent<Element, Element> | null;\nexport type SelectValue<Value, Multiple> = Multiple extends true ? Value[] : Value | null;\nexport interface SelectOptionDefinition<Value> {\n    value: Value;\n    disabled?: boolean;\n    label: string;\n}\nexport interface UseSelectParameters<OptionValue, Multiple extends boolean = false> {\n    /**\n     * A function used to determine if two options' values are equal.\n     * By default, reference equality is used.\n     *\n     * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).\n     * Therefore, it's recommented to use the default reference equality comparison whenever possible.\n     */\n    areOptionsEqual?: (a: OptionValue, b: OptionValue) => boolean;\n    /**\n     * If `true`, the select will be open by default.\n     * @default false\n     */\n    defaultOpen?: boolean;\n    /**\n     * The default selected value. Use when the component is not controlled.\n     */\n    defaultValue?: SelectValue<OptionValue, Multiple>;\n    /**\n     * If `true`, the select is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * The ref of the trigger button element.\n     */\n    buttonRef?: React.Ref<Element>;\n    /**\n     * The `id` attribute of the listbox element.\n     */\n    listboxId?: string;\n    /**\n     * The ref of the listbox element.\n     */\n    listboxRef?: React.Ref<Element>;\n    /**\n     * If `true`, the end user can select multiple values.\n     * This affects the type of the `value`, `defaultValue`, and `onChange` props.\n     *\n     * @default false\n     */\n    multiple?: Multiple;\n    /**\n     * The `name` attribute of the hidden input element.\n     * This is useful when the select is embedded in a form and you want to access the selected value in the form data.\n     */\n    name?: string;\n    /**\n     * If `true`, the select embedded in a form must have a selected value.\n     * Otherwise, the form submission will fail.\n     */\n    required?: boolean;\n    /**\n     * Callback fired when an option is selected.\n     */\n    onChange?: (event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, value: SelectValue<OptionValue, Multiple>) => void;\n    /**\n     * Callback fired when an option is highlighted.\n     */\n    onHighlightChange?: (event: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<Element> | React.FocusEvent<Element, Element> | null, highlighted: OptionValue | null) => void;\n    /**\n     * Callback fired when the listbox is opened or closed.\n     */\n    onOpenChange?: (open: boolean) => void;\n    /**\n     * Controls the open state of the select's listbox.\n     * This is the controlled equivalent of the `defaultOpen` prop.\n     */\n    open?: boolean;\n    /**\n     * An alternative way to specify the options.\n     * If this parameter is set, options defined as JSX children are ignored.\n     */\n    options?: ReadonlyArray<SelectOptionDefinition<OptionValue>>;\n    /**\n     * A function to convert the currently selected value to a string.\n     * Used to set a value of a hidden input associated with the select,\n     * so that the selected value can be posted with a form.\n     */\n    getSerializedValue?: (option: SelectValue<SelectOption<OptionValue>, Multiple>) => React.InputHTMLAttributes<HTMLInputElement>['value'];\n    /**\n     * A function used to convert the option label to a string.\n     * This is useful when labels are elements and need to be converted to plain text\n     * to enable keyboard navigation with character keys.\n     *\n     * @default defaultOptionStringifier\n     */\n    getOptionAsString?: (option: SelectOption<OptionValue>) => string;\n    /**\n     * The selected value.\n     * Set to `null` to deselect all options.\n     */\n    value?: SelectValue<OptionValue, Multiple>;\n    /**\n     * The name of the component using useSelect.\n     * For debugging purposes.\n     * @default 'useSelect'\n     */\n    componentName?: string;\n}\ninterface UseSelectButtonSlotEventHandlers {\n    onMouseDown: MuiCancellableEventHandler<React.MouseEvent>;\n}\nexport type UseSelectButtonSlotProps<TOther = {}> = UseButtonRootSlotProps<Omit<TOther, keyof UseSelectButtonSlotEventHandlers>> & UseSelectButtonSlotEventHandlers & {\n    'aria-expanded': React.AriaAttributes['aria-expanded'];\n    'aria-controls': React.AriaAttributes['aria-controls'];\n    role: React.HTMLAttributes<Element>['role'];\n    ref: React.RefCallback<Element> | null;\n};\ninterface UseSelectHiddenInputSlotEventHandlers {\n    onChange: MuiCancellableEventHandler<React.ChangeEvent<HTMLInputElement>>;\n}\nexport type UseSelectHiddenInputSlotProps<TOther = {}> = UseSelectHiddenInputSlotEventHandlers & React.InputHTMLAttributes<HTMLInputElement> & TOther;\ninterface UseSelectListboxSlotEventHandlers {\n    onBlur: MuiCancellableEventHandler<React.FocusEvent<HTMLElement>>;\n}\nexport type UseSelectListboxSlotProps<TOther = {}> = UseListRootSlotProps<Omit<TOther, keyof UseSelectListboxSlotEventHandlers>> & UseSelectListboxSlotEventHandlers & {\n    'aria-multiselectable': React.AriaAttributes['aria-multiselectable'];\n    id: string | undefined;\n    role: React.HTMLAttributes<Element>['role'];\n};\nexport interface UseSelectReturnValue<Value, Multiple> {\n    /**\n     * If `true`, the trigger button is active (pressed).\n     */\n    buttonActive: boolean;\n    /**\n     * If `true`, the trigger button has a visible focus.\n     */\n    buttonFocusVisible: boolean;\n    /**\n     * Ref to the button slot DOM node.\n     */\n    buttonRef: React.RefCallback<Element> | null;\n    /**\n     * If `true`, the select is disabled.\n     */\n    disabled: boolean;\n    /**\n     * Action dispatcher for the select component.\n     * Allows to programmatically control the select.\n     */\n    dispatch: (action: ListAction<Value> | SelectAction<Value>) => void;\n    /**\n     * Resolver for the button slot's props.\n     * @param externalProps event handlers for the button slot\n     * @returns props that should be spread on the button slot\n     */\n    getButtonProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSelectButtonSlotProps<ExternalProps>;\n    /**\n     * Resolver for the hidden input slot's props.\n     * @param externalProps event handlers for the hidden input slot\n     * @returns HTML input attributes that should be spread on the hidden input slot\n     */\n    getHiddenInputProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSelectHiddenInputSlotProps<ExternalProps>;\n    /**\n     * Resolver for the listbox slot's props.\n     * @param externalProps event handlers for the listbox slot\n     * @returns props that should be spread on the listbox slot\n     */\n    getListboxProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseSelectListboxSlotProps<ExternalProps>;\n    /**\n     * A function that returns the metadata of an option with a given value.\n     *\n     * @param optionValue the value of the option\n     * @returns\n     */\n    getOptionMetadata: (optionValue: Value) => SelectOption<Value> | undefined;\n    /**\n     * A value to be passed to the `SelectProvider` component.\n     */\n    contextValue: SelectProviderValue<Value>;\n    /**\n     * The value of the highlighted option.\n     */\n    highlightedOption: Value | null;\n    /**\n     * Ref to the listbox slot DOM node.\n     */\n    listboxRef: React.RefCallback<Element> | null;\n    /**\n     * If `true`, the listbox is open.\n     */\n    open: boolean;\n    /**\n     * Values of all the registered options.\n     */\n    options: Value[];\n    /**\n     * The value of the selected option(s).\n     */\n    value: SelectValue<Value, Multiple>;\n}\nexport declare const SelectActionTypes: {\n    readonly buttonClick: \"buttonClick\";\n    readonly browserAutoFill: \"browserAutoFill\";\n};\nexport interface ButtonClickAction {\n    type: typeof SelectActionTypes.buttonClick;\n    event: React.MouseEvent;\n}\nexport interface BrowserAutofillAction<OptionValue> {\n    type: typeof SelectActionTypes.browserAutoFill;\n    item: OptionValue;\n    event: React.ChangeEvent;\n}\nexport type SelectAction<OptionValue> = ButtonClickAction | BrowserAutofillAction<OptionValue>;\nexport interface SelectInternalState<OptionValue> extends ListState<OptionValue> {\n    open: boolean;\n}\nexport {};\n","node_modules/@mui/base/useSelect/useSelect.d.ts":"import { UseSelectParameters, UseSelectReturnValue } from './useSelect.types';\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\ndeclare function useSelect<OptionValue, Multiple extends boolean = false>(props: UseSelectParameters<OptionValue, Multiple>): UseSelectReturnValue<OptionValue, Multiple>;\nexport { useSelect };\n","node_modules/@mui/base/useSelect/selectReducer.d.ts":"import { ListAction, ListActionContext } from '../useList';\nimport { ActionWithContext } from '../utils/useControllableReducer.types';\nimport { SelectAction, SelectInternalState } from './useSelect.types';\nexport declare function selectReducer<OptionValue>(state: SelectInternalState<OptionValue>, action: ActionWithContext<ListAction<OptionValue> | SelectAction<OptionValue>, ListActionContext<OptionValue>>): SelectInternalState<OptionValue>;\n","node_modules/@mui/base/useSelect/index.d.ts":"export { useSelect } from './useSelect';\nexport * from './useSelect.types';\nexport * from './SelectProvider';\n","node_modules/@mui/base/useSelect/defaultOptionStringifier.d.ts":"import { SelectOption } from '../useOption';\ndeclare const defaultOptionStringifier: <OptionValue>(option: SelectOption<OptionValue>) => string;\nexport { defaultOptionStringifier };\n","node_modules/@mui/base/useSelect/SelectProvider.d.ts":"import * as React from 'react';\nimport { ListContextValue } from '../useList/ListContext';\nimport { SelectOption } from '../useOption';\nimport { CompoundComponentContextValue } from '../useCompound';\nexport type SelectProviderValue<Value> = CompoundComponentContextValue<Value, SelectOption<Value>> & ListContextValue<Value>;\nexport interface SelectProviderProps<Value> {\n    value: SelectProviderValue<Value>;\n    children: React.ReactNode;\n}\n/**\n * Sets up the contexts for the underlying Option components.\n *\n * @ignore - do not document.\n */\nexport declare function SelectProvider<Value>(props: SelectProviderProps<Value>): React.JSX.Element;\n","node_modules/@mui/base/useOption/useOptionContextStabilizer.d.ts":"/**\n * Stabilizes the ListContext value for the Option component, so it doesn't change when sibling Options update.\n *\n * @param value The value of the Option.\n * @returns The stable ListContext value.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOptionContextStabilizer API](https://mui.com/base-ui/react-select/hooks-api/#use-option-context-stabilizer)\n */\nexport declare function useOptionContextStabilizer<OptionValue>(value: OptionValue): {\n    contextValue: {\n        dispatch: (action: import(\"../useList\").ListAction<OptionValue>) => void;\n        getItemState: (itemValue: OptionValue) => {\n            highlighted: boolean;\n            selected: boolean;\n            focusable: boolean;\n        };\n    };\n};\n","node_modules/@mui/base/useOption/useOption.types.d.ts":"/// <reference types=\"react\" />\nimport { UseListItemRootSlotProps } from '../useList';\nexport interface SelectOption<Value> {\n    value: Value;\n    label: React.ReactNode;\n    disabled?: boolean;\n    ref: React.RefObject<HTMLElement>;\n    id?: string;\n}\nexport interface UseOptionParameters<Value> {\n    disabled: boolean;\n    id?: string;\n    label: string | React.ReactNode;\n    rootRef?: React.Ref<Element>;\n    value: Value;\n}\nexport interface UseOptionReturnValue {\n    /**\n     * If `true`, the option is selected.\n     */\n    selected: boolean;\n    /**\n     * If `true`, the option is highlighted.\n     */\n    highlighted: boolean;\n    index: number;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown>>(externalProps?: ExternalProps) => UseOptionRootSlotProps<ExternalProps>;\n    /**\n     * Ref to the root slot DOM node.\n     */\n    rootRef: React.RefCallback<Element> | null;\n}\nexport type UseOptionRootSlotProps<ExternalProps extends Record<string, unknown> = {}> = UseListItemRootSlotProps<ExternalProps> & {\n    ref?: React.RefCallback<Element> | null;\n} & ExternalProps;\n","node_modules/@mui/base/useOption/useOption.d.ts":"import { UseOptionParameters, UseOptionReturnValue } from './useOption.types';\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useOption API](https://mui.com/base-ui/react-select/hooks-api/#use-option)\n */\nexport declare function useOption<Value>(params: UseOptionParameters<Value>): UseOptionReturnValue;\n","node_modules/@mui/base/useOption/index.d.ts":"export { useOption } from './useOption';\nexport * from './useOption.types';\nexport * from './useOptionContextStabilizer';\n","node_modules/@mui/base/useMenuItem/useMenuItemContextStabilizer.d.ts":"/**\n * Stabilizes the ListContext value for the MenuItem component, so it doesn't change when sibling items update.\n *\n * @param id The id of the MenuItem. If undefined, it will be generated with useId.\n * @returns The stable ListContext value and the id of the MenuItem.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItemContextStabilizer API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-item-context-stabilizer)\n */\nexport declare function useMenuItemContextStabilizer(id: string | undefined): {\n    contextValue: {\n        dispatch: (action: import(\"../useList\").ListAction<string>) => void;\n        getItemState: (itemValue: string) => {\n            highlighted: boolean;\n            selected: boolean;\n            focusable: boolean;\n        };\n    };\n    id: string | undefined;\n};\n","node_modules/@mui/base/useMenuItem/useMenuItem.types.d.ts":"/// <reference types=\"react\" />\nimport { UseButtonRootSlotProps } from '../useButton';\nimport { MuiCancellableEventHandler } from '../utils/MuiCancellableEvent';\ninterface UseMenuItemRootSlotOwnProps {\n    id: string | undefined;\n    role: 'menuitem';\n    ref: React.RefCallback<Element> | null;\n}\nexport interface MenuItemMetadata {\n    id: string;\n    disabled: boolean;\n    label?: string;\n    ref: React.RefObject<HTMLElement>;\n}\nexport type UseMenuItemRootSlotProps<ExternalProps = {}> = ExternalProps & UseMenuItemRootSlotOwnProps & UseButtonRootSlotProps<ExternalProps> & {\n    onClick: MuiCancellableEventHandler<React.MouseEvent>;\n};\nexport interface UseMenuItemParameters {\n    disabled?: boolean;\n    id?: string;\n    label?: string;\n    onClick?: React.MouseEventHandler<any>;\n    rootRef: React.Ref<Element>;\n    /**\n     * If `true`, the menu item won't receive focus when the mouse moves over it.\n     *\n     * @default false\n     */\n    disableFocusOnHover?: boolean;\n}\nexport interface UseMenuItemReturnValue {\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps event handlers for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseMenuItemRootSlotProps<ExternalProps>;\n    /**\n     * If `true`, the component is disabled.\n     */\n    disabled: boolean;\n    /**\n     * If `true`, the component is being focused using keyboard.\n     */\n    focusVisible: boolean;\n    /**\n     * If `true`, the component is being highlighted.\n     */\n    highlighted: boolean;\n    /**\n     * 0-based index of the item in the menu.\n     */\n    index: number;\n    /**\n     * The ref to the component's root DOM element.\n     */\n    rootRef: React.RefCallback<Element> | null;\n    /**\n     * Total number of items in the menu.\n     */\n    totalItemCount: number;\n}\nexport {};\n","node_modules/@mui/base/useMenuItem/useMenuItem.d.ts":"import type { UseMenuItemParameters, UseMenuItemReturnValue } from './useMenuItem.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuItem API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-item)\n */\nexport declare function useMenuItem(params: UseMenuItemParameters): UseMenuItemReturnValue;\n","node_modules/@mui/base/useMenuItem/index.d.ts":"export { useMenuItem } from './useMenuItem';\nexport * from './useMenuItem.types';\nexport * from './useMenuItemContextStabilizer';\n","node_modules/@mui/base/useMenuButton/useMenuButton.types.d.ts":"/// <reference types=\"react\" />\nexport interface UseMenuButtonParameters {\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, allows a disabled button to receive focus.\n     * @default false\n     */\n    focusableWhenDisabled?: boolean;\n    /**\n     * The ref to the root element.\n     */\n    rootRef?: React.Ref<HTMLElement>;\n}\ntype UseMenuButtonRootSlotProps<ExternalProps = {}> = ExternalProps & UseMenuButtonRootSlotOwnProps;\ninterface UseMenuButtonRootSlotOwnProps {\n    'aria-haspopup': 'menu';\n    'aria-expanded': boolean;\n    'aria-controls': string;\n    /**\n     * Callback fired when the button is clicked.\n     */\n    onClick: React.MouseEventHandler;\n    /**\n     * The ref to the button element.\n     */\n    ref: React.RefCallback<Element> | null;\n}\nexport interface UseMenuButtonReturnValue {\n    /**\n     * If `true`, the component is active (pressed).\n     */\n    active: boolean;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseMenuButtonRootSlotProps<ExternalProps>;\n    open: boolean;\n    /**\n     * The ref to the root element.\n     */\n    rootRef: React.RefCallback<Element> | null;\n}\nexport {};\n","node_modules/@mui/base/useMenuButton/useMenuButton.d.ts":"import { UseMenuButtonParameters, UseMenuButtonReturnValue } from './useMenuButton.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenuButton API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu-button)\n */\nexport declare function useMenuButton(parameters?: UseMenuButtonParameters): UseMenuButtonReturnValue;\n","node_modules/@mui/base/useMenuButton/index.d.ts":"export { useMenuButton } from './useMenuButton';\nexport * from './useMenuButton.types';\n","node_modules/@mui/base/useList/useListItem.types.d.ts":"/// <reference types=\"react\" />\nexport interface UseListItemParameters<ItemValue> {\n    /**\n     * If `true`, the list item will dispatch the `itemHover` action on pointer over.\n     * Since the use cases for it are rare, it's disabled by default.\n     * It could be used to mimic the native `select` behavior, which highlights the hovered item.\n     *\n     * @default false\n     */\n    handlePointerOverEvents?: boolean;\n    /**\n     * The list item.\n     */\n    item: ItemValue;\n}\ninterface UseListItemRootSlotOwnProps {\n    onClick: React.MouseEventHandler;\n    onPointerOver: React.PointerEventHandler | undefined;\n    tabIndex?: number;\n}\nexport type UseListItemRootSlotProps<ExternalProps = {}> = ExternalProps & UseListItemRootSlotOwnProps;\nexport interface UseListItemReturnValue {\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps additional props to be forwarded to the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseListItemRootSlotProps<ExternalProps>;\n    /**\n     * If `true`, the current item is highlighted.\n     */\n    highlighted: boolean;\n    /**\n     * If `true`, the current item is selected.\n     */\n    selected: boolean;\n}\nexport {};\n","node_modules/@mui/base/useList/useListItem.d.ts":"import { UseListItemParameters, UseListItemReturnValue } from './useListItem.types';\n/**\n * Contains the logic for an item of a list-like component (for example Select, Menu, etc.).\n * It handles the item's mouse events and tab index.\n *\n * @template ItemValue The type of the item's value. This should be consistent with the type of useList's `items` parameter.\n * @ignore - internal hook.\n */\nexport declare function useListItem<ItemValue>(parameters: UseListItemParameters<ItemValue>): UseListItemReturnValue;\n","node_modules/@mui/base/useList/useList.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { ListAction } from './listActions.types';\nimport { ActionWithContext, ControllableReducerAction, StateChangeCallback } from '../utils/useControllableReducer.types';\nimport type { ListContextValue } from './ListContext';\nimport { MuiCancellableEventHandler } from '../utils/MuiCancellableEvent';\ntype ListActionContextRequiredKeys = 'disabledItemsFocusable' | 'disableListWrap' | 'focusManagement' | 'getItemAsString' | 'isItemDisabled' | 'itemComparer' | 'items' | 'orientation' | 'pageSize' | 'selectionMode';\n/**\n * The subset of `UseListParameters` that is passed to the list reducer actions.\n */\nexport type ListActionContext<ItemValue> = Simplify<Required<Pick<UseListParameters<ItemValue, any, any>, ListActionContextRequiredKeys>>>;\n/**\n * The action object augmented with the action context ({@linkcode ListActionContext} instance).\n * Instances of this type are passed to the reducer.\n *\n * @template ItemValue The type of the item values.\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n */\nexport type ListReducerAction<ItemValue, CustomActionContext = {}> = ActionWithContext<ListAction<ItemValue>, ListActionContext<ItemValue> & CustomActionContext>;\n/**\n * The state of the list.\n * Modifications to this state should be done via the reducer.\n */\nexport interface ListState<ItemValue> {\n    /**\n     * The item that is currently highlighted.\n     */\n    highlightedValue: ItemValue | null;\n    /**\n     * The item(s) that are currently selected.\n     */\n    selectedValues: ItemValue[];\n}\n/**\n * Type of the reducer that operates on the list state.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of ListState<ItemValue>.\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n */\nexport type ListReducer<ItemValue, State extends ListState<ItemValue>, CustomActionContext> = (state: State, action: ListReducerAction<ItemValue, CustomActionContext>) => State;\nexport type FocusManagementType = 'DOM' | 'activeDescendant';\nexport type SelectionMode = 'none' | 'single' | 'multiple';\n/**\n * Parameters of the useList hook.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n */\nexport interface UseListParameters<ItemValue, State extends ListState<ItemValue> = ListState<ItemValue>, CustomAction extends ControllableReducerAction = never, CustomActionContext = {}> {\n    /**\n     * The externally controlled values (highlighted and selected item(s)) of the list.\n     * If a custom state is used, this object can contain the added state fields as well.\n     *\n     * @default {}\n     */\n    controlledProps?: Partial<State>;\n    /**\n     * If `true`, it will be possible to highlight disabled items.\n     * @default false\n     */\n    disabledItemsFocusable?: boolean;\n    /**\n     * If `true`, the highlight will not wrap around the list if arrow keys are used.\n     * @default false\n     */\n    disableListWrap?: boolean;\n    /**\n     * The focus management strategy used by the list.\n     * Controls the attributes used to set focus on the list items.\n     * @default 'activeDescendant'\n     */\n    focusManagement?: FocusManagementType;\n    /**\n     * A function that returns the DOM element associated with an item.\n     * This is required when using the `DOM` focus management.\n     *\n     * @param item List item to get the DOM element for.\n     */\n    getItemDomElement?: (itemValue: ItemValue) => HTMLElement | null;\n    /**\n     * A function that returns the id of an item.\n     * This is required when using the `activeDescendant` focus management.\n     *\n     * @param itemValue List item to get the id for.\n     */\n    getItemId?: (itemValue: ItemValue) => string | undefined;\n    /**\n     * A function that intializes the state of the list.\n     * It is required when using a custom state with mandatory fields.\n     * If not provided, the state will be initialized with the default values (nothing highlighted or selected).\n     *\n     * @returns The initial state of the list.\n     */\n    getInitialState?: () => State;\n    /**\n     * A function that determines if a particular item is disabled.\n     * @default () => false\n     */\n    isItemDisabled?: (itemValue: ItemValue, index: number) => boolean;\n    /**\n     * Ref to the list root DOM element.\n     */\n    rootRef?: React.Ref<Element>;\n    /**\n     * Callback fired when the selected value changes.\n     * This is a strongly typed convenience event that can be used instead of `onStateChange`.\n     */\n    onChange?: (event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, value: ItemValue[], reason: string) => void;\n    /**\n     * Callback fired when the highlighted option changes.\n     * This is a strongly typed convenience event that can be used instead of `onStateChange`.\n     */\n    onHighlightChange?: (event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, option: ItemValue | null, reason: string) => void;\n    /**\n     * Callback fired when the items change.\n     *\n     * @param items The new items collection\n     */\n    onItemsChange?: (items: ItemValue[]) => void;\n    /**\n     * Callback fired when the any of the state items change.\n     * Note that in case of `selectedValues` and `highlightedValue` the strongly typed\n     * `onChange` and `onHighlightChange` callbacks are also fired.\n     */\n    onStateChange?: StateChangeCallback<State>;\n    /**\n     * The number of items skip when using the page up and page down keys.\n     *\n     * @default 5\n     */\n    pageSize?: number;\n    /**\n     * A function that tests equality between two items' values.\n     * @default (a, b) => a === b\n     */\n    itemComparer?: (itemValue1: ItemValue, itemValue2: ItemValue) => boolean;\n    /**\n     * A function that converts an object to its string representation\n     * @default (o) => o\n     */\n    getItemAsString?: (option: ItemValue) => string | undefined;\n    /**\n     * Array of list items.\n     */\n    items: ItemValue[];\n    /**\n     * Additional data to be passed to all the reducer actions.\n     * It will be available in the `context` property of the action when dispatched.\n     */\n    reducerActionContext?: CustomActionContext;\n    /**\n     * Orientation of the items in the list.\n     * Determines the actions that are performed when arrow keys are pressed.\n     */\n    orientation?: 'horizontal-ltr' | 'horizontal-rtl' | 'vertical';\n    /**\n     * Controls how many items can be selected at once: none (the selection functionality is disabled in this case), one, or indefinitely many.\n     * @default 'single'\n     */\n    selectionMode?: SelectionMode;\n    /**\n     * Custom state reducer function. It calculates the new state (highlighted and selected items + optional custom state)\n     * based on the previous one and the performed action.\n     */\n    stateReducer?: (state: State, action: ActionWithContext<ListAction<ItemValue> | CustomAction, ListActionContext<ItemValue> & CustomActionContext>) => State;\n    /**\n     * The name of the component using useList.\n     * For debugging purposes.\n     * @default 'useList'\n     */\n    componentName?: string;\n}\nexport interface ListItemState {\n    /**\n     * Determines if the item is focusable (its focus is managed by the DOM).\n     */\n    focusable: boolean;\n    /**\n     * If `true` the item is highlighted.\n     */\n    highlighted: boolean;\n    /**\n     * If `true` the item is selected.\n     */\n    selected: boolean;\n}\ninterface UseListRootSlotOwnProps {\n    'aria-activedescendant'?: React.AriaAttributes['aria-activedescendant'];\n    onBlur: MuiCancellableEventHandler<React.FocusEvent<HTMLElement>>;\n    onKeyDown: MuiCancellableEventHandler<React.KeyboardEvent<HTMLElement>>;\n    tabIndex: number;\n    ref: React.RefCallback<Element> | null;\n}\nexport type UseListRootSlotProps<ExternalProps = {}> = ExternalProps & UseListRootSlotOwnProps;\nexport interface UseListReturnValue<ItemValue, State extends ListState<ItemValue>, CustomAction extends ControllableReducerAction> {\n    contextValue: ListContextValue<ItemValue>;\n    dispatch: (action: CustomAction | ListAction<ItemValue>) => void;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps additional props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseListRootSlotProps<ExternalProps>;\n    rootRef: React.RefCallback<Element> | null;\n    state: State;\n}\nexport {};\n","node_modules/@mui/base/useList/useList.d.ts":"import { UseListParameters, ListState, UseListReturnValue } from './useList.types';\nimport { ControllableReducerAction } from '../utils/useControllableReducer.types';\n/**\n * The useList is a lower-level utility that is used to build list-like components.\n * It's used to manage the state of the list and its items.\n *\n * Supports highlighting a single item and selecting an arbitrary number of items.\n *\n * The state of the list is managed by a controllable reducer - that is a reducer that can have its state\n * controlled from outside.\n *\n * By default, the state consists of `selectedValues` and `highlightedValue` but can be extended by the caller of the hook.\n * Also the actions that can be dispatched and the reducer function can be defined externally.\n *\n * @template ItemValue The type of the item values.\n * @template State The type of the list state. This should be a subtype of `ListState<ItemValue>`.\n * @template CustomAction The type of the actions that can be dispatched (besides the standard ListAction).\n * @template CustomActionContext The shape of additional properties that will be added to actions when dispatched.\n *\n * @ignore - internal hook.\n */\ndeclare function useList<ItemValue, State extends ListState<ItemValue> = ListState<ItemValue>, CustomAction extends ControllableReducerAction = never, CustomActionContext = {}>(params: UseListParameters<ItemValue, State, CustomAction, CustomActionContext>): UseListReturnValue<ItemValue, State, CustomAction>;\nexport { useList };\n","node_modules/@mui/base/useList/listReducer.d.ts":"import { ListState, ListReducerAction, ListActionContext, SelectionMode } from './useList.types';\n/**\n * Gets the next item to highlight based on the current highlighted item and the search direction.\n *\n * @param previouslyHighlightedValue The item from which to start the search for the next candidate.\n * @param offset The offset from the previously highlighted item to search for the next candidate or a special named value ('reset', 'start', 'end').\n * @param context The list action context.\n *\n * @returns The next item to highlight or null if no item is valid.\n */\nexport declare function moveHighlight<ItemValue>(previouslyHighlightedValue: ItemValue | null, offset: number | 'reset' | 'start' | 'end', context: ListActionContext<ItemValue>): NonNullable<ItemValue> | (ItemValue & undefined) | null;\n/**\n * Toggles the selection of an item.\n *\n * @param item Item to toggle.\n * @param selectedValues Already selected items.\n * @param selectionMode The number of items that can be simultanously selected.\n * @param itemComparer A custom item comparer function.\n *\n * @returns The new array of selected items.\n */\nexport declare function toggleSelection<ItemValue>(item: ItemValue, selectedValues: ItemValue[], selectionMode: SelectionMode, itemComparer: (item1: ItemValue, item2: ItemValue) => boolean): ItemValue[];\n/**\n * Handles item selection in a list.\n *\n * @param item - The item to be selected.\n * @param state - The current state of the list.\n * @param context - The context of the list action.\n * @returns The new state of the list after the item has been selected, or the original state if the item is disabled.\n */\nexport declare function handleItemSelection<ItemValue, State extends ListState<ItemValue>>(item: ItemValue, state: State, context: ListActionContext<ItemValue>): State;\nexport declare function listReducer<ItemValue, State extends ListState<ItemValue>>(state: State, action: ListReducerAction<ItemValue> & {\n    context: ListActionContext<ItemValue>;\n}): State;\n","node_modules/@mui/base/useList/listActions.types.d.ts":"/// <reference types=\"react\" />\nexport declare const ListActionTypes: {\n    readonly blur: \"list:blur\";\n    readonly focus: \"list:focus\";\n    readonly itemClick: \"list:itemClick\";\n    readonly itemHover: \"list:itemHover\";\n    readonly itemsChange: \"list:itemsChange\";\n    readonly keyDown: \"list:keyDown\";\n    readonly resetHighlight: \"list:resetHighlight\";\n    readonly highlightLast: \"list:highlightLast\";\n    readonly textNavigation: \"list:textNavigation\";\n    readonly clearSelection: \"list:clearSelection\";\n};\ninterface ItemClickAction<ItemValue> {\n    type: typeof ListActionTypes.itemClick;\n    item: ItemValue;\n    event: React.MouseEvent;\n}\ninterface ItemHoverAction<ItemValue> {\n    type: typeof ListActionTypes.itemHover;\n    item: ItemValue;\n    event: React.MouseEvent;\n}\ninterface FocusAction {\n    type: typeof ListActionTypes.focus;\n    event: React.FocusEvent;\n}\ninterface BlurAction {\n    type: typeof ListActionTypes.blur;\n    event: React.FocusEvent;\n}\ninterface KeyDownAction {\n    type: typeof ListActionTypes.keyDown;\n    key: string;\n    event: React.KeyboardEvent;\n}\ninterface TextNavigationAction {\n    type: typeof ListActionTypes.textNavigation;\n    event: React.KeyboardEvent;\n    searchString: string;\n}\ninterface ItemsChangeAction<ItemValue> {\n    type: typeof ListActionTypes.itemsChange;\n    event: null;\n    items: ItemValue[];\n    previousItems: ItemValue[];\n}\ninterface ResetHighlightAction {\n    type: typeof ListActionTypes.resetHighlight;\n    event: React.SyntheticEvent | null;\n}\ninterface HighlightLastAction {\n    type: typeof ListActionTypes.highlightLast;\n    event: React.SyntheticEvent | null;\n}\ninterface ClearSelectionAction {\n    type: typeof ListActionTypes.clearSelection;\n}\n/**\n * A union of all standard actions that can be dispatched to the list reducer.\n */\nexport type ListAction<ItemValue> = BlurAction | FocusAction | ItemClickAction<ItemValue> | ItemHoverAction<ItemValue> | ItemsChangeAction<ItemValue> | KeyDownAction | ResetHighlightAction | HighlightLastAction | TextNavigationAction | ClearSelectionAction;\nexport {};\n","node_modules/@mui/base/useList/index.d.ts":"export { useList } from './useList';\nexport * from './useList.types';\nexport { useListItem } from './useListItem';\nexport * from './useListItem.types';\nexport * from './listReducer';\nexport * from './listActions.types';\nexport * from './ListContext';\n","node_modules/@mui/base/useList/ListContext.d.ts":"import * as React from 'react';\nimport { ListAction } from './listActions.types';\nimport { ListItemState } from './useList.types';\nexport interface ListContextValue<ItemValue> {\n    dispatch: (action: ListAction<ItemValue>) => void;\n    getItemState: (item: ItemValue) => ListItemState;\n}\nexport declare const ListContext: React.Context<ListContextValue<any> | null>;\n","node_modules/@mui/base/useMenu/useMenu.types.d.ts":"import * as React from 'react';\nimport { ListAction, ListState, UseListRootSlotProps } from '../useList';\nimport { MenuItemMetadata } from '../useMenuItem';\nimport { MenuProviderValue } from './MenuProvider';\nexport interface UseMenuParameters {\n    /**\n     * If `true` (Default) will focus the highligted item. If you set this prop to `false`\n     * the focus will not be moved inside the Menu component. This has severe accessibility implications\n     * and should only be considered if you manage focus otherwise.\n     * @default true\n     */\n    autoFocus?: boolean;\n    /**\n     * The id of the menu. If not provided, it will be generated.\n     */\n    id?: string;\n    /**\n     * If `true`, it will be possible to highlight disabled items.\n     * @default true\n     */\n    disabledItemsFocusable?: boolean;\n    /**\n     * If `true`, the highlight will not wrap around the list if arrow keys are used.\n     * @default false\n     */\n    disableListWrap?: boolean;\n    /**\n     * Callback fired when the menu items change.\n     */\n    onItemsChange?: (items: string[]) => void;\n    /**\n     * The ref to the menu's listbox node.\n     */\n    listboxRef?: React.Ref<Element>;\n    /**\n     * The name of the component using useMenu.\n     * For debugging purposes.\n     * @default 'useMenu'\n     */\n    componentName?: string;\n}\nexport interface UseMenuReturnValue {\n    /**\n     * The value to be passed into the MenuProvider.\n     */\n    contextValue: MenuProviderValue;\n    /**\n     * Action dispatcher for the menu component.\n     * Allows to programmatically control the menu.\n     */\n    dispatch: (action: ListAction<string>) => void;\n    /**\n     * Resolver for the listbox slot's props.\n     * @param externalProps additional props for the listbox component\n     * @returns props that should be spread on the listbox component\n     */\n    getListboxProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseMenuListboxSlotProps;\n    /**\n     * The highlighted option in the menu listbox.\n     */\n    highlightedValue: string | null;\n    /**\n     * The ref to the menu's listbox node.\n     */\n    listboxRef: React.RefCallback<Element> | null;\n    /**\n     * Items in the menu listbox.\n     */\n    menuItems: Map<string, MenuItemMetadata>;\n    /**\n     * If `true`, the menu is open.\n     */\n    open: boolean;\n    /**\n     * An element that triggers the visibility of the menu.\n     */\n    triggerElement: HTMLElement | null;\n}\ninterface UseMenuListboxSlotEventHandlers {\n    onBlur: React.FocusEventHandler;\n    onKeyDown: React.KeyboardEventHandler;\n}\nexport type UseMenuListboxSlotProps<ExternalProps = {}> = UseListRootSlotProps<Omit<ExternalProps, keyof UseMenuListboxSlotEventHandlers> & UseMenuListboxSlotEventHandlers> & {\n    ref: React.RefCallback<Element> | null;\n    role: React.AriaRole;\n};\nexport interface MenuInternalState extends ListState<string> {\n}\nexport {};\n","node_modules/@mui/base/useMenu/useMenu.d.ts":"import { UseMenuParameters, UseMenuReturnValue } from './useMenu.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useMenu API](https://mui.com/base-ui/react-menu/hooks-api/#use-menu)\n */\nexport declare function useMenu(parameters?: UseMenuParameters): UseMenuReturnValue;\n","node_modules/@mui/base/useMenu/menuReducer.d.ts":"/// <reference types=\"react\" />\nimport { ListAction, ListActionContext } from '../useList';\nimport { ActionWithContext } from '../utils/useControllableReducer.types';\nimport { MenuInternalState } from './useMenu.types';\nexport type MenuActionContext = ListActionContext<string> & {\n    listboxRef: React.RefObject<HTMLElement>;\n};\nexport declare function menuReducer(state: MenuInternalState, action: ActionWithContext<ListAction<string>, MenuActionContext>): MenuInternalState | {\n    open: boolean;\n    highlightedValue: string | null;\n    selectedValues: string[];\n};\n","node_modules/@mui/base/useMenu/index.d.ts":"export { useMenu } from './useMenu';\nexport * from './useMenu.types';\nexport * from './MenuProvider';\n","node_modules/@mui/base/useMenu/MenuProvider.d.ts":"import * as React from 'react';\nimport { ListContextValue } from '../useList/ListContext';\nimport { MenuItemMetadata } from '../useMenuItem';\nimport { CompoundComponentContextValue } from '../useCompound';\nexport type MenuProviderValue = CompoundComponentContextValue<string, MenuItemMetadata> & ListContextValue<string>;\nexport interface MenuProviderProps {\n    value: MenuProviderValue;\n    children: React.ReactNode;\n}\n/**\n * Sets up the contexts for the underlying MenuItem components.\n *\n * @ignore - do not document.\n */\nexport declare function MenuProvider(props: MenuProviderProps): React.JSX.Element;\n","node_modules/@mui/base/useInput/useInput.types.d.ts":"import * as React from 'react';\nimport { FormControlState } from '../FormControl';\nexport interface UseInputParameters {\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: unknown;\n    /**\n     * If `true`, the component is disabled.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    error?: boolean;\n    onBlur?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onClick?: React.MouseEventHandler;\n    onChange?: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onFocus?: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    inputRef?: React.Ref<HTMLInputElement | HTMLTextAreaElement>;\n    /**\n     * If `true`, the `input` element is required.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    required?: boolean;\n    value?: unknown;\n}\nexport interface UseInputRootSlotOwnProps {\n    onClick: React.MouseEventHandler | undefined;\n}\nexport type UseInputRootSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseInputRootSlotOwnProps | 'onBlur' | 'onChange' | 'onFocus'> & UseInputRootSlotOwnProps;\nexport interface UseInputInputSlotOwnProps {\n    'aria-invalid': React.AriaAttributes['aria-invalid'];\n    defaultValue: string | number | readonly string[] | undefined;\n    ref: React.RefCallback<HTMLInputElement | HTMLTextAreaElement> | null;\n    value: string | number | readonly string[] | undefined;\n    onBlur: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onChange: React.ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    onFocus: React.FocusEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    required: boolean;\n    disabled: boolean;\n}\nexport type UseInputInputSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseInputInputSlotOwnProps> & UseInputInputSlotOwnProps;\nexport interface UseInputReturnValue {\n    /**\n     * If `true`, the component will be disabled.\n     */\n    disabled: boolean;\n    /**\n     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute.\n     */\n    error: boolean;\n    /**\n     * If `true`, the `input` will be focused.\n     */\n    focused: boolean;\n    /**\n     * Return value from the `useFormControlContext` hook.\n     */\n    formControlContext: FormControlState | undefined;\n    /**\n     * Resolver for the input slot's props.\n     * @param externalProps props for the input slot\n     * @returns props that should be spread on the input slot\n     */\n    getInputProps: <ExternalProps extends Record<string, any> = {}>(externalProps?: ExternalProps) => UseInputInputSlotProps<ExternalProps>;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, any> = {}>(externalProps?: ExternalProps) => UseInputRootSlotProps<ExternalProps>;\n    inputRef: React.RefCallback<HTMLInputElement | HTMLTextAreaElement> | null;\n    /**\n     * If `true`, the `input` will indicate that it's required.\n     */\n    required: boolean;\n    /**\n     * The `value` of the `input` element.\n     */\n    value: unknown;\n}\n","node_modules/@mui/base/useInput/useInput.d.ts":"import { UseInputParameters, UseInputReturnValue } from './useInput.types';\n/**\n *\n * Demos:\n *\n * - [Input](https://mui.com/base-ui/react-input/#hook)\n *\n * API:\n *\n * - [useInput API](https://mui.com/base-ui/react-input/hooks-api/#use-input)\n */\nexport declare function useInput(parameters?: UseInputParameters): UseInputReturnValue;\n","node_modules/@mui/base/useInput/index.d.ts":"export { useInput } from './useInput';\nexport * from './useInput.types';\n","node_modules/@mui/base/useDropdown/useDropdown.types.d.ts":"/// <reference types=\"react\" />\nimport type { DropdownContextValue } from './DropdownContext';\nexport interface UseDropdownParameters {\n    /**\n     * If `true`, the dropdown is initially open.\n     */\n    defaultOpen?: boolean;\n    /**\n     * Callback fired when the component requests to be opened or closed.\n     */\n    onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, open: boolean) => void;\n    /**\n     * Allows to control whether the dropdown is open.\n     * This is a controlled counterpart of `defaultOpen`.\n     */\n    open?: boolean;\n    /**\n     * The name of the component using useDropdown.\n     * For debugging purposes.\n     * @default 'useDropdown'\n     */\n    componentName?: string;\n}\nexport interface UseDropdownReturnValue {\n    /**\n     * The value to be passed into the DropdownContext provider.\n     */\n    contextValue: DropdownContextValue;\n    /**\n     * If `true`, the dropdown is open.\n     */\n    open: boolean;\n}\nexport declare const DropdownActionTypes: {\n    readonly blur: \"dropdown:blur\";\n    readonly escapeKeyDown: \"dropdown:escapeKeyDown\";\n    readonly toggle: \"dropdown:toggle\";\n    readonly open: \"dropdown:open\";\n    readonly close: \"dropdown:close\";\n};\ninterface DropdownBlurAction {\n    type: typeof DropdownActionTypes.blur;\n    event: React.FocusEvent;\n}\ninterface DropdownEscapeKeyDownAction {\n    type: typeof DropdownActionTypes.escapeKeyDown;\n    event: React.KeyboardEvent;\n}\ninterface DropdownToggleAction {\n    type: typeof DropdownActionTypes.toggle;\n    event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null;\n}\ninterface DropdownOpenAction {\n    type: typeof DropdownActionTypes.open;\n    event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null;\n}\ninterface DropdownCloseAction {\n    type: typeof DropdownActionTypes.close;\n    event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null;\n}\nexport type DropdownAction = DropdownBlurAction | DropdownEscapeKeyDownAction | DropdownToggleAction | DropdownOpenAction | DropdownCloseAction;\nexport type DropdownState = {\n    open: boolean;\n    changeReason: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null;\n};\nexport {};\n","node_modules/@mui/base/useDropdown/useDropdown.d.ts":"import type { DropdownContextValue } from './DropdownContext';\nimport { UseDropdownParameters } from './useDropdown.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/#hooks)\n *\n * API:\n *\n * - [useDropdown API](https://mui.com/base-ui/react-menu/hooks-api/#use-dropdown)\n */\nexport declare function useDropdown(parameters?: UseDropdownParameters): {\n    contextValue: DropdownContextValue;\n    open: boolean;\n};\n","node_modules/@mui/base/useDropdown/index.d.ts":"export * from './useDropdown';\nexport * from './useDropdown.types';\nexport * from './DropdownContext';\n","node_modules/@mui/base/useDropdown/dropdownReducer.d.ts":"import { DropdownAction, DropdownState } from './useDropdown.types';\nexport declare function dropdownReducer(state: DropdownState, action: DropdownAction): DropdownState;\n","node_modules/@mui/base/useDropdown/DropdownContext.d.ts":"import * as React from 'react';\nimport { DropdownAction, DropdownState } from './useDropdown.types';\nexport interface DropdownContextValue {\n    dispatch: React.Dispatch<DropdownAction>;\n    popupId: string;\n    registerPopup: (popupId: string) => void;\n    registerTrigger: (element: HTMLElement | null) => void;\n    state: DropdownState;\n    triggerElement: HTMLElement | null;\n}\ndeclare const DropdownContext: React.Context<DropdownContextValue | null>;\nexport { DropdownContext };\n","node_modules/@mui/base/useCompound/useCompoundParent.d.ts":"import * as React from 'react';\ninterface RegisterItemReturnValue<Key> {\n    /**\n     * The id of the item.\n     */\n    id: Key;\n    /**\n     * A function that deregisters the item.\n     */\n    deregister: () => void;\n}\nexport type KeyGenerator<Key> = (existingKeys: Set<Key>) => Key;\nexport type CompoundComponentContextValue<Key, Subitem> = {\n    /**\n     * Registers an item with the parent.\n     * This should be called during the effect phase of the child component.\n     * The `itemMetadata` should be a stable reference (for example a memoized object), to avoid unnecessary re-registrations.\n     *\n     * @param id Id of the item or A function that generates a unique id for the item.\n     *   It is called with the set of the ids of all the items that have already been registered.\n     *   Return `existingKeys.size` if you want to use the index of the new item as the id..\n     * @param itemMetadata Arbitrary metadata to pass to the parent component.\n     */\n    registerItem: (id: Key | KeyGenerator<Key>, item: Subitem) => RegisterItemReturnValue<Key>;\n    /**\n     * Returns the 0-based index of the item in the parent component's list of registered items.\n     *\n     * @param id id of the item.\n     */\n    getItemIndex: (id: Key) => number;\n    /**\n     * The total number of items registered with the parent.\n     */\n    totalSubitemCount: number;\n};\nexport declare const CompoundComponentContext: React.Context<CompoundComponentContextValue<any, any> | null>;\nexport interface UseCompoundParentReturnValue<Key, Subitem extends {\n    ref: React.RefObject<Node>;\n}> {\n    /**\n     * The value for the CompoundComponentContext provider.\n     */\n    contextValue: CompoundComponentContextValue<Key, Subitem>;\n    /**\n     * The subitems registered with the parent.\n     * The key is the id of the subitem, and the value is the metadata passed to the `useCompoundItem` hook.\n     * The order of the items is the same as the order in which they were registered.\n     */\n    subitems: Map<Key, Subitem>;\n}\n/**\n * Provides a way for a component to know about its children.\n *\n * Child components register themselves with the `useCompoundItem` hook, passing in arbitrary metadata to the parent.\n *\n * This is a more powerful altervantive to `children` traversal, as child components don't have to be placed\n * directly inside the parent component. They can be anywhere in the tree (and even rendered by other components).\n *\n * The downside is that this doesn't work with SSR as it relies on the useEffect hook.\n *\n * @ignore - internal hook.\n */\nexport declare function useCompoundParent<Key, Subitem extends {\n    ref: React.RefObject<Node>;\n}>(): UseCompoundParentReturnValue<Key, Subitem>;\nexport {};\n","node_modules/@mui/base/useCompound/useCompoundItem.d.ts":"import { KeyGenerator } from './useCompoundParent';\nexport interface UseCompoundItemReturnValue<Key> {\n    /**\n     * The unique key for the child component.\n     * If the id was provided to `useCompoundItem`, this will be the same value.\n     * Otherwise, this will be a value generated by the `id` function.\n     */\n    id: Key | undefined;\n    /**\n     * The 0-based index of the child component in the parent component's list of registered children.\n     */\n    index: number;\n    /**\n     * The total number of child components registered with the parent component.\n     * This value will be correct after the effect phase of the component (as children are registered with the parent during the effect phase).\n     */\n    totalItemCount: number;\n}\n/**\n * Registers a child component with the parent component.\n *\n * @param id A unique key for the child component. If the `id` is `undefined`, the registration logic will not run (this can sometimes be the case during SSR).\n *   This can be either a value, or a function that generates a value based on already registered siblings' ids.\n *   If a function, it's called with the set of the ids of all the items that have already been registered.\n *   Return `existingKeys.size` if you want to use the index of the new item as the id.\n * @param itemMetadata Arbitrary metadata to pass to the parent component. This should be a stable reference (for example a memoized object), to avoid unnecessary re-registrations.\n *\n * @ignore - internal hook.\n */\nexport declare function useCompoundItem<Key, Subitem>(id: Key | KeyGenerator<Key>, itemMetadata: Subitem): UseCompoundItemReturnValue<Key>;\n","node_modules/@mui/base/useCompound/index.d.ts":"export * from './useCompoundParent';\nexport * from './useCompoundItem';\n","node_modules/@mui/base/useButton/useButton.types.d.ts":"import * as React from 'react';\nimport { MuiCancellableEventHandler } from '../utils/MuiCancellableEvent';\nexport interface UseButtonParameters {\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, allows a disabled button to receive focus.\n     * @default false\n     */\n    focusableWhenDisabled?: boolean;\n    href?: string;\n    onFocusVisible?: React.FocusEventHandler;\n    rootRef?: React.Ref<Element>;\n    tabIndex?: NonNullable<React.HTMLAttributes<any>['tabIndex']>;\n    to?: string;\n    /**\n     * Type attribute applied when the `component` is `button`.\n     * @default 'button'\n     */\n    type?: React.ButtonHTMLAttributes<HTMLButtonElement>['type'];\n    /**\n     * The HTML element, e.g.'button', 'a' etc\n     * @default ''\n     */\n    rootElementName?: keyof HTMLElementTagNameMap;\n}\nexport interface UseButtonRootSlotOwnProps {\n    'aria-disabled'?: React.AriaAttributes['aria-disabled'];\n    disabled?: boolean;\n    tabIndex?: number;\n    type?: React.ButtonHTMLAttributes<HTMLButtonElement>['type'];\n    role?: React.AriaRole;\n    onBlur: React.FocusEventHandler;\n    onFocus: React.FocusEventHandler;\n    onKeyDown: MuiCancellableEventHandler<React.KeyboardEvent>;\n    onKeyUp: MuiCancellableEventHandler<React.KeyboardEvent>;\n    onMouseDown: React.MouseEventHandler;\n    onMouseLeave: React.MouseEventHandler;\n    ref: React.RefCallback<Element> | null;\n}\nexport type UseButtonRootSlotProps<ExternalProps = {}> = ExternalProps & UseButtonRootSlotOwnProps;\nexport interface UseButtonReturnValue {\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps additional props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, any> = {}>(externalProps?: ExternalProps) => UseButtonRootSlotProps<ExternalProps>;\n    /**\n     * If `true`, the component is being focused using keyboard.\n     */\n    focusVisible: boolean;\n    /**\n     * Callback for setting the `focusVisible` param.\n     */\n    setFocusVisible: React.Dispatch<React.SetStateAction<boolean>>;\n    /**\n     * If `true`, the component is active (pressed).\n     */\n    active: boolean;\n    /**\n     * A ref to the component's root DOM element.\n     */\n    rootRef: React.RefCallback<Element> | null;\n}\n","node_modules/@mui/base/useButton/useButton.d.ts":"import { UseButtonParameters, UseButtonReturnValue } from './useButton.types';\n/**\n *\n * Demos:\n *\n * - [Button](https://mui.com/base-ui/react-button/#hook)\n *\n * API:\n *\n * - [useButton API](https://mui.com/base-ui/react-button/hooks-api/#use-button)\n */\nexport declare function useButton(parameters?: UseButtonParameters): UseButtonReturnValue;\n","node_modules/@mui/base/useButton/index.d.ts":"export { useButton } from './useButton';\nexport * from './useButton.types';\n","node_modules/@mui/base/useBadge/useBadge.types.d.ts":"/// <reference types=\"react\" />\nexport interface UseBadgeParameters {\n    /**\n     * The content rendered within the badge.\n     */\n    badgeContent?: React.ReactNode;\n    /**\n     * If `true`, the badge is invisible.\n     * @default false\n     */\n    invisible?: boolean;\n    /**\n     * Max count to show.\n     * @default 99\n     */\n    max?: number;\n    /**\n     * Controls whether the badge is hidden when `badgeContent` is zero.\n     * @default false\n     */\n    showZero?: boolean;\n}\nexport interface UseBadgeReturnValue {\n    /**\n     * Defines the content that's displayed inside the badge.\n     */\n    badgeContent: React.ReactNode;\n    /**\n     * If `true`, the component will not be visible.\n     */\n    invisible: boolean;\n    /**\n     * Maximum number to be displayed in the badge.\n     */\n    max: number;\n    /**\n     * Value to be displayed in the badge. If `badgeContent` is greater than `max`, it will return `max+`.\n     */\n    displayValue: React.ReactNode;\n}\n","node_modules/@mui/base/useBadge/useBadge.d.ts":"import { UseBadgeParameters, UseBadgeReturnValue } from './useBadge.types';\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base-ui/react-badge/#hook)\n *\n * API:\n *\n * - [useBadge API](https://mui.com/base-ui/react-badge/hooks-api/#use-badge)\n */\nexport declare function useBadge(parameters: UseBadgeParameters): UseBadgeReturnValue;\n","node_modules/@mui/base/useBadge/index.d.ts":"export { useBadge } from './useBadge';\nexport * from './useBadge.types';\n","node_modules/@mui/base/useAutocomplete/useAutocomplete.d.ts":"import * as React from 'react';\n\nexport interface CreateFilterOptionsConfig<Value> {\n  ignoreAccents?: boolean;\n  ignoreCase?: boolean;\n  limit?: number;\n  matchFrom?: 'any' | 'start';\n  stringify?: (option: Value) => string;\n  trim?: boolean;\n}\n\nexport interface FilterOptionsState<Value> {\n  inputValue: string;\n  getOptionLabel: (option: Value) => string;\n}\n\nexport interface AutocompleteGroupedOption<Value = string> {\n  key: number;\n  index: number;\n  group: string;\n  options: Value[];\n}\n\nexport function createFilterOptions<Value>(\n  config?: CreateFilterOptionsConfig<Value>,\n): (options: Value[], state: FilterOptionsState<Value>) => Value[];\n\nexport type AutocompleteFreeSoloValueMapping<FreeSolo> = FreeSolo extends true ? string : never;\n\nexport type AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo> = Multiple extends true\n  ? Array<Value | AutocompleteFreeSoloValueMapping<FreeSolo>>\n  : DisableClearable extends true\n    ? NonNullable<Value | AutocompleteFreeSoloValueMapping<FreeSolo>>\n    : Value | null | AutocompleteFreeSoloValueMapping<FreeSolo>;\n\nexport interface UseAutocompleteProps<\n  Value,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n> {\n  /**\n   * @internal The prefix of the state class name, temporary for Joy UI\n   * @default 'Mui'\n   */\n  unstable_classNamePrefix?: string;\n  /**\n   * @internal\n   * Temporary for Joy UI because the parent listbox is the document object\n   * TODO v6: Normalize the logic and remove this param.\n   */\n  unstable_isActiveElementInListbox?: (listbox: React.RefObject<HTMLElement>) => boolean;\n  /**\n   * If `true`, the portion of the selected suggestion that the user hasn't typed,\n   * known as the completion string, appears inline after the input cursor in the textbox.\n   * The inline completion string is visually highlighted and has a selected state.\n   * @default false\n   */\n  autoComplete?: boolean;\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default false\n   */\n  autoHighlight?: boolean;\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the Autocomplete loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   *\n   * When using the `freeSolo` mode, the typed value will be the input value\n   * if the Autocomplete loses focus without highlighting an option.\n   * @default false\n   */\n  autoSelect?: boolean;\n  /**\n   * Control if the input should be blurred when an option is selected:\n   *\n   * - `false` the input is not blurred.\n   * - `true` the input is always blurred.\n   * - `touch` the input is blurred after a touch event.\n   * - `mouse` the input is blurred after a mouse event.\n   * @default false\n   */\n  blurOnSelect?: 'touch' | 'mouse' | true | false;\n  /**\n   * If `true`, the input's text is cleared on blur if no value is selected.\n   *\n   * Set it to `true` if you want to help the user enter a new value.\n   * Set it to `false` if you want to help the user resume their search.\n   * @default !props.freeSolo\n   */\n  clearOnBlur?: boolean;\n  /**\n   * If `true`, clear all values when the user presses escape and the popup is closed.\n   * @default false\n   */\n  clearOnEscape?: boolean;\n  /**\n   * The component name that is using this hook. Used for warnings.\n   */\n  componentName?: string;\n  /**\n   * The default value. Use when the component is not controlled.\n   * @default props.multiple ? [] : null\n   */\n  defaultValue?: AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo>;\n  /**\n   * If `true`, the input can't be cleared.\n   * @default false\n   */\n  disableClearable?: DisableClearable;\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   * @default false\n   */\n  disableCloseOnSelect?: boolean;\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * If `true`, will allow focus on disabled items.\n   * @default false\n   */\n  disabledItemsFocusable?: boolean;\n  /**\n   * If `true`, the list box in the popup will not wrap focus.\n   * @default false\n   */\n  disableListWrap?: boolean;\n  /**\n   * A function that determines the filtered options to be rendered on search.\n   *\n   * @default createFilterOptions()\n   * @param {Value[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {Value[]}\n   */\n  filterOptions?: (options: Value[], state: FilterOptionsState<Value>) => Value[];\n  /**\n   * If `true`, hide the selected options from the list box.\n   * @default false\n   */\n  filterSelectedOptions?: boolean;\n  /**\n   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.\n   * @default false\n   */\n  freeSolo?: FreeSolo;\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {Value} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled?: (option: Value) => boolean;\n  /**\n   * Used to determine the key for a given option.\n   * This can be useful when the labels of options are not unique (since labels are used as keys by default).\n   *\n   * @param {Value} option The option to get the key for.\n   * @returns {string | number}\n   */\n  getOptionKey?: (option: Value | AutocompleteFreeSoloValueMapping<FreeSolo>) => string | number;\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * If used in free solo mode, it must accept both the type of the options and a string.\n   *\n   * @param {Value} option\n   * @returns {string}\n   * @default (option) => option.label ?? option\n   */\n  getOptionLabel?: (option: Value | AutocompleteFreeSoloValueMapping<FreeSolo>) => string;\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {Value} options The options to group.\n   * @returns {string}\n   */\n  groupBy?: (option: Value) => string;\n\n  /**\n   * If `true`, the component handles the \"Home\" and \"End\" keys when the popup is open.\n   * It should move focus to the first option and last option, respectively.\n   * @default !props.freeSolo\n   */\n  handleHomeEndKeys?: boolean;\n  /**\n   * This prop is used to help implement the accessibility logic.\n   * If you don't provide an id it will fall back to a randomly generated one.\n   */\n  id?: string;\n  /**\n   * If `true`, the highlight can move to the input.\n   * @default false\n   */\n  includeInputInList?: boolean;\n  /**\n   * The input value.\n   */\n  inputValue?: string;\n  /**\n   * Used to determine if the option represents the given value.\n   * Uses strict equality by default.\n   * ⚠️ Both arguments need to be handled, an option can only match with one value.\n   *\n   * @param {Value} option The option to test.\n   * @param {Value} value The value to test against.\n   * @returns {boolean}\n   */\n  isOptionEqualToValue?: (option: Value, value: Value) => boolean;\n  /**\n   * If `true`, `value` must be an array and the menu will support multiple selections.\n   * @default false\n   */\n  multiple?: Multiple;\n  /**\n   * Callback fired when the value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value|Value[]} value The new value of the component.\n   * @param {string} reason One of \"createOption\", \"selectOption\", \"removeOption\", \"blur\" or \"clear\".\n   * @param {string} [details]\n   */\n  onChange?: (\n    event: React.SyntheticEvent,\n    value: AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo>,\n    reason: AutocompleteChangeReason,\n    details?: AutocompleteChangeDetails<Value>,\n  ) => void;\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"selectOption\"`, `\"removeOption\"`, `\"blur\"`.\n   */\n  onClose?: (event: React.SyntheticEvent, reason: AutocompleteCloseReason) => void;\n  /**\n   * Callback fired when the highlight option changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {Value} option The highlighted option.\n   * @param {string} reason Can be: `\"keyboard\"`, `\"auto\"`, `\"mouse\"`, `\"touch\"`.\n   */\n  onHighlightChange?: (\n    event: React.SyntheticEvent,\n    option: Value | null,\n    reason: AutocompleteHighlightChangeReason,\n  ) => void;\n  /**\n   * Callback fired when the input value changes.\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   * @param {string} value The new value of the text input.\n   * @param {string} reason Can be: `\"input\"` (user input), `\"reset\"` (programmatic change), `\"clear\"`.\n   */\n  onInputChange?: (\n    event: React.SyntheticEvent,\n    value: string,\n    reason: AutocompleteInputChangeReason,\n  ) => void;\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {React.SyntheticEvent} event The event source of the callback.\n   */\n  onOpen?: (event: React.SyntheticEvent) => void;\n  /**\n   * If `true`, the component is shown.\n   */\n  open?: boolean;\n  /**\n   * If `true`, the popup will open on input focus.\n   * @default false\n   */\n  openOnFocus?: boolean;\n  /**\n   * Array of options.\n   */\n  options: ReadonlyArray<Value>;\n  /**\n   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.\n   * @default false\n   */\n  readOnly?: boolean;\n  /**\n   * If `true`, the input's text is selected on focus.\n   * It helps the user clear the selected value.\n   * @default !props.freeSolo\n   */\n  selectOnFocus?: boolean;\n  /**\n   * The value of the autocomplete.\n   *\n   * The value must have reference equality with the option in order to be selected.\n   * You can customize the equality behavior with the `isOptionEqualToValue` prop.\n   */\n  value?: AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo>;\n}\n\nexport interface UseAutocompleteParameters<\n  Value,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined,\n> extends UseAutocompleteProps<Value, Multiple, DisableClearable, FreeSolo> {}\n\nexport type AutocompleteHighlightChangeReason = 'keyboard' | 'mouse' | 'auto' | 'touch';\n\nexport type AutocompleteChangeReason =\n  | 'createOption'\n  | 'selectOption'\n  | 'removeOption'\n  | 'clear'\n  | 'blur';\nexport interface AutocompleteChangeDetails<Value = string> {\n  option: Value;\n}\nexport type AutocompleteCloseReason =\n  | 'createOption'\n  | 'toggleInput'\n  | 'escape'\n  | 'selectOption'\n  | 'removeOption'\n  | 'blur';\nexport type AutocompleteInputChangeReason = 'input' | 'reset' | 'clear';\n\nexport type AutocompleteGetTagProps = ({ index }: { index: number }) => {\n  key: number;\n  'data-tag-index': number;\n  tabIndex: -1;\n  onDelete: (event: any) => void;\n};\n/**\n *\n * Demos:\n *\n * - [Autocomplete](https://mui.com/base-ui/react-autocomplete/#hook)\n *\n * API:\n *\n * - [useAutocomplete API](https://mui.com/base-ui/react-autocomplete/hooks-api/#use-autocomplete)\n */\nexport function useAutocomplete<\n  Value,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n>(\n  props: UseAutocompleteProps<Value, Multiple, DisableClearable, FreeSolo>,\n): UseAutocompleteReturnValue<Value, Multiple, DisableClearable, FreeSolo>;\n\nexport interface UseAutocompleteRenderedOption<Value> {\n  option: Value;\n  index: number;\n}\n\nexport interface UseAutocompleteReturnValue<\n  Value,\n  Multiple extends boolean | undefined = false,\n  DisableClearable extends boolean | undefined = false,\n  FreeSolo extends boolean | undefined = false,\n> {\n  /**\n   * Resolver for the root slot's props.\n   * @param externalProps props for the root slot\n   * @returns props that should be spread on the root slot\n   */\n  getRootProps: (externalProps?: any) => React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * Resolver for the input element's props.\n   * @returns props that should be spread on the input element\n   */\n  getInputProps: () => React.InputHTMLAttributes<HTMLInputElement> & {\n    ref: React.Ref<HTMLInputElement>;\n  };\n  /**\n   * Resolver for the input label element's props.\n   * @returns props that should be spread on the input label element\n   */\n  getInputLabelProps: () => Omit<React.HTMLAttributes<HTMLLabelElement>, 'color'>;\n  /**\n   * Resolver for the `clear` button element's props.\n   * @returns props that should be spread on the *clear* button element\n   */\n  getClearProps: () => React.HTMLAttributes<HTMLButtonElement>;\n  /**\n   * Resolver for the popup icon's props.\n   * @returns props that should be spread on the popup icon\n   */\n  getPopupIndicatorProps: () => React.HTMLAttributes<HTMLButtonElement>;\n  /**\n   * A tag props getter.\n   */\n  getTagProps: AutocompleteGetTagProps;\n  /**\n   * Resolver for the listbox component's props.\n   * @returns props that should be spread on the listbox component\n   */\n  getListboxProps: () => React.HTMLAttributes<HTMLUListElement>;\n  /**\n   * Resolver for the rendered option element's props.\n   * @param renderedOption option rendered on the Autocomplete\n   * @returns props that should be spread on the li element\n   */\n  getOptionProps: (\n    renderedOption: UseAutocompleteRenderedOption<Value>,\n  ) => React.HTMLAttributes<HTMLLIElement>;\n  /**\n   * Id for the Autocomplete.\n   */\n  id: string;\n  /**\n   * The input value.\n   */\n  inputValue: string;\n  /**\n   * The value of the autocomplete.\n   */\n  value: AutocompleteValue<Value, Multiple, DisableClearable, FreeSolo>;\n  /**\n   * If `true`, the component input has some values.\n   */\n  dirty: boolean;\n  /**\n   * If `true`, the listbox is being displayed.\n   */\n  expanded: boolean;\n  /**\n   * If `true`, the popup is open on the component.\n   */\n  popupOpen: boolean;\n  /**\n   * If `true`, the component is focused.\n   */\n  focused: boolean;\n  /**\n   * An HTML element that is used to set the position of the component.\n   */\n  anchorEl: null | HTMLElement;\n  /**\n   * Setter for the component `anchorEl`.\n   * @returns function for setting `anchorEl`\n   */\n  setAnchorEl: () => void;\n  /**\n   * Index of the focused tag for the component.\n   */\n  focusedTag: number;\n  /**\n   * The options to render. It's either `Value[]` or `AutocompleteGroupedOption<Value>[]` if the groupBy prop is provided.\n   */\n  groupedOptions: Value[] | Array<AutocompleteGroupedOption<Value>>;\n}\n","node_modules/@mui/base/useAutocomplete/index.d.ts":"export { useAutocomplete } from './useAutocomplete';\nexport * from './useAutocomplete';\n","node_modules/@mui/base/unstable_useModal/useModal.types.d.ts":"/// <reference types=\"react\" />\nimport { PortalProps } from '../Portal';\nimport { EventHandlers } from '../utils';\nexport interface UseModalRootSlotOwnProps {\n    role: React.AriaRole;\n    onKeyDown: React.KeyboardEventHandler;\n    ref: React.RefCallback<Element> | null;\n}\nexport interface UseModalBackdropSlotOwnProps {\n    'aria-hidden': React.AriaAttributes['aria-hidden'];\n    onClick: React.MouseEventHandler;\n    open?: boolean;\n}\nexport type UseModalBackdropSlotProps<TOther = {}> = TOther & UseModalBackdropSlotOwnProps;\nexport type UseModalRootSlotProps<TOther = {}> = TOther & UseModalRootSlotOwnProps;\nexport type UseModalParameters = {\n    'aria-hidden'?: React.AriaAttributes['aria-hidden'];\n    /**\n     * A single child content element.\n     */\n    children: React.ReactElement | undefined | null;\n    /**\n     * When set to true the Modal waits until a nested Transition is completed before closing.\n     * @default false\n     */\n    closeAfterTransition?: boolean;\n    /**\n     * An HTML element or function that returns one.\n     * The `container` will have the portal children appended to it.\n     *\n     * You can also provide a callback, which is called in a React layout effect.\n     * This lets you set the container from a ref, and also makes server-side rendering possible.\n     *\n     * By default, it uses the body of the top-level document object,\n     * so it's simply `document.body` most of the time.\n     */\n    container?: PortalProps['container'];\n    /**\n     * If `true`, hitting escape will not fire the `onClose` callback.\n     * @default false\n     */\n    disableEscapeKeyDown?: boolean;\n    /**\n     * Disable the scroll lock behavior.\n     * @default false\n     */\n    disableScrollLock?: boolean;\n    /**\n     * Callback fired when the component requests to be closed.\n     * The `reason` parameter can optionally be used to control the response to `onClose`.\n     *\n     * @param {object} event The event source of the callback.\n     * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n     */\n    onClose?: {\n        bivarianceHack(event: {}, reason: 'backdropClick' | 'escapeKeyDown'): void;\n    }['bivarianceHack'];\n    onKeyDown?: React.KeyboardEventHandler;\n    /**\n     * A function called when a transition enters.\n     */\n    onTransitionEnter?: () => void;\n    /**\n     * A function called when a transition has exited.\n     */\n    onTransitionExited?: () => void;\n    /**\n     * If `true`, the component is shown.\n     */\n    open: boolean;\n    rootRef: React.Ref<Element>;\n};\nexport interface UseModalReturnValue {\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <TOther extends EventHandlers = {}>(externalProps?: TOther) => UseModalRootSlotProps<TOther>;\n    /**\n     * Resolver for the backdrop slot's props.\n     * @param externalProps props for the backdrop slot\n     * @returns props that should be spread on the backdrop slot\n     */\n    getBackdropProps: <TOther extends EventHandlers = {}>(externalProps?: TOther) => UseModalBackdropSlotProps<TOther>;\n    /**\n     * Resolver for the transition related props.\n     * @param externalProps props for the transition element\n     * @returns props that should be spread on the transition element\n     */\n    getTransitionProps: <TOther extends EventHandlers = {}>(externalProps?: TOther) => {\n        onEnter: () => void;\n        onExited: () => void;\n    };\n    /**\n     * A ref to the component's root DOM element.\n     */\n    rootRef: React.RefCallback<Element> | null;\n    /**\n     * A ref to the component's portal DOM element.\n     */\n    portalRef: React.RefCallback<Element> | null;\n    /**\n     * If `true`, the modal is the top most one.\n     */\n    isTopModal: () => boolean;\n    /**\n     * If `true`, the exiting transition finished (to be used for unmounting the component).\n     */\n    exited: boolean;\n    /**\n     * If `true`, the component's child is transition component.\n     */\n    hasTransition: boolean;\n}\n","node_modules/@mui/base/unstable_useModal/useModal.d.ts":"import { UseModalParameters, UseModalReturnValue } from './useModal.types';\n/**\n *\n * Demos:\n *\n * - [Modal](https://mui.com/base-ui/react-modal/#hook)\n *\n * API:\n *\n * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)\n */\nexport declare function useModal(parameters: UseModalParameters): UseModalReturnValue;\n","node_modules/@mui/base/unstable_useModal/index.d.ts":"export { useModal as unstable_useModal } from './useModal';\nexport * from './useModal.types';\nexport * from './ModalManager';\n","node_modules/@mui/base/unstable_useModal/ModalManager.d.ts":"export interface ManagedModalProps {\n    disableScrollLock?: boolean;\n}\nexport declare function ariaHidden(element: Element, show: boolean): void;\ninterface Modal {\n    mount: Element;\n    modalRef: Element;\n}\n/**\n * @ignore - do not document.\n *\n * Proper state management for containers and the modals in those containers.\n * Simplified, but inspired by react-overlay's ModalManager class.\n * Used by the Modal to ensure proper styling of containers.\n */\nexport declare class ModalManager {\n    private containers;\n    private modals;\n    constructor();\n    add(modal: Modal, container: HTMLElement): number;\n    mount(modal: Modal, props: ManagedModalProps): void;\n    remove(modal: Modal, ariaHiddenState?: boolean): number;\n    isTopModal(modal: Modal): boolean;\n}\nexport {};\n","node_modules/@mui/base/unstable_useNumberInput/utils.d.ts":"export declare function clampStepwise(val: number, min?: number, max?: number, stepProp?: number): number;\nexport declare function isNumber(val: unknown): val is number;\n","node_modules/@mui/base/unstable_useNumberInput/useNumberInput.types.d.ts":"import * as React from 'react';\nimport { FormControlState } from '../FormControl';\nimport { NumberInputAction } from './numberInputAction.types';\nimport { ActionWithContext } from '../utils/useControllableReducer.types';\nexport type StepDirection = 'up' | 'down';\n/**\n * The internal state of the NumberInput.\n * Modify via the reducer only.\n */\nexport interface NumberInputState {\n    /**\n     * The clamped `value` of the `input` element.\n     */\n    value: number | null;\n    /**\n     * The dirty `value` of the `input` element when it is in focus.\n     */\n    inputValue: string;\n}\n/**\n * Additional props passed to the number input reducer actions.\n */\nexport type NumberInputActionContext = {\n    min?: number;\n    max?: number;\n    step?: number;\n    shiftMultiplier: number;\n    /**\n     * A function that parses the raw input value\n     */\n    getInputValueAsString: (val: string) => string;\n};\nexport type NumberInputReducerAction = ActionWithContext<NumberInputAction, NumberInputActionContext>;\nexport interface UseNumberInputParameters {\n    /**\n     * The minimum value.\n     */\n    min?: number;\n    /**\n     * The maximum value.\n     */\n    max?: number;\n    /**\n     * The amount that the value changes on each increment or decrement.\n     */\n    step?: number;\n    /**\n     * Multiplier applied to `step` if the shift key is held while incrementing\n     * or decrementing the value. Defaults to `10`.\n     */\n    shiftMultiplier?: number;\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: number | null;\n    /**\n     * If `true`, the component is disabled.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    error?: boolean;\n    onBlur?: (event?: React.FocusEvent<HTMLInputElement>) => void;\n    onClick?: React.MouseEventHandler;\n    /**\n     * Callback fired when the `input` value changes after each keypress, before clamping is applied.\n     * Note that `event.target.value` may contain values that fall outside of `min` and `max` or\n     * are otherwise \"invalid\".\n     *\n     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n     */\n    onInputChange?: React.ChangeEventHandler<HTMLInputElement>;\n    onFocus?: React.FocusEventHandler;\n    /**\n     * Callback fired after the value is clamped and changes - when the `input` is blurred or when\n     * the stepper buttons are triggered.\n     * Called with `undefined` when the value is unset.\n     *\n     * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback\n     * @param {number|undefined} value The new value of the component\n     */\n    onChange?: (event: React.FocusEvent<HTMLInputElement> | React.PointerEvent | React.KeyboardEvent, value: number | null) => void;\n    /**\n     * The `id` attribute of the input element.\n     */\n    inputId?: string;\n    /**\n     * The ref of the input element.\n     */\n    inputRef?: React.Ref<HTMLInputElement>;\n    /**\n     * If `true`, the `input` element is required.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    required?: boolean;\n    /**\n     * If `true`, the `input` element becomes read-only. The stepper buttons remain active,\n     * with the addition that they are now keyboard focusable.\n     * @default false\n     */\n    readOnly?: boolean;\n    /**\n     * The current value. Use when the component is controlled.\n     * @default null\n     */\n    value?: number | null;\n    /**\n     * The name of the component using useNumberInput.\n     * For debugging purposes.\n     * @default 'useNumberInput'\n     */\n    componentName?: string;\n}\nexport interface UseNumberInputRootSlotOwnProps {\n    onClick: React.MouseEventHandler | undefined;\n}\nexport type UseNumberInputRootSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseNumberInputRootSlotOwnProps | 'onBlur' | 'onInputChange' | 'onFocus'> & UseNumberInputRootSlotOwnProps;\nexport interface UseNumberInputInputSlotOwnProps {\n    defaultValue: number | undefined;\n    id: string | undefined;\n    ref: React.RefCallback<HTMLInputElement> | null;\n    value: number | undefined;\n    role?: React.AriaRole;\n    'aria-disabled': React.AriaAttributes['aria-disabled'];\n    'aria-valuemax': React.AriaAttributes['aria-valuemax'];\n    'aria-valuemin': React.AriaAttributes['aria-valuemin'];\n    'aria-valuenow': React.AriaAttributes['aria-valuenow'];\n    'aria-valuetext': React.AriaAttributes['aria-valuetext'];\n    tabIndex?: number;\n    onBlur: React.FocusEventHandler;\n    onChange: React.ChangeEventHandler<HTMLInputElement>;\n    onFocus: React.FocusEventHandler;\n    required: boolean;\n    disabled: boolean;\n}\nexport type UseNumberInputInputSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseNumberInputInputSlotOwnProps> & UseNumberInputInputSlotOwnProps;\nexport interface UseNumberInputIncrementButtonSlotOwnProps {\n    'aria-controls': React.AriaAttributes['aria-controls'];\n    'aria-disabled': React.AriaAttributes['aria-disabled'];\n    disabled: boolean;\n    tabIndex?: number;\n}\nexport type UseNumberInputIncrementButtonSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseNumberInputIncrementButtonSlotOwnProps> & UseNumberInputIncrementButtonSlotOwnProps;\nexport interface UseNumberInputDecrementButtonSlotOwnProps {\n    'aria-controls': React.AriaAttributes['aria-controls'];\n    'aria-disabled': React.AriaAttributes['aria-disabled'];\n    disabled: boolean;\n    tabIndex?: number;\n}\nexport type UseNumberInputDecrementButtonSlotProps<ExternalProps = {}> = Omit<ExternalProps, keyof UseNumberInputDecrementButtonSlotOwnProps> & UseNumberInputDecrementButtonSlotOwnProps;\nexport interface UseNumberInputReturnValue {\n    /**\n     * If `true`, the component will be disabled.\n     * @default false\n     */\n    disabled: boolean;\n    /**\n     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute.\n     * @default false\n     */\n    error: boolean;\n    /**\n     * If `true`, the `input` will be focused.\n     * @default false\n     */\n    focused: boolean;\n    /**\n     * Return value from the `useFormControlContext` hook.\n     */\n    formControlContext: FormControlState | undefined;\n    /**\n     * Resolver for the decrement button slot's props.\n     * @param externalProps props for the decrement button slot\n     * @returns props that should be spread on the decrement button slot\n     */\n    getDecrementButtonProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseNumberInputDecrementButtonSlotProps<ExternalProps>;\n    /**\n     * Resolver for the increment button slot's props.\n     * @param externalProps props for the increment button slot\n     * @returns props that should be spread on the increment button slot\n     */\n    getIncrementButtonProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseNumberInputIncrementButtonSlotProps<ExternalProps>;\n    /**\n     * Resolver for the input slot's props.\n     * @param externalProps props for the input slot\n     * @returns props that should be spread on the input slot\n     */\n    getInputProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseNumberInputInputSlotProps<ExternalProps>;\n    /**\n     * Resolver for the root slot's props.\n     * @param externalProps props for the root slot\n     * @returns props that should be spread on the root slot\n     */\n    getRootProps: <ExternalProps extends Record<string, unknown> = {}>(externalProps?: ExternalProps) => UseNumberInputRootSlotProps<ExternalProps>;\n    /**\n     * If `true`, the `input` will indicate that it's required.\n     * @default false\n     */\n    required: boolean;\n    /**\n     * The clamped `value` of the `input` element.\n     */\n    value: number | null;\n    /**\n     * The dirty `value` of the `input` element when it is in focus.\n     */\n    inputValue: string;\n    /**\n     * If `true`, the increment button will be disabled.\n     * e.g. when the `value` is already at `max`\n     * @default false\n     */\n    isIncrementDisabled: boolean;\n    /**\n     * If `true`, the decrement button will be disabled.\n     * e.g. when the `value` is already at `min`\n     * @default false\n     */\n    isDecrementDisabled: boolean;\n}\n","node_modules/@mui/base/unstable_useNumberInput/useNumberInput.d.ts":"import { UseNumberInputParameters, UseNumberInputReturnValue } from './useNumberInput.types';\nexport declare function getInputValueAsString(v: string): string;\n/**\n *\n * Demos:\n *\n * - [Number Input](https://mui.com/base-ui/react-number-input/#hook)\n *\n * API:\n *\n * - [useNumberInput API](https://mui.com/base-ui/react-number-input/hooks-api/#use-number-input)\n */\nexport declare function useNumberInput(parameters: UseNumberInputParameters): UseNumberInputReturnValue;\n","node_modules/@mui/base/unstable_useNumberInput/numberInputReducer.d.ts":"import { NumberInputReducerAction, NumberInputState } from './useNumberInput.types';\nexport declare function numberInputReducer(state: NumberInputState, action: NumberInputReducerAction): NumberInputState;\n","node_modules/@mui/base/unstable_useNumberInput/numberInputAction.types.d.ts":"/// <reference types=\"react\" />\nexport declare const NumberInputActionTypes: {\n    readonly clamp: \"numberInput:clamp\";\n    readonly inputChange: \"numberInput:inputChange\";\n    readonly increment: \"numberInput:increment\";\n    readonly decrement: \"numberInput:decrement\";\n    readonly decrementToMin: \"numberInput:decrementToMin\";\n    readonly incrementToMax: \"numberInput:incrementToMax\";\n    readonly resetInputValue: \"numberInput:resetInputValue\";\n};\ninterface NumberInputClampAction {\n    type: typeof NumberInputActionTypes.clamp;\n    event: React.FocusEvent<HTMLInputElement>;\n    inputValue: string;\n}\ninterface NumberInputInputChangeAction {\n    type: typeof NumberInputActionTypes.inputChange;\n    event: React.ChangeEvent<HTMLInputElement>;\n    inputValue: string;\n}\ninterface NumberInputIncrementAction {\n    type: typeof NumberInputActionTypes.increment;\n    event: React.PointerEvent | React.KeyboardEvent;\n    applyMultiplier: boolean;\n}\ninterface NumberInputDecrementAction {\n    type: typeof NumberInputActionTypes.decrement;\n    event: React.PointerEvent | React.KeyboardEvent;\n    applyMultiplier: boolean;\n}\ninterface NumberInputIncrementToMaxAction {\n    type: typeof NumberInputActionTypes.incrementToMax;\n    event: React.KeyboardEvent;\n}\ninterface NumberInputDecrementToMinAction {\n    type: typeof NumberInputActionTypes.decrementToMin;\n    event: React.KeyboardEvent;\n}\ninterface NumberInputResetInputValueAction {\n    type: typeof NumberInputActionTypes.resetInputValue;\n}\nexport type NumberInputAction = NumberInputClampAction | NumberInputInputChangeAction | NumberInputIncrementAction | NumberInputDecrementAction | NumberInputIncrementToMaxAction | NumberInputDecrementToMinAction | NumberInputResetInputValueAction;\nexport {};\n","node_modules/@mui/base/unstable_useNumberInput/index.d.ts":"export { useNumberInput as unstable_useNumberInput } from './useNumberInput';\nexport * from './useNumberInput.types';\n","node_modules/@mui/base/composeClasses/index.d.ts":"export { unstable_composeClasses } from '@mui/utils';\n","node_modules/@mui/base/generateUtilityClass/index.d.ts":"import { GlobalStateSlot } from '@mui/utils/generateUtilityClass';\nexport declare function generateUtilityClass(componentName: string, slot: string | GlobalStateSlot): string;\nexport declare function isGlobalState(slot: string): boolean;\n","node_modules/@mui/base/generateUtilityClasses/index.d.ts":"export declare function generateUtilityClasses<T extends string>(componentName: string, slots: T[]): Record<T, string>;\n","node_modules/@mui/base/Unstable_Popup/popupClasses.d.ts":"export interface PopupClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element when the popup is open. */\n    open: string;\n}\nexport type PopupClassKey = keyof PopupClasses;\nexport declare function getPopupUtilityClass(slot: string): string;\nexport declare const popupClasses: PopupClasses;\n","node_modules/@mui/base/Unstable_Popup/index.d.ts":"export { Popup as Unstable_Popup } from './Popup';\nexport * from './Popup.types';\nexport * from './popupClasses';\nexport * from './PopupContext';\n","node_modules/@mui/base/Unstable_Popup/PopupContext.d.ts":"import * as React from 'react';\nimport { PopupPlacement } from './Popup.types';\nexport interface PopupContextValue {\n    placement: PopupPlacement;\n}\nexport declare const PopupContext: React.Context<PopupContextValue | null>;\n","node_modules/@mui/base/Unstable_Popup/Popup.types.d.ts":"/// <reference types=\"react\" />\nimport { Middleware as PopupMiddleware, OffsetOptions as PopupOffsetOptions, Placement as PopupPlacement, Strategy as PopupStrategy, VirtualElement as PopupVirtualElement } from '@floating-ui/react-dom';\nimport { PortalProps } from '../Portal';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport type { PopupPlacement, PopupStrategy, PopupOffsetOptions, PopupMiddleware, PopupVirtualElement, };\nexport interface PopupRootSlotPropsOverrides {\n}\nexport interface PopupOwnProps {\n    /**\n     * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),\n     * or a function that returns either.\n     * It's used to set the position of the popup.\n     */\n    anchor?: PopupVirtualElement | HTMLElement | (() => HTMLElement) | (() => PopupVirtualElement) | null;\n    children?: React.ReactNode;\n    /**\n     * An HTML element or function that returns one. The container will have the portal children appended to it.\n      By default, it uses the body of the top-level document object, so it's `document.body` in these cases.\n     */\n    container?: PortalProps['container'];\n    /**\n     * If `true`, the popup will be rendered where it is defined, without the use of portals.\n     * @default false\n     */\n    disablePortal?: boolean;\n    /**\n     * If `true`, the popup will exist in the DOM even if it's closed.\n     * Its visibility will be controlled by the `visibility` CSS property.\n     *\n     * Otherwise, a closed popup will be removed from the DOM.\n     *\n     * @default false\n     */\n    keepMounted?: boolean;\n    /**\n     * Collection of Floating UI middleware to use when positioning the popup.\n     * If not provided, the [`offset`](https://floating-ui.com/docs/offset)\n     * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.\n     *\n     * @see https://floating-ui.com/docs/computePosition#middleware\n     */\n    middleware?: Array<PopupMiddleware | null | undefined | false>;\n    /**\n     * Distance between a popup and the trigger element.\n     * This prop is ignored when custom `middleware` is provided.\n     *\n     * @default 0\n     * @see https://floating-ui.com/docs/offset\n     */\n    offset?: PopupOffsetOptions;\n    /**\n     * If `true`, the popup is visible.\n     *\n     * @default false\n     */\n    open?: boolean;\n    /**\n     * Determines where to place the popup relative to the trigger element.\n     *\n     * @default 'bottom'\n     * @see https://floating-ui.com/docs/computePosition#placement\n     */\n    placement?: PopupPlacement;\n    /**\n     * The components used for each slot inside the Popup.\n     * Either a string to use a HTML element or a component.\n     *\n     * @default {}\n     */\n    slots?: {\n        root?: React.ElementType;\n    };\n    /**\n     * The props used for each slot inside the Popup.\n     *\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', PopupRootSlotPropsOverrides, PopupProps>;\n    };\n    /**\n     * The type of CSS position property to use (absolute or fixed).\n     *\n     * @default 'absolute'\n     * @see https://floating-ui.com/docs/computePosition#strategy\n     */\n    strategy?: PopupStrategy;\n}\nexport interface PopupSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport interface PopupTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: PopupOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type PopupProps<RootComponentType extends React.ElementType = PopupTypeMap['defaultComponent']> = PolymorphicProps<PopupTypeMap<{}, RootComponentType>, RootComponentType>;\nexport interface PopupOwnerState extends PopupOwnProps {\n    disablePortal: boolean;\n    open: boolean;\n    keepMounted: boolean;\n    offset: PopupOffsetOptions;\n    placement: PopupPlacement;\n    finalPlacement: PopupPlacement;\n    strategy: PopupStrategy;\n}\nexport type PopupRootSlotProps = {\n    className?: string;\n    children?: React.ReactNode;\n    ownerState: PopupOwnerState;\n    style: React.CSSProperties;\n    role: React.AriaRole;\n};\n","node_modules/@mui/base/Unstable_Popup/Popup.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { PopupTypeMap } from './Popup.types';\n/**\n *\n * Demos:\n *\n * - [Popup](https://mui.com/base-ui/react-popup/)\n *\n * API:\n *\n * - [Popup API](https://mui.com/base-ui/react-popup/components-api/#popup)\n */\ndeclare const Popup: PolymorphicComponent<PopupTypeMap<{}, \"div\">>;\nexport { Popup };\n","node_modules/@mui/base/Transitions/index.d.ts":"export * from './CssAnimation';\nexport * from './CssTransition';\n","node_modules/@mui/base/Transitions/CssTransition.d.ts":"import * as React from 'react';\nexport interface CssTransitionProps {\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * The name of the CSS class applied to the component when the transition\n     * is requested to enter.\n     */\n    enterClassName?: string;\n    /**\n     * The name of the CSS class applied to the component when the transition\n     * is requested to exit.\n     */\n    exitClassName?: string;\n    /**\n     * The name of the CSS property that is transitioned the longest (has the largest `transition-duration`) on exit.\n     * This is used to determine when the transition has ended.\n     * If not specified, the transition will be considered finished end when the first property is transitioned.\n     * If all properties have the same `transition-duration` (or there is just one transitioned property), this can be omitted.\n     */\n    lastTransitionedPropertyOnExit?: string;\n}\n/**\n * A utility component that hooks up to the Base UI transitions API and\n * applies a CSS transition to its children when necessary.\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssTransition API](https://mui.com/base-ui/react-transitions/components-api/#css-transition)\n */\ndeclare const CssTransition: React.ForwardRefExoticComponent<CssTransitionProps & React.RefAttributes<HTMLDivElement>>;\nexport { CssTransition };\n","node_modules/@mui/base/Transitions/CssAnimation.d.ts":"import * as React from 'react';\nexport interface CssAnimationProps {\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * The name of the CSS animation (the `animation-name` CSS property) applied to the component when\n     * the transition is requested to enter.\n     */\n    enterAnimationName?: string;\n    /**\n     * The name of the CSS class applied to the component when the transition\n     * is requested to enter.\n     */\n    enterClassName?: string;\n    /**\n     * The name of the CSS animation (the `animation-name` CSS property) applied to the component when\n     * the transition is requested to exit.\n     */\n    exitAnimationName?: string;\n    /**\n     * The name of the CSS class applied to the component when the transition\n     * is requested to exit.\n     */\n    exitClassName?: string;\n}\n/**\n *\n * Demos:\n *\n * - [Transitions](https://mui.com/base-ui/react-transitions/)\n *\n * API:\n *\n * - [CssAnimation API](https://mui.com/base-ui/react-transitions/components-api/#css-animation)\n */\ndeclare function CssAnimation(props: CssAnimationProps): React.JSX.Element;\ndeclare namespace CssAnimation {\n    var propTypes: any;\n}\nexport { CssAnimation };\n","node_modules/@mui/base/TextareaAutosize/index.d.ts":"export { TextareaAutosize } from './TextareaAutosize';\nexport * from './TextareaAutosize.types';\n","node_modules/@mui/base/TextareaAutosize/TextareaAutosize.types.d.ts":"import * as React from 'react';\nexport interface TextareaAutosizeProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'children' | 'rows'> {\n    ref?: React.Ref<HTMLTextAreaElement>;\n    /**\n     * Maximum number of rows to display.\n     */\n    maxRows?: string | number;\n    /**\n     * Minimum number of rows to display.\n     * @default 1\n     */\n    minRows?: string | number;\n}\n","node_modules/@mui/base/TextareaAutosize/TextareaAutosize.d.ts":"import * as React from 'react';\nimport { TextareaAutosizeProps } from './TextareaAutosize.types';\n/**\n *\n * Demos:\n *\n * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)\n * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)\n *\n * API:\n *\n * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)\n */\ndeclare const TextareaAutosize: React.ForwardRefExoticComponent<TextareaAutosizeProps & React.RefAttributes<Element>>;\nexport { TextareaAutosize };\n","node_modules/@mui/base/Tabs/tabsClasses.d.ts":"export interface TabsClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if `orientation='horizontal'`. */\n    horizontal: string;\n    /** Class name applied to the root element if `orientation='vertical'`. */\n    vertical: string;\n}\nexport type TabsClassKey = keyof TabsClasses;\nexport declare function getTabsUtilityClass(slot: string): string;\nexport declare const tabsClasses: TabsClasses;\n","node_modules/@mui/base/Tabs/index.d.ts":"export { Tabs } from './Tabs';\nexport * from './TabsContext';\nexport * from './tabsClasses';\nexport * from './Tabs.types';\n","node_modules/@mui/base/Tabs/TabsContext.d.ts":"import * as React from 'react';\nexport interface TabsContextValue {\n    /**\n     * The currently selected tab's value.\n     */\n    value: number | string | null;\n    /**\n     * Callback for setting new value.\n     */\n    onSelected: (event: React.SyntheticEvent | null, value: number | string | null) => void;\n    /**\n     * The component orientation (layout flow direction).\n     */\n    orientation?: 'horizontal' | 'vertical';\n    /**\n     * The direction of the tabs.\n     */\n    direction?: 'ltr' | 'rtl';\n    /**\n     * Registers a function that returns the id of the tab with the given value.\n     */\n    registerTabIdLookup: (lookupFunction: (id: string | number) => string | undefined) => void;\n    /**\n     * If `true` the selected tab changes on focus. Otherwise it only\n     * changes on activation.\n     */\n    selectionFollowsFocus?: boolean;\n    /**\n     * Gets the id of the tab with the given value.\n     * @param value Value to find the tab for.\n     */\n    getTabId: (value: number | string) => string | undefined;\n    /**\n     * Gets the id of the tab panel with the given value.\n     * @param value Value to find the tab panel for.\n     */\n    getTabPanelId: (value: number | string) => string | undefined;\n}\n/**\n * @ignore - internal component.\n */\ndeclare const TabsContext: React.Context<TabsContextValue | null>;\nexport declare function useTabsContext(): TabsContextValue;\nexport { TabsContext };\n","node_modules/@mui/base/Tabs/Tabs.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { SlotComponentProps } from '../utils';\nimport { PolymorphicProps } from '../utils/PolymorphicComponent';\nexport interface TabsRootSlotPropsOverrides {\n}\ntype TabsOrientation = 'horizontal' | 'vertical';\ntype TabsDirection = 'ltr' | 'rtl';\nexport interface TabsOwnProps {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * The value of the currently selected `Tab`.\n     * If you don't want any selected `Tab`, you can set this prop to `null`.\n     */\n    value?: string | number | null;\n    /**\n     * The default value. Use when the component is not controlled.\n     */\n    defaultValue?: string | number | null;\n    /**\n     * The component orientation (layout flow direction).\n     * @default 'horizontal'\n     */\n    orientation?: TabsOrientation;\n    /**\n     * The direction of the text.\n     * @default 'ltr'\n     */\n    direction?: TabsDirection;\n    className?: string;\n    /**\n     * Callback invoked when new value is being set.\n     */\n    onChange?: (event: React.SyntheticEvent | null, value: number | string | null) => void;\n    /**\n     * If `true` the selected tab changes on focus. Otherwise it only\n     * changes on activation.\n     */\n    selectionFollowsFocus?: boolean;\n    /**\n     * The props used for each slot inside the Tabs.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', TabsRootSlotPropsOverrides, TabsOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Tabs.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: TabsSlots;\n}\nexport interface TabsSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport interface TabsTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: TabsOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type TabsProps<RootComponentType extends React.ElementType = TabsTypeMap['defaultComponent']> = PolymorphicProps<TabsTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type TabsOwnerState = Simplify<TabsOwnProps & {\n    orientation: TabsOrientation;\n    direction: TabsDirection;\n}>;\nexport type TabsRootSlotProps = {\n    ownerState: TabsOwnerState;\n    ref: React.Ref<any>;\n    className?: string;\n};\nexport {};\n","node_modules/@mui/base/Tabs/Tabs.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { TabsTypeMap } from './Tabs.types';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [Tabs API](https://mui.com/base-ui/react-tabs/components-api/#tabs)\n */\ndeclare const Tabs: PolymorphicComponent<TabsTypeMap<{}, \"div\">>;\nexport { Tabs };\n","node_modules/@mui/base/TabsList/tabsListClasses.d.ts":"export interface TabsListClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if `orientation='horizontal'`. */\n    horizontal: string;\n    /** Class name applied to the root element if `orientation='vertical'`. */\n    vertical: string;\n}\nexport type TabsListClassKey = keyof TabsListClasses;\nexport declare function getTabsListUtilityClass(slot: string): string;\nexport declare const tabsListClasses: TabsListClasses;\n","node_modules/@mui/base/TabsList/index.d.ts":"export { TabsList } from './TabsList';\nexport * from './TabsList.types';\nexport * from './tabsListClasses';\n","node_modules/@mui/base/TabsList/TabsList.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { UseTabsListRootSlotProps } from '../useTabsList';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface TabsListRootSlotPropsOverrides {\n}\nexport interface TabsListOwnProps {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * The props used for each slot inside the TabsList.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', TabsListRootSlotPropsOverrides, TabsListOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the TabsList.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: TabsListSlots;\n}\nexport interface TabsListSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport interface TabsListTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: TabsListOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type TabsListProps<RootComponentType extends React.ElementType = TabsListTypeMap['defaultComponent']> = PolymorphicProps<TabsListTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type TabsListOwnerState = Simplify<TabsListOwnProps & {\n    isRtl: boolean;\n    orientation: 'horizontal' | 'vertical';\n}>;\nexport type TabsListRootSlotProps = UseTabsListRootSlotProps & {\n    className?: string;\n    ownerState: TabsListOwnerState;\n};\n","node_modules/@mui/base/TabsList/TabsList.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { TabsListTypeMap } from './TabsList.types';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [TabsList API](https://mui.com/base-ui/react-tabs/components-api/#tabs-list)\n */\ndeclare const TabsList: PolymorphicComponent<TabsListTypeMap<{}, \"div\">>;\nexport { TabsList };\n","node_modules/@mui/base/Unstable_NumberInput/numberInputClasses.d.ts":"export interface NumberInputClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: string;\n    /** Class name applied to the root element if `startAdornment` is provided. */\n    adornedStart: string;\n    /** Class name applied to the root element if `endAdornment` is provided. */\n    adornedEnd: string;\n    /** Class name applied to the root element if the component is focused. */\n    focused: string;\n    /** Class name applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `readOnly={true}`. */\n    readOnly: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** Class name applied to the input element. */\n    input: string;\n    /** Class name applied to the increment button element. */\n    incrementButton: string;\n    /** Class name applied to the decrement button element. */\n    decrementButton: string;\n}\nexport type NumberInputClassKey = keyof NumberInputClasses;\nexport declare function getNumberInputUtilityClass(slot: string): string;\nexport declare const numberInputClasses: NumberInputClasses;\n","node_modules/@mui/base/Unstable_NumberInput/index.d.ts":"export { NumberInput as Unstable_NumberInput } from './NumberInput';\nexport * from './numberInputClasses';\nexport * from './NumberInput.types';\n","node_modules/@mui/base/Unstable_NumberInput/NumberInput.types.d.ts":"/// <reference types=\"react\" />\nimport { Simplify } from '@mui/types';\nimport { FormControlState } from '../FormControl';\nimport { UseNumberInputParameters, UseNumberInputRootSlotProps, UseNumberInputIncrementButtonSlotProps, UseNumberInputDecrementButtonSlotProps } from '../unstable_useNumberInput/useNumberInput.types';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface NumberInputRootSlotPropsOverrides {\n}\nexport interface NumberInputInputSlotPropsOverrides {\n}\nexport interface NumberInputStepperButtonSlotPropsOverrides {\n}\nexport type NumberInputOwnProps = Omit<UseNumberInputParameters, 'error' | 'inputId' | 'inputRef'> & {\n    /**\n     * Trailing adornment for this input.\n     */\n    endAdornment?: React.ReactNode;\n    /**\n     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.\n     */\n    error?: boolean;\n    /**\n     * The id of the `input` element.\n     */\n    id?: string;\n    /**\n     * The short hint displayed in the `input` before the user enters a value.\n     */\n    placeholder?: React.InputHTMLAttributes<HTMLInputElement>['placeholder'];\n    /**\n     * The props used for each slot inside the NumberInput.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', NumberInputRootSlotPropsOverrides, NumberInputOwnerState>;\n        input?: SlotComponentProps<'input', NumberInputInputSlotPropsOverrides, NumberInputOwnerState>;\n        incrementButton?: SlotComponentProps<'button', NumberInputStepperButtonSlotPropsOverrides, NumberInputOwnerState>;\n        decrementButton?: SlotComponentProps<'button', NumberInputStepperButtonSlotPropsOverrides, NumberInputOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the InputBase.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: NumberInputSlots;\n    /**\n     * Leading adornment for this input.\n     */\n    startAdornment?: React.ReactNode;\n};\nexport interface NumberInputSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the input.\n     * @default 'input'\n     */\n    input?: React.ElementType;\n    /**\n     * The component that renders the increment button.\n     * @default 'button'\n     */\n    incrementButton?: React.ElementType;\n    /**\n     * The component that renders the decrement button.\n     * @default 'button'\n     */\n    decrementButton?: React.ElementType;\n}\nexport interface NumberInputTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: AdditionalProps & NumberInputOwnProps;\n    defaultComponent: RootComponentType;\n}\nexport type NumberInputProps<RootComponentType extends React.ElementType = NumberInputTypeMap['defaultComponent']> = PolymorphicProps<NumberInputTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type NumberInputOwnerState = Simplify<NumberInputOwnProps & {\n    formControlContext: FormControlState | undefined;\n    focused: boolean;\n    isIncrementDisabled: boolean;\n    isDecrementDisabled: boolean;\n}>;\nexport type NumberInputRootSlotProps = Simplify<UseNumberInputRootSlotProps & {\n    ownerState: NumberInputOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n    ref?: React.Ref<Element>;\n}>;\nexport type NumberInputInputSlotProps = Simplify<Omit<UseNumberInputRootSlotProps, 'onClick'> & {\n    id: string | undefined;\n    ownerState: NumberInputOwnerState;\n    placeholder: string | undefined;\n    ref: React.Ref<HTMLInputElement>;\n}>;\nexport type NumberInputIncrementButtonSlotProps = Simplify<UseNumberInputIncrementButtonSlotProps & {\n    ownerState: NumberInputOwnerState;\n}>;\nexport type NumberInputDecrementButtonSlotProps = Simplify<UseNumberInputDecrementButtonSlotProps & {\n    ownerState: NumberInputOwnerState;\n}>;\n","node_modules/@mui/base/Unstable_NumberInput/NumberInput.d.ts":"import { OverridableComponent } from '@mui/types';\nimport { NumberInputTypeMap } from './NumberInput.types';\n/**\n *\n * Demos:\n *\n * - [Number Input](https://mui.com/base-ui/react-number-input/)\n *\n * API:\n *\n * - [NumberInput API](https://mui.com/base-ui/react-number-input/components-api/#number-input)\n */\ndeclare const NumberInput: OverridableComponent<NumberInputTypeMap<{}, \"div\">>;\nexport { NumberInput };\n","node_modules/@mui/base/TablePagination/tablePaginationClasses.d.ts":"export interface TablePaginationClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the Toolbar component. */\n    toolbar: string;\n    /** Class name applied to the spacer element. */\n    spacer: string;\n    /** Class name applied to the select label Typography element. */\n    selectLabel: string;\n    /** Class name applied to the Select component `root` element. */\n    selectRoot: string;\n    /** Class name applied to the Select component `select` class. */\n    select: string;\n    /** Class name applied to the Select component `icon` class. */\n    selectIcon: string;\n    /** Class name applied to the Select component `root` element. */\n    input: string;\n    /** Class name applied to the MenuItem component. */\n    menuItem: string;\n    /** Class name applied to the displayed rows Typography element. */\n    displayedRows: string;\n    /** Class name applied to the internal `TablePaginationActions` component. */\n    actions: string;\n}\nexport type TablePaginationClassKey = keyof TablePaginationClasses;\nexport declare function getTablePaginationUtilityClass(slot: string): string;\nexport declare const tablePaginationClasses: TablePaginationClasses;\n","node_modules/@mui/base/TablePagination/index.d.ts":"export { TablePagination } from './TablePagination';\nexport * from './TablePagination.types';\nexport { TablePaginationActions } from './TablePaginationActions';\nexport * from './TablePaginationActions.types';\nexport * from './tablePaginationClasses';\nexport * from './common.types';\n","node_modules/@mui/base/TablePagination/common.types.d.ts":"export type ItemAriaLabelType = 'first' | 'last' | 'next' | 'previous';\n","node_modules/@mui/base/TablePagination/TablePaginationActions.types.d.ts":"import * as React from 'react';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface TablePaginationActionsRootSlotPropsOverrides {\n}\nexport interface TablePaginationActionsFirstButtonSlotPropsOverrides {\n}\nexport interface TablePaginationActionsLastButtonSlotPropsOverrides {\n}\nexport interface TablePaginationActionsNextButtonSlotPropsOverrides {\n}\nexport interface TablePaginationActionsBackButtonSlotPropsOverrides {\n}\nexport interface TablePaginationActionsOwnProps {\n    count: number;\n    /**\n     * The components used for each slot inside the TablePagination.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: TablePaginationActionsSlots;\n    /**\n     * The props used for each slot inside the TablePagination.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', TablePaginationActionsRootSlotPropsOverrides, TablePaginationActionsOwnerState>;\n        firstButton?: SlotComponentProps<'button', TablePaginationActionsFirstButtonSlotPropsOverrides, TablePaginationActionsOwnerState>;\n        lastButton?: SlotComponentProps<'button', TablePaginationActionsLastButtonSlotPropsOverrides, TablePaginationActionsOwnerState>;\n        nextButton?: SlotComponentProps<'button', TablePaginationActionsNextButtonSlotPropsOverrides, TablePaginationActionsOwnerState>;\n        backButton?: SlotComponentProps<'button', TablePaginationActionsBackButtonSlotPropsOverrides, TablePaginationActionsOwnerState>;\n    };\n    /**\n     * Direction of the text.\n     * @default 'ltr'\n     */\n    direction?: 'ltr' | 'rtl';\n    /**\n     * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n     * This is important for screen reader users.\n     *\n     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n     * @returns {string}\n     */\n    getItemAriaLabel: (type: 'first' | 'last' | 'next' | 'previous', page: number) => string;\n    onPageChange: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;\n    page: number;\n    rowsPerPage: number;\n    showFirstButton: boolean;\n    showLastButton: boolean;\n}\nexport interface TablePaginationActionsSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the first button.\n     * @default 'button'\n     */\n    firstButton?: React.ElementType;\n    /**\n     * The component that renders the last button.\n     * @default 'button'\n     */\n    lastButton?: React.ElementType;\n    /**\n     * The component that renders the next button.\n     * @default 'button'\n     */\n    nextButton?: React.ElementType;\n    /**\n     * The component that renders the back button.\n     * @default 'button'\n     */\n    backButton?: React.ElementType;\n    /**\n     * The component that renders the first page icon.\n     * @default FirstPageIconDefault\n     */\n    firstPageIcon?: React.ElementType;\n    /**\n     * The component that renders the last page icon.\n     * @default LastPageIconDefault\n     */\n    lastPageIcon?: React.ElementType;\n    /**\n     * The component that renders the next page icon.\n     * @default NextPageIconDefault\n     */\n    nextPageIcon?: React.ElementType;\n    /**\n     * The component that renders the back page icon.\n     * @default BackPageIconDefault\n     */\n    backPageIcon?: React.ElementType;\n}\nexport type TablePaginationActionsProps<RootComponentType extends React.ElementType = TablePaginationActionsTypeMap['defaultComponent']> = PolymorphicProps<TablePaginationActionsTypeMap<{}, RootComponentType>, RootComponentType>;\nexport interface TablePaginationActionsTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'button'> {\n    props: TablePaginationActionsOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type TablePaginationActionsOwnerState = TablePaginationActionsOwnProps;\nexport type TablePaginationActionsRootSlotProps = {\n    children?: React.ReactNode;\n    ownerState: TablePaginationActionsOwnerState;\n    ref: React.Ref<any>;\n};\nexport type TablePaginationActionsButtonSlotProps = {\n    'aria-label': string;\n    children?: React.ReactNode;\n    disabled: boolean;\n    onClick: React.MouseEventHandler<HTMLButtonElement>;\n    ownerState: TablePaginationActionsOwnerState;\n    title: string;\n};\n","node_modules/@mui/base/TablePagination/TablePaginationActions.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { TablePaginationActionsTypeMap } from './TablePaginationActions.types';\n/**\n * @ignore - internal component.\n */\ndeclare const TablePaginationActions: PolymorphicComponent<TablePaginationActionsTypeMap<{}, \"button\">>;\nexport { TablePaginationActions };\n","node_modules/@mui/base/TablePagination/TablePagination.types.d.ts":"import * as React from 'react';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nimport { TablePaginationActions } from './TablePaginationActions';\nimport { ItemAriaLabelType } from './common.types';\nexport interface LabelDisplayedRowsArgs {\n    from: number;\n    to: number;\n    count: number;\n    page: number;\n}\nexport interface TablePaginationRootSlotPropsOverrides {\n}\nexport interface TablePaginationActionsSlotPropsOverrides {\n}\nexport interface TablePaginationSelectSlotPropsOverrides {\n}\nexport interface TablePaginationSelectLabelSlotPropsOverrides {\n}\nexport interface TablePaginationMenuItemSlotPropsOverrides {\n}\nexport interface TablePaginationDisplayedRowsSlotPropsOverrides {\n}\nexport interface TablePaginationToolbarSlotPropsOverrides {\n}\nexport interface TablePaginationSpacerSlotPropsOverrides {\n}\nexport interface TablePaginationOwnProps {\n    /**\n     * @ignore\n     */\n    colSpan?: number;\n    /**\n     * The components used for each slot inside the TablePagination.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: TablePaginationSlots;\n    /**\n     * The props used for each slot inside the TablePagination.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'td', TablePaginationRootSlotPropsOverrides, TablePaginationOwnerState>;\n        actions?: SlotComponentProps<typeof TablePaginationActions, TablePaginationActionsSlotPropsOverrides, TablePaginationOwnerState>;\n        select?: SlotComponentProps<'select', TablePaginationSelectSlotPropsOverrides, TablePaginationOwnerState>;\n        selectLabel?: SlotComponentProps<'p', TablePaginationSelectLabelSlotPropsOverrides, TablePaginationOwnerState>;\n        menuItem?: SlotComponentProps<'option', TablePaginationMenuItemSlotPropsOverrides, TablePaginationOwnerState>;\n        displayedRows?: SlotComponentProps<'p', TablePaginationDisplayedRowsSlotPropsOverrides, TablePaginationOwnerState>;\n        toolbar?: SlotComponentProps<'div', TablePaginationToolbarSlotPropsOverrides, TablePaginationOwnerState>;\n        spacer?: SlotComponentProps<'div', TablePaginationSpacerSlotPropsOverrides, TablePaginationOwnerState>;\n    };\n    /**\n     * The total number of rows.\n     *\n     * To enable server side pagination for an unknown number of items, provide -1.\n     */\n    count: number;\n    /**\n     * Accepts a function which returns a string value that provides a user-friendly name for the current page.\n     * This is important for screen reader users.\n     *\n     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').\n     * @returns {string}\n     * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {\n     *   return `Go to ${type} page`;\n     * }\n     */\n    getItemAriaLabel?: (type: ItemAriaLabelType) => string;\n    /**\n     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`\n     * object.\n     *\n     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n     * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {\n     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;\n     * }\n     */\n    labelDisplayedRows?: (paginationInfo: LabelDisplayedRowsArgs) => React.ReactNode;\n    /**\n     * Id of the label element within the pagination.\n     */\n    labelId?: string;\n    /**\n     * Customize the rows per page label.\n     *\n     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).\n     * @default 'Rows per page:'\n     */\n    labelRowsPerPage?: React.ReactNode;\n    /**\n     * Callback fired when the page is changed.\n     *\n     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\n     * @param {number} page The page selected.\n     */\n    onPageChange: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;\n    /**\n     * Callback fired when the number of rows per page is changed.\n     *\n     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.\n     */\n    onRowsPerPageChange?: React.ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n    /**\n     * The zero-based index of the current page.\n     */\n    page: number;\n    /**\n     * The number of rows per page.\n     *\n     * Set -1 to display all the rows.\n     */\n    rowsPerPage: number;\n    /**\n     * Customizes the options of the rows per page select field. If less than two options are\n     * available, no select field will be displayed.\n     * Use -1 for the value with a custom label to show all the rows.\n     * @default [10, 25, 50, 100]\n     */\n    rowsPerPageOptions?: ReadonlyArray<number | {\n        value: number;\n        label: string;\n    }>;\n    /**\n     * Id of the select element within the pagination.\n     */\n    selectId?: string;\n}\nexport interface TablePaginationSlots {\n    /**\n     * The component that renders the root.\n     * @default 'td'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the actions.\n     * @default TablePaginationActions\n     */\n    actions?: React.ElementType;\n    /**\n     * The component that renders the select.\n     * @default 'select'\n     */\n    select?: React.ElementType;\n    /**\n     * The component that renders the select label.\n     * @default 'p'\n     */\n    selectLabel?: React.ElementType;\n    /**\n     * The component that renders the menu item.\n     * @default 'option'\n     */\n    menuItem?: React.ElementType;\n    /**\n     * The component that renders the displayed rows.\n     * @default 'p'\n     */\n    displayedRows?: React.ElementType;\n    /**\n     * The component that renders the toolbar.\n     * @default 'div'\n     */\n    toolbar?: React.ElementType;\n    /**\n     * The component that renders the spacer.\n     * @default 'div'\n     */\n    spacer?: React.ElementType;\n}\nexport interface TablePaginationTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'td'> {\n    props: TablePaginationOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type TablePaginationProps<RootComponentType extends React.ElementType = TablePaginationTypeMap['defaultComponent']> = PolymorphicProps<TablePaginationTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type TablePaginationOwnerState = TablePaginationOwnProps;\nexport type TablePaginationRootSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    colSpan?: number;\n    ownerState: TablePaginationOwnerState;\n    ref?: React.Ref<any>;\n};\nexport type TablePaginationSelectSlotProps = {\n    ['aria-label']: string;\n    ['aria-labelledby']?: string;\n    children?: React.ReactNode;\n    className?: string;\n    id?: string;\n    onChange: (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    ownerState: TablePaginationOwnerState;\n    value: React.SelectHTMLAttributes<HTMLSelectElement>['value'];\n};\nexport type TablePaginationActionsSlotProps = {\n    className?: string;\n    count: number;\n    getItemAriaLabel: (type: ItemAriaLabelType) => string;\n    onPageChange: (event: React.MouseEvent<HTMLButtonElement> | null, page: number) => void;\n    ownerState: TablePaginationOwnerState;\n    page: number;\n    rowsPerPage: number;\n};\nexport type TablePaginationMenuItemSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: TablePaginationOwnerState;\n    value: React.SelectHTMLAttributes<HTMLSelectElement>['value'];\n};\nexport type TablePaginationSelectLabelSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    id?: string;\n    ownerState: TablePaginationOwnerState;\n};\nexport type TablePaginationDisplayedRowsSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: TablePaginationOwnerState;\n};\nexport type TablePaginationToolbarSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: TablePaginationOwnerState;\n};\nexport type TablePaginationSpacerSlotProps = {\n    className?: string;\n    ownerState: TablePaginationOwnerState;\n};\n","node_modules/@mui/base/TablePagination/TablePagination.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { TablePaginationTypeMap } from './TablePagination.types';\n/**\n * A pagination for tables.\n *\n * Demos:\n *\n * - [Table Pagination](https://mui.com/base-ui/react-table-pagination/)\n *\n * API:\n *\n * - [TablePagination API](https://mui.com/base-ui/react-table-pagination/components-api/#table-pagination)\n */\ndeclare const TablePagination: PolymorphicComponent<TablePaginationTypeMap<{}, \"td\">>;\nexport { TablePagination };\n","node_modules/@mui/base/TabPanel/tabPanelClasses.d.ts":"export interface TabPanelClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root `div` element if `hidden={true}`. */\n    hidden: string;\n}\nexport type TabPanelClassKey = keyof TabPanelClasses;\nexport declare function getTabPanelUtilityClass(slot: string): string;\nexport declare const tabPanelClasses: TabPanelClasses;\n","node_modules/@mui/base/TabPanel/index.d.ts":"export { TabPanel } from './TabPanel';\nexport * from './TabPanel.types';\nexport * from './tabPanelClasses';\n","node_modules/@mui/base/TabPanel/TabPanel.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { UseTabPanelRootSlotProps } from '../useTabPanel';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface TabPanelRootSlotPropsOverrides {\n}\nexport interface TabPanelOwnProps {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.\n     * If not provided, it will fall back to the index of the panel.\n     * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.\n     */\n    value?: number | string;\n    /**\n     * The components used for each slot inside the TabPanel.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: TabPanelSlots;\n    /**\n     * The props used for each slot inside the TabPanel.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', TabPanelRootSlotPropsOverrides, TabPanelOwnerState>;\n    };\n}\nexport interface TabPanelSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport interface TabPanelTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: TabPanelOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type TabPanelProps<RootComponentType extends React.ElementType = TabPanelTypeMap['defaultComponent']> = PolymorphicProps<TabPanelTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type TabPanelOwnerState = Simplify<TabPanelOwnProps & {\n    hidden: boolean;\n}>;\nexport type TabPanelRootSlotProps = UseTabPanelRootSlotProps & {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: TabPanelOwnerState;\n    ref: React.Ref<any>;\n    role: React.AriaRole;\n};\n","node_modules/@mui/base/TabPanel/TabPanel.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { TabPanelTypeMap } from './TabPanel.types';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [TabPanel API](https://mui.com/base-ui/react-tabs/components-api/#tab-panel)\n */\ndeclare const TabPanel: PolymorphicComponent<TabPanelTypeMap<{}, \"div\">>;\nexport { TabPanel };\n","node_modules/@mui/base/Switch/switchClasses.d.ts":"export interface SwitchClasses {\n    /** Class applied to the root element. */\n    root: string;\n    /** Class applied to the internal input element */\n    input: string;\n    /** Class applied to the track element */\n    track: string;\n    /** Class applied to the thumb element */\n    thumb: string;\n    /** State class applied to the root element if the switch is checked */\n    checked: string;\n    /** State class applied to the root element if the switch is disabled */\n    disabled: string;\n    /** State class applied to the root element if the switch has visible focus */\n    focusVisible: string;\n    /** Class applied to the root element if the switch is read-only */\n    readOnly: string;\n}\nexport type SwitchClassKey = keyof SwitchClasses;\nexport declare function getSwitchUtilityClass(slot: string): string;\nexport declare const switchClasses: SwitchClasses;\n","node_modules/@mui/base/Switch/index.d.ts":"export { Switch } from './Switch';\nexport * from './Switch.types';\nexport * from './switchClasses';\n","node_modules/@mui/base/Switch/Switch.types.d.ts":"/// <reference types=\"react\" />\nimport { Simplify } from '@mui/types';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nimport { UseSwitchInputSlotProps, UseSwitchParameters } from '../useSwitch';\nexport interface SwitchRootSlotPropsOverrides {\n}\nexport interface SwitchThumbSlotPropsOverrides {\n}\nexport interface SwitchInputSlotPropsOverrides {\n}\nexport interface SwitchTrackSlotPropsOverrides {\n}\nexport interface SwitchOwnProps extends UseSwitchParameters {\n    /**\n     * Class name applied to the root element.\n     */\n    className?: string;\n    /**\n     * The components used for each slot inside the Switch.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: SwitchSlots;\n    /**\n     * The props used for each slot inside the Switch.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'span', SwitchRootSlotPropsOverrides, SwitchOwnerState>;\n        thumb?: SlotComponentProps<'span', SwitchThumbSlotPropsOverrides, SwitchOwnerState>;\n        input?: SlotComponentProps<'input', SwitchInputSlotPropsOverrides, SwitchOwnerState>;\n        track?: SlotComponentProps<'span', SwitchTrackSlotPropsOverrides, SwitchOwnerState>;\n    };\n}\nexport interface SwitchSlots {\n    /**\n     * The component that renders the root.\n     * @default 'span'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the input.\n     * @default 'input'\n     */\n    input?: React.ElementType;\n    /**\n     * The component that renders the thumb.\n     * @default 'span'\n     */\n    thumb?: React.ElementType;\n    /**\n     * The component that renders the track.\n     * @default 'span'\n     */\n    track?: React.ElementType | null;\n}\nexport interface SwitchTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'span'> {\n    props: SwitchOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type SwitchProps<RootComponentType extends React.ElementType = SwitchTypeMap['defaultComponent']> = PolymorphicProps<SwitchTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type SwitchOwnerState = Simplify<SwitchOwnProps & {\n    checked: boolean;\n    disabled: boolean;\n    focusVisible: boolean;\n    readOnly: boolean;\n}>;\nexport type SwitchRootSlotProps = {\n    ownerState: SwitchOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n};\nexport type SwitchThumbSlotProps = {\n    ownerState: SwitchOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n};\nexport type SwitchTrackSlotProps = {\n    ownerState: SwitchOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n};\nexport type SwitchInputSlotProps = Simplify<UseSwitchInputSlotProps & {\n    ownerState: SwitchOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n}>;\n","node_modules/@mui/base/Switch/Switch.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { SwitchTypeMap } from './Switch.types';\n/**\n * The foundation for building custom-styled switches.\n *\n * Demos:\n *\n * - [Switch](https://mui.com/base-ui/react-switch/)\n *\n * API:\n *\n * - [Switch API](https://mui.com/base-ui/react-switch/components-api/#switch)\n */\ndeclare const Switch: PolymorphicComponent<SwitchTypeMap<{}, \"span\">>;\nexport { Switch };\n","node_modules/@mui/base/Snackbar/snackbarClasses.d.ts":"export interface SnackbarClasses {\n    /** Class name applied to the root element. */\n    root: string;\n}\nexport declare function getSnackbarUtilityClass(slot: string): string;\nexport declare const snackbarClasses: SnackbarClasses;\n","node_modules/@mui/base/Snackbar/index.d.ts":"export { Snackbar } from './Snackbar';\nexport * from './Snackbar.types';\nexport * from './snackbarClasses';\n","node_modules/@mui/base/Snackbar/Snackbar.types.d.ts":"import * as React from 'react';\nimport { ClickAwayListener, ClickAwayListenerProps } from '../ClickAwayListener';\nimport { UseSnackbarParameters } from '../useSnackbar';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface SnackbarRootSlotPropsOverrides {\n}\nexport interface SnackbarClickAwayListenerSlotPropsOverrides {\n}\nexport interface SnackbarOwnProps extends Omit<UseSnackbarParameters, 'ref'> {\n    children?: React.ReactNode;\n    /**\n     * The components used for each slot inside the Snackbar.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: SnackbarSlots;\n    /**\n     * The props used for each slot inside the Snackbar.\n     * @default {}\n     */\n    slotProps?: {\n        clickAwayListener?: SlotComponentProps<typeof ClickAwayListener, SnackbarClickAwayListenerSlotPropsOverrides, SnackbarOwnerState>;\n        root?: SlotComponentProps<'div', SnackbarRootSlotPropsOverrides, SnackbarOwnerState>;\n    };\n    /**\n     * The prop used to handle exited transition and unmount the component.\n     * @default true\n     */\n    exited?: boolean;\n}\nexport interface SnackbarSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport interface SnackbarTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: SnackbarOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type SnackbarProps<RootComponentType extends React.ElementType = SnackbarTypeMap['defaultComponent']> = PolymorphicProps<SnackbarTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type SnackbarOwnerState = SnackbarOwnProps;\nexport type SnackbarRootSlotProps = {\n    ownerState: SnackbarOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n    ref: React.Ref<any>;\n};\nexport interface SnackbarClickAwayListenerSlotProps extends ClickAwayListenerProps {\n    ownerState: SnackbarOwnerState;\n}\n","node_modules/@mui/base/Snackbar/Snackbar.d.ts":"import { SnackbarTypeMap } from './Snackbar.types';\nimport { PolymorphicComponent } from '../utils';\n/**\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/)\n * - [Snackbar](https://mui.com/joy-ui/react-snackbar/)\n * - [Snackbar](https://mui.com/material-ui/react-snackbar/)\n *\n * API:\n *\n * - [Snackbar API](https://mui.com/base-ui/react-snackbar/components-api/#snackbar)\n */\ndeclare const Snackbar: PolymorphicComponent<SnackbarTypeMap<{}, \"div\">>;\nexport { Snackbar };\n","node_modules/@mui/base/Slider/sliderClasses.d.ts":"export interface SliderClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if `marks` is provided with at least one label. */\n    marked: string;\n    /** Class name applied to the root element if `orientation=\"vertical\"`. */\n    vertical: string;\n    /** State class applied to the root and thumb element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root if a thumb is being dragged. */\n    dragging: string;\n    /** Class name applied to the rail element. */\n    rail: string;\n    /** Class name applied to the track element. */\n    track: string;\n    /** Class name applied to the root element if `track={false}`. */\n    trackFalse: string;\n    /** Class name applied to the root element if `track=\"inverted\"`. */\n    trackInverted: string;\n    /** Class name applied to the thumb element. */\n    thumb: string;\n    /** State class applied to the thumb element if it's active. */\n    active: string;\n    /** State class applied to the thumb element if keyboard focused. */\n    focusVisible: string;\n    /** Class name applied to the mark element. */\n    mark: string;\n    /** Class name applied to the mark element if active (depending on the value). */\n    markActive: string;\n    /** Class name applied to the mark label element. */\n    markLabel: string;\n    /** Class name applied to the mark label element if active (depending on the value). */\n    markLabelActive: string;\n}\nexport type SliderClassKey = keyof SliderClasses;\nexport declare function getSliderUtilityClass(slot: string): string;\nexport declare const sliderClasses: SliderClasses;\n","node_modules/@mui/base/Slider/index.d.ts":"export { Slider } from './Slider';\nexport * from './Slider.types';\nexport * from './sliderClasses';\n","node_modules/@mui/base/Slider/Slider.types.d.ts":"import { Simplify } from '@mui/types';\nimport * as React from 'react';\nimport { PolymorphicProps, SlotComponentProps, SlotComponentPropsWithSlotState } from '../utils';\nimport { UseSliderHiddenInputProps, UseSliderParameters, UseSliderRootSlotProps, UseSliderThumbSlotProps } from '../useSlider';\nexport type SliderOwnerState = Simplify<SliderOwnProps & {\n    disabled: boolean;\n    focusedThumbIndex: number;\n    activeThumbIndex: number;\n    isRtl: boolean;\n    max: number;\n    min: number;\n    dragging: boolean;\n    marked: boolean;\n    orientation: 'horizontal' | 'vertical';\n    scale: (value: number) => number;\n    step: number | null;\n    track: 'normal' | false | 'inverted';\n    valueLabelFormat: string | ((value: number, index: number) => React.ReactNode);\n}>;\nexport interface SliderRootSlotPropsOverrides {\n}\nexport interface SliderTrackSlotPropsOverrides {\n}\nexport interface SliderRailSlotPropsOverrides {\n}\nexport interface SliderThumbSlotPropsOverrides {\n}\nexport interface SliderMarkSlotPropsOverrides {\n}\nexport interface SliderMarkLabelSlotPropsOverrides {\n}\nexport interface SliderValueLabelSlotPropsOverrides {\n}\nexport interface SliderInputSlotPropsOverrides {\n}\nexport interface SliderThumbSlotState {\n    focused: boolean;\n    active: boolean;\n    index: number;\n}\nexport interface SliderOwnProps extends Omit<UseSliderParameters, 'ref'> {\n    /**\n     * The label of the slider.\n     */\n    'aria-label'?: string;\n    /**\n     * A string value that provides a user-friendly name for the current value of the slider.\n     */\n    'aria-valuetext'?: string;\n    /**\n     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n     * This is important for screen reader users.\n     * @param {number} index The thumb label's index to format.\n     * @returns {string}\n     */\n    getAriaLabel?: (index: number) => string;\n    /**\n     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n     * This is important for screen reader users.\n     * @param {number} value The thumb label's value to format.\n     * @param {number} index The thumb label's index to format.\n     * @returns {string}\n     */\n    getAriaValueText?: (value: number, index: number) => string;\n    /**\n     * The props used for each slot inside the Slider.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'span', SliderRootSlotPropsOverrides, SliderOwnerState>;\n        track?: SlotComponentProps<'span', SliderTrackSlotPropsOverrides, SliderOwnerState>;\n        rail?: SlotComponentProps<'span', SliderRailSlotPropsOverrides, SliderOwnerState>;\n        thumb?: SlotComponentPropsWithSlotState<'span', SliderThumbSlotPropsOverrides, SliderOwnerState, SliderThumbSlotState>;\n        mark?: SlotComponentProps<'span', SliderMarkSlotPropsOverrides, SliderOwnerState>;\n        markLabel?: SlotComponentProps<'span', SliderMarkLabelSlotPropsOverrides, SliderOwnerState>;\n        valueLabel?: SlotComponentProps<React.ElementType, SliderValueLabelSlotPropsOverrides, SliderOwnerState>;\n        input?: SlotComponentProps<'input', SliderInputSlotPropsOverrides, SliderOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Slider.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: SliderSlots;\n    /**\n     * The track presentation:\n     *\n     * - `normal` the track will render a bar representing the slider value.\n     * - `inverted` the track will render a bar representing the remaining slider value.\n     * - `false` the track will render without a bar.\n     * @default 'normal'\n     */\n    track?: 'normal' | false | 'inverted';\n    /**\n     * The format function the value label's value.\n     *\n     * When a function is provided, it should have the following signature:\n     *\n     * - {number} value The value label's value to format\n     * - {number} index The value label's index to format\n     * @param {any} x\n     * @returns {any}\n     * @default function Identity(x) {\n     *   return x;\n     * }\n     */\n    valueLabelFormat?: string | ((value: number, index: number) => React.ReactNode);\n}\nexport interface SliderSlots {\n    /**\n     * The component that renders the root.\n     * @default 'span'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the track.\n     * @default 'span'\n     */\n    track?: React.ElementType;\n    /**\n     * The component that renders the rail.\n     * @default 'span'\n     */\n    rail?: React.ElementType;\n    /**\n     * The component that renders the thumb.\n     * @default 'span'\n     */\n    thumb?: React.ElementType;\n    /**\n     * The component that renders the mark.\n     * @default 'span'\n     */\n    mark?: React.ElementType;\n    /**\n     * The component that renders the mark label.\n     * @default 'span'\n     */\n    markLabel?: React.ElementType;\n    /**\n     * The component that renders the value label.\n     */\n    valueLabel?: React.ElementType;\n    /**\n     * The component that renders the input.\n     * @default 'input'\n     */\n    input?: React.ElementType;\n}\nexport interface SliderTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'span'> {\n    props: SliderOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type SliderProps<RootComponentType extends React.ElementType = SliderTypeMap['defaultComponent']> = PolymorphicProps<SliderTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type SliderRootSlotProps = UseSliderRootSlotProps & {\n    children: React.ReactNode;\n    className: string;\n    ownerState: SliderOwnerState;\n};\nexport type SliderTrackSlotProps = {\n    className?: string;\n    ownerState: SliderOwnerState;\n    style: React.CSSProperties;\n};\nexport type SliderRailSlotProps = {\n    className?: string;\n    ownerState: SliderOwnerState;\n};\nexport type SliderThumbSlotProps = UseSliderThumbSlotProps & {\n    'data-index': number;\n    children: React.ReactNode;\n    className?: string;\n    ownerState: SliderOwnerState;\n    style: React.CSSProperties;\n};\nexport type SliderMarkSlotProps = {\n    'data-index': number;\n    className?: string;\n    markActive?: boolean;\n    ownerState: SliderOwnerState;\n    style: React.CSSProperties;\n};\nexport type SliderMarkLabelSlotProps = {\n    'aria-hidden': boolean;\n    'data-index': number;\n    className?: string;\n    markLabelActive?: boolean;\n    ownerState: SliderOwnerState;\n    style: React.CSSProperties;\n};\nexport type SliderValueLabelSlotProps = {\n    children: React.ReactNode;\n    className?: string;\n    disabled?: boolean;\n    index?: number;\n    open?: boolean;\n    ownerState: SliderOwnerState;\n    valueLabel?: string | React.ReactNode;\n    valueLabelFormat?: string | ((value: number, index: number) => React.ReactNode);\n};\nexport type SliderInputSlotProps = UseSliderHiddenInputProps & {\n    'aria-label': React.AriaAttributes['aria-label'];\n    'aria-valuenow': React.AriaAttributes['aria-valuenow'];\n    'aria-valuetext': React.AriaAttributes['aria-valuetext'];\n    'data-index': number;\n    ownerState: SliderOwnerState;\n    style: React.CSSProperties;\n    value: number;\n};\n","node_modules/@mui/base/Slider/Slider.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { SliderTypeMap } from './Slider.types';\n/**\n *\n * Demos:\n *\n * - [Slider](https://mui.com/base-ui/react-slider/)\n *\n * API:\n *\n * - [Slider API](https://mui.com/base-ui/react-slider/components-api/#slider)\n */\ndeclare const Slider: PolymorphicComponent<SliderTypeMap<{}, \"span\">>;\nexport { Slider };\n","node_modules/@mui/base/Tab/tabClasses.d.ts":"export interface TabClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root `button` element if `selected={true}`. */\n    selected: string;\n    /** State class applied to the root `button` element if `disabled={true}`. */\n    disabled: string;\n}\nexport type TabClassKey = keyof TabClasses;\nexport declare function getTabUtilityClass(slot: string): string;\nexport declare const tabClasses: TabClasses;\n","node_modules/@mui/base/Tab/index.d.ts":"export { Tab } from './Tab';\nexport * from './Tab.types';\nexport * from './tabClasses';\n","node_modules/@mui/base/Tab/Tab.types.d.ts":"import { Simplify } from '@mui/types';\nimport * as React from 'react';\nimport { ButtonOwnProps } from '../Button';\nimport { SlotComponentProps } from '../utils';\nimport { UseTabRootSlotProps } from '../useTab';\nimport { PolymorphicProps } from '../utils/PolymorphicComponent';\nexport interface TabRootSlotPropsOverrides {\n}\nexport interface TabOwnProps extends Omit<ButtonOwnProps, 'onChange' | 'slots' | 'slotProps'> {\n    /**\n     * You can provide your own value. Otherwise, it falls back to the child position index.\n     */\n    value?: number | string;\n    /**\n     * Callback invoked when new value is being set.\n     */\n    onChange?: (event: React.SyntheticEvent, value: number | string) => void;\n    /**\n     * The props used for each slot inside the Tab.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'button', TabRootSlotPropsOverrides, TabOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Tab.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: TabSlots;\n}\nexport interface TabSlots {\n    /**\n     * The component that renders the root.\n     * @default 'button'\n     */\n    root?: React.ElementType;\n}\nexport type TabProps<RootComponentType extends React.ElementType = TabTypeMap['defaultComponent']> = PolymorphicProps<TabTypeMap<{}, RootComponentType>, RootComponentType>;\nexport interface TabTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'button'> {\n    props: TabOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type TabOwnerState = Simplify<TabOwnProps & {\n    active: boolean;\n    disabled: boolean;\n    highlighted: boolean;\n    selected: boolean;\n}>;\nexport type TabRootSlotProps = Simplify<UseTabRootSlotProps & {\n    className?: string;\n    ref: React.Ref<any>;\n    ownerState: TabOwnerState;\n}>;\n","node_modules/@mui/base/Tab/Tab.d.ts":"import { TabTypeMap } from './Tab.types';\nimport { PolymorphicComponent } from '../utils';\n/**\n *\n * Demos:\n *\n * - [Tabs](https://mui.com/base-ui/react-tabs/)\n *\n * API:\n *\n * - [Tab API](https://mui.com/base-ui/react-tabs/components-api/#tab)\n */\ndeclare const Tab: PolymorphicComponent<TabTypeMap<{}, \"button\">>;\nexport { Tab };\n","node_modules/@mui/base/Select/selectClasses.d.ts":"export interface SelectClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the listbox element. */\n    listbox: string;\n    /** Class name applied to the popper element. */\n    popup: string;\n    /** State class applied to the root `button` element if `active={true}`. */\n    active: string;\n    /** State class applied to the root `button` element if `expanded={true}`. */\n    expanded: string;\n    /** State class applied to the root `button` element and the listbox 'ul' element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root `button` element if `focusVisible={true}`. */\n    focusVisible: string;\n}\nexport type SelectClassKey = keyof SelectClasses;\nexport declare function getSelectUtilityClass(slot: string): string;\nexport declare const selectClasses: SelectClasses;\n","node_modules/@mui/base/Select/index.d.ts":"export { Select } from './Select';\nexport * from './selectClasses';\nexport * from './Select.types';\n","node_modules/@mui/base/Select/Select.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { SelectValue, UseSelectButtonSlotProps, UseSelectListboxSlotProps } from '../useSelect';\nimport { SelectOption } from '../useOption';\nimport { PopupProps } from '../Unstable_Popup';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface SelectRootSlotPropsOverrides {\n}\nexport interface SelectListboxSlotPropsOverrides {\n}\nexport interface SelectPopupSlotPropsOverrides {\n}\nexport interface SelectOwnProps<OptionValue extends {}, Multiple extends boolean> {\n    /**\n     * A function used to determine if two options' values are equal.\n     * By default, reference equality is used.\n     *\n     * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).\n     * Therefore, it's recommented to use the default reference equality comparison whenever possible.\n     */\n    areOptionsEqual?: (a: OptionValue, b: OptionValue) => boolean;\n    /**\n     * This prop helps users to fill forms faster, especially on mobile devices.\n     * The name can be confusing, as it's more like an autofill.\n     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n     */\n    autoComplete?: string;\n    /**\n     * If `true`, the select element is focused during the first mount\n     * @default false\n     */\n    autoFocus?: boolean;\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * If `true`, the select will be initially open.\n     * @default false\n     */\n    defaultListboxOpen?: boolean;\n    /**\n     * The default selected value. Use when the component is not controlled.\n     */\n    defaultValue?: SelectValue<OptionValue, Multiple>;\n    /**\n     * If `true`, the select is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * A function to convert the currently selected value to a string.\n     * Used to set a value of a hidden input associated with the select,\n     * so that the selected value can be posted with a form.\n     */\n    getSerializedValue?: (option: SelectValue<SelectOption<OptionValue>, Multiple>) => React.InputHTMLAttributes<HTMLInputElement>['value'];\n    /**\n     * `id` attribute of the listbox element.\n     */\n    listboxId?: string;\n    /**\n     * Controls the open state of the select's listbox.\n     * @default undefined\n     */\n    listboxOpen?: boolean;\n    /**\n     * If `true`, selecting multiple values is allowed.\n     * This affects the type of the `value`, `defaultValue`, and `onChange` props.\n     *\n     * @default false\n     */\n    multiple?: Multiple;\n    /**\n     * Name of the element. For example used by the server to identify the fields in form submits.\n     */\n    name?: string;\n    /**\n     * Callback fired when an option is selected.\n     */\n    onChange?: (event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, value: SelectValue<OptionValue, Multiple>) => void;\n    /**\n     * Callback fired when the component requests to be opened.\n     * Use in controlled mode (see listboxOpen).\n     */\n    onListboxOpenChange?: (isOpen: boolean) => void;\n    /**\n     * A function used to convert the option label to a string.\n     * It's useful when labels are elements and need to be converted to plain text\n     * to enable navigation using character keys on a keyboard.\n     *\n     * @default defaultOptionStringifier\n     */\n    getOptionAsString?: (option: SelectOption<OptionValue>) => string;\n    /**\n     * Function that customizes the rendering of the selected value.\n     */\n    renderValue?: (option: SelectValue<SelectOption<OptionValue>, Multiple>) => React.ReactNode;\n    /**\n     * Text to show when there is no selected value.\n     */\n    placeholder?: React.ReactNode;\n    /**\n     * The props used for each slot inside the Input.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'button', SelectRootSlotPropsOverrides, SelectOwnerState<OptionValue, Multiple>>;\n        listbox?: SlotComponentProps<'ul', SelectListboxSlotPropsOverrides, SelectOwnerState<OptionValue, Multiple>>;\n        popup?: SlotComponentProps<'div', SelectPopupSlotPropsOverrides & PopupProps, SelectOwnerState<OptionValue, Multiple>>;\n    };\n    /**\n     * If `true`, the Select cannot be empty when submitting form.\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * The components used for each slot inside the Select.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: SelectSlots;\n    /**\n     * The selected value.\n     * Set to `null` to deselect all options.\n     */\n    value?: SelectValue<OptionValue, Multiple>;\n}\nexport interface SelectSlots {\n    /**\n     * The component that renders the root.\n     * @default 'button'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the listbox.\n     * @default 'ul'\n     */\n    listbox?: React.ElementType;\n    /**\n     * The component that wraps the popup.\n     * @default 'div'\n     */\n    popup?: React.ElementType;\n}\nexport interface SelectTypeMap<OptionValue extends {}, Multiple extends boolean, AdditionalProps = {}, RootComponentType extends React.ElementType = 'button'> {\n    props: SelectOwnProps<OptionValue, Multiple> & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type SelectProps<OptionValue extends {}, Multiple extends boolean, RootComponentType extends React.ElementType = SelectTypeMap<OptionValue, Multiple>['defaultComponent']> = PolymorphicProps<SelectTypeMap<OptionValue, Multiple, {}, RootComponentType>, RootComponentType>;\nexport interface SelectType {\n    <OptionValue extends {}, Multiple extends boolean = false, RootComponentType extends React.ElementType = SelectTypeMap<OptionValue, Multiple>['defaultComponent']>(props: PolymorphicProps<SelectTypeMap<OptionValue, Multiple>, RootComponentType>): JSX.Element | null;\n    propTypes?: any;\n    displayName?: string | undefined;\n}\nexport type SelectOwnerState<OptionValue extends {}, Multiple extends boolean> = Simplify<SelectOwnProps<OptionValue, Multiple> & {\n    active: boolean;\n    disabled: boolean;\n    focusVisible: boolean;\n    open: boolean;\n}>;\nexport type SelectRootSlotProps<OptionValue extends {}, Multiple extends boolean> = Simplify<UseSelectButtonSlotProps & {\n    className?: string;\n    children?: React.ReactNode;\n    ownerState: SelectOwnerState<OptionValue, Multiple>;\n}>;\nexport type SelectListboxSlotProps<OptionValue extends {}, Multiple extends boolean> = Simplify<UseSelectListboxSlotProps & {\n    className?: string;\n    children?: React.ReactNode;\n    ownerState: SelectOwnerState<OptionValue, Multiple>;\n}>;\nexport type SelectPopupSlotProps<OptionValue extends {}, Multiple extends boolean> = {\n    anchor: PopupProps['anchor'];\n    children?: React.ReactNode;\n    className?: string;\n    keepMounted: PopupProps['keepMounted'];\n    open: PopupProps['open'];\n    ownerState: SelectOwnerState<OptionValue, Multiple>;\n    placement: PopupProps['placement'];\n};\n","node_modules/@mui/base/Select/Select.d.ts":"import { SelectType } from './Select.types';\n/**\n * The foundation for building custom-styled select components.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [Select API](https://mui.com/base-ui/react-select/components-api/#select)\n */\ndeclare const Select: SelectType;\nexport { Select };\n","node_modules/@mui/base/Portal/index.d.ts":"export { Portal } from './Portal';\nexport * from './Portal.types';\n","node_modules/@mui/base/Portal/Portal.types.d.ts":"import * as React from 'react';\nexport interface PortalProps {\n    /**\n     * The children to render into the `container`.\n     */\n    children?: React.ReactNode;\n    /**\n     * An HTML element or function that returns one.\n     * The `container` will have the portal children appended to it.\n     *\n     * You can also provide a callback, which is called in a React layout effect.\n     * This lets you set the container from a ref, and also makes server-side rendering possible.\n     *\n     * By default, it uses the body of the top-level document object,\n     * so it's simply `document.body` most of the time.\n     */\n    container?: Element | (() => Element | null) | null;\n    /**\n     * The `children` will be under the DOM hierarchy of the parent component.\n     * @default false\n     */\n    disablePortal?: boolean;\n}\n","node_modules/@mui/base/Portal/Portal.d.ts":"import * as React from 'react';\nimport { PortalProps } from './Portal.types';\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * Demos:\n *\n * - [Portal](https://mui.com/base-ui/react-portal/)\n *\n * API:\n *\n * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)\n */\ndeclare const Portal: React.ForwardRefExoticComponent<PortalProps & React.RefAttributes<Element>>;\nexport { Portal };\n","node_modules/@mui/base/Popper/popperClasses.d.ts":"export interface PopperClasses {\n    /** Class name applied to the root element. */\n    root: string;\n}\nexport type PopperClassKey = keyof PopperClasses;\nexport declare function getPopperUtilityClass(slot: string): string;\nexport declare const popperClasses: PopperClasses;\n","node_modules/@mui/base/Popper/index.d.ts":"export { Popper } from './Popper';\nexport type { PopperPlacementType, PopperTransitionProps, PopperChildrenProps, PopperOwnProps, PopperOwnerState, PopperTypeMap, PopperProps, PopperRootSlotProps, PopperRootSlotPropsOverrides, } from './Popper.types';\nexport { popperClasses, getPopperUtilityClass } from './popperClasses';\nexport type { PopperClassKey, PopperClasses } from './popperClasses';\n","node_modules/@mui/base/Popper/Popper.types.d.ts":"import * as React from 'react';\nimport { Instance, Options, OptionsGeneric, VirtualElement } from '@popperjs/core';\nimport { PortalProps } from '../Portal';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport type PopperPlacementType = Options['placement'];\nexport interface PopperRootSlotPropsOverrides {\n}\nexport interface PopperTransitionProps {\n    in: boolean;\n    onEnter: () => void;\n    onExited: () => void;\n}\nexport interface PopperChildrenProps {\n    placement: PopperPlacementType;\n    TransitionProps?: PopperTransitionProps;\n}\nexport interface PopperOwnProps {\n    /**\n     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),\n     * or a function that returns either.\n     * It's used to set the position of the popper.\n     * The return value will passed as the reference object of the Popper instance.\n     */\n    anchorEl?: null | VirtualElement | HTMLElement | (() => HTMLElement) | (() => VirtualElement);\n    /**\n     * Popper render function or node.\n     */\n    children?: React.ReactNode | ((props: PopperChildrenProps) => React.ReactNode);\n    /**\n     * An HTML element or function that returns one.\n     * The `container` will have the portal children appended to it.\n     *\n     * You can also provide a callback, which is called in a React layout effect.\n     * This lets you set the container from a ref, and also makes server-side rendering possible.\n     *\n     * By default, it uses the body of the top-level document object,\n     * so it's simply `document.body` most of the time.\n     */\n    container?: PortalProps['container'];\n    /**\n     * Direction of the text.\n     * @default 'ltr'\n     */\n    direction?: 'ltr' | 'rtl';\n    /**\n     * The `children` will be under the DOM hierarchy of the parent component.\n     * @default false\n     */\n    disablePortal?: PortalProps['disablePortal'];\n    /**\n     * Always keep the children in the DOM.\n     * This prop can be useful in SEO situation or\n     * when you want to maximize the responsiveness of the Popper.\n     * @default false\n     */\n    keepMounted?: boolean;\n    /**\n     * Popper.js is based on a \"plugin-like\" architecture,\n     * most of its features are fully encapsulated \"modifiers\".\n     *\n     * A modifier is a function that is called each time Popper.js needs to\n     * compute the position of the popper.\n     * For this reason, modifiers should be very performant to avoid bottlenecks.\n     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).\n     */\n    modifiers?: Options['modifiers'];\n    /**\n     * If `true`, the component is shown.\n     */\n    open: boolean;\n    /**\n     * Popper placement.\n     * @default 'bottom'\n     */\n    placement?: PopperPlacementType;\n    /**\n     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.\n     * @default {}\n     */\n    popperOptions?: Partial<OptionsGeneric<any>>;\n    /**\n     * A ref that points to the used popper instance.\n     */\n    popperRef?: React.Ref<Instance>;\n    /**\n     * The props used for each slot inside the Popper.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', PopperRootSlotPropsOverrides, PopperOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Popper.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: PopperSlots;\n    /**\n     * Help supporting a react-transition-group/Transition component.\n     * @default false\n     */\n    transition?: boolean;\n}\nexport interface PopperSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport type PopperOwnerState = PopperOwnProps;\nexport interface PopperTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: PopperOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type PopperProps<RootComponentType extends React.ElementType = PopperTypeMap['defaultComponent']> = PolymorphicProps<PopperTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type PopperTooltipOwnProps = Omit<PopperOwnProps, 'container' | 'keepMounted' | 'transition'> & {\n    TransitionProps?: PopperTransitionProps;\n};\nexport interface PopperTooltipTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: PopperTooltipOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type PopperTooltipProps<RootComponentType extends React.ElementType = PopperTooltipTypeMap['defaultComponent']> = PolymorphicProps<PopperTooltipTypeMap<{}, RootComponentType>, RootComponentType>;\nexport interface PopperRootSlotProps {\n    className?: string;\n    ref: React.Ref<any>;\n    ownerState: PopperOwnerState;\n}\n","node_modules/@mui/base/Popper/Popper.d.ts":"import { PolymorphicComponent } from '../utils';\nimport { PopperTypeMap } from './Popper.types';\n/**\n * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.\n *\n * Demos:\n *\n * - [Popper](https://mui.com/base-ui/react-popper/)\n *\n * API:\n *\n * - [Popper API](https://mui.com/base-ui/react-popper/components-api/#popper)\n */\ndeclare const Popper: PolymorphicComponent<PopperTypeMap<{}, \"div\">>;\nexport { Popper };\n","node_modules/@mui/base/NoSsr/index.d.ts":"export { NoSsr } from './NoSsr';\nexport * from './NoSsr.types';\n","node_modules/@mui/base/NoSsr/NoSsr.types.d.ts":"import * as React from 'react';\nexport interface NoSsrProps {\n    /**\n     * You can wrap a node.\n     */\n    children?: React.ReactNode;\n    /**\n     * If `true`, the component will not only prevent server-side rendering.\n     * It will also defer the rendering of the children into a different screen frame.\n     * @default false\n     */\n    defer?: boolean;\n    /**\n     * The fallback content to display.\n     * @default null\n     */\n    fallback?: React.ReactNode;\n}\n","node_modules/@mui/base/NoSsr/NoSsr.d.ts":"/// <reference types=\"react\" />\nimport { NoSsrProps } from './NoSsr.types';\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n *\n * *   Escape hatch for broken dependencies not supporting SSR.\n * *   Improve the time-to-first paint on the client by only rendering above the fold.\n * *   Reduce the rendering time on the server.\n * *   Under too heavy server load, you can turn on service degradation.\n *\n * Demos:\n *\n * - [No SSR](https://mui.com/base-ui/react-no-ssr/)\n *\n * API:\n *\n * - [NoSsr API](https://mui.com/base-ui/react-no-ssr/components-api/#no-ssr)\n */\ndeclare function NoSsr(props: NoSsrProps): JSX.Element;\ndeclare namespace NoSsr {\n    var propTypes: any;\n}\nexport { NoSsr };\n","node_modules/@mui/base/OptionGroup/optionGroupClasses.d.ts":"export interface OptionGroupClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root `li` element if `disabled={true}`. */\n    disabled: string;\n    /** Class name applied to the label element. */\n    label: string;\n    /** Class name applied to the list element. */\n    list: string;\n}\nexport type OptionGroupClassKey = keyof OptionGroupClasses;\nexport declare function getOptionGroupUtilityClass(slot: string): string;\nexport declare const optionGroupClasses: OptionGroupClasses;\n","node_modules/@mui/base/OptionGroup/index.d.ts":"export { OptionGroup } from './OptionGroup';\nexport * from './OptionGroup.types';\nexport * from './optionGroupClasses';\n","node_modules/@mui/base/OptionGroup/OptionGroup.types.d.ts":"import * as React from 'react';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface OptionGroupRootSlotPropsOverrides {\n}\nexport interface OptionGroupLabelSlotPropsOverrides {\n}\nexport interface OptionGroupListSlotPropsOverrides {\n}\nexport interface OptionGroupOwnProps {\n    /**\n     * The human-readable description of the group.\n     */\n    label?: React.ReactNode;\n    className?: string;\n    children?: React.ReactNode;\n    /**\n     * If `true` all the options in the group will be disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * The components used for each slot inside the OptionGroup.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: OptionGroupSlots;\n    /**\n     * The props used for each slot inside the Input.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'li', OptionGroupRootSlotPropsOverrides, OptionGroupOwnerState>;\n        label?: SlotComponentProps<'span', OptionGroupLabelSlotPropsOverrides, OptionGroupOwnerState>;\n        list?: SlotComponentProps<'ul', OptionGroupListSlotPropsOverrides, OptionGroupOwnerState>;\n    };\n}\nexport interface OptionGroupSlots {\n    /**\n     * The component that renders the root.\n     * @default 'li'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the label.\n     * @default 'span'\n     */\n    label?: React.ElementType;\n    /**\n     * The component that renders the list.\n     * @default 'ul'\n     */\n    list?: React.ElementType;\n}\nexport interface OptionGroupTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'li'> {\n    props: OptionGroupOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type OptionGroupProps<RootComponentType extends React.ElementType = OptionGroupTypeMap['defaultComponent']> = PolymorphicProps<OptionGroupTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type OptionGroupOwnerState = OptionGroupOwnProps;\nexport type OptionGroupRootSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: OptionGroupOwnerState;\n    ref: React.Ref<HTMLLIElement>;\n};\nexport type OptionGroupLabelSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: OptionGroupOwnerState;\n};\nexport type OptionGroupListSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: OptionGroupOwnerState;\n};\n","node_modules/@mui/base/OptionGroup/OptionGroup.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { OptionGroupTypeMap } from './OptionGroup.types';\n/**\n * An unstyled option group to be used within a Select.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [OptionGroup API](https://mui.com/base-ui/react-select/components-api/#option-group)\n */\ndeclare const OptionGroup: PolymorphicComponent<OptionGroupTypeMap<{}, \"li\">>;\nexport { OptionGroup };\n","node_modules/@mui/base/Option/optionClasses.d.ts":"export interface OptionClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root `li` element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root `li` element if `selected={true}`. */\n    selected: string;\n    /** State class applied to the root `li` element if `highlighted={true}`. */\n    highlighted: string;\n}\nexport type OptionClassKey = keyof OptionClasses;\nexport declare function getOptionUtilityClass(slot: string): string;\nexport declare const optionClasses: OptionClasses;\n","node_modules/@mui/base/Option/index.d.ts":"export * from './Option';\nexport * from './Option.types';\nexport * from './optionClasses';\n","node_modules/@mui/base/Option/Option.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { UseOptionRootSlotProps } from '../useOption';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface OptionRootSlotPropsOverrides {\n}\nexport interface OptionOwnProps<OptionValue> {\n    /**\n     * The value of the option.\n     */\n    value: OptionValue;\n    children?: React.ReactNode;\n    /**\n     * If `true`, the option will be disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    className?: string;\n    /**\n     * The props used for each slot inside the Option.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'li', OptionRootSlotPropsOverrides, OptionOwnerState<OptionValue>>;\n    };\n    /**\n     * The components used for each slot inside the Option.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: OptionSlots;\n    /**\n     * A text representation of the option's content.\n     * Used for keyboard text navigation matching.\n     */\n    label?: string;\n}\nexport interface OptionSlots {\n    /**\n     * The component that renders the root.\n     * @default 'li'\n     */\n    root?: React.ElementType;\n}\nexport interface OptionTypeMap<OptionValue, AdditionalProps = {}, RootComponentType extends React.ElementType = 'li'> {\n    props: OptionOwnProps<OptionValue> & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type OptionProps<OptionValue, RootComponentType extends React.ElementType = OptionTypeMap<OptionValue>['defaultComponent']> = PolymorphicProps<OptionTypeMap<OptionValue, {}, RootComponentType>, RootComponentType>;\nexport interface OptionType {\n    <OptionValue, RootComponentType extends React.ElementType = OptionTypeMap<OptionValue>['defaultComponent']>(props: PolymorphicProps<OptionTypeMap<OptionValue>, RootComponentType>): JSX.Element | null;\n    propTypes?: any;\n    displayName?: string | undefined;\n}\nexport type OptionOwnerState<OptionValue> = Simplify<OptionOwnProps<OptionValue> & {\n    selected: boolean;\n    highlighted: boolean;\n    index: number;\n}>;\nexport type OptionRootSlotProps<OptionValue> = Simplify<UseOptionRootSlotProps & {\n    children?: React.ReactNode;\n    className: string;\n    ref: React.Ref<HTMLElement>;\n    ownerState: OptionOwnerState<OptionValue>;\n}>;\n","node_modules/@mui/base/Option/Option.d.ts":"import { OptionType } from './Option.types';\n/**\n * An unstyled option to be used within a Select.\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/)\n *\n * API:\n *\n * - [Option API](https://mui.com/base-ui/react-select/components-api/#option)\n */\ndeclare const Option: OptionType;\nexport { Option };\n","node_modules/@mui/base/Modal/modalClasses.d.ts":"export interface ModalClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if the `Modal` has exited. */\n    hidden: string;\n    /** Class name applied to the backdrop element. */\n    backdrop: string;\n}\nexport type ModalClassKey = keyof ModalClasses;\nexport declare function getModalUtilityClass(slot: string): string;\nexport declare const modalClasses: ModalClasses;\n","node_modules/@mui/base/Modal/index.d.ts":"export { Modal } from './Modal';\nexport * from './Modal.types';\nexport * from './modalClasses';\n","node_modules/@mui/base/Modal/Modal.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { PortalProps } from '../Portal';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface ModalRootSlotPropsOverrides {\n}\nexport interface ModalBackdropSlotPropsOverrides {\n}\nexport interface ModalOwnProps {\n    /**\n     * A single child content element.\n     */\n    children: React.ReactElement;\n    /**\n     * When set to true the Modal waits until a nested Transition is completed before closing.\n     * @default false\n     */\n    closeAfterTransition?: boolean;\n    /**\n     * An HTML element or function that returns one.\n     * The `container` will have the portal children appended to it.\n     *\n     * You can also provide a callback, which is called in a React layout effect.\n     * This lets you set the container from a ref, and also makes server-side rendering possible.\n     *\n     * By default, it uses the body of the top-level document object,\n     * so it's simply `document.body` most of the time.\n     */\n    container?: PortalProps['container'];\n    /**\n     * If `true`, the modal will not automatically shift focus to itself when it opens, and\n     * replace it to the last focused element when it closes.\n     * This also works correctly with any modal children that have the `disableAutoFocus` prop.\n     *\n     * Generally this should never be set to `true` as it makes the modal less\n     * accessible to assistive technologies, like screen readers.\n     * @default false\n     */\n    disableAutoFocus?: boolean;\n    /**\n     * If `true`, the modal will not prevent focus from leaving the modal while open.\n     *\n     * Generally this should never be set to `true` as it makes the modal less\n     * accessible to assistive technologies, like screen readers.\n     * @default false\n     */\n    disableEnforceFocus?: boolean;\n    /**\n     * If `true`, hitting escape will not fire the `onClose` callback.\n     * @default false\n     */\n    disableEscapeKeyDown?: boolean;\n    /**\n     * The `children` will be under the DOM hierarchy of the parent component.\n     * @default false\n     */\n    disablePortal?: PortalProps['disablePortal'];\n    /**\n     * If `true`, the modal will not restore focus to previously focused element once\n     * modal is hidden or unmounted.\n     * @default false\n     */\n    disableRestoreFocus?: boolean;\n    /**\n     * Disable the scroll lock behavior.\n     * @default false\n     */\n    disableScrollLock?: boolean;\n    /**\n     * If `true`, the backdrop is not rendered.\n     * @default false\n     */\n    hideBackdrop?: boolean;\n    /**\n     * Always keep the children in the DOM.\n     * This prop can be useful in SEO situation or\n     * when you want to maximize the responsiveness of the Modal.\n     * @default false\n     */\n    keepMounted?: boolean;\n    /**\n     * Callback fired when the backdrop is clicked.\n     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.\n     */\n    onBackdropClick?: React.ReactEventHandler<{}>;\n    /**\n     * Callback fired when the component requests to be closed.\n     * The `reason` parameter can optionally be used to control the response to `onClose`.\n     *\n     * @param {object} event The event source of the callback.\n     * @param {string} reason Can be: `\"escapeKeyDown\"`, `\"backdropClick\"`.\n     */\n    onClose?: {\n        bivarianceHack(event: {}, reason: 'backdropClick' | 'escapeKeyDown'): void;\n    }['bivarianceHack'];\n    /**\n     * A function called when a transition enters.\n     */\n    onTransitionEnter?: () => void;\n    /**\n     * A function called when a transition has exited.\n     */\n    onTransitionExited?: () => void;\n    /**\n     * If `true`, the component is shown.\n     */\n    open: boolean;\n    /**\n     * The props used for each slot inside the Modal.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', ModalRootSlotPropsOverrides, ModalOwnerState>;\n        backdrop?: SlotComponentProps<'div', ModalBackdropSlotPropsOverrides, ModalOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Modal.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: ModalSlots;\n}\nexport interface ModalSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the backdrop.\n     */\n    backdrop?: React.ElementType;\n}\nexport interface ModalTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: ModalOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type ModalProps<RootComponentType extends React.ElementType = ModalTypeMap['defaultComponent']> = PolymorphicProps<ModalTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type ModalOwnerState = Simplify<ModalOwnProps & {\n    closeAfterTransition: boolean;\n    disableAutoFocus: boolean;\n    disableEnforceFocus: boolean;\n    disableEscapeKeyDown: boolean;\n    disablePortal: boolean;\n    disableRestoreFocus: boolean;\n    disableScrollLock: boolean;\n    exited: boolean;\n    hideBackdrop: boolean;\n    keepMounted: boolean;\n}>;\nexport interface ModalRootSlotProps {\n    children: React.ReactNode;\n    className?: string;\n    onKeyDown: React.KeyboardEventHandler;\n    ownerState: ModalOwnerState;\n    role: React.AriaRole;\n}\nexport interface ModalBackdropSlotProps {\n    'aria-hidden': React.AriaAttributes['aria-hidden'];\n    children?: React.ReactNode;\n    onClick: React.MouseEventHandler;\n    open: boolean;\n    ownerState: ModalOwnerState;\n}\n","node_modules/@mui/base/Modal/Modal.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { ModalTypeMap } from './Modal.types';\n/**\n * Modal is a lower-level construct that is leveraged by the following components:\n *\n * *   [Dialog](https://mui.com/material-ui/api/dialog/)\n * *   [Drawer](https://mui.com/material-ui/api/drawer/)\n * *   [Menu](https://mui.com/material-ui/api/menu/)\n * *   [Popover](https://mui.com/material-ui/api/popover/)\n *\n * If you are creating a modal dialog, you probably want to use the [Dialog](https://mui.com/material-ui/api/dialog/) component\n * rather than directly using Modal.\n *\n * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).\n *\n * Demos:\n *\n * - [Modal](https://mui.com/base-ui/react-modal/)\n *\n * API:\n *\n * - [Modal API](https://mui.com/base-ui/react-modal/components-api/#modal)\n */\ndeclare const Modal: PolymorphicComponent<ModalTypeMap<{}, \"div\">>;\nexport { Modal };\n","node_modules/@mui/base/MenuItem/menuItemClasses.d.ts":"export interface MenuItemClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root `button` element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root `button` element if `focusVisible={true}`. */\n    focusVisible: string;\n}\nexport type MenuItemClassKey = keyof MenuItemClasses;\nexport declare function getMenuItemUtilityClass(slot: string): string;\nexport declare const menuItemClasses: MenuItemClasses;\n","node_modules/@mui/base/MenuItem/index.d.ts":"export * from './MenuItem';\nexport * from './MenuItem.types';\nexport * from './menuItemClasses';\n","node_modules/@mui/base/MenuItem/MenuItem.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nimport { UseMenuItemRootSlotProps } from '../useMenuItem';\nexport interface MenuItemRootSlotPropsOverrides {\n}\nexport type MenuItemOwnerState = Simplify<MenuItemOwnProps & {\n    disabled: boolean;\n    focusVisible: boolean;\n    highlighted: boolean;\n}>;\nexport interface MenuItemOwnProps {\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: React.MouseEventHandler<HTMLElement>;\n    /**\n     * If `true`, the menu item will be disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * The components used for each slot inside the MenuItem.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: MenuItemSlots;\n    /**\n     * The props used for each slot inside the MenuItem.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'li', MenuItemRootSlotPropsOverrides, MenuItemOwnerState>;\n    };\n    /**\n     * A text representation of the menu item's content.\n     * Used for keyboard text navigation matching.\n     */\n    label?: string;\n    /**\n     * If `true`, the menu item won't receive focus when the mouse moves over it.\n     *\n     * @default false\n     */\n    disableFocusOnHover?: boolean;\n}\nexport interface MenuItemSlots {\n    /**\n     * The component that renders the root.\n     * @default 'li'\n     */\n    root?: React.ElementType;\n}\nexport interface MenuItemTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'li'> {\n    props: MenuItemOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type MenuItemProps<RootComponentType extends React.ElementType = MenuItemTypeMap['defaultComponent']> = PolymorphicProps<MenuItemTypeMap<{}, RootComponentType>, RootComponentType>;\nexport interface MenuItemState {\n    disabled: boolean;\n    highlighted: boolean;\n}\nexport type MenuItemRootSlotProps = Simplify<UseMenuItemRootSlotProps & {\n    children?: React.ReactNode;\n    className: string;\n    ref: React.Ref<HTMLElement>;\n    ownerState: MenuItemOwnerState;\n}>;\n","node_modules/@mui/base/MenuItem/MenuItem.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { MenuItemTypeMap } from './MenuItem.types';\n/**\n * An unstyled menu item to be used within a Menu.\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [MenuItem API](https://mui.com/base-ui/react-menu/components-api/#menu-item)\n */\ndeclare const MenuItem: PolymorphicComponent<MenuItemTypeMap<{}, \"li\">>;\nexport { MenuItem };\n","node_modules/@mui/base/Menu/menuClasses.d.ts":"export interface MenuClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the listbox element. */\n    listbox: string;\n    /** State class applied to the root element if `open={true}`. */\n    expanded: string;\n}\nexport type MenuClassKey = keyof MenuClasses;\nexport declare function getMenuUtilityClass(slot: string): string;\nexport declare const menuClasses: MenuClasses;\n","node_modules/@mui/base/Menu/index.d.ts":"export { Menu } from './Menu';\nexport * from './menuClasses';\nexport * from './Menu.types';\n","node_modules/@mui/base/Menu/Menu.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nimport { UseMenuListboxSlotProps } from '../useMenu';\nimport { ListAction } from '../useList';\nimport { PopupProps } from '../Unstable_Popup';\nexport interface MenuRootSlotPropsOverrides {\n}\nexport interface MenuListboxSlotPropsOverrides {\n}\nexport interface MenuActions {\n    /**\n     * Dispatches an action that can cause a change to the menu's internal state.\n     */\n    dispatch: (action: ListAction<string>) => void;\n    /**\n     * Resets the highlighted item.\n     */\n    resetHighlight: () => void;\n}\nexport interface MenuOwnProps {\n    /**\n     * A ref with imperative actions that can be performed on the menu.\n     */\n    actions?: React.Ref<MenuActions>;\n    /**\n     * The element based on which the menu is positioned.\n     */\n    anchor?: PopupProps['anchor'];\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * Function called when the items displayed in the menu change.\n     */\n    onItemsChange?: (items: string[]) => void;\n    /**\n     * The props used for each slot inside the Menu.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', MenuRootSlotPropsOverrides & PopupProps, MenuOwnerState>;\n        listbox?: SlotComponentProps<'ul', MenuListboxSlotPropsOverrides, MenuOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Menu.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: MenuSlots;\n}\nexport interface MenuSlots {\n    /**\n     * The component that renders the popup element.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the listbox.\n     * @default 'ul'\n     */\n    listbox?: React.ElementType;\n}\nexport interface MenuTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: MenuOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type MenuProps<RootComponentType extends React.ElementType = MenuTypeMap['defaultComponent']> = PolymorphicProps<MenuTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type MenuOwnerState = Simplify<MenuOwnProps & {\n    open: boolean;\n}>;\nexport type MenuRootSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: MenuOwnerState;\n    ref: React.Ref<any>;\n};\nexport type MenuListboxSlotProps = UseMenuListboxSlotProps & {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: MenuOwnerState;\n};\n","node_modules/@mui/base/Menu/Menu.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { MenuTypeMap } from './Menu.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [Menu API](https://mui.com/base-ui/react-menu/components-api/#menu)\n */\ndeclare const Menu: PolymorphicComponent<MenuTypeMap<{}, \"div\">>;\nexport { Menu };\n","node_modules/@mui/base/FormControl/useFormControlContext.d.ts":"import { UseFormControlContextReturnValue } from './FormControl.types';\n/**\n *\n * Demos:\n *\n * - [Form Control](https://mui.com/base-ui/react-form-control/#hook)\n *\n * API:\n *\n * - [useFormControlContext API](https://mui.com/base-ui/react-form-control/hooks-api/#use-form-control-context)\n */\nexport declare function useFormControlContext(): UseFormControlContextReturnValue | undefined;\n","node_modules/@mui/base/FormControl/index.d.ts":"export { FormControl } from './FormControl';\nexport { FormControlContext } from './FormControlContext';\nexport * from './FormControl.types';\nexport * from './formControlClasses';\nexport { useFormControlContext } from './useFormControlContext';\n","node_modules/@mui/base/FormControl/formControlClasses.d.ts":"export interface FormControlClasses {\n    /** Class applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** State class applied to the root element if the inner input has value. */\n    filled: string;\n    /** State class applied to the root element if the inner input is focused. */\n    focused: string;\n    /** State class applied to the root element if `required={true}`. */\n    required: string;\n}\nexport type FormControlClassKey = keyof FormControlClasses;\nexport declare function getFormControlUtilityClass(slot: string): string;\nexport declare const formControlClasses: FormControlClasses;\n","node_modules/@mui/base/FormControl/FormControlContext.d.ts":"import * as React from 'react';\nimport { FormControlState } from './FormControl.types';\n/**\n * @ignore - internal component.\n */\ndeclare const FormControlContext: React.Context<FormControlState | undefined>;\nexport { FormControlContext };\n","node_modules/@mui/base/FormControl/FormControl.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport type NativeFormControlElement = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\nexport interface FormControlRootSlotPropsOverrides {\n}\nexport interface FormControlOwnProps {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode | ((state: FormControlState) => React.ReactNode);\n    /**\n     * Class name applied to the root element.\n     */\n    className?: string;\n    defaultValue?: unknown;\n    /**\n     * If `true`, the label, input and helper text should be displayed in a disabled state.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, the label is displayed in an error state.\n     * @default false\n     */\n    error?: boolean;\n    /**\n     * Callback fired when the form element's value is modified.\n     */\n    onChange?: React.ChangeEventHandler<NativeFormControlElement>;\n    /**\n     * If `true`, the label will indicate that the `input` is required.\n     * @default false\n     */\n    required?: boolean;\n    /**\n     * The props used for each slot inside the FormControl.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', FormControlRootSlotPropsOverrides, FormControlOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the FormControl.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: FormControlSlots;\n    /**\n     * The value of the form element.\n     */\n    value?: unknown;\n}\nexport interface FormControlSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n}\nexport interface FormControlTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: FormControlOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type FormControlProps<RootComponentType extends React.ElementType = FormControlTypeMap['defaultComponent']> = PolymorphicProps<FormControlTypeMap<{}, RootComponentType>, RootComponentType>;\ntype NonOptionalOwnerState = 'disabled' | 'error' | 'required';\nexport type FormControlOwnerState = Simplify<Omit<FormControlOwnProps, NonOptionalOwnerState> & Required<Pick<FormControlProps, NonOptionalOwnerState>> & {\n    filled: boolean;\n    focused: boolean;\n}>;\nexport type FormControlState = {\n    /**\n     * If `true`, the label, input and helper text should be displayed in a disabled state.\n     */\n    disabled: boolean;\n    /**\n     * If `true`, the label is displayed in an error state.\n     */\n    error: boolean;\n    /**\n     * If `true`, the form element has some value.\n     */\n    filled: boolean;\n    /**\n     * If `true`, the form element is focused and not disabled.\n     */\n    focused: boolean;\n    /**\n     * Callback fired when the form element has lost focus.\n     */\n    onBlur: () => void;\n    /**\n     * Callback fired when the form element's value is modified.\n     */\n    onChange: React.ChangeEventHandler<NativeFormControlElement>;\n    /**\n     * Callback fired when the form element receives focus.\n     */\n    onFocus: () => void;\n    /**\n     * If `true`, the label will indicate that the `input` is required.\n     */\n    required: boolean;\n    /**\n     * The value of the form element.\n     */\n    value: unknown;\n};\nexport type FormControlRootSlotProps = {\n    children: React.ReactNode | ((state: FormControlState) => React.ReactNode);\n    className?: string;\n    ownerState: FormControlOwnerState;\n};\nexport interface UseFormControlContextReturnValue extends FormControlState {\n}\nexport {};\n","node_modules/@mui/base/FormControl/FormControl.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { FormControlTypeMap } from './FormControl.types';\n/**\n * Provides context such as filled/focused/error/required for form inputs.\n * Relying on the context provides high flexibility and ensures that the state always stays\n * consistent across the children of the `FormControl`.\n * This context is used by the following components:\n *\n * *   FormLabel\n * *   FormHelperText\n * *   Input\n * *   InputLabel\n *\n * You can find one composition example below and more going to [the demos](https://mui.com/material-ui/react-text-field/#components).\n *\n * ```jsx\n * <FormControl>\n *   <InputLabel htmlFor=\"my-input\">Email address</InputLabel>\n *   <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\n *   <FormHelperText id=\"my-helper-text\">We'll never share your email.</FormHelperText>\n * </FormControl>\n * ```\n *\n * ⚠️ Only one `Input` can be used within a FormControl because it create visual inconsistencies.\n * For instance, only one input can be focused at the same time, the state shouldn't be shared.\n *\n * Demos:\n *\n * - [Form Control](https://mui.com/base-ui/react-form-control/)\n * - [Input](https://mui.com/joy-ui/react-input/)\n * - [Checkbox](https://mui.com/material-ui/react-checkbox/)\n * - [Radio Group](https://mui.com/material-ui/react-radio-button/)\n * - [Switch](https://mui.com/material-ui/react-switch/)\n * - [Text Field](https://mui.com/material-ui/react-text-field/)\n *\n * API:\n *\n * - [FormControl API](https://mui.com/base-ui/react-form-control/components-api/#form-control)\n */\ndeclare const FormControl: PolymorphicComponent<FormControlTypeMap<{}, \"div\">>;\nexport { FormControl };\n","node_modules/@mui/base/Input/inputClasses.d.ts":"export interface InputClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: string;\n    /** Class name applied to the root element if `startAdornment` is provided. */\n    adornedStart: string;\n    /** Class name applied to the root element if `endAdornment` is provided. */\n    adornedEnd: string;\n    /** State class applied to the root element if the component is focused. */\n    focused: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if `error={true}`. */\n    error: string;\n    /** Class name applied to the root element if `multiline={true}`. */\n    multiline: string;\n    /** Class name applied to the input element. */\n    input: string;\n    /** Class name applied to the input element if `multiline={true}`. */\n    inputMultiline: string;\n    /** Class name applied to the input element if `type=\"search\"`. */\n    inputTypeSearch: string;\n}\nexport type InputClassKey = keyof InputClasses;\nexport declare function getInputUtilityClass(slot: string): string;\nexport declare const inputClasses: InputClasses;\n","node_modules/@mui/base/Input/index.d.ts":"export { Input } from './Input';\nexport * from './Input.types';\nexport * from './inputClasses';\n","node_modules/@mui/base/Input/Input.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { FormControlState } from '../FormControl';\nimport { UseInputParameters, UseInputRootSlotProps } from '../useInput';\nimport { PolymorphicProps, SlotComponentProps } from '../utils';\nexport interface InputRootSlotPropsOverrides {\n}\nexport interface InputInputSlotPropsOverrides {\n}\nexport interface SingleLineInputProps {\n    /**\n     * Maximum number of rows to display when multiline option is set to true.\n     */\n    maxRows?: undefined;\n    /**\n     * Minimum number of rows to display when multiline option is set to true.\n     */\n    minRows?: undefined;\n    /**\n     * If `true`, a `textarea` element is rendered.\n     * @default false\n     */\n    multiline?: false;\n    /**\n     * Number of rows to display when multiline option is set to true.\n     */\n    rows?: undefined;\n    /**\n     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n     * @default 'text'\n     */\n    type?: React.HTMLInputTypeAttribute;\n}\nexport interface MultiLineInputProps {\n    /**\n     * Maximum number of rows to display when multiline option is set to true.\n     */\n    maxRows?: number;\n    /**\n     * Minimum number of rows to display when multiline option is set to true.\n     */\n    minRows?: number;\n    /**\n     * If `true`, a `textarea` element is rendered.\n     * @default false\n     */\n    multiline: true;\n    /**\n     * Number of rows to display when multiline option is set to true.\n     */\n    rows?: number;\n    /**\n     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).\n     * @default 'text'\n     */\n    type?: undefined;\n}\nexport type InputOwnProps = (SingleLineInputProps | MultiLineInputProps) & Omit<UseInputParameters, 'error'> & {\n    'aria-describedby'?: string;\n    'aria-label'?: string;\n    'aria-labelledby'?: string;\n    /**\n     * This prop helps users to fill forms faster, especially on mobile devices.\n     * The name can be confusing, as it's more like an autofill.\n     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).\n     */\n    autoComplete?: string;\n    /**\n     * If `true`, the `input` element is focused during the first mount.\n     */\n    autoFocus?: boolean;\n    /**\n     * Class name applied to the root element.\n     */\n    className?: string;\n    /**\n     * Trailing adornment for this input.\n     */\n    endAdornment?: React.ReactNode;\n    /**\n     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `baseui--error` class on the root element.\n     * The prop defaults to the value (`false`) inherited from the parent FormControl component.\n     */\n    error?: boolean;\n    /**\n     * The id of the `input` element.\n     */\n    id?: string;\n    /**\n     * Name attribute of the `input` element.\n     */\n    name?: string;\n    onKeyDown?: React.KeyboardEventHandler<HTMLInputElement>;\n    onKeyUp?: React.KeyboardEventHandler<HTMLInputElement>;\n    /**\n     * The short hint displayed in the `input` before the user enters a value.\n     */\n    placeholder?: string;\n    /**\n     * It prevents the user from changing the value of the field\n     * (not from interacting with the field).\n     */\n    readOnly?: boolean;\n    /**\n     * The props used for each slot inside the Input.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'div', InputRootSlotPropsOverrides, InputOwnerState>;\n        input?: SlotComponentProps<'input', InputInputSlotPropsOverrides, InputOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the InputBase.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: InputSlots;\n    /**\n     * Leading adornment for this input.\n     */\n    startAdornment?: React.ReactNode;\n    /**\n     * The value of the `input` element, required for a controlled component.\n     */\n    value?: unknown;\n};\nexport interface InputSlots {\n    /**\n     * The component that renders the root.\n     * @default 'div'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the input.\n     * @default 'input'\n     */\n    input?: React.ElementType;\n    /**\n     * The component that renders the textarea.\n     * @default 'textarea'\n     */\n    textarea?: React.ElementType;\n}\nexport interface InputTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'div'> {\n    props: InputOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type InputProps<RootComponentType extends React.ElementType = InputTypeMap['defaultComponent']> = PolymorphicProps<InputTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type InputOwnerState = Simplify<InputOwnProps & {\n    formControlContext: FormControlState | undefined;\n    focused: boolean;\n    type: React.InputHTMLAttributes<HTMLInputElement>['type'] | undefined;\n}>;\nexport type InputRootSlotProps = Simplify<UseInputRootSlotProps & {\n    ownerState: InputOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n    ref?: React.Ref<HTMLDivElement>;\n}>;\nexport type InputInputSlotProps = Simplify<Omit<UseInputRootSlotProps, 'onClick'> & {\n    'aria-describedby': React.AriaAttributes['aria-describedby'];\n    'aria-label': React.AriaAttributes['aria-label'];\n    'aria-labelledby': React.AriaAttributes['aria-labelledby'];\n    autoComplete: string | undefined;\n    autoFocus: boolean | undefined;\n    className?: string;\n    id: string | undefined;\n    name: string | undefined;\n    onKeyDown: React.KeyboardEventHandler<HTMLInputElement> | undefined;\n    onKeyUp: React.KeyboardEventHandler<HTMLInputElement> | undefined;\n    ownerState: InputOwnerState;\n    placeholder: string | undefined;\n    readOnly: boolean | undefined;\n    ref: React.Ref<HTMLInputElement>;\n    type: React.HTMLInputTypeAttribute | undefined;\n}>;\n","node_modules/@mui/base/Input/Input.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { InputTypeMap } from './Input.types';\n/**\n *\n * Demos:\n *\n * - [Input](https://mui.com/base-ui/react-input/)\n *\n * API:\n *\n * - [Input API](https://mui.com/base-ui/react-input/components-api/#input)\n */\ndeclare const Input: PolymorphicComponent<InputTypeMap<{}, \"div\">>;\nexport { Input };\n","node_modules/@mui/base/FocusTrap/index.d.ts":"export { FocusTrap } from './FocusTrap';\nexport * from './FocusTrap.types';\n","node_modules/@mui/base/FocusTrap/FocusTrap.types.d.ts":"import * as React from 'react';\nexport interface FocusTrapProps {\n    /**\n     * If `true`, focus is locked.\n     */\n    open: boolean;\n    /**\n     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.\n     * For instance, you can provide the \"tabbable\" npm dependency.\n     * @param {HTMLElement} root\n     */\n    getTabbable?: (root: HTMLElement) => ReadonlyArray<string>;\n    /**\n     * This prop extends the `open` prop.\n     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.\n     * This prop should be memoized.\n     * It can be used to support multiple focus trap mounted at the same time.\n     * @default function defaultIsEnabled(): boolean {\n     *   return true;\n     * }\n     */\n    isEnabled?: () => boolean;\n    /**\n     * A single child content element.\n     */\n    children: React.ReactElement;\n    /**\n     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and\n     * replace it to the last focused element when it closes.\n     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.\n     *\n     * Generally this should never be set to `true` as it makes the focus trap less\n     * accessible to assistive technologies, like screen readers.\n     * @default false\n     */\n    disableAutoFocus?: boolean;\n    /**\n     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.\n     *\n     * Generally this should never be set to `true` as it makes the focus trap less\n     * accessible to assistive technologies, like screen readers.\n     * @default false\n     */\n    disableEnforceFocus?: boolean;\n    /**\n     * If `true`, the focus trap will not restore focus to previously focused element once\n     * focus trap is hidden or unmounted.\n     * @default false\n     */\n    disableRestoreFocus?: boolean;\n}\n","node_modules/@mui/base/FocusTrap/FocusTrap.d.ts":"/// <reference types=\"react\" />\nimport { FocusTrapProps } from './FocusTrap.types';\n/**\n * Utility component that locks focus inside the component.\n *\n * Demos:\n *\n * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)\n *\n * API:\n *\n * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)\n */\ndeclare function FocusTrap(props: FocusTrapProps): JSX.Element;\ndeclare namespace FocusTrap {\n    var propTypes: any;\n}\nexport { FocusTrap };\n","node_modules/@mui/base/ClickAwayListener/index.d.ts":"export * from './ClickAwayListener';\n","node_modules/@mui/base/ClickAwayListener/ClickAwayListener.d.ts":"import * as React from 'react';\ntype ClickAwayMouseEventHandler = 'onClick' | 'onMouseDown' | 'onMouseUp' | 'onPointerDown' | 'onPointerUp';\ntype ClickAwayTouchEventHandler = 'onTouchStart' | 'onTouchEnd';\nexport interface ClickAwayListenerProps {\n    /**\n     * The wrapped element.\n     */\n    children: React.ReactElement;\n    /**\n     * If `true`, the React tree is ignored and only the DOM tree is considered.\n     * This prop changes how portaled elements are handled.\n     * @default false\n     */\n    disableReactTree?: boolean;\n    /**\n     * The mouse event to listen to. You can disable the listener by providing `false`.\n     * @default 'onClick'\n     */\n    mouseEvent?: ClickAwayMouseEventHandler | false;\n    /**\n     * Callback fired when a \"click away\" event is detected.\n     */\n    onClickAway: (event: MouseEvent | TouchEvent) => void;\n    /**\n     * The touch event to listen to. You can disable the listener by providing `false`.\n     * @default 'onTouchEnd'\n     */\n    touchEvent?: ClickAwayTouchEventHandler | false;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/base-ui/react-click-away-listener/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/base-ui/react-click-away-listener/components-api/#click-away-listener)\n */\ndeclare function ClickAwayListener(props: ClickAwayListenerProps): JSX.Element;\ndeclare namespace ClickAwayListener {\n    var propTypes: any;\n}\nexport { ClickAwayListener };\n","node_modules/@mui/base/Dropdown/index.d.ts":"export * from './Dropdown';\nexport * from './Dropdown.types';\n","node_modules/@mui/base/Dropdown/Dropdown.types.d.ts":"/// <reference types=\"react\" />\nexport interface DropdownProps {\n    children: React.ReactNode;\n    /**\n     * If `true`, the dropdown is initially open.\n     */\n    defaultOpen?: boolean;\n    /**\n     * Callback fired when the component requests to be opened or closed.\n     */\n    onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, open: boolean) => void;\n    /**\n     * Allows to control whether the dropdown is open.\n     * This is a controlled counterpart of `defaultOpen`.\n     */\n    open?: boolean;\n}\n","node_modules/@mui/base/Dropdown/Dropdown.d.ts":"import * as React from 'react';\nimport { DropdownProps } from './Dropdown.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [Dropdown API](https://mui.com/base-ui/react-menu/components-api/#dropdown)\n */\ndeclare function Dropdown(props: DropdownProps): React.JSX.Element;\ndeclare namespace Dropdown {\n    var propTypes: any;\n}\nexport { Dropdown };\n","node_modules/@mui/base/MultiSelect/index.d.ts":"export { MultiSelect } from './MultiSelect';\n","node_modules/@mui/base/MultiSelect/MultiSelect.d.ts":"/**\n * The foundation for building custom-styled multi-selection select components.\n *\n * @deprecated The multi-select functionality is now available in the Select component. Replace <MultiSelect> with <Select multiple /> in your code.\n * @ignore - do not document.\n */\nexport declare function MultiSelect(): null;\n","node_modules/@mui/base/MenuButton/menuButtonClasses.d.ts":"export interface MenuButtonClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root element if `active={true}`. */\n    active: string;\n    /** State class applied to the root element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root element if the associated menu is open. */\n    expanded: string;\n}\nexport type MenuButtonClassKey = keyof MenuButtonClasses;\nexport declare function getMenuButtonUtilityClass(slot: string): string;\nexport declare const menuButtonClasses: MenuButtonClasses;\n","node_modules/@mui/base/MenuButton/index.d.ts":"export { MenuButton } from './MenuButton';\nexport * from './MenuButton.types';\nexport * from './menuButtonClasses';\n","node_modules/@mui/base/MenuButton/MenuButton.types.d.ts":"/// <reference types=\"react\" />\nimport { SlotComponentProps } from '../utils/types';\nexport interface MenuButtonRootSlotPropsOverrides {\n}\nexport interface MenuButtonProps {\n    children?: React.ReactNode;\n    /**\n     * Class name applied to the root element.\n     */\n    className?: string;\n    /**\n     * If `true`, the component is disabled.\n     * @default false\n     */\n    disabled?: boolean;\n    /**\n     * If `true`, allows a disabled button to receive focus.\n     * @default false\n     */\n    focusableWhenDisabled?: boolean;\n    /**\n     * Label of the button\n     */\n    label?: string;\n    /**\n     * The props used for each slot inside the MenuButton.\n     * @default {}\n     */\n    slots?: MenuButtonSlots;\n    /**\n     * The components used for each slot inside the MenuButton.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'button', MenuButtonRootSlotPropsOverrides, MenuButtonOwnerState>;\n    };\n}\nexport interface MenuButtonSlots {\n    /**\n     * The component that renders the root.\n     * @default 'button'\n     */\n    root?: React.ElementType;\n}\nexport type MenuButtonOwnerState = MenuButtonProps & {\n    active: boolean;\n    focusableWhenDisabled: boolean;\n    open: boolean;\n};\n","node_modules/@mui/base/MenuButton/MenuButton.d.ts":"import * as React from 'react';\nimport { MenuButtonProps } from './MenuButton.types';\n/**\n *\n * Demos:\n *\n * - [Menu](https://mui.com/base-ui/react-menu/)\n *\n * API:\n *\n * - [MenuButton API](https://mui.com/base-ui/react-menu/components-api/#menu-button)\n */\ndeclare const MenuButton: React.ForwardRefExoticComponent<MenuButtonProps & React.RefAttributes<HTMLElement>>;\nexport { MenuButton };\n","node_modules/@mui/base/Button/index.d.ts":"export { Button } from './Button';\nexport * from './buttonClasses';\nexport * from './Button.types';\n","node_modules/@mui/base/Button/buttonClasses.d.ts":"export interface ButtonClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** State class applied to the root `button` element if `active={true}`. */\n    active: string;\n    /** State class applied to the root `button` element if `disabled={true}`. */\n    disabled: string;\n    /** State class applied to the root `button` element if `focusVisible={true}`. */\n    focusVisible: string;\n}\nexport type ButtonClassKey = keyof ButtonClasses;\nexport declare function getButtonUtilityClass(slot: string): string;\nexport declare const buttonClasses: ButtonClasses;\n","node_modules/@mui/base/Button/Button.types.d.ts":"import * as React from 'react';\nimport { Simplify } from '@mui/types';\nimport { UseButtonParameters, UseButtonRootSlotProps } from '../useButton';\nimport { SlotComponentProps } from '../utils';\nimport { PolymorphicProps } from '../utils/PolymorphicComponent';\nexport interface ButtonActions {\n    focusVisible(): void;\n}\nexport interface ButtonRootSlotPropsOverrides {\n}\nexport interface ButtonOwnProps extends Omit<UseButtonParameters, 'rootRef'> {\n    /**\n     * A ref for imperative actions. It currently only supports `focusVisible()` action.\n     */\n    action?: React.Ref<ButtonActions>;\n    children?: React.ReactNode;\n    className?: string;\n    /**\n     * The props used for each slot inside the Button.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'button', ButtonRootSlotPropsOverrides, ButtonOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Button.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: ButtonSlots;\n    /**\n     * The HTML element that is ultimately rendered, for example 'button' or 'a'\n     * @default 'button'\n     */\n    rootElementName?: keyof HTMLElementTagNameMap;\n}\nexport interface ButtonSlots {\n    /**\n     * The component that renders the root.\n     * @default props.href || props.to ? 'a' : 'button'\n     */\n    root?: React.ElementType;\n}\nexport type ButtonProps<RootComponentType extends React.ElementType = ButtonTypeMap['defaultComponent']> = PolymorphicProps<ButtonTypeMap<{}, RootComponentType>, RootComponentType>;\nexport interface ButtonTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'button'> {\n    props: ButtonOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type ButtonOwnerState = Simplify<ButtonOwnProps & {\n    active: boolean;\n    focusVisible: boolean;\n}>;\nexport type ButtonRootSlotProps = Simplify<UseButtonRootSlotProps & {\n    ownerState: ButtonOwnerState;\n    className?: string;\n    children?: React.ReactNode;\n}>;\n","node_modules/@mui/base/Button/Button.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { ButtonTypeMap } from './Button.types';\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Button](https://mui.com/base-ui/react-button/)\n *\n * API:\n *\n * - [Button API](https://mui.com/base-ui/react-button/components-api/#button)\n */\ndeclare const Button: PolymorphicComponent<ButtonTypeMap<{}, \"button\">>;\nexport { Button };\n","node_modules/@mui/base/Badge/index.d.ts":"export { Badge } from './Badge';\nexport * from './Badge.types';\nexport * from './badgeClasses';\n","node_modules/@mui/base/Badge/badgeClasses.d.ts":"export interface BadgeClasses {\n    /** Class name applied to the root element. */\n    root: string;\n    /** Class name applied to the badge `span` element. */\n    badge: string;\n    /** State class applied to the badge `span` element if `invisible={true}`. */\n    invisible: string;\n}\nexport type BadgeClassKey = keyof BadgeClasses;\nexport declare function getBadgeUtilityClass(slot: string): string;\nexport declare const badgeClasses: BadgeClasses;\n","node_modules/@mui/base/Badge/Badge.types.d.ts":"import * as React from 'react';\nimport { OverrideProps, Simplify } from '@mui/types';\nimport { SlotComponentProps } from '../utils';\nexport interface BadgeRootSlotPropsOverrides {\n}\nexport interface BadgeBadgeSlotPropsOverrides {\n}\nexport type BadgeOwnerState = Simplify<BadgeOwnProps & {\n    badgeContent: React.ReactNode;\n    invisible: boolean;\n    max: number;\n    showZero: boolean;\n}>;\nexport interface BadgeOwnProps {\n    /**\n     * The content rendered within the badge.\n     */\n    badgeContent?: React.ReactNode;\n    /**\n     * The badge will be added relative to this node.\n     */\n    children?: React.ReactNode;\n    /**\n     * If `true`, the badge is invisible.\n     * @default false\n     */\n    invisible?: boolean;\n    /**\n     * Max count to show.\n     * @default 99\n     */\n    max?: number;\n    /**\n     * The props used for each slot inside the Badge.\n     * @default {}\n     */\n    slotProps?: {\n        root?: SlotComponentProps<'span', BadgeRootSlotPropsOverrides, BadgeOwnerState>;\n        badge?: SlotComponentProps<'span', BadgeBadgeSlotPropsOverrides, BadgeOwnerState>;\n    };\n    /**\n     * The components used for each slot inside the Badge.\n     * Either a string to use a HTML element or a component.\n     * @default {}\n     */\n    slots?: BadgeSlots;\n    /**\n     * Controls whether the badge is hidden when `badgeContent` is zero.\n     * @default false\n     */\n    showZero?: boolean;\n}\nexport interface BadgeSlots {\n    /**\n     * The component that renders the root.\n     * @default 'span'\n     */\n    root?: React.ElementType;\n    /**\n     * The component that renders the badge.\n     * @default 'span'\n     */\n    badge?: React.ElementType;\n}\nexport interface BadgeTypeMap<AdditionalProps = {}, RootComponentType extends React.ElementType = 'span'> {\n    props: BadgeOwnProps & AdditionalProps;\n    defaultComponent: RootComponentType;\n}\nexport type BadgeProps<RootComponentType extends React.ElementType = BadgeTypeMap['defaultComponent']> = OverrideProps<BadgeTypeMap<{}, RootComponentType>, RootComponentType>;\nexport type BadgeRootSlotProps = {\n    children?: React.ReactNode;\n    className?: string;\n    ownerState: BadgeOwnerState;\n    ref: React.Ref<HTMLSpanElement>;\n};\nexport type BadgeBadgeSlotProps = {\n    className?: string;\n    children?: React.ReactNode;\n    ownerState: BadgeOwnerState;\n};\n","node_modules/@mui/base/Badge/Badge.d.ts":"import { PolymorphicComponent } from '../utils/PolymorphicComponent';\nimport { BadgeTypeMap } from './Badge.types';\n/**\n *\n * Demos:\n *\n * - [Badge](https://mui.com/base-ui/react-badge/)\n *\n * API:\n *\n * - [Badge API](https://mui.com/base-ui/react-badge/components-api/#badge)\n */\ndeclare const Badge: PolymorphicComponent<BadgeTypeMap<{}, \"span\">>;\nexport { Badge };\n","node_modules/@mui/base/ClassNameGenerator/index.d.ts":"export { unstable_ClassNameGenerator } from '@mui/utils';\n","node_modules/@mui/types/package.json":"{\n  \"name\": \"@mui/types\",\n  \"version\": \"7.2.14\",\n  \"private\": false,\n  \"author\": \"MUI Team\",\n  \"description\": \"Utility types for MUI.\",\n  \"types\": \"./index.d.ts\",\n  \"files\": [\n    \"index.d.ts\",\n    \"OverridableComponentAugmentation.ts\"\n  ],\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"types\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/material-ui.git\",\n    \"directory\": \"packages/mui-types\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/material-ui/issues\"\n  },\n  \"homepage\": \"https://github.com/mui/material-ui/tree/master/packages/mui-types\",\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"directory\": \"build\"\n  },\n  \"peerDependencies\": {\n    \"@types/react\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@types/react\": {\n      \"optional\": true\n    }\n  }\n}","node_modules/@mui/types/index.d.ts":"import * as React from 'react';\n\n// disable automatic export\nexport {};\n\n/**\n * `T extends ConsistentWith<T, U>` means that where `T` has overlapping properties with\n * `U`, their value types do not conflict.\n *\n * @internal\n */\nexport type ConsistentWith<DecorationTargetProps, InjectedProps> = {\n  [P in keyof DecorationTargetProps]: P extends keyof InjectedProps\n    ? InjectedProps[P] extends DecorationTargetProps[P]\n      ? DecorationTargetProps[P]\n      : InjectedProps[P]\n    : DecorationTargetProps[P];\n};\n\n/**\n * a function that takes {component} and returns a component that passes along\n * all the props to {component} except the {InjectedProps} and will accept\n * additional {AdditionalProps}\n */\nexport type PropInjector<InjectedProps, AdditionalProps = {}> = <\n  C extends React.JSXElementConstructor<ConsistentWith<React.ComponentProps<C>, InjectedProps>>,\n>(\n  component: C,\n) => React.JSXElementConstructor<\n  DistributiveOmit<JSX.LibraryManagedAttributes<C, React.ComponentProps<C>>, keyof InjectedProps> &\n    AdditionalProps\n>;\n\n/**\n * Remove properties `K` from `T`.\n * Distributive for union types.\n *\n * @internal\n */\nexport type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;\n\n/**\n * Generate a set of string literal types with the given default record `T` and\n * override record `U`.\n *\n * If the property value was `true`, the property key will be added to the\n * string union.\n *\n * @internal\n */\nexport type OverridableStringUnion<T extends string | number, U = {}> = GenerateStringUnion<\n  Overwrite<Record<T, true>, U>\n>;\n\n/**\n * Like `T & U`, but using the value types from `U` where their properties overlap.\n *\n * @internal\n */\nexport type Overwrite<T, U> = DistributiveOmit<T, keyof U> & U;\n\ntype GenerateStringUnion<T> = Extract<\n  {\n    [Key in keyof T]: true extends T[Key] ? Key : never;\n  }[keyof T],\n  string\n>;\n\n// https://stackoverflow.com/questions/53807517/how-to-test-if-two-types-are-exactly-the-same\nexport type IfEquals<T, U, Y = unknown, N = never> =\n  (<G>() => G extends T ? 1 : 2) extends <G>() => G extends U ? 1 : 2 ? Y : N;\n\n/**\n * Issues a type error if `Expected` is not identical to `Actual`.\n *\n * `Expected` should be declared when invoking `expectType`.\n * `Actual` should almost always we be a `typeof value` statement.\n *\n * @example `expectType<number | string, typeof value>(value)`\n * TypeScript issues a type error since `value is not assignable to never`.\n * This means `typeof value` is not identical to `number | string`\n * @param actual\n */\nexport function expectType<Expected, Actual>(actual: IfEquals<Actual, Expected, Actual>): void;\n\n/**\n * A component whose root component can be controlled via a `component` prop.\n *\n * Adjusts valid props based on the type of `component`.\n */\nexport interface OverridableComponent<M extends OverridableTypeMap> {\n  // If you make any changes to this interface, please make sure to update the\n  // `OverridableComponent` type in `mui-material/src/OverridableComponent.d.ts` as well.\n  // Also, there are types in Base UI that have a similar shape to this interface\n  // (for example SelectType, OptionType, etc.).\n  <C extends React.ElementType>(\n    props: {\n      /**\n       * The component used for the root node.\n       * Either a string to use a HTML element or a component.\n       */\n      component: C;\n    } & OverrideProps<M, C>,\n  ): JSX.Element | null;\n  (props: DefaultComponentProps<M>): JSX.Element | null;\n  propTypes?: any;\n}\n\n/**\n * Props of the component if `component={Component}` is used.\n */\n// prettier-ignore\nexport type OverrideProps<\n  M extends OverridableTypeMap,\n  C extends React.ElementType\n> = (\n  & BaseProps<M>\n  & DistributiveOmit<React.ComponentPropsWithRef<C>, keyof BaseProps<M>>\n);\n\n/**\n * Props if `component={Component}` is NOT used.\n */\n// prettier-ignore\nexport type DefaultComponentProps<M extends OverridableTypeMap> =\n  & BaseProps<M>\n  & DistributiveOmit<React.ComponentPropsWithRef<M['defaultComponent']>, keyof BaseProps<M>>;\n\n/**\n * Props defined on the component.\n */\n// prettier-ignore\nexport type BaseProps<M extends OverridableTypeMap> = M['props'];\n\nexport interface OverridableTypeMap {\n  props: {};\n  defaultComponent: React.ElementType;\n}\n\n/**\n * Simplifies the display of a type (without modifying it).\n * Taken from https://effectivetypescript.com/2022/02/25/gentips-4-display/\n */\nexport type Simplify<T> = T extends Function ? T : { [K in keyof T]: T[K] };\n\n/**\n * Changes the properties K from T to required\n */\nexport type PartiallyRequired<T, K extends keyof T> = DistributiveOmit<T, K> & {\n  [P in K]-?: T[P];\n};\n","node_modules/@mui/system/package.json":"{\n  \"name\": \"@mui/system\",\n  \"version\": \"5.15.14\",\n  \"private\": false,\n  \"author\": \"MUI Team\",\n  \"description\": \"MUI System is a set of CSS utilities to help you build custom designs more efficiently. It makes it possible to rapidly lay out custom designs.\",\n  \"main\": \"./index.js\",\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"system\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/material-ui.git\",\n    \"directory\": \"packages/mui-system\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/material-ui/issues\"\n  },\n  \"homepage\": \"https://mui.com/system/getting-started/\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mui-org\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.9\",\n    \"clsx\": \"^2.1.0\",\n    \"csstype\": \"^3.1.3\",\n    \"prop-types\": \"^15.8.1\",\n    \"@mui/private-theming\": \"^5.15.14\",\n    \"@mui/types\": \"^7.2.14\",\n    \"@mui/utils\": \"^5.15.14\",\n    \"@mui/styled-engine\": \"^5.15.14\"\n  },\n  \"peerDependencies\": {\n    \"@emotion/react\": \"^11.5.0\",\n    \"@emotion/styled\": \"^11.3.0\",\n    \"@types/react\": \"^17.0.0 || ^18.0.0\",\n    \"react\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@types/react\": {\n      \"optional\": true\n    },\n    \"@emotion/react\": {\n      \"optional\": true\n    },\n    \"@emotion/styled\": {\n      \"optional\": true\n    }\n  },\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"directory\": \"build\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"module\": \"./esm/index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/system/useThemeWithoutDefault.d.ts":"export default function useThemeWithoutDefault<T = null>(defaultTheme?: T): T;\n","node_modules/@mui/system/useTheme.d.ts":"import { Theme } from './createTheme';\n\nexport default function useTheme<T = Theme>(defaultTheme?: T): T;\n","node_modules/@mui/system/styled.d.ts":"import { CreateMUIStyled } from './createStyled';\n\ndeclare const styled: CreateMUIStyled;\n\nexport default styled;\n","node_modules/@mui/system/style.d.ts":"import { CSSObject } from '@mui/styled-engine';\nimport { StyleFunction } from './Box';\n\nexport type TransformFunction = (\n  cssValue: unknown,\n  userValue: unknown,\n) => number | string | React.CSSProperties | CSSObject;\n\nexport interface StyleOptions<PropKey> {\n  cssProperty?: PropKey | keyof React.CSSProperties | false;\n  prop: PropKey;\n  /**\n   * dot access in `Theme`\n   */\n  themeKey?: string;\n  transform?: TransformFunction;\n}\nexport function style<PropKey extends string, Theme extends object>(\n  options: StyleOptions<PropKey>,\n): StyleFunction<{ [K in PropKey]?: unknown } & { theme?: Theme }> & { filterProps: string[] };\nexport function getPath<T>(obj: T, path: string | undefined, checkVars?: boolean): null | unknown;\nexport function getStyleValue(\n  themeMapping: object | ((arg: any) => any),\n  transform: TransformFunction | null,\n  propValueFinal: unknown,\n  userValue?: unknown,\n): any;\n","node_modules/@mui/system/spacing.d.ts":"import { SimpleStyleFunction, spacing, PropsFor } from './Box';\n\nexport type SpacingValueType = string | number | null | undefined;\nexport type SpacingProps = PropsFor<typeof spacing>;\nexport function createUnarySpacing<Spacing>(theme: { spacing: Spacing }): Spacing extends number\n  ? (abs: number | string) => number | number\n  : Spacing extends any[]\n    ? <Index extends number>(abs: Index | string) => Spacing[Index] | string\n    : Spacing extends (...args: unknown[]) => unknown\n      ? Spacing\n      : // warns in Dev\n        () => undefined;\n\nexport function createUnaryUnit<Spacing>(\n  theme: { spacing: Spacing },\n  themeKey: string,\n  defaultValue: Spacing,\n  propName: string,\n): Spacing extends number\n  ? (abs: SpacingValueType) => number | number\n  : Spacing extends any[]\n    ? <Index extends number>(abs: Index | string) => Spacing[Index] | string\n    : Spacing extends (...args: unknown[]) => unknown\n      ? Spacing\n      : // warns in Dev\n        () => undefined;\n\nexport const margin: SimpleStyleFunction<\n  | 'm'\n  | 'mt'\n  | 'mr'\n  | 'mb'\n  | 'ml'\n  | 'mx'\n  | 'my'\n  | 'margin'\n  | 'marginTop'\n  | 'marginRight'\n  | 'marginBottom'\n  | 'marginLeft'\n  | 'marginX'\n  | 'marginY'\n  | 'marginInline'\n  | 'marginInlineStart'\n  | 'marginInlineEnd'\n  | 'marginBlock'\n  | 'marginBlockStart'\n  | 'marginBlockEnd'\n>;\n\nexport type MarginProps = PropsFor<typeof margin>;\n\nexport const padding: SimpleStyleFunction<\n  | 'p'\n  | 'pt'\n  | 'pr'\n  | 'pb'\n  | 'pl'\n  | 'px'\n  | 'py'\n  | 'padding'\n  | 'paddingTop'\n  | 'paddingRight'\n  | 'paddingBottom'\n  | 'paddingLeft'\n  | 'paddingX'\n  | 'paddingY'\n  | 'paddingInline'\n  | 'paddingInlineStart'\n  | 'paddingInlineEnd'\n  | 'paddingBlock'\n  | 'paddingBlockStart'\n  | 'paddingBlockEnd'\n>;\n\nexport function getValue(\n  transformer: (prop: SpacingValueType) => SpacingValueType,\n  propValue: SpacingValueType,\n): SpacingValueType;\n\nexport type PaddingProps = PropsFor<typeof padding>;\n","node_modules/@mui/system/responsivePropType.d.ts":"declare const responsivePropType: object;\n\nexport default responsivePropType;\n","node_modules/@mui/system/propsToClassKey.d.ts":"export default function propsToClassKey(props: object): string;\n","node_modules/@mui/system/merge.d.ts":"export default function merge(acc: object, item: object): object;\n","node_modules/@mui/system/index.d.ts":"import {\n  ComposedStyleFunction,\n  StyleFunction,\n  PropsFor,\n  SimpleStyleFunction,\n  borders,\n  display,\n  flexbox,\n  grid,\n  palette,\n  positions,\n  shadows,\n  sizing,\n  typography,\n} from './Box';\n// disable automatic export\nexport {};\n\n// borders.js\nexport const border: SimpleStyleFunction<'border'>;\nexport const borderTop: SimpleStyleFunction<'borderTop'>;\nexport const borderRight: SimpleStyleFunction<'borderRight'>;\nexport const borderBottom: SimpleStyleFunction<'borderBottom'>;\nexport const borderLeft: SimpleStyleFunction<'borderLeft'>;\nexport const borderColor: SimpleStyleFunction<'borderColor'>;\nexport const borderTopColor: SimpleStyleFunction<'borderTopColor'>;\nexport const borderRightColor: SimpleStyleFunction<'borderRightColor'>;\nexport const borderBottomColor: SimpleStyleFunction<'borderBottomColor'>;\nexport const borderLeftColor: SimpleStyleFunction<'borderLeftColor'>;\nexport const borderRadius: SimpleStyleFunction<'borderRadius'>;\nexport type BordersProps = PropsFor<typeof borders>;\n\n// breakpoints.js\ntype DefaultBreakPoints = 'xs' | 'sm' | 'md' | 'lg' | 'xl';\nexport { handleBreakpoints, mergeBreakpointsInOrder } from './breakpoints';\n\n/**\n * @returns An enhanced stylefunction that considers breakpoints\n */\nexport function breakpoints<Props, Breakpoints extends string = DefaultBreakPoints>(\n  styleFunction: StyleFunction<Props>,\n): StyleFunction<Partial<Record<Breakpoints, Props>> & Props>;\n\nexport function compose<T extends Array<StyleFunction<any>>>(...args: T): ComposedStyleFunction<T>;\n\nexport type DisplayProps = PropsFor<typeof display>;\n\n// flexbox.js\nexport type FlexboxProps = PropsFor<typeof flexbox>;\n\n// grid.js\nexport type GridProps = PropsFor<typeof grid>;\n\n// palette.js\nexport const color: SimpleStyleFunction<'color'>;\nexport const bgcolor: SimpleStyleFunction<'bgcolor'>;\nexport type PaletteProps = PropsFor<typeof palette>;\n\nexport type PositionsProps = PropsFor<typeof positions>;\n\nexport type ShadowsProps = PropsFor<typeof shadows>;\n\n// * sizing.js TODO\nexport const width: SimpleStyleFunction<'width'>;\nexport const maxWidth: SimpleStyleFunction<'maxWidth'>;\nexport const minWidth: SimpleStyleFunction<'minWidth'>;\nexport const height: SimpleStyleFunction<'height'>;\nexport const maxHeight: SimpleStyleFunction<'maxHeight'>;\nexport const minHeight: SimpleStyleFunction<'minHeight'>;\nexport const sizeWidth: SimpleStyleFunction<'sizeWidth'>;\nexport const sizeHeight: SimpleStyleFunction<'sizeHeight'>;\nexport const boxSizing: SimpleStyleFunction<'boxSizing'>;\nexport type SizingProps = PropsFor<typeof sizing>;\n\n// typography.js\nexport const typographyVariant: SimpleStyleFunction<'typography'>;\nexport const fontFamily: SimpleStyleFunction<'fontFamily'>;\nexport const fontSize: SimpleStyleFunction<'fontSize'>;\nexport const fontStyle: SimpleStyleFunction<'fontStyle'>;\nexport const fontWeight: SimpleStyleFunction<'fontWeight'>;\nexport const letterSpacing: SimpleStyleFunction<'letterSpacing'>;\nexport const lineHeight: SimpleStyleFunction<'lineHeight'>;\nexport const textAlign: SimpleStyleFunction<'textAlign'>;\nexport const textTransform: SimpleStyleFunction<'textTransform'>;\nexport type TypographyProps = PropsFor<typeof typography>;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function unstable_getThemeValue(prop: string, value: any, theme: object): any;\n/**\n * The `css` function accepts arrays as values for mobile-first responsive styles.\n * Note that this extends to non-theme values also. For example `display=['none', 'block']`\n * will also works.\n */\nexport type ResponsiveStyleValue<T> = T | Array<T | null> | { [key: string]: T | null };\n\nexport { DefaultTheme } from '@mui/private-theming';\n\nexport {\n  css,\n  keyframes,\n  StyledEngineProvider,\n  Interpolation,\n  CSSInterpolation,\n  CSSObject,\n} from '@mui/styled-engine';\nexport { default as GlobalStyles } from './GlobalStyles';\nexport type { GlobalStylesProps } from './GlobalStyles';\n\nexport * from './style';\nexport * from './spacing';\n\nexport {\n  default as unstable_styleFunctionSx,\n  unstable_createStyleFunctionSx,\n  extendSxProp as unstable_extendSxProp,\n  unstable_defaultSxConfig,\n} from './styleFunctionSx';\nexport * from './styleFunctionSx';\n\n// TODO: Remove this function in v6.\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function experimental_sx(): any;\n\nexport { default as Box } from './Box';\nexport * from './Box';\n\nexport { default as createBox } from './createBox';\nexport * from './createBox';\n\nexport { default as createStyled } from './createStyled';\nexport * from './createStyled';\n\nexport { default as styled } from './styled';\nexport * from './styled';\n\nexport { default as createTheme } from './createTheme';\nexport * from './createTheme';\n\nexport { default as createBreakpoints } from './createTheme/createBreakpoints';\nexport * from './createTheme/createBreakpoints';\n\nexport { default as createSpacing } from './createTheme/createSpacing';\nexport { SpacingOptions, Spacing } from './createTheme/createSpacing';\n\nexport { default as shape } from './createTheme/shape';\nexport * from './createTheme/shape';\n\nexport { default as useThemeProps, getThemeProps } from './useThemeProps';\n\nexport { default as useTheme } from './useTheme';\nexport * from './useTheme';\n\nexport { default as useThemeWithoutDefault } from './useThemeWithoutDefault';\nexport * from './useThemeWithoutDefault';\n\nexport { default as useMediaQuery } from './useMediaQuery';\nexport * from './useMediaQuery';\n\nexport * from './colorManipulator';\n\nexport { default as ThemeProvider } from './ThemeProvider';\nexport * from './ThemeProvider';\n\nexport { default as unstable_createCssVarsProvider, CreateCssVarsProviderResult } from './cssVars';\nexport { default as unstable_createGetCssVar } from './cssVars/createGetCssVar';\nexport { default as unstable_cssVarsParser } from './cssVars/cssVarsParser';\nexport { default as unstable_prepareCssVars } from './cssVars/prepareCssVars';\nexport { default as unstable_createCssVarsTheme } from './cssVars/createCssVarsTheme';\nexport * from './cssVars';\n\nexport { default as responsivePropType } from './responsivePropType';\n\nexport { default as createContainer } from './Container/createContainer';\nexport * from './Container/createContainer';\n\nexport { default as Container } from './Container';\nexport * from './Container';\n\nexport { default as Unstable_Grid } from './Unstable_Grid';\nexport * from './Unstable_Grid';\n\nexport { default as Stack } from './Stack';\nexport * from './Stack';\n","node_modules/@mui/system/createStyled.d.ts":"import * as React from 'react';\nimport {\n  CreateMUIStyled as CreateMUIStyledStyledEngine,\n  CSSInterpolation,\n} from '@mui/styled-engine';\nimport styleFunctionSx, { SxProps } from './styleFunctionSx';\nimport { Theme as DefaultTheme } from './createTheme';\n\nexport function shouldForwardProp(propName: PropertyKey): boolean;\n\nexport interface MUIStyledCommonProps<Theme extends object = DefaultTheme> {\n  theme?: Theme;\n  as?: React.ElementType;\n  sx?: SxProps<Theme>;\n}\n\nexport interface MuiStyledOptions {\n  name?: string;\n  slot?: string;\n  // The difference between Interpolation and CSSInterpolation is that the former supports functions based on props\n  // If we want to support props in the overrides, we will need to change the CSSInterpolation to Interpolation<Props>\n  overridesResolver?: (props: any, styles: Record<string, CSSInterpolation>) => CSSInterpolation;\n  skipVariantsResolver?: boolean;\n  skipSx?: boolean;\n}\n\nexport type CreateMUIStyled<Theme extends object = DefaultTheme> = CreateMUIStyledStyledEngine<\n  MUIStyledCommonProps<Theme>,\n  MuiStyledOptions,\n  Theme\n>;\n\nexport default function createStyled<Theme extends object = DefaultTheme>(options?: {\n  themeId?: string;\n  defaultTheme?: Theme;\n  rootShouldForwardProp?: (prop: PropertyKey) => boolean;\n  slotShouldForwardProp?: (prop: PropertyKey) => boolean;\n  styleFunctionSx?: typeof styleFunctionSx;\n}): CreateMUIStyled<Theme>;\n","node_modules/@mui/system/createBox.d.ts":"import { OverridableComponent } from '@mui/types';\nimport { BoxTypeMap } from './Box';\nimport { Theme as SystemTheme } from './createTheme';\n\nexport default function createBox<\n  T extends object = SystemTheme,\n  AdditionalProps extends Record<string, unknown> = {},\n>(options?: {\n  themeId?: string;\n  defaultTheme: T;\n  defaultClassName?: string;\n  generateClassName?: (componentName: string) => string;\n}): OverridableComponent<BoxTypeMap<AdditionalProps, 'div', T>>;\n","node_modules/@mui/system/colorManipulator.d.ts":"/* eslint-disable @typescript-eslint/naming-convention */\nexport type ColorFormat = 'rgb' | 'rgba' | 'hsl' | 'hsla' | 'color';\nexport interface ColorObject {\n  type: ColorFormat;\n  values: [number, number, number] | [number, number, number, number];\n  colorSpace?: 'srgb' | 'display-p3' | 'a98-rgb' | 'prophoto-rgb' | 'rec-2020';\n}\n\nexport function hexToRgb(hex: string): string;\nexport function rgbToHex(color: string): string;\nexport function hslToRgb(color: string): string;\nexport function decomposeColor(color: string): ColorObject;\nexport function colorChannel(color: string): string;\nexport function private_safeColorChannel(color: string, warning?: string): string;\nexport function recomposeColor(color: ColorObject): string;\nexport function getContrastRatio(foreground: string, background: string): number;\nexport function getLuminance(color: string): number;\nexport function emphasize(color: string, coefficient?: number): string;\nexport function private_safeEmphasize(\n  color: string,\n  coefficient?: number,\n  warning?: string,\n): string;\nexport function alpha(color: string, value: number): string;\nexport function private_safeAlpha(color: string, value: number, warning?: string): string;\nexport function darken(color: string, coefficient: number): string;\nexport function private_safeDarken(color: string, coefficient: number, warning?: string): string;\nexport function lighten(color: string, coefficient: number): string;\nexport function private_safeLighten(color: string, coefficient: number, warning?: string): string;\nexport function blend(background: string, overlay: string, opacity: number, gamma?: number): string;\n","node_modules/@mui/system/breakpoints.d.ts":"import { CSSObject } from '@mui/styled-engine';\nimport { Breakpoints } from './createTheme/createBreakpoints';\nimport type { Breakpoint } from './createTheme';\nimport { ResponsiveStyleValue } from './styleFunctionSx';\n\nexport interface ResolveBreakpointValuesOptions<T> {\n  values: ResponsiveStyleValue<T>;\n  breakpoints?: Breakpoints['values'];\n  base?: Record<string, boolean>;\n}\nexport function resolveBreakpointValues<T>(\n  options: ResolveBreakpointValuesOptions<T>,\n): Record<string, T>;\n\nexport function mergeBreakpointsInOrder(breakpoints: Breakpoints, styles: CSSObject[]): CSSObject;\n\nexport function handleBreakpoints<Props>(\n  props: Props,\n  propValue: any,\n  styleFromPropValue: (value: any, breakpoint?: Breakpoint) => any,\n): any;\n","node_modules/@mui/system/CSSProperties.d.ts":"import * as CSS from 'csstype';\n\n/**\n * All non-vendor-prefixed CSS properties. (Also allows `number` in order to support CSS-in-JS libs,\n * since they are converted to `px`.)\n */\nexport interface CSSProperties\n  extends CSS.StandardProperties<number | string>,\n    CSS.SvgProperties<number | string> {}\n","node_modules/@mui/system/useThemeProps/useThemeProps.d.ts":"export interface ThemeWithProps {\n  components?: any;\n}\n\nexport type ThemedProps<Theme, Name extends keyof any> = Theme extends {\n  components: Record<Name, { defaultProps: infer Props }>;\n}\n  ? Props\n  : {};\n\nexport default function useThemeProps<\n  Theme extends ThemeWithProps,\n  Props,\n  Name extends keyof any,\n>(params: {\n  props: Props;\n  name: Name;\n  defaultTheme?: Theme;\n  themeId?: string;\n}): Props & ThemedProps<Theme, Name>;\n","node_modules/@mui/system/useThemeProps/index.d.ts":"export { default } from './useThemeProps';\nexport * from './useThemeProps';\n\nexport { default as getThemeProps } from './getThemeProps';\n","node_modules/@mui/system/useThemeProps/getThemeProps.d.ts":"export {};\n\ninterface ThemeWithProps<Components> {\n  components?: { [K in keyof Components]: { defaultProps?: Partial<Components[K]> } };\n}\n\ntype ThemedProps<Theme, Name extends keyof any> = Theme extends {\n  components: Record<Name, { defaultProps: infer Props }>;\n}\n  ? Props\n  : {};\n\nexport default function getThemeProps<Theme, Props, Name extends keyof any>(params: {\n  props: Props;\n  name: Name;\n  theme?: Theme;\n}): Props & ThemedProps<Theme, Name>;\n","node_modules/@mui/system/useMediaQuery/useMediaQuery.d.ts":"/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\nexport interface MuiMediaQueryListEvent {\n    matches: boolean;\n}\n/**\n * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.\n */\nexport interface MuiMediaQueryList {\n    matches: boolean;\n    addListener: (listener: MuiMediaQueryListListener) => void;\n    removeListener: (listener: MuiMediaQueryListListener) => void;\n}\n/**\n * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.\n */\nexport type MuiMediaQueryListListener = (event: MuiMediaQueryListEvent) => void;\nexport interface UseMediaQueryOptions {\n    /**\n     * As `window.matchMedia()` is unavailable on the server,\n     * it returns a default matches during the first mount.\n     * @default false\n     */\n    defaultMatches?: boolean;\n    /**\n     * You can provide your own implementation of matchMedia.\n     * This can be used for handling an iframe content window.\n     */\n    matchMedia?: typeof window.matchMedia;\n    /**\n     * To perform the server-side hydration, the hook needs to render twice.\n     * A first time with `defaultMatches`, the value of the server, and a second time with the resolved value.\n     * This double pass rendering cycle comes with a drawback: it's slower.\n     * You can set this option to `true` if you use the returned value **only** client-side.\n     * @default false\n     */\n    noSsr?: boolean;\n    /**\n     * You can provide your own implementation of `matchMedia`, it's used when rendering server-side.\n     */\n    ssrMatchMedia?: (query: string) => {\n        matches: boolean;\n    };\n}\nexport default function useMediaQuery<Theme = unknown>(queryInput: string | ((theme: Theme) => string), options?: UseMediaQueryOptions): boolean;\n","node_modules/@mui/system/useMediaQuery/index.d.ts":"export { default } from './useMediaQuery';\nexport * from './useMediaQuery';\n","node_modules/@mui/system/styleFunctionSx/styleFunctionSx.d.ts":"import * as CSS from 'csstype';\nimport { CSSObject } from '@mui/styled-engine';\nimport { StandardCSSProperties } from './StandardCssProperties';\nimport { AliasesCSSProperties } from './AliasesCSSProperties';\nimport { OverwriteCSSProperties } from './OverwriteCSSProperties';\n\n/**\n * The `css` function accepts arrays as values for mobile-first responsive styles.\n * Note that this extends to non-theme values also. For example `display=['none', 'block']`\n * will also works.\n */\nexport type ResponsiveStyleValue<T> = T | ReadonlyArray<T | null> | { [key: string]: T | null };\n\n/**\n * Map of all CSS pseudo selectors (`:hover`, `:focus`, ...).\n */\nexport type CSSPseudoSelectorProps<Theme extends object = {}> = {\n  [K in CSS.Pseudos]?: ((theme: Theme) => SystemStyleObject<Theme>) | SystemStyleObject<Theme>;\n};\n\n/**\n * Map all nested selectors.\n */\nexport interface CSSSelectorObject<Theme extends object = {}> {\n  [cssSelector: string]: ((theme: Theme) => SystemStyleObject<Theme>) | SystemStyleObject<Theme>;\n}\n\ntype CssVariableType = string | number;\n\n/**\n * Map all nested selectors and CSS variables.\n */\nexport interface CSSSelectorObjectOrCssVariables<Theme extends object = {}> {\n  [cssSelectorOrVariable: string]:\n    | ((theme: Theme) => SystemStyleObject<Theme> | string | number)\n    | SystemStyleObject<Theme>\n    | CssVariableType;\n}\n\n/**\n * Map of all available CSS properties (including aliases) and their raw value.\n * Only used internally to map CSS properties to input types (responsive value,\n * theme function or nested) in `SystemCssProperties`.\n */\nexport interface AllSystemCSSProperties\n  extends Omit<StandardCSSProperties, keyof OverwriteCSSProperties>,\n    OverwriteCSSProperties,\n    AliasesCSSProperties {}\n\nexport type SystemCssProperties<Theme extends object = {}> = {\n  [K in keyof AllSystemCSSProperties]:\n    | ResponsiveStyleValue<AllSystemCSSProperties[K]>\n    | ((theme: Theme) => ResponsiveStyleValue<AllSystemCSSProperties[K]>)\n    | SystemStyleObject<Theme>;\n};\n\n/**\n * The `SystemStyleObject` defines custom properties that will be transformed to\n * their corresponding values from the `Theme`. Other valid CSS properties are also allowed.\n */\nexport type SystemStyleObject<Theme extends object = {}> =\n  | SystemCssProperties<Theme>\n  | CSSPseudoSelectorProps<Theme>\n  | CSSSelectorObjectOrCssVariables<Theme>\n  | null;\n\n/**\n * The `SxProps` can be either object or function\n */\nexport type SxProps<Theme extends object = {}> =\n  | SystemStyleObject<Theme>\n  | ((theme: Theme) => SystemStyleObject<Theme>)\n  | ReadonlyArray<\n      boolean | SystemStyleObject<Theme> | ((theme: Theme) => SystemStyleObject<Theme>)\n    >;\n\nexport interface StyleFunctionSx {\n  (props: object): CSSObject;\n  filterProps?: string[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function unstable_createStyleFunctionSx(\n  styleFunctionMapping: Record<string, StyleFunctionSx>,\n): StyleFunctionSx;\n\ndeclare const styleFunctionSx: StyleFunctionSx;\n\nexport default styleFunctionSx;\n","node_modules/@mui/system/styleFunctionSx/index.d.ts":"export { default } from './styleFunctionSx';\n\nexport * from './styleFunctionSx';\nexport * from './AliasesCSSProperties';\nexport * from './OverwriteCSSProperties';\nexport * from './StandardCssProperties';\n\nexport { default as extendSxProp } from './extendSxProp';\n\nexport { default as unstable_defaultSxConfig } from './defaultSxConfig';\nexport * from './defaultSxConfig';\n\nexport * from './extendSxProp';\n","node_modules/@mui/system/styleFunctionSx/extendSxProp.d.ts":"import { SxProps } from './styleFunctionSx';\n\nexport default function extendSxProp<Props extends { sx?: SxProps<any> } = {}>(props: Props): Props;\n","node_modules/@mui/system/styleFunctionSx/defaultSxConfig.d.ts":"import { StyleFunction } from '../Box';\nimport { TransformFunction } from '../style';\n\ntype SimpleStyleFunction<PropKey extends keyof any> = StyleFunction<Partial<Record<PropKey, any>>>;\n\nexport interface SxConfigRecord {\n  cssProperty?: keyof React.CSSProperties | false;\n  /**\n   * dot access in `Theme`\n   */\n  themeKey?: string;\n  transform?: TransformFunction;\n  style?: SimpleStyleFunction<any>;\n}\n\nexport type SxConfig = Record<string, SxConfigRecord>;\n\ndeclare const defaultSxConfig: SxConfig;\n\nexport default defaultSxConfig;\n","node_modules/@mui/system/styleFunctionSx/StandardCssProperties.d.ts":"import * as CSS from 'csstype';\n\nexport type StandardCSSProperties = CSS.PropertiesFallback<number | string>;\n","node_modules/@mui/system/styleFunctionSx/OverwriteCSSProperties.d.ts":"import * as CSS from 'csstype';\n\nexport interface OverwriteCSSProperties {\n  /**\n   * The **`border`** CSS property is shorthand for the CSS properties **`border-width`**, **`border-style`**, and **`border-color`**. It sets an element's border.\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: CSS.Property.Border | number;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the\n   * element for blur and spread radii, and by its color.\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: CSS.Property.BoxShadow | number;\n  /**\n   * The **`font-weight`** CSS property specifies the weight (or boldness) of the font. The font weights available to you will depend on the `font-family` you are using. Some fonts are only\n   * available in `normal` and `bold`.\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: CSS.Property.FontWeight | string;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a higher z-index cover those with a lower one.\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: CSS.Property.ZIndex | string;\n}\n","node_modules/@mui/system/styleFunctionSx/AliasesCSSProperties.d.ts":"import { StandardCSSProperties } from './StandardCssProperties';\n\nexport interface AliasesCSSProperties {\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  bgcolor?: StandardCSSProperties['backgroundColor'];\n  /**\n   * The **`margin`** CSS property sets the margin on all four sides of an element. It is a shorthand for `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  m?: StandardCSSProperties['margin'];\n  /**\n   * The **`margin-top`** CSS property sets the margin on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  mt?: StandardCSSProperties['marginTop'];\n  /**\n   * The **`margin-right`** CSS property sets the margin on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  mr?: StandardCSSProperties['marginRight'];\n  /**\n   * The **`margin-bottom`** CSS property sets the margin on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  mb?: StandardCSSProperties['marginBottom'];\n  /**\n   * The **`margin-left`** CSS property sets the margin on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  ml?: StandardCSSProperties['marginLeft'];\n  /**\n   * The **`mx`** property is shorthand for using both **`margin-left`** and **`margin-right`** CSS properties. They set the margin on the left and right side of an element. A positive value places it\n   * farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  mx?: StandardCSSProperties['marginLeft'];\n  /**\n   * The **`marginX`** property is shorthand for using both **`margin-left`** and **`margin-right`** CSS properties. They set the margin on the left and right side of an element. A positive value\n   * places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginX?: StandardCSSProperties['marginLeft'];\n  /**\n   * The **`my`** property is shorthand for using both **`margin-top`** and **`margin-bottom`** CSS properties. They set the margin on the top and bottom of an element. A positive value places it\n   * farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  my?: StandardCSSProperties['marginTop'];\n  /**\n   * The **`marginY`** property is shorthand for using both **`margin-top`** and **`margin-bottom`** CSS properties. They set the margin on the top and bottom of an element. A positive value places\n   * it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginY?: StandardCSSProperties['marginTop'];\n  /**\n   * The **`padding`** CSS property sets the padding on all four sides of an element. It is a shorthand for `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  p?: StandardCSSProperties['padding'];\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding at the top of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  pt?: StandardCSSProperties['paddingTop'];\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding at the right side of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  pr?: StandardCSSProperties['paddingRight'];\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding on the bottom of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  pb?: StandardCSSProperties['paddingBottom'];\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding at the left side of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  pl?: StandardCSSProperties['paddingLeft'];\n  /**\n   * The **`px`** property is shorthand for the CSS properties **`padding-left`** and **`padding-right`**. They set the width of the padding at the left and right side of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  px?: StandardCSSProperties['paddingLeft'];\n  /**\n   * The **`paddingX`** property is shorthand for the CSS properties **`padding-left`** and **`padding-right`**. They set the width of the padding at the left and right sides of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingX?: StandardCSSProperties['paddingLeft'];\n  /**\n   * The **`py`** property is shorthand for the CSS properties **`padding-top`** and **`padding-bottom`**. They set the width of the padding at the top and bottom of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  py?: StandardCSSProperties['paddingTop'];\n  /**\n   * The **`paddingY`** property is shorthand for the CSS properties **`padding-top`** and **`padding-bottom`**. They set the width of the padding at the top and bottom of an element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingY?: StandardCSSProperties['paddingTop'];\n  /**\n   * The **`typography`** property  is shorthand for the CSS properties **`font-family`**, **`font-weight`**, **`font-size`**, **`line-height`**, **`letter-spacing`** and **`text-transform``**.\n   * It takes the values defined under `theme.typography` and spreads them on the element.\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  typography?: string;\n  /**\n   * The **`displayPrint`** property sets the display value for the element when the page is printed.\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  displayPrint?: StandardCSSProperties['display'];\n}\n","node_modules/@mui/system/cssVars/useCurrentColorScheme.d.ts":"export type Mode = 'light' | 'dark' | 'system';\nexport type SystemMode = Exclude<Mode, 'system'>;\nexport interface State<SupportedColorScheme extends string> {\n    /**\n     * User selected mode.\n     * Note: on the server, mode is always undefined\n     */\n    mode: Mode | undefined;\n    /**\n     * Only valid if `mode: 'system'`, either 'light' | 'dark'.\n     */\n    systemMode: SystemMode | undefined;\n    /**\n     * The color scheme for the light mode.\n     */\n    lightColorScheme: SupportedColorScheme;\n    /**\n     * The color scheme for the dark mode.\n     */\n    darkColorScheme: SupportedColorScheme;\n}\nexport type Result<SupportedColorScheme extends string> = State<SupportedColorScheme> & {\n    /**\n     * The current application color scheme. It is always `undefined` on the server.\n     */\n    colorScheme: SupportedColorScheme | undefined;\n    /**\n     * `mode` is saved to internal state and localStorage\n     * If `mode` is null, it will be reset to the defaultMode\n     */\n    setMode: (mode: Mode | null) => void;\n    /**\n     * `colorScheme` is saved to internal state and localStorage\n     * If `colorScheme` is null, it will be reset to the defaultColorScheme (light | dark)\n     */\n    setColorScheme: (colorScheme: SupportedColorScheme | Partial<{\n        light: SupportedColorScheme | null;\n        dark: SupportedColorScheme | null;\n    }> | null) => void;\n};\nexport declare function getSystemMode(mode: undefined | string): SystemMode | undefined;\nexport declare function getColorScheme<SupportedColorScheme extends string>(state: State<SupportedColorScheme>): SupportedColorScheme | undefined;\ninterface UseCurrentColoSchemeOptions<SupportedColorScheme extends string> {\n    defaultLightColorScheme: SupportedColorScheme;\n    defaultDarkColorScheme: SupportedColorScheme;\n    supportedColorSchemes: Array<SupportedColorScheme>;\n    defaultMode?: Mode;\n    modeStorageKey?: string;\n    colorSchemeStorageKey?: string;\n    storageWindow?: Window | null;\n}\nexport default function useCurrentColorScheme<SupportedColorScheme extends string>(options: UseCurrentColoSchemeOptions<SupportedColorScheme>): Result<SupportedColorScheme>;\nexport {};\n","node_modules/@mui/system/cssVars/prepareCssVars.d.ts":"export interface DefaultCssVarsTheme {\n    colorSchemes?: Record<string, any>;\n    defaultColorScheme?: string;\n}\ndeclare function prepareCssVars<T extends DefaultCssVarsTheme, ThemeVars extends Record<string, any>, Selector = any>(theme: T, parserConfig?: {\n    prefix?: string;\n    shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean;\n    getSelector?: (colorScheme: string | undefined, css: Record<string, any>) => Selector;\n}): {\n    vars: ThemeVars;\n    generateCssVars: (colorScheme?: string) => {\n        css: {\n            [x: string]: string | number;\n        };\n        vars: ThemeVars;\n        selector: string | NonNullable<Selector>;\n    };\n};\nexport default prepareCssVars;\n","node_modules/@mui/system/cssVars/index.d.ts":"export { default } from './createCssVarsProvider';\nexport type { CreateCssVarsProviderResult, CssVarsProviderConfig, ColorSchemeContextValue, } from './createCssVarsProvider';\nexport { default as getInitColorSchemeScript } from './getInitColorSchemeScript';\nexport { default as prepareCssVars } from './prepareCssVars';\nexport { default as createCssVarsTheme } from './createCssVarsTheme';\n","node_modules/@mui/system/cssVars/getInitColorSchemeScript.d.ts":"import * as React from 'react';\nexport declare const DEFAULT_MODE_STORAGE_KEY = \"mode\";\nexport declare const DEFAULT_COLOR_SCHEME_STORAGE_KEY = \"color-scheme\";\nexport declare const DEFAULT_ATTRIBUTE = \"data-color-scheme\";\nexport interface GetInitColorSchemeScriptOptions {\n    /**\n     * The mode to be used for the first visit\n     * @default 'light'\n     */\n    defaultMode?: 'light' | 'dark' | 'system';\n    /**\n     * The default color scheme to be used on the light mode\n     * @default 'light'\n     */\n    defaultLightColorScheme?: string;\n    /**\n     * The default color scheme to be used on the dark mode\n     * * @default 'dark'\n     */\n    defaultDarkColorScheme?: string;\n    /**\n     * The node (provided as string) used to attach the color-scheme attribute\n     * @default 'document.documentElement'\n     */\n    colorSchemeNode?: string;\n    /**\n     * localStorage key used to store `mode`\n     * @default 'mode'\n     */\n    modeStorageKey?: string;\n    /**\n     * localStorage key used to store `colorScheme`\n     * @default 'color-scheme'\n     */\n    colorSchemeStorageKey?: string;\n    /**\n     * DOM attribute for applying color scheme\n     * @default 'data-color-scheme'\n     */\n    attribute?: string;\n}\nexport default function getInitColorSchemeScript(options?: GetInitColorSchemeScriptOptions): React.JSX.Element;\n","node_modules/@mui/system/cssVars/cssVarsParser.d.ts":"type NestedRecord<V = any> = {\n    [k: string | number]: NestedRecord<V> | V;\n};\n/**\n * This function create an object from keys, value and then assign to target\n *\n * @param {Object} obj : the target object to be assigned\n * @param {string[]} keys\n * @param {string | number} value\n *\n * @example\n * const source = {}\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\n *\n * @example\n * const source = { palette: { primary: 'var(--palette-primary)' } }\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\n */\nexport declare const assignNestedKeys: <T extends string | Record<string, any> | null | undefined = NestedRecord<any>, Value = any>(obj: T, keys: Array<string>, value: Value, arrayKeys?: Array<string>) => void;\n/**\n *\n * @param {Object} obj : source object\n * @param {Function} callback : a function that will be called when\n *                   - the deepest key in source object is reached\n *                   - the value of the deepest key is NOT `undefined` | `null`\n *\n * @example\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\n * // ['palette', 'primary', 'main'] '#000000'\n */\nexport declare const walkObjectDeep: <Value, T = Record<string, any>>(obj: T, callback: (keys: Array<string>, value: Value, arrayKeys: Array<string>) => void, shouldSkipPaths?: ((keys: Array<string>) => boolean) | undefined) => void;\n/**\n * a function that parse theme and return { css, vars }\n *\n * @param {Object} theme\n * @param {{\n *  prefix?: string,\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\n * }} options.\n *  `prefix`: The prefix of the generated CSS variables. This function does not change the value.\n *\n * @returns {{ css: Object, vars: Object }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme).\n *\n * @example\n * const { css, vars } = parser({\n *   fontSize: 12,\n *   lineHeight: 1.2,\n *   palette: { primary: { 500: 'var(--color)' } }\n * }, { prefix: 'foo' })\n *\n * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--color)' }\n * console.log(vars) // { fontSize: 'var(--foo-fontSize)', lineHeight: 'var(--foo-lineHeight)', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }\n */\nexport default function cssVarsParser<T extends Record<string, any>>(theme: Record<string, any>, options?: {\n    prefix?: string;\n    shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean;\n}): {\n    css: Record<string, string | number>;\n    vars: T;\n    varsWithDefaults: {};\n};\nexport {};\n","node_modules/@mui/system/cssVars/createGetCssVar.d.ts":"/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar<T extends string = string>(prefix?: string): <AdditionalVars extends string = never>(field: T | AdditionalVars, ...fallbacks: (T | AdditionalVars)[]) => string;\n","node_modules/@mui/system/cssVars/createCssVarsTheme.d.ts":"import { DefaultCssVarsTheme } from './prepareCssVars';\ninterface Theme extends DefaultCssVarsTheme {\n    cssVarPrefix?: string;\n    shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean;\n}\ndeclare function createCssVarsTheme<T extends Theme, ThemeVars extends Record<string, any>>(theme: T): T & {\n    vars: ThemeVars;\n    generateCssVars: (colorScheme?: string | undefined) => {\n        css: {\n            [x: string]: string | number;\n        };\n        vars: ThemeVars;\n        selector: any;\n    };\n};\nexport default createCssVarsTheme;\n","node_modules/@mui/system/cssVars/createCssVarsProvider.d.ts":"import * as React from 'react';\nimport getInitColorSchemeScript from './getInitColorSchemeScript';\nimport { Mode, Result } from './useCurrentColorScheme';\n\nexport interface ColorSchemeContextValue<SupportedColorScheme extends string>\n  extends Result<SupportedColorScheme> {\n  allColorSchemes: SupportedColorScheme[];\n}\n\nexport interface CssVarsProviderConfig<ColorScheme extends string> {\n  /**\n   * DOM attribute for applying color scheme\n   * @default 'data-color-scheme'\n   */\n  attribute?: string;\n  /**\n   * localStorage key used to store application `mode`\n   * @default 'mode'\n   */\n  modeStorageKey?: string;\n  /**\n   * localStorage key used to store `colorScheme`\n   * @default 'color-scheme'\n   */\n  colorSchemeStorageKey?: string;\n  /**\n   * Design system default color scheme.\n   * - provides string if the design system has one default color scheme (either light or dark)\n   * - provides object if the design system has default light & dark color schemes\n   */\n  defaultColorScheme: ColorScheme | { light: ColorScheme; dark: ColorScheme };\n  /**\n   * Design system default mode\n   * @default 'light'\n   */\n  defaultMode?: Mode;\n  /**\n   * Disable CSS transitions when switching between modes or color schemes\n   * @default false\n   */\n  disableTransitionOnChange?: boolean;\n}\n\ntype Identify<I extends string | undefined, T> = I extends string ? T | { [k in I]: T } : T;\n\nexport interface CreateCssVarsProviderResult<\n  ColorScheme extends string,\n  Identifier extends string | undefined = undefined,\n> {\n  CssVarsProvider: (\n    props: React.PropsWithChildren<\n      Partial<CssVarsProviderConfig<ColorScheme>> & {\n        theme?: Identify<\n          Identifier,\n          {\n            cssVarPrefix?: string;\n            colorSchemes: Record<ColorScheme, Record<string, any>>;\n          }\n        >;\n        /**\n         * The document used to perform `disableTransitionOnChange` feature\n         * @default document\n         */\n        documentNode?: Document | null;\n        /**\n         * The node used to attach the color-scheme attribute\n         * @default document\n         */\n        colorSchemeNode?: Element | null;\n        /**\n         * The CSS selector for attaching the generated custom properties\n         * @default ':root'\n         */\n        colorSchemeSelector?: string;\n        /**\n         * The window that attaches the 'storage' event listener\n         * @default window\n         */\n        storageWindow?: Window | null;\n        /**\n         * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n         */\n        disableNestedContext?: boolean;\n        /**\n         * If `true`, the style sheet won't be generated.\n         *\n         * This is useful for controlling nested CssVarsProvider behavior.\n         * @default false\n         */\n        disableStyleSheetGeneration?: boolean;\n      }\n    >,\n  ) => React.ReactElement;\n  useColorScheme: () => ColorSchemeContextValue<ColorScheme>;\n  getInitColorSchemeScript: typeof getInitColorSchemeScript;\n}\n\nexport default function createCssVarsProvider<\n  ColorScheme extends string,\n  Identifier extends string | undefined = undefined,\n>(\n  options: CssVarsProviderConfig<ColorScheme> & {\n    /**\n     * The design system's unique id for getting the corresponded theme when there are multiple design systems.\n     */\n    themeId?: Identifier;\n    /**\n     * Design system default theme\n     *\n     * - The structure inside `theme.colorSchemes[colorScheme]` should be exactly the same in all color schemes because\n     * those object of the color scheme will be used when the color scheme is active.\n     *\n     *  {\n     *    colorSchemes: {\n     *      light: { ...lightColorSchemeValues },\n     *      dark: { ...darkColorSchemeValues }\n     *    }\n     *  }\n     *\n     * - If colorScheme is 'light', the `lightColorSchemeValues` will be merged to theme as `{ ...theme, ...lightColorSchemeValues }`\n     *   likewise, if colorScheme is 'dark', the `darkColorSchemeValues` will be merged to theme as `{ ...theme, ...darkColorSchemeValues }`\n     *\n     * - If the theme contains the same keys as the color scheme, their values will be merged.\n     *  Ex. {\n     *    colorSchemes: {\n     *      light: { palette: { primary: { ... } } },\n     *      dark: { palette: { primary: { ...} } }\n     *    },\n     *    palette: { shared: { ... } }\n     *  }\n     *\n     *  becomes: {\n     *    colorSchemes: { ... },\n     *    palette: { shared: { ... }, primary: { ... } }\n     *  }\n     */\n    theme: any;\n    /**\n     * A function to be called after the CSS variables are attached. The result of this function will be the final theme pass to ThemeProvider.\n     *\n     * The example usage is the variant generation in Joy. We need to combine the token from user-input and the default theme first, then generate\n     * variants from those tokens.\n     */\n    resolveTheme?: (theme: any) => any; // the type is any because it depends on the design system.\n    /**\n     * @internal\n     * A function that returns a list of variables that will be excluded from the `colorSchemeSelector` (:root by default)\n     *\n     * Some variables are intended to be used in a specific color scheme only. They should be excluded when the default mode is set to the color scheme.\n     * This is introduced to fix https://github.com/mui/material-ui/issues/34084\n     */\n    excludeVariablesFromRoot?: (cssVarPrefix: string) => string[];\n  },\n): CreateCssVarsProviderResult<ColorScheme, Identifier>;\n\n// disable automatic export\nexport {};\n","node_modules/@mui/system/Unstable_Grid/traverseBreakpoints.d.ts":"import { Breakpoints, Breakpoint } from '../createTheme/createBreakpoints';\nexport declare const filterBreakpointKeys: (breakpointsKeys: Breakpoint[], responsiveKeys: string[]) => Breakpoint[];\ninterface Iterator<T> {\n    (appendStyle: (responsiveStyles: Record<string, any>, style: object) => void, value: T): void;\n}\nexport declare const traverseBreakpoints: <T = unknown>(breakpoints: Breakpoints, responsive: Record<string, any> | T | T[] | undefined, iterator: Iterator<T>) => void;\nexport {};\n","node_modules/@mui/system/Unstable_Grid/index.d.ts":"export { default } from './Grid';\nexport { default as createGrid } from './createGrid';\nexport * from './GridProps';\nexport { default as gridClasses } from './gridClasses';\nexport * from './gridClasses';\nexport { traverseBreakpoints as unstable_traverseBreakpoints } from './traverseBreakpoints';\n","node_modules/@mui/system/Unstable_Grid/gridGenerator.d.ts":"import { Breakpoints } from '../createTheme/createBreakpoints';\nimport { Spacing } from '../createTheme/createSpacing';\nimport { ResponsiveStyleValue } from '../styleFunctionSx';\nimport { GridDirection, GridOwnerState } from './GridProps';\ninterface Props {\n    theme: {\n        breakpoints: Breakpoints;\n        spacing?: Spacing;\n    };\n    ownerState: GridOwnerState & {\n        parentDisableEqualOverflow?: boolean;\n    };\n}\nexport declare const generateGridSizeStyles: ({ theme, ownerState }: Props) => {};\nexport declare const generateGridOffsetStyles: ({ theme, ownerState }: Props) => {};\nexport declare const generateGridColumnsStyles: ({ theme, ownerState }: Props) => {\n    [x: string]: string;\n    '--Grid-columns'?: undefined;\n} | {\n    '--Grid-columns': number;\n};\nexport declare const generateGridRowSpacingStyles: ({ theme, ownerState }: Props) => {\n    [x: string]: string;\n};\nexport declare const generateGridColumnSpacingStyles: ({ theme, ownerState }: Props) => {\n    [x: string]: string;\n};\nexport declare const generateGridDirectionStyles: ({ theme, ownerState }: Props) => {};\nexport declare const generateGridStyles: ({ ownerState }: Props) => {};\nexport declare const generateSizeClassNames: (gridSize: GridOwnerState['gridSize']) => string[];\nexport declare const generateSpacingClassNames: (spacing: GridOwnerState['spacing'], smallestBreakpoint?: string) => string[];\nexport declare const generateDirectionClasses: (direction: ResponsiveStyleValue<GridDirection> | undefined) => string[];\nexport {};\n","node_modules/@mui/system/Unstable_Grid/gridClasses.d.ts":"export interface GridClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `container={true}`. */\n    container: string;\n    /** Styles applied to the root element if `direction=\"column\"`. */\n    'direction-xs-column': string;\n    /** Styles applied to the root element if `direction=\"column-reverse\"`. */\n    'direction-xs-column-reverse': string;\n    /** Styles applied to the root element if `direction=\"row-reverse\"`. */\n    'direction-xs-row-reverse': string;\n    /** Styles applied to the root element if `wrap=\"nowrap\"`. */\n    'wrap-xs-nowrap': string;\n    /** Styles applied to the root element if `wrap=\"reverse\"`. */\n    'wrap-xs-wrap-reverse': string;\n}\nexport type GridClassKey = keyof GridClasses;\nexport declare function getGridUtilityClass(slot: string): string;\ndeclare const gridClasses: GridClasses;\nexport default gridClasses;\n","node_modules/@mui/system/Unstable_Grid/createGrid.d.ts":"import * as React from 'react';\nimport { OverridableComponent } from '@mui/types';\nimport { GridTypeMap } from './GridProps';\ndeclare const defaultCreateStyledComponent: import(\"@mui/styled-engine\").CreateStyledComponent<import(\"../createStyled\").MUIStyledCommonProps<any>, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof React.ClassAttributes<HTMLDivElement> | keyof React.HTMLAttributes<HTMLDivElement>>, {}, any>;\ndeclare function useThemePropsDefault<T extends {}>(props: T): T & {};\nexport default function createGrid(options?: {\n    createStyledComponent?: typeof defaultCreateStyledComponent;\n    useThemeProps?: typeof useThemePropsDefault;\n    componentName?: string;\n}): OverridableComponent<GridTypeMap<{}, \"div\">>;\nexport {};\n","node_modules/@mui/system/Unstable_Grid/GridProps.d.ts":"import * as React from 'react';\nimport { OverrideProps, IfEquals } from '@mui/types';\nimport { SxProps } from '../styleFunctionSx';\nimport { Theme, Breakpoint, BreakpointOverrides } from '../createTheme';\nimport { SystemProps } from '../Box';\ntype ResponsiveStyleValue<T> = T | Array<T | null> | {\n    [key in Breakpoint]?: T | null;\n};\nexport type GridDirection = 'row' | 'row-reverse' | 'column' | 'column-reverse';\nexport type GridSpacing = number | string;\nexport type GridWrap = 'nowrap' | 'wrap' | 'wrap-reverse';\nexport type GridSize = 'auto' | number;\nexport interface GridDefaultBreakpoints {\n    /**\n     * If a number, it sets the number of columns the grid item uses.\n     * It can't be greater than the total number of columns of the container (12 by default).\n     * If 'auto', the grid item's width matches its content.\n     * If false, the prop is ignored.\n     * If true, the grid item's width grows to use the space available in the grid container.\n     * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n     * @default false\n     */\n    lg?: boolean | GridSize;\n    /**\n     * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n     * If 'auto', the grid item push itself to the right-end of the container.\n     * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n     */\n    lgOffset?: GridSize;\n    /**\n     * If a number, it sets the number of columns the grid item uses.\n     * It can't be greater than the total number of columns of the container (12 by default).\n     * If 'auto', the grid item's width matches its content.\n     * If false, the prop is ignored.\n     * If true, the grid item's width grows to use the space available in the grid container.\n     * The value is applied for the `md` breakpoint and wider screens if not overridden.\n     * @default false\n     */\n    md?: boolean | GridSize;\n    /**\n     * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n     * If 'auto', the grid item push itself to the right-end of the container.\n     * The value is applied for the `md` breakpoint and wider screens if not overridden.\n     */\n    mdOffset?: GridSize;\n    /**\n     * If a number, it sets the number of columns the grid item uses.\n     * It can't be greater than the total number of columns of the container (12 by default).\n     * If 'auto', the grid item's width matches its content.\n     * If false, the prop is ignored.\n     * If true, the grid item's width grows to use the space available in the grid container.\n     * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n     * @default false\n     */\n    sm?: boolean | GridSize;\n    /**\n     * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n     * If 'auto', the grid item push itself to the right-end of the container.\n     * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n     */\n    smOffset?: GridSize;\n    /**\n     * If a number, it sets the number of columns the grid item uses.\n     * It can't be greater than the total number of columns of the container (12 by default).\n     * If 'auto', the grid item's width matches its content.\n     * If false, the prop is ignored.\n     * If true, the grid item's width grows to use the space available in the grid container.\n     * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n     * @default false\n     */\n    xl?: boolean | GridSize;\n    /**\n     * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n     * If 'auto', the grid item push itself to the right-end of the container.\n     * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n     */\n    xlOffset?: GridSize;\n    /**\n     * If a number, it sets the number of columns the grid item uses.\n     * It can't be greater than the total number of columns of the container (12 by default).\n     * If 'auto', the grid item's width matches its content.\n     * If false, the prop is ignored.\n     * If true, the grid item's width grows to use the space available in the grid container.\n     * The value is applied for all the screen sizes with the lowest priority.\n     * @default false\n     */\n    xs?: boolean | GridSize;\n    /**\n     * If a number, it sets the margin-left equals to the number of columns the grid item uses.\n     * If 'auto', the grid item push itself to the right-end of the container.\n     * The value is applied for the `xs` breakpoint and wider screens if not overridden.\n     */\n    xsOffset?: GridSize;\n}\ntype CustomBreakpoints = Partial<Record<Breakpoint, boolean | GridSize> & Record<`${Breakpoint}Offset`, GridSize>>;\ninterface BreakpointOverridesEmpty {\n}\ntype Breakpoints = IfEquals<BreakpointOverrides, BreakpointOverridesEmpty, GridDefaultBreakpoints, CustomBreakpoints>;\nexport interface GridBaseProps extends Breakpoints {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * The number of columns.\n     * @default 12\n     */\n    columns?: ResponsiveStyleValue<number>;\n    /**\n     * Defines the horizontal space between the type `item` components.\n     * It overrides the value of the `spacing` prop.\n     */\n    columnSpacing?: ResponsiveStyleValue<GridSpacing>;\n    /**\n     * If `true`, the component will have the flex *container* behavior.\n     * You should be wrapping *items* with a *container*.\n     * @default false\n     */\n    container?: boolean;\n    /**\n     * Defines the `flex-direction` style property.\n     * It is applied for all screen sizes.\n     * @default 'row'\n     */\n    direction?: ResponsiveStyleValue<GridDirection>;\n    /**\n     * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.\n     */\n    disableEqualOverflow?: boolean;\n    /**\n     * @internal\n     * The level of the grid starts from `0`\n     * and increases when the grid nests inside another grid regardless of container or item.\n     *\n     * ```js\n     * <Grid> // level 0\n     *   <Grid> // level 1\n     *     <Grid> // level 2\n     *   <Grid> // level 1\n     * ```\n     *\n     * Only consecutive grid is considered nesting.\n     * A grid container will start at `0` if there are non-Grid element above it.\n     *\n     * ```js\n     * <Grid> // level 0\n     *   <div>\n     *     <Grid> // level 0\n     *       <Grid> // level 1\n     * ```\n     */\n    unstable_level?: number;\n    /**\n     * Defines the vertical space between the type `item` components.\n     * It overrides the value of the `spacing` prop.\n     */\n    rowSpacing?: ResponsiveStyleValue<GridSpacing>;\n    /**\n     * Defines the space between the type `item` components.\n     * It can only be used on a type `container` component.\n     * @default 0\n     */\n    spacing?: ResponsiveStyleValue<GridSpacing> | undefined;\n    /**\n     * Defines the `flex-wrap` style property.\n     * It's applied for all screen sizes.\n     * @default 'wrap'\n     */\n    wrap?: GridWrap;\n}\nexport interface GridOwnerState extends GridBaseProps {\n    unstable_level: number;\n    gridSize: Partial<Record<Breakpoint, GridSize | boolean>>;\n    gridOffset: Partial<Record<Breakpoint, GridSize>>;\n}\nexport interface GridTypeMap<AdditionalProps = {}, DefaultComponent extends React.ElementType = 'div'> {\n    props: AdditionalProps & GridBaseProps & {\n        sx?: SxProps<Theme>;\n    } & SystemProps<Theme>;\n    defaultComponent: DefaultComponent;\n}\nexport type GridProps<RootComponent extends React.ElementType = GridTypeMap['defaultComponent'], AdditionalProps = {\n    component?: React.ElementType;\n}> = OverrideProps<GridTypeMap<AdditionalProps, RootComponent>, RootComponent>;\nexport {};\n","node_modules/@mui/system/Unstable_Grid/Grid.d.ts":"/**\n *\n * Demos:\n *\n * - [Grid (Joy UI)](https://mui.com/joy-ui/react-grid/)\n * - [Grid (Material UI)](https://mui.com/material-ui/react-grid/)\n *\n * API:\n *\n * - [Grid API](https://mui.com/system/api/grid/)\n */\ndeclare const Grid: import(\"@mui/types\").OverridableComponent<import(\"./GridProps\").GridTypeMap<{}, \"div\">>;\nexport default Grid;\n","node_modules/@mui/system/ThemeProvider/index.d.ts":"export { default } from './ThemeProvider';\nexport * from './ThemeProvider';\n","node_modules/@mui/system/ThemeProvider/ThemeProvider.d.ts":"import { DefaultTheme } from '@mui/private-theming';\n\nexport interface ThemeProviderProps<Theme = DefaultTheme> {\n  /**\n   * Your component tree.\n   */\n  children?: React.ReactNode;\n  /**\n   * The design system's unique id for getting the corresponded theme when there are multiple design systems.\n   */\n  themeId?: string;\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: Partial<Theme> | ((outerTheme: Theme) => Theme);\n}\n\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n * API:\n *\n * - [ThemeProvider API](https://mui.com/material-ui/customization/theming/#themeprovider)\n */\nexport default function ThemeProvider<T = DefaultTheme>(\n  props: ThemeProviderProps<T>,\n): React.ReactElement<ThemeProviderProps<T>>;\n","node_modules/@mui/system/Stack/stackClasses.d.ts":"export interface StackClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type StackClassKey = keyof StackClasses;\nexport declare function getStackUtilityClass(slot: string): string;\ndeclare const stackClasses: StackClasses;\nexport default stackClasses;\n","node_modules/@mui/system/Stack/index.d.ts":"export { default } from './Stack';\nexport { default as createStack } from './createStack';\nexport * from './StackProps';\nexport { default as stackClasses } from './stackClasses';\nexport * from './stackClasses';\n","node_modules/@mui/system/Stack/createStack.d.ts":"import * as React from 'react';\nimport { OverridableComponent } from '@mui/types';\nimport { StackTypeMap, StackOwnerState } from './StackProps';\nimport { Breakpoints } from '../createTheme/createBreakpoints';\nimport { Spacing } from '../createTheme/createSpacing';\ninterface StyleFunctionProps {\n    theme: {\n        breakpoints: Breakpoints;\n        spacing: Spacing;\n    };\n    ownerState: StackOwnerState;\n}\ndeclare const defaultCreateStyledComponent: import(\"@mui/styled-engine\").CreateStyledComponent<import(\"../createStyled\").MUIStyledCommonProps<any>, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, keyof React.ClassAttributes<HTMLDivElement> | keyof React.HTMLAttributes<HTMLDivElement>>, {}, any>;\ndeclare function useThemePropsDefault<T extends {}>(props: T): T & {};\nexport declare const style: ({ ownerState, theme }: StyleFunctionProps) => any;\nexport default function createStack(options?: {\n    createStyledComponent?: typeof defaultCreateStyledComponent;\n    useThemeProps?: typeof useThemePropsDefault;\n    componentName?: string;\n}): OverridableComponent<StackTypeMap<{}, \"div\">>;\nexport {};\n","node_modules/@mui/system/Stack/StackProps.d.ts":"import * as React from 'react';\nimport { OverrideProps } from '@mui/types';\nimport { ResponsiveStyleValue, SxProps } from '../styleFunctionSx';\nimport { SystemProps } from '../Box';\nimport { Theme } from '../createTheme';\nexport interface StackBaseProps {\n    /**\n     * The content of the component.\n     */\n    children?: React.ReactNode;\n    /**\n     * Defines the `flex-direction` style property.\n     * It is applied for all screen sizes.\n     * @default 'column'\n     */\n    direction?: ResponsiveStyleValue<'row' | 'row-reverse' | 'column' | 'column-reverse'>;\n    /**\n     * Defines the space between immediate children.\n     * @default 0\n     */\n    spacing?: ResponsiveStyleValue<number | string>;\n    /**\n     * Add an element between each child.\n     */\n    divider?: React.ReactNode;\n    /**\n     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.\n     *\n     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),\n     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.\n     *\n     * To enable this flag globally, follow the theme's default props configuration.\n     * @default false\n     */\n    useFlexGap?: boolean;\n}\nexport interface StackTypeMap<AdditionalProps = {}, DefaultComponent extends React.ElementType = 'div'> {\n    props: AdditionalProps & StackBaseProps & {\n        /**\n         * The system prop, which allows defining system overrides as well as additional CSS styles.\n         */\n        sx?: SxProps<Theme>;\n    } & SystemProps<Theme>;\n    defaultComponent: DefaultComponent;\n}\nexport type StackProps<RootComponent extends React.ElementType = StackTypeMap['defaultComponent'], AdditionalProps = {\n    component?: React.ElementType;\n}> = OverrideProps<StackTypeMap<AdditionalProps, RootComponent>, RootComponent>;\nexport interface StackOwnerState {\n    direction: StackProps['direction'];\n    spacing: StackProps['spacing'];\n    useFlexGap: boolean;\n}\n","node_modules/@mui/system/Stack/Stack.d.ts":"/**\n *\n * Demos:\n *\n * - [Stack (Joy UI)](https://mui.com/joy-ui/react-stack/)\n * - [Stack (Material UI)](https://mui.com/material-ui/react-stack/)\n * - [Stack (MUI System)](https://mui.com/system/react-stack/)\n *\n * API:\n *\n * - [Stack API](https://mui.com/system/api/stack/)\n */\ndeclare const Stack: import(\"@mui/types\").OverridableComponent<import(\"./StackProps\").StackTypeMap<{}, \"div\">>;\nexport default Stack;\n","node_modules/@mui/system/GlobalStyles/index.d.ts":"export { default } from './GlobalStyles';\nexport * from './GlobalStyles';\n","node_modules/@mui/system/GlobalStyles/GlobalStyles.d.ts":"import * as React from 'react';\nimport { Interpolation } from '@mui/styled-engine';\nimport { Theme as SystemTheme } from '../createTheme';\nexport interface GlobalStylesProps<Theme = SystemTheme> {\n    styles: Interpolation<Theme>;\n    defaultTheme?: object;\n    themeId?: string;\n}\ndeclare function GlobalStyles<Theme = SystemTheme>({ styles, themeId, defaultTheme, }: GlobalStylesProps<Theme>): React.JSX.Element;\ndeclare namespace GlobalStyles {\n    var propTypes: any;\n}\nexport default GlobalStyles;\n","node_modules/@mui/system/Box/index.d.ts":"export { default } from './Box';\nexport * from './Box';\n\nexport { default as boxClasses } from './boxClasses';\nexport * from './boxClasses';\n","node_modules/@mui/system/Box/boxClasses.d.ts":"export interface BoxClasses {\n    /** Styles applied to the root element. */\n    root: string;\n}\nexport type BoxClassKey = keyof BoxClasses;\ndeclare const boxClasses: BoxClasses;\nexport default boxClasses;\n","node_modules/@mui/system/Box/Box.d.ts":"import * as React from 'react';\nimport { OverridableComponent, OverrideProps } from '@mui/types';\nimport { Theme as SystemTheme } from '../createTheme';\nimport {\n  SxProps,\n  AllSystemCSSProperties,\n  ResponsiveStyleValue,\n  OverwriteCSSProperties,\n  AliasesCSSProperties,\n} from '../styleFunctionSx';\n\nexport type PropsFor<SomeStyleFunction> =\n  SomeStyleFunction extends StyleFunction<infer Props> ? Props : never;\nexport type StyleFunction<Props> = (props: Props) => any;\nexport type SimpleStyleFunction<PropKey extends keyof any> = StyleFunction<\n  Partial<Record<PropKey, any>>\n> & { filterProps: string[] };\n\n// borders.js\nexport declare const borders: SimpleStyleFunction<\n  | 'border'\n  | 'borderTop'\n  | 'borderRight'\n  | 'borderBottom'\n  | 'borderLeft'\n  | 'borderColor'\n  | 'borderRadius'\n>;\n\nexport declare const display: SimpleStyleFunction<\n  'display' | 'displayPrint' | 'overflow' | 'textOverflow' | 'visibility' | 'whiteSpace'\n>;\n\nexport declare const flexbox: SimpleStyleFunction<\n  | 'flexBasis'\n  | 'flexDirection'\n  | 'flexWrap'\n  | 'justifyContent'\n  | 'alignItems'\n  | 'alignContent'\n  | 'order'\n  | 'flex'\n  | 'flexGrow'\n  | 'flexShrink'\n  | 'alignSelf'\n  | 'justifyItems'\n  | 'justifySelf'\n>;\n\nexport declare const grid: SimpleStyleFunction<\n  | 'gap'\n  | 'columnGap'\n  | 'rowGap'\n  | 'gridColumn'\n  | 'gridRow'\n  | 'gridAutoFlow'\n  | 'gridAutoColumns'\n  | 'gridAutoRows'\n  | 'gridTemplateColumns'\n  | 'gridTemplateRows'\n  | 'gridTemplateAreas'\n  | 'gridArea'\n>;\n\nexport declare const palette: SimpleStyleFunction<'bgcolor' | 'color'>;\n\nexport declare const positions: SimpleStyleFunction<\n  'zIndex' | 'position' | 'top' | 'right' | 'bottom' | 'left'\n>;\n\nexport declare const shadows: SimpleStyleFunction<'boxShadow'>;\n\nexport declare const sizing: SimpleStyleFunction<\n  | 'width'\n  | 'maxWidth'\n  | 'minWidth'\n  | 'height'\n  | 'maxHeight'\n  | 'minHeight'\n  | 'sizeWidth'\n  | 'sizeHeight'\n  | 'boxSizing'\n>;\n\nexport declare const spacing: SimpleStyleFunction<\n  | 'm'\n  | 'mt'\n  | 'mr'\n  | 'mb'\n  | 'ml'\n  | 'mx'\n  | 'my'\n  | 'p'\n  | 'pt'\n  | 'pr'\n  | 'pb'\n  | 'pl'\n  | 'px'\n  | 'py'\n  | 'margin'\n  | 'marginTop'\n  | 'marginRight'\n  | 'marginBottom'\n  | 'marginLeft'\n  | 'marginX'\n  | 'marginY'\n  | 'marginInline'\n  | 'marginInlineStart'\n  | 'marginInlineEnd'\n  | 'marginBlock'\n  | 'marginBlockStart'\n  | 'marginBlockEnd'\n  | 'padding'\n  | 'paddingTop'\n  | 'paddingRight'\n  | 'paddingBottom'\n  | 'paddingLeft'\n  | 'paddingX'\n  | 'paddingY'\n  | 'paddingInline'\n  | 'paddingInlineStart'\n  | 'paddingInlineEnd'\n  | 'paddingBlock'\n  | 'paddingBlockStart'\n  | 'paddingBlockEnd'\n>;\n\nexport declare const typography: SimpleStyleFunction<\n  | 'typography'\n  | 'fontFamily'\n  | 'fontSize'\n  | 'fontStyle'\n  | 'fontWeight'\n  | 'letterSpacing'\n  | 'lineHeight'\n  | 'textAlign'\n  | 'textTransform'\n>;\n\n// compose.js\n/**\n * given a list of StyleFunction return the intersection of the props each individual\n * StyleFunction requires.\n *\n * If `firstFn` requires { color: string } and `secondFn` requires { spacing: number }\n * their composed function requires { color: string, spacing: number }\n */\ntype ComposedArg<T> = T extends Array<(arg: infer P) => any> ? P : never;\ntype ComposedOwnerState<T> = ComposedArg<T>;\n\nexport type ComposedStyleFunction<T extends Array<StyleFunction<any>>> = StyleFunction<\n  ComposedOwnerState<T>\n> & { filterProps: string[] };\n\nexport interface CustomSystemProps extends AliasesCSSProperties, OverwriteCSSProperties {}\n\nexport type SimpleSystemKeys = keyof PropsFor<\n  ComposedStyleFunction<\n    [\n      typeof borders,\n      typeof display,\n      typeof flexbox,\n      typeof grid,\n      typeof palette,\n      typeof positions,\n      typeof shadows,\n      typeof sizing,\n      typeof spacing,\n      typeof typography,\n    ]\n  >\n>;\n\n// The SimpleSystemKeys are subset of the AllSystemCSSProperties, so this should be ok\n// This is needed as these are used as keys inside AllSystemCSSProperties\ntype StandardSystemKeys = Extract<SimpleSystemKeys, keyof AllSystemCSSProperties>;\n\nexport type SystemProps<Theme extends object = {}> = {\n  [K in StandardSystemKeys]?:\n    | ResponsiveStyleValue<AllSystemCSSProperties[K]>\n    | ((theme: Theme) => ResponsiveStyleValue<AllSystemCSSProperties[K]>);\n};\n\nexport interface BoxOwnProps<Theme extends object = SystemTheme> extends SystemProps<Theme> {\n  children?: React.ReactNode;\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component?: React.ElementType;\n  ref?: React.Ref<unknown>;\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx?: SxProps<Theme>;\n}\n\nexport interface BoxTypeMap<\n  AdditionalProps = {},\n  RootComponent extends React.ElementType = 'div',\n  Theme extends object = SystemTheme,\n> {\n  props: AdditionalProps & BoxOwnProps<Theme>;\n  defaultComponent: RootComponent;\n}\n\n/**\n *\n * Demos:\n *\n * - [Box (Joy UI)](https://mui.com/joy-ui/react-box/)\n * - [Box (Material UI)](https://mui.com/material-ui/react-box/)\n * - [Box (MUI System)](https://mui.com/system/react-box/)\n *\n * API:\n *\n * - [Box API](https://mui.com/system/api/box/)\n */\ndeclare const Box: OverridableComponent<BoxTypeMap>;\n\nexport type BoxProps<\n  RootComponent extends React.ElementType = BoxTypeMap['defaultComponent'],\n  AdditionalProps = {},\n> = OverrideProps<BoxTypeMap<AdditionalProps, RootComponent>, RootComponent> & {\n  component?: React.ElementType;\n};\n\nexport default Box;\n","node_modules/@mui/system/Container/index.d.ts":"export { default } from './Container';\nexport * from './ContainerProps';\n\nexport { default as containerClasses } from './containerClasses';\nexport * from './containerClasses';\n","node_modules/@mui/system/Container/createContainer.d.ts":"import * as React from 'react';\nimport { Interpolation, MUIStyledComponent as StyledComponent } from '@mui/styled-engine';\nimport { OverridableComponent } from '@mui/types';\nimport { ContainerProps, ContainerTypeMap } from './ContainerProps';\nimport { Theme as DefaultTheme } from '../createTheme';\ninterface StyleFnProps<Theme> extends ContainerProps {\n    theme: Theme;\n    ownerState: ContainerProps;\n}\ntype RequiredThemeStructure = Pick<DefaultTheme, 'breakpoints' | 'spacing'>;\nexport default function createContainer<Theme extends RequiredThemeStructure = DefaultTheme>(options?: {\n    createStyledComponent?: (...styles: Array<Interpolation<StyleFnProps<Theme>>>) => StyledComponent<ContainerProps>;\n    useThemeProps?: (inProps: ContainerProps) => ContainerProps & {\n        component?: React.ElementType;\n    };\n    componentName?: string;\n}): OverridableComponent<ContainerTypeMap<{}, \"div\">>;\nexport {};\n","node_modules/@mui/system/Container/containerClasses.d.ts":"export interface ContainerClasses {\n    /** Styles applied to the root element. */\n    root: string;\n    /** Styles applied to the root element if `disableGutters={true}`. */\n    disableGutters: string;\n    /** Styles applied to the root element if `fixed={true}`. */\n    fixed: string;\n    /** Styles applied to the root element if `maxWidth=\"xs\"`. */\n    maxWidthXs: string;\n    /** Styles applied to the root element if `maxWidth=\"sm\"`. */\n    maxWidthSm: string;\n    /** Styles applied to the root element if `maxWidth=\"md\"`. */\n    maxWidthMd: string;\n    /** Styles applied to the root element if `maxWidth=\"lg\"`. */\n    maxWidthLg: string;\n    /** Styles applied to the root element if `maxWidth=\"xl\"`. */\n    maxWidthXl: string;\n}\nexport type ContainerClassKey = keyof ContainerClasses;\nexport declare function getContainerUtilityClass(slot: string): string;\ndeclare const containerClasses: ContainerClasses;\nexport default containerClasses;\n","node_modules/@mui/system/Container/ContainerProps.d.ts":"import * as React from 'react';\nimport { OverrideProps } from '@mui/types';\nimport { SxProps } from '../styleFunctionSx';\nimport { Theme, Breakpoint } from '../createTheme';\nimport { ContainerClasses } from './containerClasses';\nexport interface ContainerTypeMap<AdditionalProps = {}, DefaultComponent extends React.ElementType = 'div'> {\n    props: AdditionalProps & {\n        children?: React.ReactNode;\n        /**\n         * Override or extend the styles applied to the component.\n         */\n        classes?: Partial<ContainerClasses>;\n        /**\n         * If `true`, the left and right padding is removed.\n         * @default false\n         */\n        disableGutters?: boolean;\n        /**\n         * Set the max-width to match the min-width of the current breakpoint.\n         * This is useful if you'd prefer to design for a fixed set of sizes\n         * instead of trying to accommodate a fully fluid viewport.\n         * It's fluid by default.\n         * @default false\n         */\n        fixed?: boolean;\n        /**\n         * Determine the max-width of the container.\n         * The container width grows with the size of the screen.\n         * Set to `false` to disable `maxWidth`.\n         * @default 'lg'\n         */\n        maxWidth?: Breakpoint | false;\n        /**\n         * The system prop that allows defining system overrides as well as additional CSS styles.\n         */\n        sx?: SxProps<Theme>;\n    };\n    defaultComponent: DefaultComponent;\n}\nexport type ContainerProps<RootComponent extends React.ElementType = ContainerTypeMap['defaultComponent'], AdditionalProps = {}> = OverrideProps<ContainerTypeMap<AdditionalProps, RootComponent>, RootComponent>;\n","node_modules/@mui/system/Container/Container.d.ts":"/**\n *\n * Demos:\n *\n * - [Container (Material UI)](https://mui.com/material-ui/react-container/)\n * - [Container (MUI System)](https://mui.com/system/react-container/)\n *\n * API:\n *\n * - [Container API](https://mui.com/system/api/container/)\n */\ndeclare const Container: import(\"@mui/types\").OverridableComponent<import(\"./ContainerProps\").ContainerTypeMap<{}, \"div\">>;\nexport default Container;\n","node_modules/@mui/system/RtlProvider/index.d.ts":"import * as React from 'react';\n\ninterface RtlProviderProps {\n  children?: React.ReactNode;\n  value?: boolean;\n}\n\ndeclare const RtlProvider: React.FC<RtlProviderProps>;\nexport const useRtl: () => boolean;\n\nexport default RtlProvider;\n","node_modules/@mui/system/createTheme/shape.d.ts":"export interface Shape {\n  borderRadius: number;\n}\n\nexport type ShapeOptions = Partial<Shape>;\n\ndeclare const shape: Shape;\n\nexport default shape;\n","node_modules/@mui/system/createTheme/index.d.ts":"export { default } from './createTheme';\nexport * from './createTheme';\nexport { default as unstable_applyStyles } from './applyStyles';\nexport * from './applyStyles';\n","node_modules/@mui/system/createTheme/createTheme.d.ts":"import { CSSObject } from '@mui/styled-engine';\nimport { Breakpoints, BreakpointsOptions } from './createBreakpoints';\nimport { Shape, ShapeOptions } from './shape';\nimport { Spacing, SpacingOptions } from './createSpacing';\nimport { SxConfig, SxProps } from '../styleFunctionSx';\nimport { ApplyStyles } from './applyStyles';\n\nexport { Breakpoint, BreakpointOverrides } from './createBreakpoints';\n\nexport type Direction = 'ltr' | 'rtl';\n\nexport interface ThemeOptions {\n  shape?: ShapeOptions;\n  breakpoints?: BreakpointsOptions;\n  direction?: Direction;\n  mixins?: unknown;\n  palette?: Record<string, any>;\n  shadows?: unknown;\n  spacing?: SpacingOptions;\n  transitions?: unknown;\n  components?: Record<string, any>;\n  typography?: unknown;\n  zIndex?: Record<string, number>;\n  unstable_sxConfig?: SxConfig;\n}\n\nexport interface Theme {\n  shape: Shape;\n  breakpoints: Breakpoints;\n  direction: Direction;\n  palette: Record<string, any> & { mode: 'light' | 'dark' };\n  shadows?: unknown;\n  spacing: Spacing;\n  transitions?: unknown;\n  components?: Record<string, any>;\n  mixins?: unknown;\n  typography?: unknown;\n  zIndex?: unknown;\n  applyStyles: ApplyStyles<'light' | 'dark'>;\n  unstable_sxConfig: SxConfig;\n  unstable_sx: (props: SxProps<Theme>) => CSSObject;\n}\n\n/**\n * Generate a theme base on the options received.\n * @param options Takes an incomplete theme object and adds the missing parts.\n * @param args Deep merge the arguments with the about to be returned theme.\n * @returns A complete, ready-to-use theme object.\n */\nexport default function createTheme(options?: ThemeOptions, ...args: object[]): Theme;\n","node_modules/@mui/system/createTheme/createSpacing.d.ts":"export type SpacingOptions = number | Spacing | ((abs: number) => number | string) | ((abs: number | string) => number | string) | ReadonlyArray<string | number>;\nexport type SpacingArgument = number | string;\nexport interface Spacing {\n    (): string;\n    (value: SpacingArgument): string;\n    (topBottom: SpacingArgument, rightLeft: SpacingArgument): string;\n    (top: SpacingArgument, rightLeft: SpacingArgument, bottom: SpacingArgument): string;\n    (top: SpacingArgument, right: SpacingArgument, bottom: SpacingArgument, left: SpacingArgument): string;\n}\nexport default function createSpacing(spacingInput?: SpacingOptions): Spacing;\n","node_modules/@mui/system/createTheme/createBreakpoints.d.ts":"import { OverridableStringUnion } from '@mui/types';\n\nexport interface BreakpointOverrides {}\n\nexport type Breakpoint = OverridableStringUnion<\n  'xs' | 'sm' | 'md' | 'lg' | 'xl',\n  BreakpointOverrides\n>;\nexport const keys: Breakpoint[];\n\n// Keep in sync with docs/src/pages/customization/breakpoints/breakpoints.md\n// #default-branch-switch\nexport interface Breakpoints {\n  keys: Breakpoint[];\n  /**\n   * Each breakpoint (a key) matches with a fixed screen width (a value).\n   * @default {\n   *    // extra-small\n   *    xs: 0,\n   *    // small\n   *    sm: 600,\n   *    // medium\n   *    md: 900,\n   *    // large\n   *    lg: 1200,\n   *    // extra-large\n   *    xl: 1536,\n   * }\n   */\n  values: { [key in Breakpoint]: number };\n  /**\n   * @param key - A breakpoint key (`xs`, `sm`, etc.) or a screen width number in px.\n   * @returns A media query string ready to be used with most styling solutions, which matches screen widths greater than the screen size given by the breakpoint key (inclusive).\n   * @see [API documentation](https://mui.com/material-ui/customization/breakpoints/#theme-breakpoints-up-key-media-query)\n   */\n  up: (key: Breakpoint | number) => string;\n  /**\n   * @param key - A breakpoint key (`xs`, `sm`, etc.) or a screen width number in px.\n   * @returns A media query string ready to be used with most styling solutions, which matches screen widths less than the screen size given by the breakpoint key (exclusive).\n   * @see [API documentation](https://mui.com/material-ui/customization/breakpoints/#theme-breakpoints-down-key-media-query)\n   */\n  down: (key: Breakpoint | number) => string;\n  /**\n   * @param start - A breakpoint key (`xs`, `sm`, etc.) or a screen width number in px.\n   * @param end - A breakpoint key (`xs`, `sm`, etc.) or a screen width number in px.\n   * @returns A media query string ready to be used with most styling solutions, which matches screen widths greater than\n   *          the screen size given by the breakpoint key in the first argument (inclusive) and less than the screen size given by the breakpoint key in the second argument (exclusive).\n   * @see [API documentation](https://mui.com/material-ui/customization/breakpoints/#theme-breakpoints-between-start-end-media-query)\n   */\n  between: (start: Breakpoint | number, end: Breakpoint | number) => string;\n  /**\n   * @param key - A breakpoint key (`xs`, `sm`, etc.) or a screen width number in px.\n   * @returns A media query string ready to be used with most styling solutions, which matches screen widths starting from\n   *          the screen size given by the breakpoint key (inclusive) and stopping at the screen size given by the next breakpoint key (exclusive).\n   * @see [API documentation](https://mui.com/material-ui/customization/breakpoints/#theme-breakpoints-only-key-media-query)\n   */\n  only: (key: Breakpoint) => string;\n  /**\n   * @param key - A breakpoint key (`xs`, `sm`, etc.).\n   * @returns A media query string ready to be used with most styling solutions, which matches screen widths stopping at\n   *          the screen size given by the breakpoint key (exclusive) and starting at the screen size given by the next breakpoint key (inclusive).\n   */\n  not: (key: Breakpoint) => string;\n  /**\n   * The unit used for the breakpoint's values.\n   * @default 'px'\n   */\n  unit?: string | undefined;\n}\n\nexport interface BreakpointsOptions extends Partial<Breakpoints> {\n  /**\n   * The increment divided by 100 used to implement exclusive breakpoints.\n   * For example, `step: 5` means that `down(500)` will result in `'(max-width: 499.95px)'`.\n   * @default 5\n   */\n  step?: number | undefined;\n  /**\n   * The unit used for the breakpoint's values.\n   * @default 'px'\n   */\n  unit?: string | undefined;\n}\n\nexport default function createBreakpoints(options: BreakpointsOptions): Breakpoints;\n","node_modules/@mui/system/createTheme/applyStyles.d.ts":"import { CSSObject } from '@mui/styled-engine';\nexport interface ApplyStyles<K extends string> {\n    (key: K, styles: CSSObject): CSSObject;\n}\n/**\n * A universal utility to style components with multiple color modes. Always use it from the theme object.\n * It works with:\n *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)\n *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)\n *  - Zero-runtime engine\n *\n * Tips: Use an array over object spread and place `theme.applyStyles()` last.\n *\n * ✅ [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]\n *\n * 🚫 { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}\n *\n * @example\n * 1. using with `styled`:\n * ```jsx\n *   const Component = styled('div')(({ theme }) => [\n *     { background: '#e5e5e5' },\n *     theme.applyStyles('dark', {\n *       background: '#1c1c1c',\n *       color: '#fff',\n *     }),\n *   ]);\n * ```\n *\n * @example\n * 2. using with `sx` prop:\n * ```jsx\n *   <Box sx={theme => [\n *     { background: '#e5e5e5' },\n *     theme.applyStyles('dark', {\n *        background: '#1c1c1c',\n *        color: '#fff',\n *      }),\n *     ]}\n *   />\n * ```\n *\n * @example\n * 3. theming a component:\n * ```jsx\n *   extendTheme({\n *     components: {\n *       MuiButton: {\n *         styleOverrides: {\n *           root: ({ theme }) => [\n *             { background: '#e5e5e5' },\n *             theme.applyStyles('dark', {\n *               background: '#1c1c1c',\n *               color: '#fff',\n *             }),\n *           ],\n *         },\n *       }\n *     }\n *   })\n *```\n */\nexport default function applyStyles<K extends string>(key: K, styles: CSSObject): CSSObject;\n","node_modules/@mui/utils/package.json":"{\n  \"name\": \"@mui/utils\",\n  \"version\": \"5.15.14\",\n  \"private\": false,\n  \"author\": \"MUI Team\",\n  \"description\": \"Utility functions for React components.\",\n  \"main\": \"./node/index.js\",\n  \"keywords\": [\n    \"react\",\n    \"react-component\",\n    \"mui\",\n    \"utils\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mui/material-ui.git\",\n    \"directory\": \"packages/mui-utils\"\n  },\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mui/material-ui/issues\"\n  },\n  \"homepage\": \"private package\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/mui-org\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.23.9\",\n    \"@types/prop-types\": \"^15.7.11\",\n    \"prop-types\": \"^15.8.1\",\n    \"react-is\": \"^18.2.0\"\n  },\n  \"peerDependencies\": {\n    \"@types/react\": \"^17.0.0 || ^18.0.0\",\n    \"react\": \"^17.0.0 || ^18.0.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"@types/react\": {\n      \"optional\": true\n    }\n  },\n  \"sideEffects\": false,\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"directory\": \"build\"\n  },\n  \"engines\": {\n    \"node\": \">=12.0.0\"\n  },\n  \"module\": \"./index.js\",\n  \"types\": \"./index.d.ts\"\n}","node_modules/@mui/utils/index.d.ts":"export { default as chainPropTypes } from './chainPropTypes';\nexport { default as deepmerge } from './deepmerge';\nexport { isPlainObject } from './deepmerge';\nexport { default as elementAcceptingRef } from './elementAcceptingRef';\nexport { default as elementTypeAcceptingRef } from './elementTypeAcceptingRef';\nexport { default as exactProp } from './exactProp';\nexport { default as formatMuiErrorMessage } from './formatMuiErrorMessage';\nexport { default as getDisplayName } from './getDisplayName';\nexport { default as HTMLElementType } from './HTMLElementType';\nexport { default as ponyfillGlobal } from './ponyfillGlobal';\nexport { default as refType } from './refType';\nexport { default as unstable_capitalize } from './capitalize';\nexport { default as unstable_createChainedFunction } from './createChainedFunction';\nexport { default as unstable_debounce } from './debounce';\nexport { default as unstable_deprecatedPropType } from './deprecatedPropType';\nexport { default as unstable_isMuiElement } from './isMuiElement';\nexport { default as unstable_ownerDocument } from './ownerDocument';\nexport { default as unstable_ownerWindow } from './ownerWindow';\nexport { default as unstable_requirePropFactory } from './requirePropFactory';\nexport { default as unstable_setRef } from './setRef';\nexport { default as unstable_useEnhancedEffect } from './useEnhancedEffect';\nexport { default as unstable_useId } from './useId';\nexport { default as unstable_unsupportedProp } from './unsupportedProp';\nexport { default as unstable_useControlled } from './useControlled';\nexport { default as unstable_useEventCallback } from './useEventCallback';\nexport { default as unstable_useForkRef } from './useForkRef';\nexport { default as unstable_useLazyRef } from './useLazyRef';\nexport { default as unstable_useTimeout, Timeout as unstable_Timeout } from './useTimeout';\nexport { default as unstable_useOnMount } from './useOnMount';\nexport { default as unstable_useIsFocusVisible } from './useIsFocusVisible';\nexport { default as unstable_getScrollbarSize } from './getScrollbarSize';\nexport { detectScrollType as unstable_detectScrollType, getNormalizedScrollLeft as unstable_getNormalizedScrollLeft, } from './scrollLeft';\nexport { default as usePreviousProps } from './usePreviousProps';\nexport { default as getValidReactChildren } from './getValidReactChildren';\nexport { default as visuallyHidden } from './visuallyHidden';\nexport { default as integerPropType } from './integerPropType';\nexport { default as internal_resolveProps } from './resolveProps';\nexport { default as unstable_composeClasses } from './composeClasses';\nexport { default as unstable_generateUtilityClass } from './generateUtilityClass';\nexport { isGlobalState as unstable_isGlobalState } from './generateUtilityClass';\nexport * from './generateUtilityClass';\nexport { default as unstable_generateUtilityClasses } from './generateUtilityClasses';\nexport { default as unstable_ClassNameGenerator } from './ClassNameGenerator';\nexport { default as clamp } from './clamp';\n","node_modules/@mui/utils/visuallyHidden/visuallyHidden.d.ts":"declare const visuallyHidden: import('react').CSSProperties;\nexport default visuallyHidden;\n","node_modules/@mui/utils/visuallyHidden/index.d.ts":"export { default } from './visuallyHidden';\n","node_modules/@mui/utils/useTimeout/useTimeout.d.ts":"export declare class Timeout {\n    static create(): Timeout;\n    currentId: ReturnType<typeof setTimeout> | null;\n    /**\n     * Executes `fn` after `delay`, clearing any previously scheduled call.\n     */\n    start(delay: number, fn: Function): void;\n    clear: () => void;\n    disposeEffect: () => () => void;\n}\nexport default function useTimeout(): Timeout;\n","node_modules/@mui/utils/useTimeout/index.d.ts":"export { default } from './useTimeout';\nexport { Timeout } from './useTimeout';\n","node_modules/@mui/utils/useOnMount/useOnMount.d.ts":"import * as React from 'react';\n/**\n * A React.useEffect equivalent that runs once, when the component is mounted.\n */\nexport default function useOnMount(fn: React.EffectCallback): void;\n","node_modules/@mui/utils/useOnMount/index.d.ts":"export { default } from './useOnMount';\n","node_modules/@mui/utils/useLocalStorageState/useLocalStorageState.d.ts":"import * as React from 'react';\ntype Initializer = () => string | null;\ntype UseStorageStateHookResult = [\n    string | null,\n    React.Dispatch<React.SetStateAction<string | null>>\n];\n/**\n * Sync state to local storage so that it persists through a page refresh. Usage is\n * similar to useState except we pass in a storage key so that we can default\n * to that value on page load instead of the specified initial value.\n *\n * Since the storage API isn't available in server-rendering environments, we\n * return null during SSR and hydration.\n */\ndeclare function useLocalStorageStateBrowser(key: string | null, initializer?: string | null | Initializer): UseStorageStateHookResult;\ndeclare const _default: typeof useLocalStorageStateBrowser;\nexport default _default;\n","node_modules/@mui/utils/useLocalStorageState/index.d.ts":"export { default } from './useLocalStorageState';\n","node_modules/@mui/utils/useLazyRef/useLazyRef.d.ts":"import * as React from 'react';\n/**\n * A React.useRef() that is initialized lazily with a function. Note that it accepts an optional\n * initialization argument, so the initialization function doesn't need to be an inline closure.\n *\n * @usage\n *   const ref = useLazyRef(sortColumns, columns)\n */\nexport default function useLazyRef<T, U>(init: (arg?: U) => T, initArg?: U): React.MutableRefObject<T>;\n","node_modules/@mui/utils/useLazyRef/index.d.ts":"export { default } from './useLazyRef';\n","node_modules/@mui/utils/useIsFocusVisible/useIsFocusVisible.d.ts":"import * as React from 'react';\nexport declare function teardown(doc: Document): void;\nexport interface UseIsFocusVisibleResult {\n    isFocusVisibleRef: React.MutableRefObject<boolean>;\n    onBlur: (event: React.FocusEvent<any>) => void;\n    onFocus: (event: React.FocusEvent<any>) => void;\n    ref: React.RefCallback<Element>;\n}\nexport default function useIsFocusVisible(): UseIsFocusVisibleResult;\n","node_modules/@mui/utils/useIsFocusVisible/index.d.ts":"export { default } from './useIsFocusVisible';\nexport * from './useIsFocusVisible';\n","node_modules/@mui/utils/useForkRef/useForkRef.d.ts":"import * as React from 'react';\nexport default function useForkRef<Instance>(...refs: Array<React.Ref<Instance> | undefined>): React.RefCallback<Instance> | null;\n","node_modules/@mui/utils/useForkRef/index.d.ts":"export { default } from './useForkRef';\n","node_modules/@mui/utils/usePreviousProps/usePreviousProps.d.ts":"declare const usePreviousProps: <T>(value: T) => Partial<T>;\nexport default usePreviousProps;\n","node_modules/@mui/utils/usePreviousProps/index.d.ts":"export { default } from './usePreviousProps';\n","node_modules/@mui/utils/useEventCallback/useEventCallback.d.ts":"/**\n * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892\n * See RFC in https://github.com/reactjs/rfcs/pull/220\n */\ndeclare function useEventCallback<Fn extends (...args: any[]) => any = (...args: unknown[]) => unknown>(fn: Fn): Fn;\ndeclare function useEventCallback<Args extends unknown[], Return>(fn: (...args: Args) => Return): (...args: Args) => Return;\nexport default useEventCallback;\n","node_modules/@mui/utils/useEventCallback/index.d.ts":"export { default } from './useEventCallback';\n","node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.d.ts":"import * as React from 'react';\n/**\n * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.\n * This is useful for effects that are only needed for client-side rendering but not for SSR.\n *\n * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * and confirm it doesn't apply to your use-case.\n */\ndeclare const useEnhancedEffect: typeof React.useLayoutEffect;\nexport default useEnhancedEffect;\n","node_modules/@mui/utils/useEnhancedEffect/index.d.ts":"export { default } from './useEnhancedEffect';\n","node_modules/@mui/utils/unsupportedProp/unsupportedProp.d.ts":"export default function unsupportedProp(\n  props: { [key: string]: any },\n  propName: string,\n  componentName: string,\n  location: string,\n  propFullName: string,\n): Error | null;\n","node_modules/@mui/utils/unsupportedProp/index.d.ts":"export { default } from './unsupportedProp';\n","node_modules/@mui/utils/useControlled/useControlled.d.ts":"export interface UseControlledProps<T = unknown> {\n  /**\n   * Holds the component value when it's controlled.\n   */\n  controlled: T | undefined;\n  /**\n   * The default value when uncontrolled.\n   */\n  default: T | undefined;\n  /**\n   * The component name displayed in warnings.\n   */\n  name: string;\n  /**\n   * The name of the state variable displayed in warnings.\n   */\n  state?: string;\n}\n\nexport default function useControlled<T = unknown>(\n  props: UseControlledProps<T>,\n): [T, (newValue: T | ((prevValue: T) => T)) => void];\n","node_modules/@mui/utils/useControlled/index.d.ts":"export { default } from './useControlled';\nexport * from './useControlled';\n","node_modules/@mui/utils/setRef/setRef.d.ts":"import * as React from 'react';\n/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef<T>(ref: React.MutableRefObject<T | null> | ((instance: T | null) => void) | null | undefined, value: T | null): void;\n","node_modules/@mui/utils/setRef/index.d.ts":"export { default } from './setRef';\n","node_modules/@mui/utils/scrollLeft/scrollLeft.d.ts":"export function detectScrollType(): string;\nexport function getNormalizedScrollLeft(element: HTMLElement, direction: string): number;\n","node_modules/@mui/utils/scrollLeft/index.d.ts":"export * from './scrollLeft';\n","node_modules/@mui/utils/resolveProps/resolveProps.d.ts":"/**\n * Add keys, values of `defaultProps` that does not exist in `props`\n * @param {object} defaultProps\n * @param {object} props\n * @returns {object} resolved props\n */\nexport default function resolveProps<T extends {\n    components?: Record<string, unknown>;\n    componentsProps?: Record<string, unknown>;\n    slots?: Record<string, unknown>;\n    slotProps?: Record<string, unknown>;\n} & Record<string, unknown>>(defaultProps: T, props: T): T;\n","node_modules/@mui/utils/resolveProps/index.d.ts":"export { default } from './resolveProps';\n","node_modules/@mui/utils/useId/useId.d.ts":"/**\n *\n * @example <div id={useId()} />\n * @param idOverride\n * @returns {string}\n */\nexport default function useId(idOverride?: string): string | undefined;\n","node_modules/@mui/utils/useId/index.d.ts":"export { default } from './useId';\n","node_modules/@mui/utils/refType/refType.d.ts":"import PropTypes from 'prop-types';\ndeclare const refType: PropTypes.Requireable<object>;\nexport default refType;\n","node_modules/@mui/utils/refType/index.d.ts":"export { default } from './refType';\n","node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.d.ts":"declare const _default: any;\nexport default _default;\n","node_modules/@mui/utils/ponyfillGlobal/index.d.ts":"export { default } from './ponyfillGlobal';\n","node_modules/@mui/utils/ownerWindow/ownerWindow.d.ts":"export default function ownerWindow(node: Node | undefined): Window;\n","node_modules/@mui/utils/ownerWindow/index.d.ts":"export { default } from './ownerWindow';\n","node_modules/@mui/utils/ownerDocument/ownerDocument.d.ts":"export default function ownerDocument(node: Node | null | undefined): Document;\n","node_modules/@mui/utils/ownerDocument/index.d.ts":"export { default } from './ownerDocument';\n","node_modules/@mui/utils/isMuiElement/isMuiElement.d.ts":"export default function isMuiElement(element: any, muiNames: readonly string[]): boolean;\n","node_modules/@mui/utils/isMuiElement/index.d.ts":"export { default } from './isMuiElement';\n","node_modules/@mui/utils/requirePropFactory/requirePropFactory.d.ts":"import * as React from 'react';\n\nexport default function requirePropFactory(\n  componentNameInError: string,\n  Component?: React.JSXElementConstructor<unknown>,\n): any;\n","node_modules/@mui/utils/requirePropFactory/index.d.ts":"export { default } from './requirePropFactory';\n","node_modules/@mui/utils/integerPropType/integerPropType.d.ts":"import PropTypes from 'prop-types';\n\ndeclare const integerPropType: PropTypes.Requireable<number>;\n\nexport default integerPropType;\n","node_modules/@mui/utils/integerPropType/index.d.ts":"export { default } from './integerPropType';\nexport * from './integerPropType';\n","node_modules/@mui/utils/getValidReactChildren/index.d.ts":"export { default } from './getValidReactChildren';\n","node_modules/@mui/utils/getValidReactChildren/getValidReactChildren.d.ts":"import * as React from 'react';\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport default function getValidReactChildren(children: React.ReactNode): React.ReactElement<any, string | React.JSXElementConstructor<any>>[];\n","node_modules/@mui/utils/getScrollbarSize/index.d.ts":"export { default } from './getScrollbarSize';\n","node_modules/@mui/utils/getScrollbarSize/getScrollbarSize.d.ts":"export default function getScrollbarSize(doc: Document): number;\n","node_modules/@mui/utils/getDisplayName/index.d.ts":"export { default } from './getDisplayName';\nexport * from './getDisplayName';\n","node_modules/@mui/utils/getDisplayName/getDisplayName.d.ts":"import * as React from 'react';\nexport declare function getFunctionName(fn: Function): string;\n/**\n * cherry-pick from\n * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js\n * originally forked from recompose/getDisplayName with added IE11 support\n */\nexport default function getDisplayName(Component: React.ElementType): string | undefined;\n","node_modules/@mui/utils/generateUtilityClass/index.d.ts":"export { default } from './generateUtilityClass';\nexport * from './generateUtilityClass';\n","node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.d.ts":"export type GlobalStateSlot = keyof typeof globalStateClasses;\nexport declare const globalStateClasses: {\n    active: string;\n    checked: string;\n    completed: string;\n    disabled: string;\n    error: string;\n    expanded: string;\n    focused: string;\n    focusVisible: string;\n    open: string;\n    readOnly: string;\n    required: string;\n    selected: string;\n};\nexport default function generateUtilityClass(componentName: string, slot: string, globalStatePrefix?: string): string;\nexport declare function isGlobalState(slot: string): boolean;\n","node_modules/@mui/utils/generateUtilityClasses/index.d.ts":"export { default } from './generateUtilityClasses';\n","node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.d.ts":"export default function generateUtilityClasses<T extends string>(componentName: string, slots: T[], globalStatePrefix?: string): Record<T, string>;\n","node_modules/@mui/utils/formatMuiErrorMessage/index.d.ts":"export { default } from './formatMuiErrorMessage';\n","node_modules/@mui/utils/formatMuiErrorMessage/formatMuiErrorMessage.d.ts":"/**\n * WARNING: Don't import this directly.\n * Use `MuiError` from `@mui/internal-babel-macros/MuiError.macro` instead.\n * @param {number} code\n */\nexport default function formatMuiErrorMessage(code: number): string;\n","node_modules/@mui/utils/exactProp/index.d.ts":"export { default } from './exactProp';\n","node_modules/@mui/utils/exactProp/exactProp.d.ts":"import { ValidationMap } from 'prop-types';\nexport default function exactProp<T>(propTypes: ValidationMap<T>): ValidationMap<T>;\n","node_modules/@mui/utils/elementTypeAcceptingRef/index.d.ts":"export { default } from './elementTypeAcceptingRef';\n","node_modules/@mui/utils/elementTypeAcceptingRef/elementTypeAcceptingRef.d.ts":"import PropTypes from 'prop-types';\ndeclare const _default: PropTypes.Validator<PropTypes.ReactComponentLike | null | undefined>;\nexport default _default;\n","node_modules/@mui/utils/deepmerge/index.d.ts":"export { default } from './deepmerge';\nexport * from './deepmerge';\n","node_modules/@mui/utils/deepmerge/deepmerge.d.ts":"export declare function isPlainObject(item: unknown): item is Record<keyof any, unknown>;\nexport interface DeepmergeOptions {\n    clone?: boolean;\n}\nexport default function deepmerge<T>(target: T, source: unknown, options?: DeepmergeOptions): T;\n","node_modules/@mui/utils/deprecatedPropType/index.d.ts":"export { default } from './deprecatedPropType';\n","node_modules/@mui/utils/deprecatedPropType/deprecatedPropType.d.ts":"export default function deprecatedPropType<T>(validator: T, reason: string): T;\n","node_modules/@mui/utils/elementAcceptingRef/index.d.ts":"export { default } from './elementAcceptingRef';\n","node_modules/@mui/utils/elementAcceptingRef/elementAcceptingRef.d.ts":"import PropTypes from 'prop-types';\ndeclare const elementAcceptingRef: PropTypes.Requireable<unknown>;\nexport default elementAcceptingRef;\n","node_modules/@mui/utils/debounce/index.d.ts":"export { default } from './debounce';\nexport * from './debounce';\n","node_modules/@mui/utils/debounce/debounce.d.ts":"export interface Cancelable {\n    clear(): void;\n}\nexport default function debounce<T extends (...args: any[]) => any>(func: T, wait?: number): T & Cancelable;\n","node_modules/@mui/utils/createChainedFunction/index.d.ts":"export { default } from './createChainedFunction';\n","node_modules/@mui/utils/createChainedFunction/createChainedFunction.d.ts":"/**\n * Safe chained function.\n *\n * Will only create a new function if needed,\n * otherwise will pass back existing functions or null.\n */\nexport default function createChainedFunction<Args extends any[], This>(...funcs: Array<(this: This, ...args: Args) => any>): (this: This, ...args: Args) => void;\n","node_modules/@mui/utils/composeClasses/index.d.ts":"export { default } from './composeClasses';\n","node_modules/@mui/utils/composeClasses/composeClasses.d.ts":"export default function composeClasses<ClassKey extends string>(slots: Record<ClassKey, ReadonlyArray<string | false | undefined | null>>, getUtilityClass: (slot: string) => string, classes?: Record<string, string> | undefined): Record<ClassKey, string>;\n","node_modules/@mui/utils/clamp/index.d.ts":"export { default } from './clamp';\n","node_modules/@mui/utils/clamp/clamp.d.ts":"declare function clamp(val: number, min?: number, max?: number): number;\nexport default clamp;\n","node_modules/@mui/utils/chainPropTypes/index.d.ts":"export { default } from './chainPropTypes';\n","node_modules/@mui/utils/chainPropTypes/chainPropTypes.d.ts":"import PropTypes from 'prop-types';\nexport default function chainPropTypes<A, B>(propType1: PropTypes.Validator<A>, propType2: PropTypes.Validator<B>): PropTypes.Validator<A & B>;\n","node_modules/@mui/utils/capitalize/index.d.ts":"export { default } from './capitalize';\n","node_modules/@mui/utils/capitalize/capitalize.d.ts":"export default function capitalize(string: string): string;\n","node_modules/@mui/utils/ClassNameGenerator/index.d.ts":"export { default } from './ClassNameGenerator';\n","node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.d.ts":"declare const ClassNameGenerator: {\n    configure(generator: (componentName: string) => string): void;\n    generate(componentName: string): string;\n    reset(): void;\n};\nexport default ClassNameGenerator;\n","node_modules/@mui/utils/HTMLElementType/index.d.ts":"export { default } from './HTMLElementType';\n","node_modules/@mui/utils/HTMLElementType/HTMLElementType.d.ts":"export default function HTMLElementType(props: {\n    [key: string]: unknown;\n}, propName: string, componentName: string, location: string, propFullName: string): Error | null;\n"}