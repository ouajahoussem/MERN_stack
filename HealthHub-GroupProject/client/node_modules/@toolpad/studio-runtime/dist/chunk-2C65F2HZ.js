// src/auth.ts
import { getToken } from "@auth/core/jwt";
import { adaptRequestFromExpressToFetch } from "@toolpad/utils/httpApiAdapters";
import { FirestoreAdapter } from "@auth/firebase-adapter";
import * as cookie from "cookie";
async function getSession(req) {
  const request = adaptRequestFromExpressToFetch(req);
  const session = null;
  if (process.env.TOOLPAD_AUTH_SECRET) {
    const firebaseAdapter = FirestoreAdapter();
    if (process.env.GOOGLE_APPLICATION_CREDENTIALS && firebaseAdapter.getSessionAndUser) {
      const parsedCookies = cookie.parse(req.headers.cookie ?? "");
      const sessionToken = parsedCookies["authjs.session-token"];
      const firebaseSessionAndUser = sessionToken ? await firebaseAdapter.getSessionAndUser(sessionToken) : null;
      return firebaseSessionAndUser && {
        user: {
          name: firebaseSessionAndUser.user.name,
          email: firebaseSessionAndUser.user.email,
          avatar: firebaseSessionAndUser.user.image,
          roles: []
        }
      };
    }
    const token = await getToken({
      req: request,
      secret: process.env.TOOLPAD_AUTH_SECRET
    });
    return token && {
      user: {
        name: token.name,
        email: token.email,
        avatar: token.picture,
        roles: token.roles
      }
    };
  }
  return session;
}

export {
  getSession
};
//# sourceMappingURL=chunk-2C65F2HZ.js.map