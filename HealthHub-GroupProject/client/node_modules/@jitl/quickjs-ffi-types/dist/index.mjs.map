{"version":3,"sources":["../src/ffi-types.ts"],"sourcesContent":["/**\n * C pointer to type `CType`. Pointer types are used internally for FFI, but\n * are not intended for external use.\n *\n * @unstable This type is considered private and may change.\n */\ntype Pointer<CType extends string> = number & { ctype: CType }\n\ntype Brand<T, B> = T & { brand: B }\n\n/**\n * `JSRuntime*`.\n */\nexport type JSRuntimePointer = Pointer<\"JSRuntime\">\n\n/**\n * `JSContext*`.\n */\nexport type JSContextPointer = Pointer<\"JSContext\">\n\n/**\n * `JSContext**`. Used internally for execute pending jobs.\n */\nexport type JSContextPointerPointer = Pointer<\"JSContext\">\n\n/**\n * `JSModuleDef*`.\n */\nexport type JSModuleDefPointer = Pointer<\"JSModuleDef\">\n\n/**\n * `JSValue*`.\n * See {@link JSValue}.\n */\nexport type JSValuePointer = Pointer<\"JSValue\">\n\n/**\n * `JSValueConst*\n * See {@link JSValueConst} and {@link StaticJSValue}.\n */\nexport type JSValueConstPointer = Pointer<\"JSValueConst\">\n\n/**\n * Used internally for Javascript-to-C function calls.\n */\nexport type JSValuePointerPointer = Pointer<\"JSValue[]\">\n\n/**\n * Used internally for Javascript-to-C function calls.\n */\nexport type JSValueConstPointerPointer = Pointer<\"JSValueConst[]\">\n\n/**\n * Used internally for C-to-Javascript function calls.\n */\n// type JSCFunctionPointer = Pointer<'JSCFunction'>\n\n/**\n * Used internally for C-to-Javascript function calls.\n */\nexport type QTS_C_To_HostCallbackFuncPointer = Pointer<\"C_To_HostCallbackFunc\">\n\n/**\n * Used internally for C-to-Javascript interrupt handlers.\n */\nexport type QTS_C_To_HostInterruptFuncPointer = Pointer<\"C_To_HostInterruptFunc\">\n\n/**\n * Used internally for C-to-Javascript module loading.\n */\nexport type QTS_C_To_HostLoadModuleFuncPointer = Pointer<\"C_To_HostLoadModuleFunc\">\n\n/**\n * Used internally for Javascript-to-C calls that may contain strings too large\n * for the Emscripten stack.\n */\nexport type BorrowedHeapCharPointer = Pointer<\"const char\" | \"char\" | \"js const char\">\n\n/**\n * Used internally for Javascript-to-C calls that may contain strings too large\n * for the Emscripten stack.\n */\nexport type OwnedHeapCharPointer = Pointer<\"char\">\n\n/**\n * Used internally for Javascript-to-C calls that may contain strings too large\n * for the Emscripten stack.\n */\nexport type JSBorrowedCharPointer = Pointer<\"js const char\">\n\n/**\n * Opaque pointer that was allocated by js_malloc.\n */\nexport type JSVoidPointer = Pointer<any>\n\n/**\n * @private\n */\nexport type EvalFlags = Brand<number, \"EvalFlags\">\n\n/**\n * @private\n */\nexport type IntrinsicsFlags = Brand<number, \"IntrinsicsFlags\">\n\n/**\n * @private\n */\nexport type EvalDetectModule = Brand<number, \"EvalDetectModule\">\n\n/**\n * State of a promise.\n */\nexport type JSPromiseStateEnum = Brand<\n  (typeof JSPromiseStateEnum)[keyof typeof JSPromiseStateEnum],\n  \"JSPromiseStateEnum\"\n>\n\nexport function assertSync<Args extends any[], R>(fn: (...args: Args) => R): (...args: Args) => R {\n  return function mustBeSync(...args: Args): R {\n    const result = fn(...args)\n    if (result && typeof result === \"object\" && result instanceof Promise) {\n      throw new Error(\"Function unexpectedly returned a Promise\")\n    }\n    return result\n  }\n}\n\n/** Bitfield options for JS_Eval() C function. */\nexport const EvalFlags = {\n  /** global code (default) */\n  JS_EVAL_TYPE_GLOBAL: 0 << 0,\n  /** module code */\n  JS_EVAL_TYPE_MODULE: 1 << 0,\n  /** direct call (internal use) */\n  JS_EVAL_TYPE_DIRECT: 2 << 0,\n  /** indirect call (internal use) */\n  JS_EVAL_TYPE_INDIRECT: 3 << 0,\n  JS_EVAL_TYPE_MASK: 3 << 0,\n  /** force 'strict' mode */\n  JS_EVAL_FLAG_STRICT: 1 << 3,\n  /** force 'strip' mode */\n  JS_EVAL_FLAG_STRIP: 1 << 4,\n  /**\n   * compile but do not run. The result is an object with a\n   * JS_TAG_FUNCTION_BYTECODE or JS_TAG_MODULE tag. It can be executed\n   * with JS_EvalFunction().\n   */\n  JS_EVAL_FLAG_COMPILE_ONLY: 1 << 5,\n  /** don't include the stack frames before this eval in the Error() backtraces */\n  JS_EVAL_FLAG_BACKTRACE_BARRIER: 1 << 6,\n} as const\n\n/** Bitfield options for QTS_NewContext intrinsices */\nexport const IntrinsicsFlags = {\n  BaseObjects: 1 << 0,\n  Date: 1 << 1,\n  Eval: 1 << 2,\n  StringNormalize: 1 << 3,\n  RegExp: 1 << 4,\n  RegExpCompiler: 1 << 5,\n  JSON: 1 << 6,\n  Proxy: 1 << 7,\n  MapSet: 1 << 8,\n  TypedArrays: 1 << 9,\n  Promise: 1 << 10,\n  BigInt: 1 << 11,\n  BigFloat: 1 << 12,\n  BigDecimal: 1 << 13,\n  OperatorOverloading: 1 << 14,\n  BignumExt: 1 << 15,\n} as const\n\nexport const JSPromiseStateEnum = {\n  Pending: 0,\n  Fulfilled: 1,\n  Rejected: 2,\n} as const\n"],"mappings":"AAsHO,SAASA,EAAkCC,EAAgD,CAChG,OAAO,YAAuBC,EAAe,CAC3C,IAAMC,EAASF,EAAG,GAAGC,CAAI,EACzB,GAAIC,GAAU,OAAOA,GAAW,UAAYA,aAAkB,QAC5D,MAAM,IAAI,MAAM,0CAA0C,EAE5D,OAAOA,CACT,CACF,CAGO,IAAMC,EAAY,CAEvB,oBAAqB,EAErB,oBAAqB,EAErB,oBAAqB,EAErB,sBAAuB,EACvB,kBAAmB,EAEnB,oBAAqB,EAErB,mBAAoB,GAMpB,0BAA2B,GAE3B,+BAAgC,EAClC,EAGaC,EAAkB,CAC7B,YAAa,EACb,KAAM,EACN,KAAM,EACN,gBAAiB,EACjB,OAAQ,GACR,eAAgB,GAChB,KAAM,GACN,MAAO,IACP,OAAQ,IACR,YAAa,IACb,QAAS,KACT,OAAQ,KACR,SAAU,KACV,WAAY,KACZ,oBAAqB,MACrB,UAAW,KACb,EAEaC,EAAqB,CAChC,QAAS,EACT,UAAW,EACX,SAAU,CACZ","names":["assertSync","fn","args","result","EvalFlags","IntrinsicsFlags","JSPromiseStateEnum"]}